
Project2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800200  00001b2c  00001bc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001549  0080025c  0080025c  00001c1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001c90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000331d  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015f6  00000000  00000000  000051f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001446  00000000  00000000  000067eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005cc  00000000  00000000  00007c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b2c  00000000  00000000  00008200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016ef  00000000  00000000  00008d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0000a41b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
       2:	00 00       	nop
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	00 00       	nop
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
       e:	00 00       	nop
      10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
      12:	00 00       	nop
      14:	92 c0       	rjmp	.+292    	; 0x13a <__bad_interrupt>
      16:	00 00       	nop
      18:	90 c0       	rjmp	.+288    	; 0x13a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	d2 c4       	rjmp	.+2468   	; 0x9ea <__vector_17>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	6a c0       	rjmp	.+212    	; 0x13a <__bad_interrupt>
      66:	00 00       	nop
      68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
      6e:	00 00       	nop
      70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
      72:	00 00       	nop
      74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
      76:	00 00       	nop
      78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
      7e:	00 00       	nop
      80:	15 c5       	rjmp	.+2602   	; 0xaac <__vector_32>
      82:	00 00       	nop
      84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
      86:	00 00       	nop
      88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
      8e:	00 00       	nop
      90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
      92:	00 00       	nop
      94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
      96:	00 00       	nop
      98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	48 c0       	rjmp	.+144    	; 0x13a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	46 c0       	rjmp	.+140    	; 0x13a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	44 c0       	rjmp	.+136    	; 0x13a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	42 c0       	rjmp	.+132    	; 0x13a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	40 c0       	rjmp	.+128    	; 0x13a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c0       	rjmp	.+124    	; 0x13a <__bad_interrupt>
      be:	00 00       	nop
      c0:	3c c0       	rjmp	.+120    	; 0x13a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3a c0       	rjmp	.+116    	; 0x13a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	38 c0       	rjmp	.+112    	; 0x13a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	36 c0       	rjmp	.+108    	; 0x13a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	34 c0       	rjmp	.+104    	; 0x13a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	32 c0       	rjmp	.+100    	; 0x13a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	30 c0       	rjmp	.+96     	; 0x13a <__bad_interrupt>
      da:	00 00       	nop
      dc:	2e c0       	rjmp	.+92     	; 0x13a <__bad_interrupt>
      de:	00 00       	nop
      e0:	2c c0       	rjmp	.+88     	; 0x13a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	51 09       	sbc	r21, r1
      e6:	ae 09       	sbc	r26, r14
      e8:	97 09       	sbc	r25, r7
      ea:	69 09       	sbc	r22, r9
      ec:	d3 09       	sbc	r29, r3
      ee:	11 0a       	sbc	r1, r17
      f0:	0b 0a       	sbc	r0, r27
      f2:	0d 0a       	sbc	r0, r29
      f4:	0f 0a       	sbc	r0, r31
      f6:	09 0a       	sbc	r0, r25

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d1 e2       	ldi	r29, 0x21	; 33
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
     108:	12 e0       	ldi	r17, 0x02	; 2
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	ec e2       	ldi	r30, 0x2C	; 44
     110:	fb e1       	ldi	r31, 0x1B	; 27
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	ac 35       	cpi	r26, 0x5C	; 92
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	27 e1       	ldi	r18, 0x17	; 23
     124:	ac e5       	ldi	r26, 0x5C	; 92
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	a5 3a       	cpi	r26, 0xA5	; 165
     12e:	b2 07       	cpc	r27, r18
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 2b 0a 	call	0x1456	; 0x1456 <main>
     136:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     13c:	0f 92       	push	r0
     13e:	1f 92       	push	r1
     140:	2f 92       	push	r2
     142:	3f 92       	push	r3
     144:	4f 92       	push	r4
     146:	5f 92       	push	r5
     148:	6f 92       	push	r6
     14a:	7f 92       	push	r7
     14c:	8f 92       	push	r8
     14e:	9f 92       	push	r9
     150:	af 92       	push	r10
     152:	bf 92       	push	r11
     154:	cf 92       	push	r12
     156:	df 92       	push	r13
     158:	ef 92       	push	r14
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	2f 93       	push	r18
     162:	3f 93       	push	r19
     164:	4f 93       	push	r20
     166:	5f 93       	push	r21
     168:	6f 93       	push	r22
     16a:	7f 93       	push	r23
     16c:	8f 93       	push	r24
     16e:	9f 93       	push	r25
     170:	af 93       	push	r26
     172:	bf 93       	push	r27
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	ef 93       	push	r30
     17a:	ff 93       	push	r31
     17c:	0f b7       	in	r16, 0x3f	; 63
     17e:	0f 93       	push	r16
     180:	fc b7       	in	r31, 0x3c	; 60
     182:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     184:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     186:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     188:	e0 93 83 17 	sts	0x1783, r30	; 0x801783 <KernelSp>
        sts  KernelSp+1, r31
     18c:	f0 93 84 17 	sts	0x1784, r31	; 0x801784 <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     190:	e0 91 61 17 	lds	r30, 0x1761	; 0x801761 <CurrentSp>
        lds  r31, CurrentSp+1
     194:	f0 91 62 17 	lds	r31, 0x1762	; 0x801762 <CurrentSp+0x1>
        out  SPL, r30
     198:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     19a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     19c:	ff 91       	pop	r31
     19e:	fc bf       	out	0x3c, r31	; 60
     1a0:	0f 91       	pop	r16
     1a2:	0f bf       	out	0x3f, r16	; 63
     1a4:	ff 91       	pop	r31
     1a6:	ef 91       	pop	r30
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	bf 91       	pop	r27
     1ae:	af 91       	pop	r26
     1b0:	9f 91       	pop	r25
     1b2:	8f 91       	pop	r24
     1b4:	7f 91       	pop	r23
     1b6:	6f 91       	pop	r22
     1b8:	5f 91       	pop	r21
     1ba:	4f 91       	pop	r20
     1bc:	3f 91       	pop	r19
     1be:	2f 91       	pop	r18
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	cf 90       	pop	r12
     1cc:	bf 90       	pop	r11
     1ce:	af 90       	pop	r10
     1d0:	9f 90       	pop	r9
     1d2:	8f 90       	pop	r8
     1d4:	7f 90       	pop	r7
     1d6:	6f 90       	pop	r6
     1d8:	5f 90       	pop	r5
     1da:	4f 90       	pop	r4
     1dc:	3f 90       	pop	r3
     1de:	2f 90       	pop	r2
     1e0:	1f 90       	pop	r1
     1e2:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1e4:	18 95       	reti

000001e6 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1e6:	0f 92       	push	r0
     1e8:	1f 92       	push	r1
     1ea:	2f 92       	push	r2
     1ec:	3f 92       	push	r3
     1ee:	4f 92       	push	r4
     1f0:	5f 92       	push	r5
     1f2:	6f 92       	push	r6
     1f4:	7f 92       	push	r7
     1f6:	8f 92       	push	r8
     1f8:	9f 92       	push	r9
     1fa:	af 92       	push	r10
     1fc:	bf 92       	push	r11
     1fe:	cf 92       	push	r12
     200:	df 92       	push	r13
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
     20a:	2f 93       	push	r18
     20c:	3f 93       	push	r19
     20e:	4f 93       	push	r20
     210:	5f 93       	push	r21
     212:	6f 93       	push	r22
     214:	7f 93       	push	r23
     216:	8f 93       	push	r24
     218:	9f 93       	push	r25
     21a:	af 93       	push	r26
     21c:	bf 93       	push	r27
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	ef 93       	push	r30
     224:	ff 93       	push	r31
     226:	0f b7       	in	r16, 0x3f	; 63
     228:	0f 93       	push	r16
     22a:	fc b7       	in	r31, 0x3c	; 60
     22c:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     22e:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     230:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     232:	e0 93 61 17 	sts	0x1761, r30	; 0x801761 <CurrentSp>
        sts  CurrentSp+1, r31
     236:	f0 93 62 17 	sts	0x1762, r31	; 0x801762 <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     23a:	e0 91 83 17 	lds	r30, 0x1783	; 0x801783 <KernelSp>
        lds  r31, KernelSp+1
     23e:	f0 91 84 17 	lds	r31, 0x1784	; 0x801784 <KernelSp+0x1>
        out  SPL, r30
     242:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     244:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     246:	ff 91       	pop	r31
     248:	fc bf       	out	0x3c, r31	; 60
     24a:	0f 91       	pop	r16
     24c:	0f bf       	out	0x3f, r16	; 63
     24e:	ff 91       	pop	r31
     250:	ef 91       	pop	r30
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	bf 91       	pop	r27
     258:	af 91       	pop	r26
     25a:	9f 91       	pop	r25
     25c:	8f 91       	pop	r24
     25e:	7f 91       	pop	r23
     260:	6f 91       	pop	r22
     262:	5f 91       	pop	r21
     264:	4f 91       	pop	r20
     266:	3f 91       	pop	r19
     268:	2f 91       	pop	r18
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	ff 90       	pop	r15
     270:	ef 90       	pop	r14
     272:	df 90       	pop	r13
     274:	cf 90       	pop	r12
     276:	bf 90       	pop	r11
     278:	af 90       	pop	r10
     27a:	9f 90       	pop	r9
     27c:	8f 90       	pop	r8
     27e:	7f 90       	pop	r7
     280:	6f 90       	pop	r6
     282:	5f 90       	pop	r5
     284:	4f 90       	pop	r4
     286:	3f 90       	pop	r3
     288:	2f 90       	pop	r2
     28a:	1f 90       	pop	r1
     28c:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     28e:	08 95       	ret

00000290 <a_main>:
	Task_Create_RR(ASDF4,5);
	Task_Create_System(ASDF5,6);
	Task_Create_System(ASDF3,3);
	Task_Create_RR(ASDF4,4);
	*/
	Task_Create_System(test_periodic_task_timing, 0);
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	80 e4       	ldi	r24, 0x40	; 64
     296:	9b e0       	ldi	r25, 0x0B	; 11
     298:	52 c2       	rjmp	.+1188   	; 0x73e <Task_Create_System>
     29a:	08 95       	ret

0000029c <idle>:
void Write(CHAN ch, int v) {
	if (Cp->priority == PERIODIC) OS_Abort(5); // periodic tasks are not allowed to use csp
	Cp->request = ASYNC_SEND;
	Cp->senderChannel = ch;
	Cp->val = v;
	Enter_Kernel();
     29c:	ff cf       	rjmp	.-2      	; 0x29c <idle>

0000029e <Task_Terminate>:
     29e:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <KernelActive>
     2a2:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <KernelActive+0x1>
     2a6:	89 2b       	or	r24, r25
     2a8:	51 f0       	breq	.+20     	; 0x2be <Task_Terminate+0x20>
     2aa:	f8 94       	cli
     2ac:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <Cp>
     2b0:	f0 91 fb 04 	lds	r31, 0x04FB	; 0x8004fb <Cp+0x1>
     2b4:	e5 5f       	subi	r30, 0xF5	; 245
     2b6:	fe 4f       	sbci	r31, 0xFE	; 254
     2b8:	86 e0       	ldi	r24, 0x06	; 6
     2ba:	80 83       	st	Z, r24
     2bc:	94 cf       	rjmp	.-216    	; 0x1e6 <Enter_Kernel>
     2be:	08 95       	ret

000002c0 <Kernel_Create_Task_At>:
     2c0:	8f 92       	push	r8
     2c2:	9f 92       	push	r9
     2c4:	af 92       	push	r10
     2c6:	bf 92       	push	r11
     2c8:	cf 92       	push	r12
     2ca:	df 92       	push	r13
     2cc:	ef 92       	push	r14
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	1f 92       	push	r1
     2da:	1f 92       	push	r1
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	9a 83       	std	Y+2, r25	; 0x02
     2e2:	89 83       	std	Y+1, r24	; 0x01
     2e4:	5c 01       	movw	r10, r24
     2e6:	a4 e0       	ldi	r26, 0x04	; 4
     2e8:	aa 0e       	add	r10, r26
     2ea:	b1 1c       	adc	r11, r1
     2ec:	81 2c       	mov	r8, r1
     2ee:	99 24       	eor	r9, r9
     2f0:	93 94       	inc	r9
     2f2:	f5 01       	movw	r30, r10
     2f4:	d4 01       	movw	r26, r8
     2f6:	11 92       	st	Z+, r1
     2f8:	11 97       	sbiw	r26, 0x01	; 1
     2fa:	e9 f7       	brne	.-6      	; 0x2f6 <Kernel_Create_Task_At+0x36>
     2fc:	dc 01       	movw	r26, r24
     2fe:	ad 5f       	subi	r26, 0xFD	; 253
     300:	be 4f       	sbci	r27, 0xFE	; 254
     302:	ef e4       	ldi	r30, 0x4F	; 79
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	ec 93       	st	X, r30
     308:	11 97       	sbiw	r26, 0x01	; 1
     30a:	fc 93       	st	X, r31
     30c:	fc 01       	movw	r30, r24
     30e:	ef 5f       	subi	r30, 0xFF	; 255
     310:	fe 4f       	sbci	r31, 0xFE	; 254
     312:	10 82       	st	Z, r1
     314:	31 97       	sbiw	r30, 0x01	; 1
     316:	60 83       	st	Z, r22
     318:	31 97       	sbiw	r30, 0x01	; 1
     31a:	70 83       	st	Z, r23
     31c:	31 97       	sbiw	r30, 0x01	; 1
     31e:	10 82       	st	Z, r1
     320:	b3 97       	sbiw	r30, 0x23	; 35
     322:	dc 01       	movw	r26, r24
     324:	13 96       	adiw	r26, 0x03	; 3
     326:	fc 93       	st	X, r31
     328:	ee 93       	st	-X, r30
     32a:	12 97       	sbiw	r26, 0x02	; 2
     32c:	be 96       	adiw	r30, 0x2e	; 46
     32e:	71 83       	std	Z+1, r23	; 0x01
     330:	60 83       	st	Z, r22
     332:	32 96       	adiw	r30, 0x02	; 2
     334:	10 82       	st	Z, r1
     336:	60 91 f4 04 	lds	r22, 0x04F4	; 0x8004f4 <pCount>
     33a:	70 91 f5 04 	lds	r23, 0x04F5	; 0x8004f5 <pCount+0x1>
     33e:	fc 01       	movw	r30, r24
     340:	71 83       	std	Z+1, r23	; 0x01
     342:	60 83       	st	Z, r22
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	9a 81       	ldd	r25, Y+2	; 0x02
     348:	fc 01       	movw	r30, r24
     34a:	eb 5f       	subi	r30, 0xFB	; 251
     34c:	fe 4f       	sbci	r31, 0xFE	; 254
     34e:	51 83       	std	Z+1, r21	; 0x01
     350:	40 83       	st	Z, r20
     352:	32 96       	adiw	r30, 0x02	; 2
     354:	31 83       	std	Z+1, r19	; 0x01
     356:	20 83       	st	Z, r18
     358:	3f 96       	adiw	r30, 0x0f	; 15
     35a:	2f ef       	ldi	r18, 0xFF	; 255
     35c:	3f ef       	ldi	r19, 0xFF	; 255
     35e:	31 83       	std	Z+1, r19	; 0x01
     360:	20 83       	st	Z, r18
     362:	32 96       	adiw	r30, 0x02	; 2
     364:	11 82       	std	Z+1, r1	; 0x01
     366:	10 82       	st	Z, r1
     368:	34 97       	sbiw	r30, 0x04	; 4
     36a:	11 83       	std	Z+1, r17	; 0x01
     36c:	00 83       	st	Z, r16
     36e:	34 97       	sbiw	r30, 0x04	; 4
     370:	d1 82       	std	Z+1, r13	; 0x01
     372:	c0 82       	st	Z, r12
     374:	32 96       	adiw	r30, 0x02	; 2
     376:	f1 82       	std	Z+1, r15	; 0x01
     378:	e0 82       	st	Z, r14
     37a:	20 91 f6 04 	lds	r18, 0x04F6	; 0x8004f6 <Tasks>
     37e:	30 91 f7 04 	lds	r19, 0x04F7	; 0x8004f7 <Tasks+0x1>
     382:	2f 5f       	subi	r18, 0xFF	; 255
     384:	3f 4f       	sbci	r19, 0xFF	; 255
     386:	30 93 f7 04 	sts	0x04F7, r19	; 0x8004f7 <Tasks+0x1>
     38a:	20 93 f6 04 	sts	0x04F6, r18	; 0x8004f6 <Tasks>
     38e:	20 91 f4 04 	lds	r18, 0x04F4	; 0x8004f4 <pCount>
     392:	30 91 f5 04 	lds	r19, 0x04F5	; 0x8004f5 <pCount+0x1>
     396:	2f 5f       	subi	r18, 0xFF	; 255
     398:	3f 4f       	sbci	r19, 0xFF	; 255
     39a:	30 93 f5 04 	sts	0x04F5, r19	; 0x8004f5 <pCount+0x1>
     39e:	20 93 f4 04 	sts	0x04F4, r18	; 0x8004f4 <pCount>
     3a2:	3e 97       	sbiw	r30, 0x0e	; 14
     3a4:	21 e0       	ldi	r18, 0x01	; 1
     3a6:	20 83       	st	Z, r18
     3a8:	43 30       	cpi	r20, 0x03	; 3
     3aa:	51 05       	cpc	r21, r1
     3ac:	49 f4       	brne	.+18     	; 0x3c0 <Kernel_Create_Task_At+0x100>
     3ae:	40 ef       	ldi	r20, 0xF0	; 240
     3b0:	54 e0       	ldi	r21, 0x04	; 4
     3b2:	6f e3       	ldi	r22, 0x3F	; 63
     3b4:	77 e1       	ldi	r23, 0x17	; 23
     3b6:	ce 01       	movw	r24, r28
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	0e 94 41 0a 	call	0x1482	; 0x1482 <enqueue>
     3be:	1c c0       	rjmp	.+56     	; 0x3f8 <Kernel_Create_Task_At+0x138>
     3c0:	42 30       	cpi	r20, 0x02	; 2
     3c2:	51 05       	cpc	r21, r1
     3c4:	71 f4       	brne	.+28     	; 0x3e2 <Kernel_Create_Task_At+0x122>
     3c6:	fc 01       	movw	r30, r24
     3c8:	ea 5e       	subi	r30, 0xEA	; 234
     3ca:	fe 4f       	sbci	r31, 0xFE	; 254
     3cc:	11 83       	std	Z+1, r17	; 0x01
     3ce:	00 83       	st	Z, r16
     3d0:	4e ee       	ldi	r20, 0xEE	; 238
     3d2:	54 e0       	ldi	r21, 0x04	; 4
     3d4:	63 e6       	ldi	r22, 0x63	; 99
     3d6:	77 e1       	ldi	r23, 0x17	; 23
     3d8:	ce 01       	movw	r24, r28
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	0e 94 93 0a 	call	0x1526	; 0x1526 <enqueuePeriodic>
     3e0:	0b c0       	rjmp	.+22     	; 0x3f8 <Kernel_Create_Task_At+0x138>
     3e2:	41 30       	cpi	r20, 0x01	; 1
     3e4:	51 05       	cpc	r21, r1
     3e6:	41 f4       	brne	.+16     	; 0x3f8 <Kernel_Create_Task_At+0x138>
     3e8:	4c ee       	ldi	r20, 0xEC	; 236
     3ea:	54 e0       	ldi	r21, 0x04	; 4
     3ec:	65 e8       	ldi	r22, 0x85	; 133
     3ee:	77 e1       	ldi	r23, 0x17	; 23
     3f0:	ce 01       	movw	r24, r28
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	0e 94 41 0a 	call	0x1482	; 0x1482 <enqueue>
     3f8:	e9 81       	ldd	r30, Y+1	; 0x01
     3fa:	fa 81       	ldd	r31, Y+2	; 0x02
     3fc:	80 81       	ld	r24, Z
     3fe:	91 81       	ldd	r25, Z+1	; 0x01
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	df 90       	pop	r13
     412:	cf 90       	pop	r12
     414:	bf 90       	pop	r11
     416:	af 90       	pop	r10
     418:	9f 90       	pop	r9
     41a:	8f 90       	pop	r8
     41c:	08 95       	ret

0000041e <Kernel_Create_Task>:
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	e9 01       	movw	r28, r18
     430:	20 91 f6 04 	lds	r18, 0x04F6	; 0x8004f6 <Tasks>
     434:	30 91 f7 04 	lds	r19, 0x04F7	; 0x8004f7 <Tasks+0x1>
     438:	20 31       	cpi	r18, 0x10	; 16
     43a:	31 05       	cpc	r19, r1
     43c:	41 f1       	breq	.+80     	; 0x48e <Kernel_Create_Task+0x70>
     43e:	20 91 00 06 	lds	r18, 0x0600	; 0x800600 <Process+0x104>
     442:	22 23       	and	r18, r18
     444:	71 f0       	breq	.+28     	; 0x462 <Kernel_Create_Task+0x44>
     446:	a2 e2       	ldi	r26, 0x22	; 34
     448:	b7 e0       	ldi	r27, 0x07	; 7
     44a:	e1 e0       	ldi	r30, 0x01	; 1
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	3c 91       	ld	r19, X
     450:	33 23       	and	r19, r19
     452:	49 f0       	breq	.+18     	; 0x466 <Kernel_Create_Task+0x48>
     454:	31 96       	adiw	r30, 0x01	; 1
     456:	ae 5d       	subi	r26, 0xDE	; 222
     458:	be 4f       	sbci	r27, 0xFE	; 254
     45a:	e0 31       	cpi	r30, 0x10	; 16
     45c:	f1 05       	cpc	r31, r1
     45e:	b9 f7       	brne	.-18     	; 0x44e <Kernel_Create_Task+0x30>
     460:	02 c0       	rjmp	.+4      	; 0x466 <Kernel_Create_Task+0x48>
     462:	e0 e0       	ldi	r30, 0x00	; 0
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	67 01       	movw	r12, r14
     468:	78 01       	movw	r14, r16
     46a:	8e 01       	movw	r16, r28
     46c:	9a 01       	movw	r18, r20
     46e:	ab 01       	movw	r20, r22
     470:	bc 01       	movw	r22, r24
     472:	82 e2       	ldi	r24, 0x22	; 34
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	e8 9f       	mul	r30, r24
     478:	d0 01       	movw	r26, r0
     47a:	e9 9f       	mul	r30, r25
     47c:	b0 0d       	add	r27, r0
     47e:	f8 9f       	mul	r31, r24
     480:	b0 0d       	add	r27, r0
     482:	11 24       	eor	r1, r1
     484:	cd 01       	movw	r24, r26
     486:	84 50       	subi	r24, 0x04	; 4
     488:	9b 4f       	sbci	r25, 0xFB	; 251
     48a:	1a df       	rcall	.-460    	; 0x2c0 <Kernel_Create_Task_At>
     48c:	02 c0       	rjmp	.+4      	; 0x492 <Kernel_Create_Task+0x74>
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	ff 90       	pop	r15
     49c:	ef 90       	pop	r14
     49e:	df 90       	pop	r13
     4a0:	cf 90       	pop	r12
     4a2:	08 95       	ret

000004a4 <OS_Init>:
     4a4:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <Tasks+0x1>
     4a8:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <Tasks>
     4ac:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <KernelActive+0x1>
     4b0:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <KernelActive>
     4b4:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <pCount+0x1>
     4b8:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <pCount>
     4bc:	ec ef       	ldi	r30, 0xFC	; 252
     4be:	f4 e0       	ldi	r31, 0x04	; 4
     4c0:	2c e1       	ldi	r18, 0x1C	; 28
     4c2:	37 e1       	ldi	r19, 0x17	; 23
     4c4:	82 e2       	ldi	r24, 0x22	; 34
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	df 01       	movw	r26, r30
     4ca:	ac 01       	movw	r20, r24
     4cc:	1d 92       	st	X+, r1
     4ce:	41 50       	subi	r20, 0x01	; 1
     4d0:	50 40       	sbci	r21, 0x00	; 0
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <OS_Init+0x28>
     4d4:	df 01       	movw	r26, r30
     4d6:	ac 5f       	subi	r26, 0xFC	; 252
     4d8:	be 4f       	sbci	r27, 0xFE	; 254
     4da:	1c 92       	st	X, r1
     4dc:	11 82       	std	Z+1, r1	; 0x01
     4de:	10 82       	st	Z, r1
     4e0:	ee 5d       	subi	r30, 0xDE	; 222
     4e2:	fe 4f       	sbci	r31, 0xFE	; 254
     4e4:	e2 17       	cp	r30, r18
     4e6:	f3 07       	cpc	r31, r19
     4e8:	79 f7       	brne	.-34     	; 0x4c8 <OS_Init+0x24>
     4ea:	ac e5       	ldi	r26, 0x5C	; 92
     4ec:	b2 e0       	ldi	r27, 0x02	; 2
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	29 e2       	ldi	r18, 0x29	; 41
     4f4:	fd 01       	movw	r30, r26
     4f6:	32 2f       	mov	r19, r18
     4f8:	11 92       	st	Z+, r1
     4fa:	3a 95       	dec	r19
     4fc:	e9 f7       	brne	.-6      	; 0x4f8 <OS_Init+0x54>
     4fe:	28 9f       	mul	r18, r24
     500:	f0 01       	movw	r30, r0
     502:	29 9f       	mul	r18, r25
     504:	f0 0d       	add	r31, r0
     506:	11 24       	eor	r1, r1
     508:	e4 5a       	subi	r30, 0xA4	; 164
     50a:	fd 4f       	sbci	r31, 0xFD	; 253
     50c:	16 a2       	std	Z+38, r1	; 0x26
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	91 83       	std	Z+1, r25	; 0x01
     512:	80 83       	st	Z, r24
     514:	99 96       	adiw	r26, 0x29	; 41
     516:	80 31       	cpi	r24, 0x10	; 16
     518:	91 05       	cpc	r25, r1
     51a:	61 f7       	brne	.-40     	; 0x4f4 <OS_Init+0x50>
     51c:	08 95       	ret

0000051e <OS_Abort>:
     51e:	47 9a       	sbi	0x08, 7	; 8
     520:	47 98       	cbi	0x08, 7	; 8
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <_exit>

0000052a <CheckTimingViolation>:
     52a:	a0 91 ee 04 	lds	r26, 0x04EE	; 0x8004ee <PeriodicCount>
     52e:	b0 91 ef 04 	lds	r27, 0x04EF	; 0x8004ef <PeriodicCount+0x1>
     532:	cd 01       	movw	r24, r26
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	da f0       	brmi	.+54     	; 0x56e <CheckTimingViolation+0x44>
     538:	aa 0f       	add	r26, r26
     53a:	bb 1f       	adc	r27, r27
     53c:	ad 59       	subi	r26, 0x9D	; 157
     53e:	b8 4e       	sbci	r27, 0xE8	; 232
     540:	43 e6       	ldi	r20, 0x63	; 99
     542:	57 e1       	ldi	r21, 0x17	; 23
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	fe 91       	ld	r31, -X
     54a:	ee 91       	ld	r30, -X
     54c:	ea 5e       	subi	r30, 0xEA	; 234
     54e:	fe 4f       	sbci	r31, 0xFE	; 254
     550:	80 81       	ld	r24, Z
     552:	91 81       	ldd	r25, Z+1	; 0x01
     554:	89 2b       	or	r24, r25
     556:	11 f4       	brne	.+4      	; 0x55c <CheckTimingViolation+0x32>
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	a4 17       	cp	r26, r20
     55e:	b5 07       	cpc	r27, r21
     560:	99 f7       	brne	.-26     	; 0x548 <CheckTimingViolation+0x1e>
     562:	22 30       	cpi	r18, 0x02	; 2
     564:	31 05       	cpc	r19, r1
     566:	1c f0       	brlt	.+6      	; 0x56e <CheckTimingViolation+0x44>
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	d8 cf       	rjmp	.-80     	; 0x51e <OS_Abort>
     56e:	08 95       	ret

00000570 <Dispatch>:
     570:	dc df       	rcall	.-72     	; 0x52a <CheckTimingViolation>
     572:	60 ef       	ldi	r22, 0xF0	; 240
     574:	74 e0       	ldi	r23, 0x04	; 4
     576:	8f e3       	ldi	r24, 0x3F	; 63
     578:	97 e1       	ldi	r25, 0x17	; 23
     57a:	ab d7       	rcall	.+3926   	; 0x14d2 <dequeue>
     57c:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <Cp+0x1>
     580:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <Cp>
     584:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <PeriodicCount>
     588:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <PeriodicCount+0x1>
     58c:	89 2b       	or	r24, r25
     58e:	e1 f0       	breq	.+56     	; 0x5c8 <Dispatch+0x58>
     590:	6e ee       	ldi	r22, 0xEE	; 238
     592:	74 e0       	ldi	r23, 0x04	; 4
     594:	83 e6       	ldi	r24, 0x63	; 99
     596:	97 e1       	ldi	r25, 0x17	; 23
     598:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <peek>
     59c:	fc 01       	movw	r30, r24
     59e:	ea 5e       	subi	r30, 0xEA	; 234
     5a0:	fe 4f       	sbci	r31, 0xFE	; 254
     5a2:	80 81       	ld	r24, Z
     5a4:	91 81       	ldd	r25, Z+1	; 0x01
     5a6:	89 2b       	or	r24, r25
     5a8:	79 f4       	brne	.+30     	; 0x5c8 <Dispatch+0x58>
     5aa:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <Cp>
     5ae:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <Cp+0x1>
     5b2:	89 2b       	or	r24, r25
     5b4:	01 f5       	brne	.+64     	; 0x5f6 <Dispatch+0x86>
     5b6:	6e ee       	ldi	r22, 0xEE	; 238
     5b8:	74 e0       	ldi	r23, 0x04	; 4
     5ba:	83 e6       	ldi	r24, 0x63	; 99
     5bc:	97 e1       	ldi	r25, 0x17	; 23
     5be:	89 d7       	rcall	.+3858   	; 0x14d2 <dequeue>
     5c0:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <Cp+0x1>
     5c4:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <Cp>
     5c8:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <Cp>
     5cc:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <Cp+0x1>
     5d0:	89 2b       	or	r24, r25
     5d2:	89 f4       	brne	.+34     	; 0x5f6 <Dispatch+0x86>
     5d4:	6c ee       	ldi	r22, 0xEC	; 236
     5d6:	74 e0       	ldi	r23, 0x04	; 4
     5d8:	85 e8       	ldi	r24, 0x85	; 133
     5da:	97 e1       	ldi	r25, 0x17	; 23
     5dc:	7a d7       	rcall	.+3828   	; 0x14d2 <dequeue>
     5de:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <Cp+0x1>
     5e2:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <Cp>
     5e6:	89 2b       	or	r24, r25
     5e8:	31 f4       	brne	.+12     	; 0x5f6 <Dispatch+0x86>
     5ea:	8c ef       	ldi	r24, 0xFC	; 252
     5ec:	94 e0       	ldi	r25, 0x04	; 4
     5ee:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <Cp+0x1>
     5f2:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <Cp>
     5f6:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <Cp>
     5fa:	f0 91 fb 04 	lds	r31, 0x04FB	; 0x8004fb <Cp+0x1>
     5fe:	82 81       	ldd	r24, Z+2	; 0x02
     600:	93 81       	ldd	r25, Z+3	; 0x03
     602:	90 93 62 17 	sts	0x1762, r25	; 0x801762 <CurrentSp+0x1>
     606:	80 93 61 17 	sts	0x1761, r24	; 0x801761 <CurrentSp>
     60a:	ec 5f       	subi	r30, 0xFC	; 252
     60c:	fe 4f       	sbci	r31, 0xFE	; 254
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	80 83       	st	Z, r24
     612:	08 95       	ret

00000614 <Task_Create>:
     614:	6f 92       	push	r6
     616:	7f 92       	push	r7
     618:	8f 92       	push	r8
     61a:	9f 92       	push	r9
     61c:	af 92       	push	r10
     61e:	bf 92       	push	r11
     620:	cf 92       	push	r12
     622:	df 92       	push	r13
     624:	ef 92       	push	r14
     626:	ff 92       	push	r15
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	e0 91 f8 04 	lds	r30, 0x04F8	; 0x8004f8 <KernelActive>
     634:	f0 91 f9 04 	lds	r31, 0x04F9	; 0x8004f9 <KernelActive+0x1>
     638:	ef 2b       	or	r30, r31
     63a:	09 f4       	brne	.+2      	; 0x63e <Task_Create+0x2a>
     63c:	69 c0       	rjmp	.+210    	; 0x710 <Task_Create+0xfc>
     63e:	f8 94       	cli
     640:	63 30       	cpi	r22, 0x03	; 3
     642:	71 05       	cpc	r23, r1
     644:	49 f4       	brne	.+18     	; 0x658 <Task_Create+0x44>
     646:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <Cp>
     64a:	f0 91 fb 04 	lds	r31, 0x04FB	; 0x8004fb <Cp+0x1>
     64e:	e5 5f       	subi	r30, 0xF5	; 245
     650:	fe 4f       	sbci	r31, 0xFE	; 254
     652:	62 e0       	ldi	r22, 0x02	; 2
     654:	60 83       	st	Z, r22
     656:	22 c0       	rjmp	.+68     	; 0x69c <Task_Create+0x88>
     658:	62 30       	cpi	r22, 0x02	; 2
     65a:	71 05       	cpc	r23, r1
     65c:	81 f4       	brne	.+32     	; 0x67e <Task_Create+0x6a>
     65e:	60 91 fa 04 	lds	r22, 0x04FA	; 0x8004fa <Cp>
     662:	70 91 fb 04 	lds	r23, 0x04FB	; 0x8004fb <Cp+0x1>
     666:	fb 01       	movw	r30, r22
     668:	e5 5f       	subi	r30, 0xF5	; 245
     66a:	fe 4f       	sbci	r31, 0xFE	; 254
     66c:	a4 e0       	ldi	r26, 0x04	; 4
     66e:	a0 83       	st	Z, r26
     670:	3b 96       	adiw	r30, 0x0b	; 11
     672:	b9 01       	movw	r22, r18
     674:	6e 0d       	add	r22, r14
     676:	7f 1d       	adc	r23, r15
     678:	71 83       	std	Z+1, r23	; 0x01
     67a:	60 83       	st	Z, r22
     67c:	0f c0       	rjmp	.+30     	; 0x69c <Task_Create+0x88>
     67e:	61 30       	cpi	r22, 0x01	; 1
     680:	71 05       	cpc	r23, r1
     682:	49 f4       	brne	.+18     	; 0x696 <Task_Create+0x82>
     684:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <Cp>
     688:	f0 91 fb 04 	lds	r31, 0x04FB	; 0x8004fb <Cp+0x1>
     68c:	e5 5f       	subi	r30, 0xF5	; 245
     68e:	fe 4f       	sbci	r31, 0xFE	; 254
     690:	63 e0       	ldi	r22, 0x03	; 3
     692:	60 83       	st	Z, r22
     694:	03 c0       	rjmp	.+6      	; 0x69c <Task_Create+0x88>
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	41 df       	rcall	.-382    	; 0x51e <OS_Abort>
     69c:	60 91 fa 04 	lds	r22, 0x04FA	; 0x8004fa <Cp>
     6a0:	70 91 fb 04 	lds	r23, 0x04FB	; 0x8004fb <Cp+0x1>
     6a4:	fb 01       	movw	r30, r22
     6a6:	e7 5f       	subi	r30, 0xF7	; 247
     6a8:	fe 4f       	sbci	r31, 0xFE	; 254
     6aa:	91 83       	std	Z+1, r25	; 0x01
     6ac:	80 83       	st	Z, r24
     6ae:	32 97       	sbiw	r30, 0x02	; 2
     6b0:	60 80       	ld	r6, Z
     6b2:	71 80       	ldd	r7, Z+1	; 0x01
     6b4:	51 83       	std	Z+1, r21	; 0x01
     6b6:	40 83       	st	Z, r20
     6b8:	db 01       	movw	r26, r22
     6ba:	ac 5e       	subi	r26, 0xEC	; 236
     6bc:	be 4f       	sbci	r27, 0xFE	; 254
     6be:	ad 90       	ld	r10, X+
     6c0:	bc 90       	ld	r11, X
     6c2:	11 97       	sbiw	r26, 0x01	; 1
     6c4:	3b 96       	adiw	r30, 0x0b	; 11
     6c6:	c0 80       	ld	r12, Z
     6c8:	d1 80       	ldd	r13, Z+1	; 0x01
     6ca:	60 5f       	subi	r22, 0xF0	; 240
     6cc:	7e 4f       	sbci	r23, 0xFE	; 254
     6ce:	eb 01       	movw	r28, r22
     6d0:	88 80       	ld	r8, Y
     6d2:	99 80       	ldd	r9, Y+1	; 0x01
     6d4:	11 96       	adiw	r26, 0x01	; 1
     6d6:	3c 93       	st	X, r19
     6d8:	2e 93       	st	-X, r18
     6da:	11 83       	std	Z+1, r17	; 0x01
     6dc:	00 83       	st	Z, r16
     6de:	f9 82       	std	Y+1, r15	; 0x01
     6e0:	e8 82       	st	Y, r14
     6e2:	81 dd       	rcall	.-1278   	; 0x1e6 <Enter_Kernel>
     6e4:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <Cp>
     6e8:	30 91 fb 04 	lds	r19, 0x04FB	; 0x8004fb <Cp+0x1>
     6ec:	f9 01       	movw	r30, r18
     6ee:	e4 5f       	subi	r30, 0xF4	; 244
     6f0:	fe 4f       	sbci	r31, 0xFE	; 254
     6f2:	80 81       	ld	r24, Z
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	38 96       	adiw	r30, 0x08	; 8
     6f8:	b1 82       	std	Z+1, r11	; 0x01
     6fa:	a0 82       	st	Z, r10
     6fc:	32 97       	sbiw	r30, 0x02	; 2
     6fe:	d1 82       	std	Z+1, r13	; 0x01
     700:	c0 82       	st	Z, r12
     702:	32 97       	sbiw	r30, 0x02	; 2
     704:	91 82       	std	Z+1, r9	; 0x01
     706:	80 82       	st	Z, r8
     708:	39 97       	sbiw	r30, 0x09	; 9
     70a:	71 82       	std	Z+1, r7	; 0x01
     70c:	60 82       	st	Z, r6
     70e:	08 c0       	rjmp	.+16     	; 0x720 <Task_Create+0x10c>
     710:	ee 24       	eor	r14, r14
     712:	ea 94       	dec	r14
     714:	fe 2c       	mov	r15, r14
     716:	0f ef       	ldi	r16, 0xFF	; 255
     718:	1f ef       	ldi	r17, 0xFF	; 255
     71a:	2f ef       	ldi	r18, 0xFF	; 255
     71c:	3f ef       	ldi	r19, 0xFF	; 255
     71e:	7f de       	rcall	.-770    	; 0x41e <Kernel_Create_Task>
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	cf 90       	pop	r12
     730:	bf 90       	pop	r11
     732:	af 90       	pop	r10
     734:	9f 90       	pop	r9
     736:	8f 90       	pop	r8
     738:	7f 90       	pop	r7
     73a:	6f 90       	pop	r6
     73c:	08 95       	ret

0000073e <Task_Create_System>:
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	ab 01       	movw	r20, r22
     748:	ee 24       	eor	r14, r14
     74a:	ea 94       	dec	r14
     74c:	fe 2c       	mov	r15, r14
     74e:	0f ef       	ldi	r16, 0xFF	; 255
     750:	1f ef       	ldi	r17, 0xFF	; 255
     752:	2f ef       	ldi	r18, 0xFF	; 255
     754:	3f ef       	ldi	r19, 0xFF	; 255
     756:	63 e0       	ldi	r22, 0x03	; 3
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	5c df       	rcall	.-328    	; 0x614 <Task_Create>
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	ff 90       	pop	r15
     762:	ef 90       	pop	r14
     764:	08 95       	ret

00000766 <Task_Create_Period>:
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	7a 01       	movw	r14, r20
     770:	a8 01       	movw	r20, r16
     772:	2e 15       	cp	r18, r14
     774:	3f 05       	cpc	r19, r15
     776:	18 f0       	brcs	.+6      	; 0x77e <Task_Create_Period+0x18>
     778:	83 e0       	ldi	r24, 0x03	; 3
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	d0 de       	rcall	.-608    	; 0x51e <OS_Abort>
     77e:	89 01       	movw	r16, r18
     780:	9a 01       	movw	r18, r20
     782:	ab 01       	movw	r20, r22
     784:	62 e0       	ldi	r22, 0x02	; 2
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	45 df       	rcall	.-374    	; 0x614 <Task_Create>
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	08 95       	ret

00000794 <Task_Create_Idle>:
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <KernelActive>
     7a0:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <KernelActive+0x1>
     7a4:	89 2b       	or	r24, r25
     7a6:	f1 f0       	breq	.+60     	; 0x7e4 <Task_Create_Idle+0x50>
     7a8:	f8 94       	cli
     7aa:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <Cp>
     7ae:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <Cp+0x1>
     7b2:	fc 01       	movw	r30, r24
     7b4:	e7 5f       	subi	r30, 0xF7	; 247
     7b6:	fe 4f       	sbci	r31, 0xFE	; 254
     7b8:	2e e4       	ldi	r18, 0x4E	; 78
     7ba:	31 e0       	ldi	r19, 0x01	; 1
     7bc:	31 83       	std	Z+1, r19	; 0x01
     7be:	20 83       	st	Z, r18
     7c0:	34 97       	sbiw	r30, 0x04	; 4
     7c2:	24 e0       	ldi	r18, 0x04	; 4
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	31 83       	std	Z+1, r19	; 0x01
     7c8:	20 83       	st	Z, r18
     7ca:	32 96       	adiw	r30, 0x02	; 2
     7cc:	11 82       	std	Z+1, r1	; 0x01
     7ce:	10 82       	st	Z, r1
     7d0:	0a dd       	rcall	.-1516   	; 0x1e6 <Enter_Kernel>
     7d2:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <Cp>
     7d6:	f0 91 fb 04 	lds	r31, 0x04FB	; 0x8004fb <Cp+0x1>
     7da:	e4 5f       	subi	r30, 0xF4	; 244
     7dc:	fe 4f       	sbci	r31, 0xFE	; 254
     7de:	80 81       	ld	r24, Z
     7e0:	91 81       	ldd	r25, Z+1	; 0x01
     7e2:	0e c0       	rjmp	.+28     	; 0x800 <Task_Create_Idle+0x6c>
     7e4:	ee 24       	eor	r14, r14
     7e6:	ea 94       	dec	r14
     7e8:	fe 2c       	mov	r15, r14
     7ea:	0f ef       	ldi	r16, 0xFF	; 255
     7ec:	1f ef       	ldi	r17, 0xFF	; 255
     7ee:	2f ef       	ldi	r18, 0xFF	; 255
     7f0:	3f ef       	ldi	r19, 0xFF	; 255
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	64 e0       	ldi	r22, 0x04	; 4
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	8e e4       	ldi	r24, 0x4E	; 78
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	0f de       	rcall	.-994    	; 0x41e <Kernel_Create_Task>
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	ff 90       	pop	r15
     806:	ef 90       	pop	r14
     808:	08 95       	ret

0000080a <Task_Next>:
     80a:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <KernelActive>
     80e:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <KernelActive+0x1>
     812:	89 2b       	or	r24, r25
     814:	19 f1       	breq	.+70     	; 0x85c <Task_Next+0x52>
     816:	f8 94       	cli
     818:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <Cp>
     81c:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <Cp+0x1>
     820:	fc 01       	movw	r30, r24
     822:	eb 5f       	subi	r30, 0xFB	; 251
     824:	fe 4f       	sbci	r31, 0xFE	; 254
     826:	20 81       	ld	r18, Z
     828:	31 81       	ldd	r19, Z+1	; 0x01
     82a:	22 30       	cpi	r18, 0x02	; 2
     82c:	31 05       	cpc	r19, r1
     82e:	81 f4       	brne	.+32     	; 0x850 <Task_Next+0x46>
     830:	3b 96       	adiw	r30, 0x0b	; 11
     832:	20 81       	ld	r18, Z
     834:	31 81       	ldd	r19, Z+1	; 0x01
     836:	38 96       	adiw	r30, 0x08	; 8
     838:	40 81       	ld	r20, Z
     83a:	51 81       	ldd	r21, Z+1	; 0x01
     83c:	24 1b       	sub	r18, r20
     83e:	35 0b       	sbc	r19, r21
     840:	dc 01       	movw	r26, r24
     842:	aa 5e       	subi	r26, 0xEA	; 234
     844:	be 4f       	sbci	r27, 0xFE	; 254
     846:	11 96       	adiw	r26, 0x01	; 1
     848:	3c 93       	st	X, r19
     84a:	2e 93       	st	-X, r18
     84c:	11 82       	std	Z+1, r1	; 0x01
     84e:	10 82       	st	Z, r1
     850:	fc 01       	movw	r30, r24
     852:	e5 5f       	subi	r30, 0xF5	; 245
     854:	fe 4f       	sbci	r31, 0xFE	; 254
     856:	85 e0       	ldi	r24, 0x05	; 5
     858:	80 83       	st	Z, r24
     85a:	c5 cc       	rjmp	.-1654   	; 0x1e6 <Enter_Kernel>
     85c:	08 95       	ret

0000085e <Run_Next>:
     85e:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <KernelActive>
     862:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <KernelActive+0x1>
     866:	89 2b       	or	r24, r25
     868:	09 f4       	brne	.+2      	; 0x86c <Run_Next+0xe>
     86a:	41 c0       	rjmp	.+130    	; 0x8ee <Run_Next+0x90>
     86c:	f8 94       	cli
     86e:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <Cp>
     872:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <Cp+0x1>
     876:	fc 01       	movw	r30, r24
     878:	eb 5f       	subi	r30, 0xFB	; 251
     87a:	fe 4f       	sbci	r31, 0xFE	; 254
     87c:	20 81       	ld	r18, Z
     87e:	31 81       	ldd	r19, Z+1	; 0x01
     880:	23 30       	cpi	r18, 0x03	; 3
     882:	31 05       	cpc	r19, r1
     884:	21 f4       	brne	.+8      	; 0x88e <Run_Next+0x30>
     886:	36 96       	adiw	r30, 0x06	; 6
     888:	8a e0       	ldi	r24, 0x0A	; 10
     88a:	80 83       	st	Z, r24
     88c:	2f c0       	rjmp	.+94     	; 0x8ec <Run_Next+0x8e>
     88e:	fc 01       	movw	r30, r24
     890:	eb 5f       	subi	r30, 0xFB	; 251
     892:	fe 4f       	sbci	r31, 0xFE	; 254
     894:	20 81       	ld	r18, Z
     896:	31 81       	ldd	r19, Z+1	; 0x01
     898:	22 30       	cpi	r18, 0x02	; 2
     89a:	31 05       	cpc	r19, r1
     89c:	11 f5       	brne	.+68     	; 0x8e2 <Run_Next+0x84>
     89e:	73 96       	adiw	r30, 0x13	; 19
     8a0:	40 81       	ld	r20, Z
     8a2:	51 81       	ldd	r21, Z+1	; 0x01
     8a4:	36 97       	sbiw	r30, 0x06	; 6
     8a6:	20 81       	ld	r18, Z
     8a8:	31 81       	ldd	r19, Z+1	; 0x01
     8aa:	42 17       	cp	r20, r18
     8ac:	53 07       	cpc	r21, r19
     8ae:	18 f0       	brcs	.+6      	; 0x8b6 <Run_Next+0x58>
     8b0:	84 e0       	ldi	r24, 0x04	; 4
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	34 de       	rcall	.-920    	; 0x51e <OS_Abort>
     8b6:	20 91 f0 04 	lds	r18, 0x04F0	; 0x8004f0 <SysCount>
     8ba:	30 91 f1 04 	lds	r19, 0x04F1	; 0x8004f1 <SysCount+0x1>
     8be:	12 16       	cp	r1, r18
     8c0:	13 06       	cpc	r1, r19
     8c2:	4c f4       	brge	.+18     	; 0x8d6 <Run_Next+0x78>
     8c4:	fc 01       	movw	r30, r24
     8c6:	ea 5e       	subi	r30, 0xEA	; 234
     8c8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ca:	11 82       	std	Z+1, r1	; 0x01
     8cc:	10 82       	st	Z, r1
     8ce:	3b 97       	sbiw	r30, 0x0b	; 11
     8d0:	85 e0       	ldi	r24, 0x05	; 5
     8d2:	80 83       	st	Z, r24
     8d4:	0b c0       	rjmp	.+22     	; 0x8ec <Run_Next+0x8e>
     8d6:	fc 01       	movw	r30, r24
     8d8:	e5 5f       	subi	r30, 0xF5	; 245
     8da:	fe 4f       	sbci	r31, 0xFE	; 254
     8dc:	8a e0       	ldi	r24, 0x0A	; 10
     8de:	80 83       	st	Z, r24
     8e0:	05 c0       	rjmp	.+10     	; 0x8ec <Run_Next+0x8e>
     8e2:	fc 01       	movw	r30, r24
     8e4:	e5 5f       	subi	r30, 0xF5	; 245
     8e6:	fe 4f       	sbci	r31, 0xFE	; 254
     8e8:	85 e0       	ldi	r24, 0x05	; 5
     8ea:	80 83       	st	Z, r24
     8ec:	7c cc       	rjmp	.-1800   	; 0x1e6 <Enter_Kernel>
     8ee:	08 95       	ret

000008f0 <Now>:
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	28 97       	sbiw	r28, 0x08	; 8
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
     904:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     908:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     90c:	9a 83       	std	Y+2, r25	; 0x02
     90e:	89 83       	std	Y+1, r24	; 0x01
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	9a 81       	ldd	r25, Y+2	; 0x02
     914:	9c 83       	std	Y+4, r25	; 0x04
     916:	8b 83       	std	Y+3, r24	; 0x03
     918:	6b 81       	ldd	r22, Y+3	; 0x03
     91a:	7c 81       	ldd	r23, Y+4	; 0x04
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	b9 d7       	rcall	.+3954   	; 0x1894 <__floatunsisf>
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 ec       	ldi	r19, 0xC0	; 192
     926:	4e e1       	ldi	r20, 0x1E	; 30
     928:	54 e4       	ldi	r21, 0x44	; 68
     92a:	20 d7       	rcall	.+3648   	; 0x176c <__divsf3>
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	40 e2       	ldi	r20, 0x20	; 32
     932:	51 e4       	ldi	r21, 0x41	; 65
     934:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__mulsf3>
     938:	6d 83       	std	Y+5, r22	; 0x05
     93a:	7e 83       	std	Y+6, r23	; 0x06
     93c:	8f 83       	std	Y+7, r24	; 0x07
     93e:	98 87       	std	Y+8, r25	; 0x08
     940:	6d 81       	ldd	r22, Y+5	; 0x05
     942:	7e 81       	ldd	r23, Y+6	; 0x06
     944:	8f 81       	ldd	r24, Y+7	; 0x07
     946:	98 85       	ldd	r25, Y+8	; 0x08
     948:	79 d7       	rcall	.+3826   	; 0x183c <__fixunssfsi>
     94a:	20 91 5f 17 	lds	r18, 0x175F	; 0x80175f <time_since_system_start>
     94e:	30 91 60 17 	lds	r19, 0x1760	; 0x801760 <time_since_system_start+0x1>
     952:	a9 01       	movw	r20, r18
     954:	44 0f       	add	r20, r20
     956:	55 1f       	adc	r21, r21
     958:	22 0f       	add	r18, r18
     95a:	33 1f       	adc	r19, r19
     95c:	22 0f       	add	r18, r18
     95e:	33 1f       	adc	r19, r19
     960:	22 0f       	add	r18, r18
     962:	33 1f       	adc	r19, r19
     964:	24 0f       	add	r18, r20
     966:	35 1f       	adc	r19, r21
     968:	c9 01       	movw	r24, r18
     96a:	86 0f       	add	r24, r22
     96c:	97 1f       	adc	r25, r23
     96e:	28 96       	adiw	r28, 0x08	; 8
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
     974:	de bf       	out	0x3e, r29	; 62
     976:	0f be       	out	0x3f, r0	; 63
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	df 91       	pop	r29
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <setup>:
     980:	f8 94       	cli
     982:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     986:	e1 e8       	ldi	r30, 0x81	; 129
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	10 82       	st	Z, r1
     98c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     990:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     994:	80 e7       	ldi	r24, 0x70	; 112
     996:	92 e0       	ldi	r25, 0x02	; 2
     998:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     99c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     9a0:	80 81       	ld	r24, Z
     9a2:	88 60       	ori	r24, 0x08	; 8
     9a4:	80 83       	st	Z, r24
     9a6:	80 81       	ld	r24, Z
     9a8:	84 60       	ori	r24, 0x04	; 4
     9aa:	80 83       	st	Z, r24
     9ac:	ef e6       	ldi	r30, 0x6F	; 111
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	82 60       	ori	r24, 0x02	; 2
     9b4:	80 83       	st	Z, r24
     9b6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     9ba:	e1 e9       	ldi	r30, 0x91	; 145
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	10 82       	st	Z, r1
     9c0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     9c4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     9c8:	83 e2       	ldi	r24, 0x23	; 35
     9ca:	94 ef       	ldi	r25, 0xF4	; 244
     9cc:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     9d0:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     9d4:	80 81       	ld	r24, Z
     9d6:	88 60       	ori	r24, 0x08	; 8
     9d8:	80 83       	st	Z, r24
     9da:	80 81       	ld	r24, Z
     9dc:	84 60       	ori	r24, 0x04	; 4
     9de:	80 83       	st	Z, r24
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     9e6:	78 94       	sei
     9e8:	08 95       	ret

000009ea <__vector_17>:
     9ea:	1f 92       	push	r1
     9ec:	0f 92       	push	r0
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	0f 92       	push	r0
     9f2:	11 24       	eor	r1, r1
     9f4:	0b b6       	in	r0, 0x3b	; 59
     9f6:	0f 92       	push	r0
     9f8:	2f 93       	push	r18
     9fa:	3f 93       	push	r19
     9fc:	4f 93       	push	r20
     9fe:	5f 93       	push	r21
     a00:	6f 93       	push	r22
     a02:	7f 93       	push	r23
     a04:	8f 93       	push	r24
     a06:	9f 93       	push	r25
     a08:	af 93       	push	r26
     a0a:	bf 93       	push	r27
     a0c:	ef 93       	push	r30
     a0e:	ff 93       	push	r31
     a10:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <Cp>
     a14:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <Cp+0x1>
     a18:	fc 01       	movw	r30, r24
     a1a:	eb 5f       	subi	r30, 0xFB	; 251
     a1c:	fe 4f       	sbci	r31, 0xFE	; 254
     a1e:	20 81       	ld	r18, Z
     a20:	31 81       	ldd	r19, Z+1	; 0x01
     a22:	22 30       	cpi	r18, 0x02	; 2
     a24:	31 05       	cpc	r19, r1
     a26:	31 f4       	brne	.+12     	; 0xa34 <__vector_17+0x4a>
     a28:	73 96       	adiw	r30, 0x13	; 19
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	91 83       	std	Z+1, r25	; 0x01
     a32:	80 83       	st	Z, r24
     a34:	80 91 5f 17 	lds	r24, 0x175F	; 0x80175f <time_since_system_start>
     a38:	90 91 60 17 	lds	r25, 0x1760	; 0x801760 <time_since_system_start+0x1>
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	90 93 60 17 	sts	0x1760, r25	; 0x801760 <time_since_system_start+0x1>
     a42:	80 93 5f 17 	sts	0x175F, r24	; 0x80175f <time_since_system_start>
     a46:	a0 91 ee 04 	lds	r26, 0x04EE	; 0x8004ee <PeriodicCount>
     a4a:	b0 91 ef 04 	lds	r27, 0x04EF	; 0x8004ef <PeriodicCount+0x1>
     a4e:	cd 01       	movw	r24, r26
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	c2 f0       	brmi	.+48     	; 0xa84 <__vector_17+0x9a>
     a54:	aa 0f       	add	r26, r26
     a56:	bb 1f       	adc	r27, r27
     a58:	ad 59       	subi	r26, 0x9D	; 157
     a5a:	b8 4e       	sbci	r27, 0xE8	; 232
     a5c:	43 e6       	ldi	r20, 0x63	; 99
     a5e:	57 e1       	ldi	r21, 0x17	; 23
     a60:	9e 91       	ld	r25, -X
     a62:	8e 91       	ld	r24, -X
     a64:	fc 01       	movw	r30, r24
     a66:	ea 5e       	subi	r30, 0xEA	; 234
     a68:	fe 4f       	sbci	r31, 0xFE	; 254
     a6a:	20 81       	ld	r18, Z
     a6c:	31 81       	ldd	r19, Z+1	; 0x01
     a6e:	12 16       	cp	r1, r18
     a70:	13 06       	cpc	r1, r19
     a72:	2c f4       	brge	.+10     	; 0xa7e <__vector_17+0x94>
     a74:	80 81       	ld	r24, Z
     a76:	91 81       	ldd	r25, Z+1	; 0x01
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	91 83       	std	Z+1, r25	; 0x01
     a7c:	80 83       	st	Z, r24
     a7e:	a4 17       	cp	r26, r20
     a80:	b5 07       	cpc	r27, r21
     a82:	71 f7       	brne	.-36     	; 0xa60 <__vector_17+0x76>
     a84:	ec de       	rcall	.-552    	; 0x85e <Run_Next>
     a86:	ff 91       	pop	r31
     a88:	ef 91       	pop	r30
     a8a:	bf 91       	pop	r27
     a8c:	af 91       	pop	r26
     a8e:	9f 91       	pop	r25
     a90:	8f 91       	pop	r24
     a92:	7f 91       	pop	r23
     a94:	6f 91       	pop	r22
     a96:	5f 91       	pop	r21
     a98:	4f 91       	pop	r20
     a9a:	3f 91       	pop	r19
     a9c:	2f 91       	pop	r18
     a9e:	0f 90       	pop	r0
     aa0:	0b be       	out	0x3b, r0	; 59
     aa2:	0f 90       	pop	r0
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	0f 90       	pop	r0
     aa8:	1f 90       	pop	r1
     aaa:	18 95       	reti

00000aac <__vector_32>:
     aac:	1f 92       	push	r1
     aae:	0f 92       	push	r0
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	0f 92       	push	r0
     ab4:	11 24       	eor	r1, r1
     ab6:	8f 93       	push	r24
     ab8:	9f 93       	push	r25
     aba:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <tickOverflowCount>
     abe:	90 91 f3 04 	lds	r25, 0x04F3	; 0x8004f3 <tickOverflowCount+0x1>
     ac2:	01 96       	adiw	r24, 0x01	; 1
     ac4:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <tickOverflowCount+0x1>
     ac8:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <tickOverflowCount>
     acc:	9f 91       	pop	r25
     ace:	8f 91       	pop	r24
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	0f 90       	pop	r0
     ad6:	1f 90       	pop	r1
     ad8:	18 95       	reti

00000ada <kernel_send>:
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <Cp>
     ae6:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <Cp+0x1>
     aea:	fc 01       	movw	r30, r24
     aec:	e4 5e       	subi	r30, 0xE4	; 228
     aee:	fe 4f       	sbci	r31, 0xFE	; 254
     af0:	20 81       	ld	r18, Z
     af2:	31 81       	ldd	r19, Z+1	; 0x01
     af4:	21 50       	subi	r18, 0x01	; 1
     af6:	31 09       	sbc	r19, r1
     af8:	49 e2       	ldi	r20, 0x29	; 41
     afa:	42 9f       	mul	r20, r18
     afc:	f0 01       	movw	r30, r0
     afe:	43 9f       	mul	r20, r19
     b00:	f0 0d       	add	r31, r0
     b02:	11 24       	eor	r1, r1
     b04:	e4 5a       	subi	r30, 0xA4	; 164
     b06:	fd 4f       	sbci	r31, 0xFD	; 253
     b08:	24 a1       	ldd	r18, Z+36	; 0x24
     b0a:	35 a1       	ldd	r19, Z+37	; 0x25
     b0c:	23 2b       	or	r18, r19
     b0e:	09 f0       	breq	.+2      	; 0xb12 <kernel_send+0x38>
     b10:	3d c0       	rjmp	.+122    	; 0xb8c <kernel_send+0xb2>
     b12:	fc 01       	movw	r30, r24
     b14:	e4 5e       	subi	r30, 0xE4	; 228
     b16:	fe 4f       	sbci	r31, 0xFE	; 254
     b18:	20 81       	ld	r18, Z
     b1a:	31 81       	ldd	r19, Z+1	; 0x01
     b1c:	21 50       	subi	r18, 0x01	; 1
     b1e:	31 09       	sbc	r19, r1
     b20:	42 9f       	mul	r20, r18
     b22:	f0 01       	movw	r30, r0
     b24:	43 9f       	mul	r20, r19
     b26:	f0 0d       	add	r31, r0
     b28:	11 24       	eor	r1, r1
     b2a:	e4 5a       	subi	r30, 0xA4	; 164
     b2c:	fd 4f       	sbci	r31, 0xFD	; 253
     b2e:	22 81       	ldd	r18, Z+2	; 0x02
     b30:	33 81       	ldd	r19, Z+3	; 0x03
     b32:	23 2b       	or	r18, r19
     b34:	41 f5       	brne	.+80     	; 0xb86 <kernel_send+0xac>
     b36:	dc 01       	movw	r26, r24
     b38:	a4 5e       	subi	r26, 0xE4	; 228
     b3a:	be 4f       	sbci	r27, 0xFE	; 254
     b3c:	2d 91       	ld	r18, X+
     b3e:	3c 91       	ld	r19, X
     b40:	11 97       	sbiw	r26, 0x01	; 1
     b42:	21 50       	subi	r18, 0x01	; 1
     b44:	31 09       	sbc	r19, r1
     b46:	42 9f       	mul	r20, r18
     b48:	f0 01       	movw	r30, r0
     b4a:	43 9f       	mul	r20, r19
     b4c:	f0 0d       	add	r31, r0
     b4e:	11 24       	eor	r1, r1
     b50:	e4 5a       	subi	r30, 0xA4	; 164
     b52:	fd 4f       	sbci	r31, 0xFD	; 253
     b54:	93 83       	std	Z+3, r25	; 0x03
     b56:	82 83       	std	Z+2, r24	; 0x02
     b58:	fc 01       	movw	r30, r24
     b5a:	ec 5f       	subi	r30, 0xFC	; 252
     b5c:	fe 4f       	sbci	r31, 0xFE	; 254
     b5e:	23 e0       	ldi	r18, 0x03	; 3
     b60:	20 83       	st	Z, r18
     b62:	2d 91       	ld	r18, X+
     b64:	3c 91       	ld	r19, X
     b66:	21 50       	subi	r18, 0x01	; 1
     b68:	31 09       	sbc	r19, r1
     b6a:	7c 96       	adiw	r30, 0x1c	; 28
     b6c:	80 81       	ld	r24, Z
     b6e:	91 81       	ldd	r25, Z+1	; 0x01
     b70:	42 9f       	mul	r20, r18
     b72:	f0 01       	movw	r30, r0
     b74:	43 9f       	mul	r20, r19
     b76:	f0 0d       	add	r31, r0
     b78:	11 24       	eor	r1, r1
     b7a:	e4 5a       	subi	r30, 0xA4	; 164
     b7c:	fd 4f       	sbci	r31, 0xFD	; 253
     b7e:	90 a7       	std	Z+40, r25	; 0x28
     b80:	87 a3       	std	Z+39, r24	; 0x27
     b82:	f6 dc       	rcall	.-1556   	; 0x570 <Dispatch>
     b84:	0d c1       	rjmp	.+538    	; 0xda0 <kernel_send+0x2c6>
     b86:	86 e0       	ldi	r24, 0x06	; 6
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	c9 dc       	rcall	.-1646   	; 0x51e <OS_Abort>
     b8c:	fc 01       	movw	r30, r24
     b8e:	e4 5e       	subi	r30, 0xE4	; 228
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	20 81       	ld	r18, Z
     b94:	31 81       	ldd	r19, Z+1	; 0x01
     b96:	21 50       	subi	r18, 0x01	; 1
     b98:	31 09       	sbc	r19, r1
     b9a:	49 e2       	ldi	r20, 0x29	; 41
     b9c:	42 9f       	mul	r20, r18
     b9e:	f0 01       	movw	r30, r0
     ba0:	43 9f       	mul	r20, r19
     ba2:	f0 0d       	add	r31, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	e4 5a       	subi	r30, 0xA4	; 164
     ba8:	fd 4f       	sbci	r31, 0xFD	; 253
     baa:	22 81       	ldd	r18, Z+2	; 0x02
     bac:	33 81       	ldd	r19, Z+3	; 0x03
     bae:	23 2b       	or	r18, r19
     bb0:	19 f0       	breq	.+6      	; 0xbb8 <kernel_send+0xde>
     bb2:	86 e0       	ldi	r24, 0x06	; 6
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	b3 dc       	rcall	.-1690   	; 0x51e <OS_Abort>
     bb8:	fc 01       	movw	r30, r24
     bba:	e4 5e       	subi	r30, 0xE4	; 228
     bbc:	fe 4f       	sbci	r31, 0xFE	; 254
     bbe:	80 81       	ld	r24, Z
     bc0:	91 81       	ldd	r25, Z+1	; 0x01
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	29 e2       	ldi	r18, 0x29	; 41
     bc6:	28 9f       	mul	r18, r24
     bc8:	f0 01       	movw	r30, r0
     bca:	29 9f       	mul	r18, r25
     bcc:	f0 0d       	add	r31, r0
     bce:	11 24       	eor	r1, r1
     bd0:	e4 5a       	subi	r30, 0xA4	; 164
     bd2:	fd 4f       	sbci	r31, 0xFD	; 253
     bd4:	c4 a1       	ldd	r28, Z+36	; 0x24
     bd6:	d5 a1       	ldd	r29, Z+37	; 0x25
     bd8:	21 97       	sbiw	r28, 0x01	; 1
     bda:	0a f4       	brpl	.+2      	; 0xbde <kernel_send+0x104>
     bdc:	ce c0       	rjmp	.+412    	; 0xd7a <kernel_send+0x2a0>
     bde:	19 e2       	ldi	r17, 0x29	; 41
     be0:	01 e0       	ldi	r16, 0x01	; 1
     be2:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <Cp>
     be6:	30 91 fb 04 	lds	r19, 0x04FB	; 0x8004fb <Cp+0x1>
     bea:	c9 01       	movw	r24, r18
     bec:	84 5e       	subi	r24, 0xE4	; 228
     bee:	9e 4f       	sbci	r25, 0xFE	; 254
     bf0:	dc 01       	movw	r26, r24
     bf2:	4d 91       	ld	r20, X+
     bf4:	5c 91       	ld	r21, X
     bf6:	41 50       	subi	r20, 0x01	; 1
     bf8:	51 09       	sbc	r21, r1
     bfa:	fe 01       	movw	r30, r28
     bfc:	32 96       	adiw	r30, 0x02	; 2
     bfe:	ee 0f       	add	r30, r30
     c00:	ff 1f       	adc	r31, r31
     c02:	14 9f       	mul	r17, r20
     c04:	d0 01       	movw	r26, r0
     c06:	15 9f       	mul	r17, r21
     c08:	b0 0d       	add	r27, r0
     c0a:	11 24       	eor	r1, r1
     c0c:	ae 0f       	add	r26, r30
     c0e:	bf 1f       	adc	r27, r31
     c10:	a4 5a       	subi	r26, 0xA4	; 164
     c12:	bd 4f       	sbci	r27, 0xFD	; 253
     c14:	0d 90       	ld	r0, X+
     c16:	bc 91       	ld	r27, X
     c18:	a0 2d       	mov	r26, r0
     c1a:	ac 5f       	subi	r26, 0xFC	; 252
     c1c:	be 4f       	sbci	r27, 0xFE	; 254
     c1e:	0c 93       	st	X, r16
     c20:	dc 01       	movw	r26, r24
     c22:	4d 91       	ld	r20, X+
     c24:	5c 91       	ld	r21, X
     c26:	41 50       	subi	r20, 0x01	; 1
     c28:	51 09       	sbc	r21, r1
     c2a:	14 9f       	mul	r17, r20
     c2c:	d0 01       	movw	r26, r0
     c2e:	15 9f       	mul	r17, r21
     c30:	b0 0d       	add	r27, r0
     c32:	11 24       	eor	r1, r1
     c34:	ae 0f       	add	r26, r30
     c36:	bf 1f       	adc	r27, r31
     c38:	a4 5a       	subi	r26, 0xA4	; 164
     c3a:	bd 4f       	sbci	r27, 0xFD	; 253
     c3c:	6d 91       	ld	r22, X+
     c3e:	7c 91       	ld	r23, X
     c40:	a9 01       	movw	r20, r18
     c42:	40 5e       	subi	r20, 0xE0	; 224
     c44:	5e 4f       	sbci	r21, 0xFE	; 254
     c46:	da 01       	movw	r26, r20
     c48:	4d 91       	ld	r20, X+
     c4a:	5c 91       	ld	r21, X
     c4c:	db 01       	movw	r26, r22
     c4e:	a0 5e       	subi	r26, 0xE0	; 224
     c50:	be 4f       	sbci	r27, 0xFE	; 254
     c52:	4d 93       	st	X+, r20
     c54:	5c 93       	st	X, r21
     c56:	dc 01       	movw	r26, r24
     c58:	4d 91       	ld	r20, X+
     c5a:	5c 91       	ld	r21, X
     c5c:	11 97       	sbiw	r26, 0x01	; 1
     c5e:	41 50       	subi	r20, 0x01	; 1
     c60:	51 09       	sbc	r21, r1
     c62:	14 9f       	mul	r17, r20
     c64:	c0 01       	movw	r24, r0
     c66:	15 9f       	mul	r17, r21
     c68:	90 0d       	add	r25, r0
     c6a:	11 24       	eor	r1, r1
     c6c:	e8 0f       	add	r30, r24
     c6e:	f9 1f       	adc	r31, r25
     c70:	e4 5a       	subi	r30, 0xA4	; 164
     c72:	fd 4f       	sbci	r31, 0xFD	; 253
     c74:	01 90       	ld	r0, Z+
     c76:	f0 81       	ld	r31, Z
     c78:	e0 2d       	mov	r30, r0
     c7a:	eb 5f       	subi	r30, 0xFB	; 251
     c7c:	fe 4f       	sbci	r31, 0xFE	; 254
     c7e:	80 81       	ld	r24, Z
     c80:	91 81       	ldd	r25, Z+1	; 0x01
     c82:	03 97       	sbiw	r24, 0x03	; 3
     c84:	c1 f4       	brne	.+48     	; 0xcb6 <kernel_send+0x1dc>
     c86:	fd 01       	movw	r30, r26
     c88:	40 81       	ld	r20, Z
     c8a:	51 81       	ldd	r21, Z+1	; 0x01
     c8c:	ce 01       	movw	r24, r28
     c8e:	02 96       	adiw	r24, 0x02	; 2
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	41 50       	subi	r20, 0x01	; 1
     c96:	51 09       	sbc	r21, r1
     c98:	14 9f       	mul	r17, r20
     c9a:	90 01       	movw	r18, r0
     c9c:	15 9f       	mul	r17, r21
     c9e:	30 0d       	add	r19, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	82 0f       	add	r24, r18
     ca4:	93 1f       	adc	r25, r19
     ca6:	40 ef       	ldi	r20, 0xF0	; 240
     ca8:	54 e0       	ldi	r21, 0x04	; 4
     caa:	6f e3       	ldi	r22, 0x3F	; 63
     cac:	77 e1       	ldi	r23, 0x17	; 23
     cae:	84 5a       	subi	r24, 0xA4	; 164
     cb0:	9d 4f       	sbci	r25, 0xFD	; 253
     cb2:	e7 d3       	rcall	.+1998   	; 0x1482 <enqueue>
     cb4:	36 c0       	rjmp	.+108    	; 0xd22 <kernel_send+0x248>
     cb6:	f9 01       	movw	r30, r18
     cb8:	e4 5e       	subi	r30, 0xE4	; 228
     cba:	fe 4f       	sbci	r31, 0xFE	; 254
     cbc:	40 81       	ld	r20, Z
     cbe:	51 81       	ldd	r21, Z+1	; 0x01
     cc0:	41 50       	subi	r20, 0x01	; 1
     cc2:	51 09       	sbc	r21, r1
     cc4:	fe 01       	movw	r30, r28
     cc6:	32 96       	adiw	r30, 0x02	; 2
     cc8:	ee 0f       	add	r30, r30
     cca:	ff 1f       	adc	r31, r31
     ccc:	14 9f       	mul	r17, r20
     cce:	c0 01       	movw	r24, r0
     cd0:	15 9f       	mul	r17, r21
     cd2:	90 0d       	add	r25, r0
     cd4:	11 24       	eor	r1, r1
     cd6:	e8 0f       	add	r30, r24
     cd8:	f9 1f       	adc	r31, r25
     cda:	e4 5a       	subi	r30, 0xA4	; 164
     cdc:	fd 4f       	sbci	r31, 0xFD	; 253
     cde:	01 90       	ld	r0, Z+
     ce0:	f0 81       	ld	r31, Z
     ce2:	e0 2d       	mov	r30, r0
     ce4:	eb 5f       	subi	r30, 0xFB	; 251
     ce6:	fe 4f       	sbci	r31, 0xFE	; 254
     ce8:	80 81       	ld	r24, Z
     cea:	91 81       	ldd	r25, Z+1	; 0x01
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	c9 f4       	brne	.+50     	; 0xd22 <kernel_send+0x248>
     cf0:	f9 01       	movw	r30, r18
     cf2:	e4 5e       	subi	r30, 0xE4	; 228
     cf4:	fe 4f       	sbci	r31, 0xFE	; 254
     cf6:	40 81       	ld	r20, Z
     cf8:	51 81       	ldd	r21, Z+1	; 0x01
     cfa:	ce 01       	movw	r24, r28
     cfc:	02 96       	adiw	r24, 0x02	; 2
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	41 50       	subi	r20, 0x01	; 1
     d04:	51 09       	sbc	r21, r1
     d06:	14 9f       	mul	r17, r20
     d08:	90 01       	movw	r18, r0
     d0a:	15 9f       	mul	r17, r21
     d0c:	30 0d       	add	r19, r0
     d0e:	11 24       	eor	r1, r1
     d10:	82 0f       	add	r24, r18
     d12:	93 1f       	adc	r25, r19
     d14:	4c ee       	ldi	r20, 0xEC	; 236
     d16:	54 e0       	ldi	r21, 0x04	; 4
     d18:	65 e8       	ldi	r22, 0x85	; 133
     d1a:	77 e1       	ldi	r23, 0x17	; 23
     d1c:	84 5a       	subi	r24, 0xA4	; 164
     d1e:	9d 4f       	sbci	r25, 0xFD	; 253
     d20:	b0 d3       	rcall	.+1888   	; 0x1482 <enqueue>
     d22:	a0 91 fa 04 	lds	r26, 0x04FA	; 0x8004fa <Cp>
     d26:	b0 91 fb 04 	lds	r27, 0x04FB	; 0x8004fb <Cp+0x1>
     d2a:	a4 5e       	subi	r26, 0xE4	; 228
     d2c:	be 4f       	sbci	r27, 0xFE	; 254
     d2e:	2d 91       	ld	r18, X+
     d30:	3c 91       	ld	r19, X
     d32:	11 97       	sbiw	r26, 0x01	; 1
     d34:	21 50       	subi	r18, 0x01	; 1
     d36:	31 09       	sbc	r19, r1
     d38:	fe 01       	movw	r30, r28
     d3a:	32 96       	adiw	r30, 0x02	; 2
     d3c:	ee 0f       	add	r30, r30
     d3e:	ff 1f       	adc	r31, r31
     d40:	12 9f       	mul	r17, r18
     d42:	c0 01       	movw	r24, r0
     d44:	13 9f       	mul	r17, r19
     d46:	90 0d       	add	r25, r0
     d48:	11 24       	eor	r1, r1
     d4a:	e8 0f       	add	r30, r24
     d4c:	f9 1f       	adc	r31, r25
     d4e:	e4 5a       	subi	r30, 0xA4	; 164
     d50:	fd 4f       	sbci	r31, 0xFD	; 253
     d52:	11 82       	std	Z+1, r1	; 0x01
     d54:	10 82       	st	Z, r1
     d56:	8d 91       	ld	r24, X+
     d58:	9c 91       	ld	r25, X
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	18 9f       	mul	r17, r24
     d5e:	f0 01       	movw	r30, r0
     d60:	19 9f       	mul	r17, r25
     d62:	f0 0d       	add	r31, r0
     d64:	11 24       	eor	r1, r1
     d66:	e4 5a       	subi	r30, 0xA4	; 164
     d68:	fd 4f       	sbci	r31, 0xFD	; 253
     d6a:	84 a1       	ldd	r24, Z+36	; 0x24
     d6c:	95 a1       	ldd	r25, Z+37	; 0x25
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	95 a3       	std	Z+37, r25	; 0x25
     d72:	84 a3       	std	Z+36, r24	; 0x24
     d74:	21 97       	sbiw	r28, 0x01	; 1
     d76:	0a f0       	brmi	.+2      	; 0xd7a <kernel_send+0x2a0>
     d78:	34 cf       	rjmp	.-408    	; 0xbe2 <kernel_send+0x108>
     d7a:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <Cp>
     d7e:	f0 91 fb 04 	lds	r31, 0x04FB	; 0x8004fb <Cp+0x1>
     d82:	e4 5e       	subi	r30, 0xE4	; 228
     d84:	fe 4f       	sbci	r31, 0xFE	; 254
     d86:	80 81       	ld	r24, Z
     d88:	91 81       	ldd	r25, Z+1	; 0x01
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	29 e2       	ldi	r18, 0x29	; 41
     d8e:	28 9f       	mul	r18, r24
     d90:	f0 01       	movw	r30, r0
     d92:	29 9f       	mul	r18, r25
     d94:	f0 0d       	add	r31, r0
     d96:	11 24       	eor	r1, r1
     d98:	e4 5a       	subi	r30, 0xA4	; 164
     d9a:	fd 4f       	sbci	r31, 0xFD	; 253
     d9c:	10 a6       	std	Z+40, r1	; 0x28
     d9e:	17 a2       	std	Z+39, r1	; 0x27
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	08 95       	ret

00000daa <kernel_receive>:
     daa:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <Cp>
     dae:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <Cp+0x1>
     db2:	fc 01       	movw	r30, r24
     db4:	e2 5e       	subi	r30, 0xE2	; 226
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	20 81       	ld	r18, Z
     dba:	31 81       	ldd	r19, Z+1	; 0x01
     dbc:	21 50       	subi	r18, 0x01	; 1
     dbe:	31 09       	sbc	r19, r1
     dc0:	49 e2       	ldi	r20, 0x29	; 41
     dc2:	42 9f       	mul	r20, r18
     dc4:	f0 01       	movw	r30, r0
     dc6:	43 9f       	mul	r20, r19
     dc8:	f0 0d       	add	r31, r0
     dca:	11 24       	eor	r1, r1
     dcc:	e4 5a       	subi	r30, 0xA4	; 164
     dce:	fd 4f       	sbci	r31, 0xFD	; 253
     dd0:	22 81       	ldd	r18, Z+2	; 0x02
     dd2:	33 81       	ldd	r19, Z+3	; 0x03
     dd4:	23 2b       	or	r18, r19
     dd6:	09 f5       	brne	.+66     	; 0xe1a <kernel_receive+0x70>
     dd8:	fc 01       	movw	r30, r24
     dda:	ec 5f       	subi	r30, 0xFC	; 252
     ddc:	fe 4f       	sbci	r31, 0xFE	; 254
     dde:	23 e0       	ldi	r18, 0x03	; 3
     de0:	20 83       	st	Z, r18
     de2:	7a 96       	adiw	r30, 0x1a	; 26
     de4:	20 81       	ld	r18, Z
     de6:	31 81       	ldd	r19, Z+1	; 0x01
     de8:	80 81       	ld	r24, Z
     dea:	91 81       	ldd	r25, Z+1	; 0x01
     dec:	21 50       	subi	r18, 0x01	; 1
     dee:	31 09       	sbc	r19, r1
     df0:	e9 e2       	ldi	r30, 0x29	; 41
     df2:	e2 9f       	mul	r30, r18
     df4:	a0 01       	movw	r20, r0
     df6:	e3 9f       	mul	r30, r19
     df8:	50 0d       	add	r21, r0
     dfa:	11 24       	eor	r1, r1
     dfc:	40 58       	subi	r20, 0x80	; 128
     dfe:	5d 4f       	sbci	r21, 0xFD	; 253
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	e8 9f       	mul	r30, r24
     e04:	b0 01       	movw	r22, r0
     e06:	e9 9f       	mul	r30, r25
     e08:	70 0d       	add	r23, r0
     e0a:	11 24       	eor	r1, r1
     e0c:	60 5a       	subi	r22, 0xA0	; 160
     e0e:	7d 4f       	sbci	r23, 0xFD	; 253
     e10:	8a ef       	ldi	r24, 0xFA	; 250
     e12:	94 e0       	ldi	r25, 0x04	; 4
     e14:	36 d3       	rcall	.+1644   	; 0x1482 <enqueue>
     e16:	ac cb       	rjmp	.-2216   	; 0x570 <Dispatch>
     e18:	08 95       	ret
     e1a:	fc 01       	movw	r30, r24
     e1c:	e2 5e       	subi	r30, 0xE2	; 226
     e1e:	fe 4f       	sbci	r31, 0xFE	; 254
     e20:	20 81       	ld	r18, Z
     e22:	31 81       	ldd	r19, Z+1	; 0x01
     e24:	21 50       	subi	r18, 0x01	; 1
     e26:	31 09       	sbc	r19, r1
     e28:	49 e2       	ldi	r20, 0x29	; 41
     e2a:	42 9f       	mul	r20, r18
     e2c:	d0 01       	movw	r26, r0
     e2e:	43 9f       	mul	r20, r19
     e30:	b0 0d       	add	r27, r0
     e32:	11 24       	eor	r1, r1
     e34:	a4 5a       	subi	r26, 0xA4	; 164
     e36:	bd 4f       	sbci	r27, 0xFD	; 253
     e38:	12 96       	adiw	r26, 0x02	; 2
     e3a:	0d 90       	ld	r0, X+
     e3c:	bc 91       	ld	r27, X
     e3e:	a0 2d       	mov	r26, r0
     e40:	ac 5f       	subi	r26, 0xFC	; 252
     e42:	be 4f       	sbci	r27, 0xFE	; 254
     e44:	21 e0       	ldi	r18, 0x01	; 1
     e46:	2c 93       	st	X, r18
     e48:	20 81       	ld	r18, Z
     e4a:	31 81       	ldd	r19, Z+1	; 0x01
     e4c:	21 50       	subi	r18, 0x01	; 1
     e4e:	31 09       	sbc	r19, r1
     e50:	42 9f       	mul	r20, r18
     e52:	d0 01       	movw	r26, r0
     e54:	43 9f       	mul	r20, r19
     e56:	b0 0d       	add	r27, r0
     e58:	11 24       	eor	r1, r1
     e5a:	a4 5a       	subi	r26, 0xA4	; 164
     e5c:	bd 4f       	sbci	r27, 0xFD	; 253
     e5e:	97 96       	adiw	r26, 0x27	; 39
     e60:	2d 91       	ld	r18, X+
     e62:	3c 91       	ld	r19, X
     e64:	98 97       	sbiw	r26, 0x28	; 40
     e66:	dc 01       	movw	r26, r24
     e68:	a0 5e       	subi	r26, 0xE0	; 224
     e6a:	be 4f       	sbci	r27, 0xFE	; 254
     e6c:	11 96       	adiw	r26, 0x01	; 1
     e6e:	3c 93       	st	X, r19
     e70:	2e 93       	st	-X, r18
     e72:	20 81       	ld	r18, Z
     e74:	31 81       	ldd	r19, Z+1	; 0x01
     e76:	21 50       	subi	r18, 0x01	; 1
     e78:	31 09       	sbc	r19, r1
     e7a:	42 9f       	mul	r20, r18
     e7c:	f0 01       	movw	r30, r0
     e7e:	43 9f       	mul	r20, r19
     e80:	f0 0d       	add	r31, r0
     e82:	11 24       	eor	r1, r1
     e84:	e4 5a       	subi	r30, 0xA4	; 164
     e86:	fd 4f       	sbci	r31, 0xFD	; 253
     e88:	02 80       	ldd	r0, Z+2	; 0x02
     e8a:	f3 81       	ldd	r31, Z+3	; 0x03
     e8c:	e0 2d       	mov	r30, r0
     e8e:	eb 5f       	subi	r30, 0xFB	; 251
     e90:	fe 4f       	sbci	r31, 0xFE	; 254
     e92:	20 81       	ld	r18, Z
     e94:	31 81       	ldd	r19, Z+1	; 0x01
     e96:	23 30       	cpi	r18, 0x03	; 3
     e98:	31 05       	cpc	r19, r1
     e9a:	a1 f4       	brne	.+40     	; 0xec4 <kernel_receive+0x11a>
     e9c:	fc 01       	movw	r30, r24
     e9e:	e2 5e       	subi	r30, 0xE2	; 226
     ea0:	fe 4f       	sbci	r31, 0xFE	; 254
     ea2:	20 81       	ld	r18, Z
     ea4:	31 81       	ldd	r19, Z+1	; 0x01
     ea6:	21 50       	subi	r18, 0x01	; 1
     ea8:	31 09       	sbc	r19, r1
     eaa:	42 9f       	mul	r20, r18
     eac:	c0 01       	movw	r24, r0
     eae:	43 9f       	mul	r20, r19
     eb0:	90 0d       	add	r25, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	40 ef       	ldi	r20, 0xF0	; 240
     eb6:	54 e0       	ldi	r21, 0x04	; 4
     eb8:	6f e3       	ldi	r22, 0x3F	; 63
     eba:	77 e1       	ldi	r23, 0x17	; 23
     ebc:	82 5a       	subi	r24, 0xA2	; 162
     ebe:	9d 4f       	sbci	r25, 0xFD	; 253
     ec0:	e0 d2       	rcall	.+1472   	; 0x1482 <enqueue>
     ec2:	2c c0       	rjmp	.+88     	; 0xf1c <kernel_receive+0x172>
     ec4:	fc 01       	movw	r30, r24
     ec6:	e2 5e       	subi	r30, 0xE2	; 226
     ec8:	fe 4f       	sbci	r31, 0xFE	; 254
     eca:	20 81       	ld	r18, Z
     ecc:	31 81       	ldd	r19, Z+1	; 0x01
     ece:	21 50       	subi	r18, 0x01	; 1
     ed0:	31 09       	sbc	r19, r1
     ed2:	49 e2       	ldi	r20, 0x29	; 41
     ed4:	42 9f       	mul	r20, r18
     ed6:	f0 01       	movw	r30, r0
     ed8:	43 9f       	mul	r20, r19
     eda:	f0 0d       	add	r31, r0
     edc:	11 24       	eor	r1, r1
     ede:	e4 5a       	subi	r30, 0xA4	; 164
     ee0:	fd 4f       	sbci	r31, 0xFD	; 253
     ee2:	02 80       	ldd	r0, Z+2	; 0x02
     ee4:	f3 81       	ldd	r31, Z+3	; 0x03
     ee6:	e0 2d       	mov	r30, r0
     ee8:	eb 5f       	subi	r30, 0xFB	; 251
     eea:	fe 4f       	sbci	r31, 0xFE	; 254
     eec:	20 81       	ld	r18, Z
     eee:	31 81       	ldd	r19, Z+1	; 0x01
     ef0:	21 30       	cpi	r18, 0x01	; 1
     ef2:	31 05       	cpc	r19, r1
     ef4:	99 f4       	brne	.+38     	; 0xf1c <kernel_receive+0x172>
     ef6:	fc 01       	movw	r30, r24
     ef8:	e2 5e       	subi	r30, 0xE2	; 226
     efa:	fe 4f       	sbci	r31, 0xFE	; 254
     efc:	20 81       	ld	r18, Z
     efe:	31 81       	ldd	r19, Z+1	; 0x01
     f00:	21 50       	subi	r18, 0x01	; 1
     f02:	31 09       	sbc	r19, r1
     f04:	42 9f       	mul	r20, r18
     f06:	c0 01       	movw	r24, r0
     f08:	43 9f       	mul	r20, r19
     f0a:	90 0d       	add	r25, r0
     f0c:	11 24       	eor	r1, r1
     f0e:	4c ee       	ldi	r20, 0xEC	; 236
     f10:	54 e0       	ldi	r21, 0x04	; 4
     f12:	65 e8       	ldi	r22, 0x85	; 133
     f14:	77 e1       	ldi	r23, 0x17	; 23
     f16:	82 5a       	subi	r24, 0xA2	; 162
     f18:	9d 4f       	sbci	r25, 0xFD	; 253
     f1a:	b3 d2       	rcall	.+1382   	; 0x1482 <enqueue>
     f1c:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <Cp>
     f20:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <Cp+0x1>
     f24:	fc 01       	movw	r30, r24
     f26:	e2 5e       	subi	r30, 0xE2	; 226
     f28:	fe 4f       	sbci	r31, 0xFE	; 254
     f2a:	20 81       	ld	r18, Z
     f2c:	31 81       	ldd	r19, Z+1	; 0x01
     f2e:	21 50       	subi	r18, 0x01	; 1
     f30:	31 09       	sbc	r19, r1
     f32:	49 e2       	ldi	r20, 0x29	; 41
     f34:	42 9f       	mul	r20, r18
     f36:	f0 01       	movw	r30, r0
     f38:	43 9f       	mul	r20, r19
     f3a:	f0 0d       	add	r31, r0
     f3c:	11 24       	eor	r1, r1
     f3e:	e4 5a       	subi	r30, 0xA4	; 164
     f40:	fd 4f       	sbci	r31, 0xFD	; 253
     f42:	13 82       	std	Z+3, r1	; 0x03
     f44:	12 82       	std	Z+2, r1	; 0x02
     f46:	fc 01       	movw	r30, r24
     f48:	e4 5e       	subi	r30, 0xE4	; 228
     f4a:	fe 4f       	sbci	r31, 0xFE	; 254
     f4c:	80 81       	ld	r24, Z
     f4e:	91 81       	ldd	r25, Z+1	; 0x01
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	48 9f       	mul	r20, r24
     f54:	f0 01       	movw	r30, r0
     f56:	49 9f       	mul	r20, r25
     f58:	f0 0d       	add	r31, r0
     f5a:	11 24       	eor	r1, r1
     f5c:	e4 5a       	subi	r30, 0xA4	; 164
     f5e:	fd 4f       	sbci	r31, 0xFD	; 253
     f60:	10 a6       	std	Z+40, r1	; 0x28
     f62:	17 a2       	std	Z+39, r1	; 0x27
     f64:	08 95       	ret

00000f66 <kernel_async_send>:
}

void kernel_async_send() {
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
	if (ChannelArray[Cp->senderChannel - 1].numberReceivers == 0) { // no receivers waiting
     f6e:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <Cp>
     f72:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <Cp+0x1>
     f76:	fc 01       	movw	r30, r24
     f78:	e4 5e       	subi	r30, 0xE4	; 228
     f7a:	fe 4f       	sbci	r31, 0xFE	; 254
     f7c:	20 81       	ld	r18, Z
     f7e:	31 81       	ldd	r19, Z+1	; 0x01
     f80:	21 50       	subi	r18, 0x01	; 1
     f82:	31 09       	sbc	r19, r1
     f84:	49 e2       	ldi	r20, 0x29	; 41
     f86:	42 9f       	mul	r20, r18
     f88:	f0 01       	movw	r30, r0
     f8a:	43 9f       	mul	r20, r19
     f8c:	f0 0d       	add	r31, r0
     f8e:	11 24       	eor	r1, r1
     f90:	e4 5a       	subi	r30, 0xA4	; 164
     f92:	fd 4f       	sbci	r31, 0xFD	; 253
     f94:	24 a1       	ldd	r18, Z+36	; 0x24
     f96:	35 a1       	ldd	r19, Z+37	; 0x25
     f98:	23 2b       	or	r18, r19
     f9a:	31 f5       	brne	.+76     	; 0xfe8 <kernel_async_send+0x82>
		if (ChannelArray[Cp->senderChannel - 1].sender == NULL) ChannelArray[Cp->senderChannel - 1].sender = Cp;
     f9c:	fc 01       	movw	r30, r24
     f9e:	e4 5e       	subi	r30, 0xE4	; 228
     fa0:	fe 4f       	sbci	r31, 0xFE	; 254
     fa2:	20 81       	ld	r18, Z
     fa4:	31 81       	ldd	r19, Z+1	; 0x01
     fa6:	21 50       	subi	r18, 0x01	; 1
     fa8:	31 09       	sbc	r19, r1
     faa:	42 9f       	mul	r20, r18
     fac:	f0 01       	movw	r30, r0
     fae:	43 9f       	mul	r20, r19
     fb0:	f0 0d       	add	r31, r0
     fb2:	11 24       	eor	r1, r1
     fb4:	e4 5a       	subi	r30, 0xA4	; 164
     fb6:	fd 4f       	sbci	r31, 0xFD	; 253
     fb8:	22 81       	ldd	r18, Z+2	; 0x02
     fba:	33 81       	ldd	r19, Z+3	; 0x03
     fbc:	23 2b       	or	r18, r19
     fbe:	89 f4       	brne	.+34     	; 0xfe2 <kernel_async_send+0x7c>
     fc0:	fc 01       	movw	r30, r24
     fc2:	e4 5e       	subi	r30, 0xE4	; 228
     fc4:	fe 4f       	sbci	r31, 0xFE	; 254
     fc6:	20 81       	ld	r18, Z
     fc8:	31 81       	ldd	r19, Z+1	; 0x01
     fca:	21 50       	subi	r18, 0x01	; 1
     fcc:	31 09       	sbc	r19, r1
     fce:	42 9f       	mul	r20, r18
     fd0:	f0 01       	movw	r30, r0
     fd2:	43 9f       	mul	r20, r19
     fd4:	f0 0d       	add	r31, r0
     fd6:	11 24       	eor	r1, r1
     fd8:	e4 5a       	subi	r30, 0xA4	; 164
     fda:	fd 4f       	sbci	r31, 0xFD	; 253
     fdc:	93 83       	std	Z+3, r25	; 0x03
     fde:	82 83       	std	Z+2, r24	; 0x02
     fe0:	0d c1       	rjmp	.+538    	; 0x11fc <kernel_async_send+0x296>
		else OS_Abort(6); // cant have more than 1 sender
     fe2:	86 e0       	ldi	r24, 0x06	; 6
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	9b da       	rcall	.-2762   	; 0x51e <OS_Abort>
		return; // return without blocking
	} else { //receivers are waiting
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(6); // cant have more than 1 sender
     fe8:	fc 01       	movw	r30, r24
     fea:	e4 5e       	subi	r30, 0xE4	; 228
     fec:	fe 4f       	sbci	r31, 0xFE	; 254
     fee:	20 81       	ld	r18, Z
     ff0:	31 81       	ldd	r19, Z+1	; 0x01
     ff2:	21 50       	subi	r18, 0x01	; 1
     ff4:	31 09       	sbc	r19, r1
     ff6:	49 e2       	ldi	r20, 0x29	; 41
     ff8:	42 9f       	mul	r20, r18
     ffa:	f0 01       	movw	r30, r0
     ffc:	43 9f       	mul	r20, r19
     ffe:	f0 0d       	add	r31, r0
    1000:	11 24       	eor	r1, r1
    1002:	e4 5a       	subi	r30, 0xA4	; 164
    1004:	fd 4f       	sbci	r31, 0xFD	; 253
    1006:	22 81       	ldd	r18, Z+2	; 0x02
    1008:	33 81       	ldd	r19, Z+3	; 0x03
    100a:	23 2b       	or	r18, r19
    100c:	19 f0       	breq	.+6      	; 0x1014 <kernel_async_send+0xae>
    100e:	86 e0       	ldi	r24, 0x06	; 6
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	85 da       	rcall	.-2806   	; 0x51e <OS_Abort>
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
    1014:	fc 01       	movw	r30, r24
    1016:	e4 5e       	subi	r30, 0xE4	; 228
    1018:	fe 4f       	sbci	r31, 0xFE	; 254
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	29 e2       	ldi	r18, 0x29	; 41
    1022:	28 9f       	mul	r18, r24
    1024:	f0 01       	movw	r30, r0
    1026:	29 9f       	mul	r18, r25
    1028:	f0 0d       	add	r31, r0
    102a:	11 24       	eor	r1, r1
    102c:	e4 5a       	subi	r30, 0xA4	; 164
    102e:	fd 4f       	sbci	r31, 0xFD	; 253
    1030:	c4 a1       	ldd	r28, Z+36	; 0x24
    1032:	d5 a1       	ldd	r29, Z+37	; 0x25
    1034:	21 97       	sbiw	r28, 0x01	; 1
    1036:	0a f4       	brpl	.+2      	; 0x103a <kernel_async_send+0xd4>
    1038:	ce c0       	rjmp	.+412    	; 0x11d6 <kernel_async_send+0x270>
			ChannelArray[Cp->senderChannel - 1].receivers[l]->state = READY;
    103a:	19 e2       	ldi	r17, 0x29	; 41
    103c:	01 e0       	ldi	r16, 0x01	; 1
    103e:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <Cp>
    1042:	30 91 fb 04 	lds	r19, 0x04FB	; 0x8004fb <Cp+0x1>
    1046:	c9 01       	movw	r24, r18
    1048:	84 5e       	subi	r24, 0xE4	; 228
    104a:	9e 4f       	sbci	r25, 0xFE	; 254
    104c:	dc 01       	movw	r26, r24
    104e:	4d 91       	ld	r20, X+
    1050:	5c 91       	ld	r21, X
    1052:	41 50       	subi	r20, 0x01	; 1
    1054:	51 09       	sbc	r21, r1
    1056:	fe 01       	movw	r30, r28
    1058:	32 96       	adiw	r30, 0x02	; 2
    105a:	ee 0f       	add	r30, r30
    105c:	ff 1f       	adc	r31, r31
    105e:	14 9f       	mul	r17, r20
    1060:	d0 01       	movw	r26, r0
    1062:	15 9f       	mul	r17, r21
    1064:	b0 0d       	add	r27, r0
    1066:	11 24       	eor	r1, r1
    1068:	ae 0f       	add	r26, r30
    106a:	bf 1f       	adc	r27, r31
    106c:	a4 5a       	subi	r26, 0xA4	; 164
    106e:	bd 4f       	sbci	r27, 0xFD	; 253
    1070:	0d 90       	ld	r0, X+
    1072:	bc 91       	ld	r27, X
    1074:	a0 2d       	mov	r26, r0
    1076:	ac 5f       	subi	r26, 0xFC	; 252
    1078:	be 4f       	sbci	r27, 0xFE	; 254
    107a:	0c 93       	st	X, r16
			ChannelArray[Cp->senderChannel - 1].receivers[l]->val = Cp->val;
    107c:	dc 01       	movw	r26, r24
    107e:	4d 91       	ld	r20, X+
    1080:	5c 91       	ld	r21, X
    1082:	41 50       	subi	r20, 0x01	; 1
    1084:	51 09       	sbc	r21, r1
    1086:	14 9f       	mul	r17, r20
    1088:	d0 01       	movw	r26, r0
    108a:	15 9f       	mul	r17, r21
    108c:	b0 0d       	add	r27, r0
    108e:	11 24       	eor	r1, r1
    1090:	ae 0f       	add	r26, r30
    1092:	bf 1f       	adc	r27, r31
    1094:	a4 5a       	subi	r26, 0xA4	; 164
    1096:	bd 4f       	sbci	r27, 0xFD	; 253
    1098:	6d 91       	ld	r22, X+
    109a:	7c 91       	ld	r23, X
    109c:	a9 01       	movw	r20, r18
    109e:	40 5e       	subi	r20, 0xE0	; 224
    10a0:	5e 4f       	sbci	r21, 0xFE	; 254
    10a2:	da 01       	movw	r26, r20
    10a4:	4d 91       	ld	r20, X+
    10a6:	5c 91       	ld	r21, X
    10a8:	db 01       	movw	r26, r22
    10aa:	a0 5e       	subi	r26, 0xE0	; 224
    10ac:	be 4f       	sbci	r27, 0xFE	; 254
    10ae:	4d 93       	st	X+, r20
    10b0:	5c 93       	st	X, r21

			if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == SYSTEM) {
    10b2:	dc 01       	movw	r26, r24
    10b4:	4d 91       	ld	r20, X+
    10b6:	5c 91       	ld	r21, X
    10b8:	11 97       	sbiw	r26, 0x01	; 1
    10ba:	41 50       	subi	r20, 0x01	; 1
    10bc:	51 09       	sbc	r21, r1
    10be:	14 9f       	mul	r17, r20
    10c0:	c0 01       	movw	r24, r0
    10c2:	15 9f       	mul	r17, r21
    10c4:	90 0d       	add	r25, r0
    10c6:	11 24       	eor	r1, r1
    10c8:	e8 0f       	add	r30, r24
    10ca:	f9 1f       	adc	r31, r25
    10cc:	e4 5a       	subi	r30, 0xA4	; 164
    10ce:	fd 4f       	sbci	r31, 0xFD	; 253
    10d0:	01 90       	ld	r0, Z+
    10d2:	f0 81       	ld	r31, Z
    10d4:	e0 2d       	mov	r30, r0
    10d6:	eb 5f       	subi	r30, 0xFB	; 251
    10d8:	fe 4f       	sbci	r31, 0xFE	; 254
    10da:	80 81       	ld	r24, Z
    10dc:	91 81       	ldd	r25, Z+1	; 0x01
    10de:	03 97       	sbiw	r24, 0x03	; 3
    10e0:	c1 f4       	brne	.+48     	; 0x1112 <kernel_async_send+0x1ac>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &SysQueue, &SysCount);
    10e2:	fd 01       	movw	r30, r26
    10e4:	40 81       	ld	r20, Z
    10e6:	51 81       	ldd	r21, Z+1	; 0x01
    10e8:	ce 01       	movw	r24, r28
    10ea:	02 96       	adiw	r24, 0x02	; 2
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	41 50       	subi	r20, 0x01	; 1
    10f2:	51 09       	sbc	r21, r1
    10f4:	14 9f       	mul	r17, r20
    10f6:	90 01       	movw	r18, r0
    10f8:	15 9f       	mul	r17, r21
    10fa:	30 0d       	add	r19, r0
    10fc:	11 24       	eor	r1, r1
    10fe:	82 0f       	add	r24, r18
    1100:	93 1f       	adc	r25, r19
    1102:	40 ef       	ldi	r20, 0xF0	; 240
    1104:	54 e0       	ldi	r21, 0x04	; 4
    1106:	6f e3       	ldi	r22, 0x3F	; 63
    1108:	77 e1       	ldi	r23, 0x17	; 23
    110a:	84 5a       	subi	r24, 0xA4	; 164
    110c:	9d 4f       	sbci	r25, 0xFD	; 253
    110e:	b9 d1       	rcall	.+882    	; 0x1482 <enqueue>
    1110:	36 c0       	rjmp	.+108    	; 0x117e <kernel_async_send+0x218>
				} else if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == RR) {
    1112:	f9 01       	movw	r30, r18
    1114:	e4 5e       	subi	r30, 0xE4	; 228
    1116:	fe 4f       	sbci	r31, 0xFE	; 254
    1118:	40 81       	ld	r20, Z
    111a:	51 81       	ldd	r21, Z+1	; 0x01
    111c:	41 50       	subi	r20, 0x01	; 1
    111e:	51 09       	sbc	r21, r1
    1120:	fe 01       	movw	r30, r28
    1122:	32 96       	adiw	r30, 0x02	; 2
    1124:	ee 0f       	add	r30, r30
    1126:	ff 1f       	adc	r31, r31
    1128:	14 9f       	mul	r17, r20
    112a:	c0 01       	movw	r24, r0
    112c:	15 9f       	mul	r17, r21
    112e:	90 0d       	add	r25, r0
    1130:	11 24       	eor	r1, r1
    1132:	e8 0f       	add	r30, r24
    1134:	f9 1f       	adc	r31, r25
    1136:	e4 5a       	subi	r30, 0xA4	; 164
    1138:	fd 4f       	sbci	r31, 0xFD	; 253
    113a:	01 90       	ld	r0, Z+
    113c:	f0 81       	ld	r31, Z
    113e:	e0 2d       	mov	r30, r0
    1140:	eb 5f       	subi	r30, 0xFB	; 251
    1142:	fe 4f       	sbci	r31, 0xFE	; 254
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	c9 f4       	brne	.+50     	; 0x117e <kernel_async_send+0x218>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
    114c:	f9 01       	movw	r30, r18
    114e:	e4 5e       	subi	r30, 0xE4	; 228
    1150:	fe 4f       	sbci	r31, 0xFE	; 254
    1152:	40 81       	ld	r20, Z
    1154:	51 81       	ldd	r21, Z+1	; 0x01
    1156:	ce 01       	movw	r24, r28
    1158:	02 96       	adiw	r24, 0x02	; 2
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	41 50       	subi	r20, 0x01	; 1
    1160:	51 09       	sbc	r21, r1
    1162:	14 9f       	mul	r17, r20
    1164:	90 01       	movw	r18, r0
    1166:	15 9f       	mul	r17, r21
    1168:	30 0d       	add	r19, r0
    116a:	11 24       	eor	r1, r1
    116c:	82 0f       	add	r24, r18
    116e:	93 1f       	adc	r25, r19
    1170:	4c ee       	ldi	r20, 0xEC	; 236
    1172:	54 e0       	ldi	r21, 0x04	; 4
    1174:	65 e8       	ldi	r22, 0x85	; 133
    1176:	77 e1       	ldi	r23, 0x17	; 23
    1178:	84 5a       	subi	r24, 0xA4	; 164
    117a:	9d 4f       	sbci	r25, 0xFD	; 253
    117c:	82 d1       	rcall	.+772    	; 0x1482 <enqueue>
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
    117e:	a0 91 fa 04 	lds	r26, 0x04FA	; 0x8004fa <Cp>
    1182:	b0 91 fb 04 	lds	r27, 0x04FB	; 0x8004fb <Cp+0x1>
    1186:	a4 5e       	subi	r26, 0xE4	; 228
    1188:	be 4f       	sbci	r27, 0xFE	; 254
    118a:	2d 91       	ld	r18, X+
    118c:	3c 91       	ld	r19, X
    118e:	11 97       	sbiw	r26, 0x01	; 1
    1190:	21 50       	subi	r18, 0x01	; 1
    1192:	31 09       	sbc	r19, r1
    1194:	fe 01       	movw	r30, r28
    1196:	32 96       	adiw	r30, 0x02	; 2
    1198:	ee 0f       	add	r30, r30
    119a:	ff 1f       	adc	r31, r31
    119c:	12 9f       	mul	r17, r18
    119e:	c0 01       	movw	r24, r0
    11a0:	13 9f       	mul	r17, r19
    11a2:	90 0d       	add	r25, r0
    11a4:	11 24       	eor	r1, r1
    11a6:	e8 0f       	add	r30, r24
    11a8:	f9 1f       	adc	r31, r25
    11aa:	e4 5a       	subi	r30, 0xA4	; 164
    11ac:	fd 4f       	sbci	r31, 0xFD	; 253
    11ae:	11 82       	std	Z+1, r1	; 0x01
    11b0:	10 82       	st	Z, r1
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
    11b2:	8d 91       	ld	r24, X+
    11b4:	9c 91       	ld	r25, X
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	18 9f       	mul	r17, r24
    11ba:	f0 01       	movw	r30, r0
    11bc:	19 9f       	mul	r17, r25
    11be:	f0 0d       	add	r31, r0
    11c0:	11 24       	eor	r1, r1
    11c2:	e4 5a       	subi	r30, 0xA4	; 164
    11c4:	fd 4f       	sbci	r31, 0xFD	; 253
    11c6:	84 a1       	ldd	r24, Z+36	; 0x24
    11c8:	95 a1       	ldd	r25, Z+37	; 0x25
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	95 a3       	std	Z+37, r25	; 0x25
    11ce:	84 a3       	std	Z+36, r24	; 0x24
		else OS_Abort(6); // cant have more than 1 sender
		return; // return without blocking
	} else { //receivers are waiting
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(6); // cant have more than 1 sender
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
    11d0:	21 97       	sbiw	r28, 0x01	; 1
    11d2:	0a f0       	brmi	.+2      	; 0x11d6 <kernel_async_send+0x270>
    11d4:	34 cf       	rjmp	.-408    	; 0x103e <kernel_async_send+0xd8>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
		}
		ChannelArray[Cp->senderChannel - 1].val = NULL;
    11d6:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <Cp>
    11da:	f0 91 fb 04 	lds	r31, 0x04FB	; 0x8004fb <Cp+0x1>
    11de:	e4 5e       	subi	r30, 0xE4	; 228
    11e0:	fe 4f       	sbci	r31, 0xFE	; 254
    11e2:	80 81       	ld	r24, Z
    11e4:	91 81       	ldd	r25, Z+1	; 0x01
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	29 e2       	ldi	r18, 0x29	; 41
    11ea:	28 9f       	mul	r18, r24
    11ec:	f0 01       	movw	r30, r0
    11ee:	29 9f       	mul	r18, r25
    11f0:	f0 0d       	add	r31, r0
    11f2:	11 24       	eor	r1, r1
    11f4:	e4 5a       	subi	r30, 0xA4	; 164
    11f6:	fd 4f       	sbci	r31, 0xFD	; 253
    11f8:	10 a6       	std	Z+40, r1	; 0x28
    11fa:	17 a2       	std	Z+39, r1	; 0x27
	}
}
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	08 95       	ret

00001206 <OS_Start>:
}

/**
  * This function starts the RTOS after creating a_main
  */
void OS_Start() {   
    1206:	cf 92       	push	r12
    1208:	df 92       	push	r13
    120a:	ef 92       	push	r14
    120c:	ff 92       	push	r15
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
	if ( (! KernelActive) && (Tasks > 0)) {
    1216:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <KernelActive>
    121a:	90 91 f9 04 	lds	r25, 0x04F9	; 0x8004f9 <KernelActive+0x1>
    121e:	89 2b       	or	r24, r25
    1220:	09 f0       	breq	.+2      	; 0x1224 <OS_Start+0x1e>
    1222:	10 c1       	rjmp	.+544    	; 0x1444 <OS_Start+0x23e>
    1224:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <Tasks>
    1228:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <Tasks+0x1>
    122c:	89 2b       	or	r24, r25
    122e:	09 f4       	brne	.+2      	; 0x1232 <OS_Start+0x2c>
    1230:	09 c1       	rjmp	.+530    	; 0x1444 <OS_Start+0x23e>
		Disable_Interrupt();
    1232:	f8 94       	cli

		KernelActive = 1;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <KernelActive+0x1>
    123c:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <KernelActive>
  * corresponding kernel function on its behalf.
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */
    1240:	97 d9       	rcall	.-3282   	; 0x570 <Dispatch>
			if(Cp->priority == SYSTEM) 
				break;
			else
				Cp->request = NEXT;
cnext:	case NEXT:
			Cp->state = READY;
    1242:	dd 24       	eor	r13, r13
    1244:	d3 94       	inc	r13
		case CREATE_SYS:
			Cp->response = Kernel_Create_Task( Cp->code, SYSTEM, Cp->arg, -1, -1, -1);
			if(Cp->priority == SYSTEM) 
				break;
			else
				Cp->request = NEXT;
    1246:	0f 2e       	mov	r0, r31
    1248:	f5 e0       	ldi	r31, 0x05	; 5
    124a:	cf 2e       	mov	r12, r31
    124c:	f0 2d       	mov	r31, r0
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */

	while(1) {
		Cp->request = NONE; /* clear its request */
    124e:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <Cp>
    1252:	f0 91 fb 04 	lds	r31, 0x04FB	; 0x8004fb <Cp+0x1>
    1256:	df 01       	movw	r26, r30
    1258:	a5 5f       	subi	r26, 0xF5	; 245
    125a:	be 4f       	sbci	r27, 0xFE	; 254
    125c:	1c 92       	st	X, r1

		/* activate this newly selected task */
		CurrentSp = Cp->sp;
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	90 93 62 17 	sts	0x1762, r25	; 0x801762 <CurrentSp+0x1>
    1266:	80 93 61 17 	sts	0x1761, r24	; 0x801761 <CurrentSp>

		Exit_Kernel();    /* or CSwitch() */
    126a:	0e 94 9e 00 	call	0x13c	; 0x13c <CSwitch>

		/* if this task makes a system call, it will return to here! */

		/* save the Cp's stack pointer */
		Cp->sp = CurrentSp;
    126e:	c0 91 fa 04 	lds	r28, 0x04FA	; 0x8004fa <Cp>
    1272:	d0 91 fb 04 	lds	r29, 0x04FB	; 0x8004fb <Cp+0x1>
    1276:	80 91 61 17 	lds	r24, 0x1761	; 0x801761 <CurrentSp>
    127a:	90 91 62 17 	lds	r25, 0x1762	; 0x801762 <CurrentSp+0x1>
    127e:	9b 83       	std	Y+3, r25	; 0x03
    1280:	8a 83       	std	Y+2, r24	; 0x02

		switch(Cp->request){
    1282:	fe 01       	movw	r30, r28
    1284:	e5 5f       	subi	r30, 0xF5	; 245
    1286:	fe 4f       	sbci	r31, 0xFE	; 254
    1288:	e0 81       	ld	r30, Z
    128a:	8e 2f       	mov	r24, r30
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	fc 01       	movw	r30, r24
    1290:	31 97       	sbiw	r30, 0x01	; 1
    1292:	ea 30       	cpi	r30, 0x0A	; 10
    1294:	f1 05       	cpc	r31, r1
    1296:	d8 f6       	brcc	.-74     	; 0x124e <OS_Start+0x48>
    1298:	88 27       	eor	r24, r24
    129a:	ee 58       	subi	r30, 0x8E	; 142
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	8f 4f       	sbci	r24, 0xFF	; 255
    12a0:	ea c3       	rjmp	.+2004   	; 0x1a76 <__tablejump2__>
		case CREATE:
			Cp->response = Kernel_Create_Task( Cp->code, Cp->priority, Cp->arg, -1, -1, -1);
    12a2:	fe 01       	movw	r30, r28
    12a4:	e9 5f       	subi	r30, 0xF9	; 249
    12a6:	fe 4f       	sbci	r31, 0xFE	; 254
    12a8:	40 81       	ld	r20, Z
    12aa:	51 81       	ldd	r21, Z+1	; 0x01
    12ac:	32 97       	sbiw	r30, 0x02	; 2
    12ae:	60 81       	ld	r22, Z
    12b0:	71 81       	ldd	r23, Z+1	; 0x01
    12b2:	34 96       	adiw	r30, 0x04	; 4
    12b4:	80 81       	ld	r24, Z
    12b6:	91 81       	ldd	r25, Z+1	; 0x01
    12b8:	ee 24       	eor	r14, r14
    12ba:	ea 94       	dec	r14
    12bc:	fe 2c       	mov	r15, r14
    12be:	0f ef       	ldi	r16, 0xFF	; 255
    12c0:	1f ef       	ldi	r17, 0xFF	; 255
    12c2:	2f ef       	ldi	r18, 0xFF	; 255
    12c4:	3f ef       	ldi	r19, 0xFF	; 255
    12c6:	ab d8       	rcall	.-3754   	; 0x41e <Kernel_Create_Task>
    12c8:	c4 5f       	subi	r28, 0xF4	; 244
    12ca:	de 4f       	sbci	r29, 0xFE	; 254
    12cc:	99 83       	std	Y+1, r25	; 0x01
    12ce:	88 83       	st	Y, r24
    12d0:	be cf       	rjmp	.-132    	; 0x124e <OS_Start+0x48>
			break;
		case CREATE_PERIODIC:
			Cp->response = Kernel_Create_Task( Cp->code, PERIODIC, Cp->arg, Cp->offset, Cp->wcet, Cp->period);
    12d2:	fe 01       	movw	r30, r28
    12d4:	e0 5f       	subi	r30, 0xF0	; 240
    12d6:	fe 4f       	sbci	r31, 0xFE	; 254
    12d8:	e0 80       	ld	r14, Z
    12da:	f1 80       	ldd	r15, Z+1	; 0x01
    12dc:	32 96       	adiw	r30, 0x02	; 2
    12de:	00 81       	ld	r16, Z
    12e0:	11 81       	ldd	r17, Z+1	; 0x01
    12e2:	32 96       	adiw	r30, 0x02	; 2
    12e4:	20 81       	ld	r18, Z
    12e6:	31 81       	ldd	r19, Z+1	; 0x01
    12e8:	3d 97       	sbiw	r30, 0x0d	; 13
    12ea:	40 81       	ld	r20, Z
    12ec:	51 81       	ldd	r21, Z+1	; 0x01
    12ee:	32 96       	adiw	r30, 0x02	; 2
    12f0:	80 81       	ld	r24, Z
    12f2:	91 81       	ldd	r25, Z+1	; 0x01
    12f4:	62 e0       	ldi	r22, 0x02	; 2
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	92 d8       	rcall	.-3804   	; 0x41e <Kernel_Create_Task>
    12fa:	c4 5f       	subi	r28, 0xF4	; 244
    12fc:	de 4f       	sbci	r29, 0xFE	; 254
    12fe:	99 83       	std	Y+1, r25	; 0x01
    1300:	88 83       	st	Y, r24
			if(Cp->priority == RR && Cp->offset == 0){
    1302:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <Cp>
    1306:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <Cp+0x1>
    130a:	fc 01       	movw	r30, r24
    130c:	eb 5f       	subi	r30, 0xFB	; 251
    130e:	fe 4f       	sbci	r31, 0xFE	; 254
    1310:	20 81       	ld	r18, Z
    1312:	31 81       	ldd	r19, Z+1	; 0x01
    1314:	21 30       	cpi	r18, 0x01	; 1
    1316:	31 05       	cpc	r19, r1
    1318:	09 f0       	breq	.+2      	; 0x131c <OS_Start+0x116>
    131a:	99 cf       	rjmp	.-206    	; 0x124e <OS_Start+0x48>
    131c:	3f 96       	adiw	r30, 0x0f	; 15
    131e:	20 81       	ld	r18, Z
    1320:	31 81       	ldd	r19, Z+1	; 0x01
    1322:	23 2b       	or	r18, r19
    1324:	09 f0       	breq	.+2      	; 0x1328 <OS_Start+0x122>
    1326:	93 cf       	rjmp	.-218    	; 0x124e <OS_Start+0x48>
				Cp->request = NEXT;
    1328:	39 97       	sbiw	r30, 0x09	; 9
    132a:	c0 82       	st	Z, r12
    132c:	3c c0       	rjmp	.+120    	; 0x13a6 <OS_Start+0x1a0>
				goto cnext;
			}
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
    132e:	fe 01       	movw	r30, r28
    1330:	e9 5f       	subi	r30, 0xF9	; 249
    1332:	fe 4f       	sbci	r31, 0xFE	; 254
    1334:	40 81       	ld	r20, Z
    1336:	51 81       	ldd	r21, Z+1	; 0x01
    1338:	32 96       	adiw	r30, 0x02	; 2
    133a:	80 81       	ld	r24, Z
    133c:	91 81       	ldd	r25, Z+1	; 0x01
    133e:	ee 24       	eor	r14, r14
    1340:	ea 94       	dec	r14
    1342:	fe 2c       	mov	r15, r14
    1344:	0f ef       	ldi	r16, 0xFF	; 255
    1346:	1f ef       	ldi	r17, 0xFF	; 255
    1348:	2f ef       	ldi	r18, 0xFF	; 255
    134a:	3f ef       	ldi	r19, 0xFF	; 255
    134c:	61 e0       	ldi	r22, 0x01	; 1
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	66 d8       	rcall	.-3892   	; 0x41e <Kernel_Create_Task>
    1352:	c4 5f       	subi	r28, 0xF4	; 244
    1354:	de 4f       	sbci	r29, 0xFE	; 254
    1356:	99 83       	std	Y+1, r25	; 0x01
    1358:	88 83       	st	Y, r24
    135a:	79 cf       	rjmp	.-270    	; 0x124e <OS_Start+0x48>
			break;
		case CREATE_SYS:
			Cp->response = Kernel_Create_Task( Cp->code, SYSTEM, Cp->arg, -1, -1, -1);
    135c:	fe 01       	movw	r30, r28
    135e:	e9 5f       	subi	r30, 0xF9	; 249
    1360:	fe 4f       	sbci	r31, 0xFE	; 254
    1362:	40 81       	ld	r20, Z
    1364:	51 81       	ldd	r21, Z+1	; 0x01
    1366:	32 96       	adiw	r30, 0x02	; 2
    1368:	80 81       	ld	r24, Z
    136a:	91 81       	ldd	r25, Z+1	; 0x01
    136c:	ee 24       	eor	r14, r14
    136e:	ea 94       	dec	r14
    1370:	fe 2c       	mov	r15, r14
    1372:	0f ef       	ldi	r16, 0xFF	; 255
    1374:	1f ef       	ldi	r17, 0xFF	; 255
    1376:	2f ef       	ldi	r18, 0xFF	; 255
    1378:	3f ef       	ldi	r19, 0xFF	; 255
    137a:	63 e0       	ldi	r22, 0x03	; 3
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	4f d8       	rcall	.-3938   	; 0x41e <Kernel_Create_Task>
    1380:	c4 5f       	subi	r28, 0xF4	; 244
    1382:	de 4f       	sbci	r29, 0xFE	; 254
    1384:	99 83       	std	Y+1, r25	; 0x01
    1386:	88 83       	st	Y, r24
			if(Cp->priority == SYSTEM) 
    1388:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <Cp>
    138c:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <Cp+0x1>
    1390:	fc 01       	movw	r30, r24
    1392:	eb 5f       	subi	r30, 0xFB	; 251
    1394:	fe 4f       	sbci	r31, 0xFE	; 254
    1396:	20 81       	ld	r18, Z
    1398:	31 81       	ldd	r19, Z+1	; 0x01
    139a:	23 30       	cpi	r18, 0x03	; 3
    139c:	31 05       	cpc	r19, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <OS_Start+0x19c>
    13a0:	56 cf       	rjmp	.-340    	; 0x124e <OS_Start+0x48>
				break;
			else
				Cp->request = NEXT;
    13a2:	36 96       	adiw	r30, 0x06	; 6
    13a4:	c0 82       	st	Z, r12
cnext:	case NEXT:
			Cp->state = READY;
    13a6:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <Cp>
    13aa:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <Cp+0x1>
    13ae:	fc 01       	movw	r30, r24
    13b0:	ec 5f       	subi	r30, 0xFC	; 252
    13b2:	fe 4f       	sbci	r31, 0xFE	; 254
    13b4:	d0 82       	st	Z, r13
			if (Cp->priority == SYSTEM) {
    13b6:	31 96       	adiw	r30, 0x01	; 1
    13b8:	20 81       	ld	r18, Z
    13ba:	31 81       	ldd	r19, Z+1	; 0x01
    13bc:	23 30       	cpi	r18, 0x03	; 3
    13be:	31 05       	cpc	r19, r1
    13c0:	41 f4       	brne	.+16     	; 0x13d2 <OS_Start+0x1cc>
				enqueue(&Cp, &SysQueue, &SysCount);
    13c2:	40 ef       	ldi	r20, 0xF0	; 240
    13c4:	54 e0       	ldi	r21, 0x04	; 4
    13c6:	6f e3       	ldi	r22, 0x3F	; 63
    13c8:	77 e1       	ldi	r23, 0x17	; 23
    13ca:	8a ef       	ldi	r24, 0xFA	; 250
    13cc:	94 e0       	ldi	r25, 0x04	; 4
    13ce:	59 d0       	rcall	.+178    	; 0x1482 <enqueue>
    13d0:	1e c0       	rjmp	.+60     	; 0x140e <OS_Start+0x208>
			} else if (Cp->priority == PERIODIC) {
    13d2:	fc 01       	movw	r30, r24
    13d4:	eb 5f       	subi	r30, 0xFB	; 251
    13d6:	fe 4f       	sbci	r31, 0xFE	; 254
    13d8:	20 81       	ld	r18, Z
    13da:	31 81       	ldd	r19, Z+1	; 0x01
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	41 f4       	brne	.+16     	; 0x13f2 <OS_Start+0x1ec>
				enqueuePeriodic(&Cp, &PeriodicQueue, &PeriodicCount);
    13e2:	4e ee       	ldi	r20, 0xEE	; 238
    13e4:	54 e0       	ldi	r21, 0x04	; 4
    13e6:	63 e6       	ldi	r22, 0x63	; 99
    13e8:	77 e1       	ldi	r23, 0x17	; 23
    13ea:	8a ef       	ldi	r24, 0xFA	; 250
    13ec:	94 e0       	ldi	r25, 0x04	; 4
    13ee:	9b d0       	rcall	.+310    	; 0x1526 <enqueuePeriodic>
    13f0:	0e c0       	rjmp	.+28     	; 0x140e <OS_Start+0x208>
			} else if (Cp->priority == RR) {
    13f2:	fc 01       	movw	r30, r24
    13f4:	eb 5f       	subi	r30, 0xFB	; 251
    13f6:	fe 4f       	sbci	r31, 0xFE	; 254
    13f8:	80 81       	ld	r24, Z
    13fa:	91 81       	ldd	r25, Z+1	; 0x01
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	39 f4       	brne	.+14     	; 0x140e <OS_Start+0x208>
				enqueue(&Cp, &RRQueue, &RRCount);
    1400:	4c ee       	ldi	r20, 0xEC	; 236
    1402:	54 e0       	ldi	r21, 0x04	; 4
    1404:	65 e8       	ldi	r22, 0x85	; 133
    1406:	77 e1       	ldi	r23, 0x17	; 23
    1408:	8a ef       	ldi	r24, 0xFA	; 250
    140a:	94 e0       	ldi	r25, 0x04	; 4
    140c:	3a d0       	rcall	.+116    	; 0x1482 <enqueue>
			}
			Dispatch();
    140e:	b0 d8       	rcall	.-3744   	; 0x570 <Dispatch>
    1410:	1e cf       	rjmp	.-452    	; 0x124e <OS_Start+0x48>
			break;
		case NONE:
			break;
		case CHECK_TIME_VIOLATION:
			CheckTimingViolation();
    1412:	8b d8       	rcall	.-3818   	; 0x52a <CheckTimingViolation>
    1414:	1c cf       	rjmp	.-456    	; 0x124e <OS_Start+0x48>
			break;
		case SEND:
			kernel_send();
    1416:	61 db       	rcall	.-2366   	; 0xada <kernel_send>
    1418:	1a cf       	rjmp	.-460    	; 0x124e <OS_Start+0x48>
			break;
		case ASYNC_SEND:
			kernel_async_send();
    141a:	a5 dd       	rcall	.-1206   	; 0xf66 <kernel_async_send>
    141c:	18 cf       	rjmp	.-464    	; 0x124e <OS_Start+0x48>
			break;
		case RECEIVE:
			kernel_receive();
    141e:	c5 dc       	rcall	.-1654   	; 0xdaa <kernel_receive>
    1420:	16 cf       	rjmp	.-468    	; 0x124e <OS_Start+0x48>

/**
  *  Terminate a task
  */
static void Kernel_Terminate_Task() {
	Cp->state = DEAD;
    1422:	fe 01       	movw	r30, r28
    1424:	ec 5f       	subi	r30, 0xFC	; 252
    1426:	fe 4f       	sbci	r31, 0xFE	; 254
    1428:	10 82       	st	Z, r1
	Cp->processID = 0;
    142a:	19 82       	std	Y+1, r1	; 0x01
    142c:	18 82       	st	Y, r1
	Tasks--;
    142e:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <Tasks>
    1432:	90 91 f7 04 	lds	r25, 0x04F7	; 0x8004f7 <Tasks+0x1>
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	90 93 f7 04 	sts	0x04F7, r25	; 0x8004f7 <Tasks+0x1>
    143c:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <Tasks>
			kernel_receive();
			break;
		case TERMINATE:
			/* deallocate all resources used by this task */
			Kernel_Terminate_Task();
			Dispatch();
    1440:	97 d8       	rcall	.-3794   	; 0x570 <Dispatch>
    1442:	05 cf       	rjmp	.-502    	; 0x124e <OS_Start+0x48>

		KernelActive = 1;
		Next_Kernel_Request();
		/* SHOULD NEVER GET HERE!!! */
	}
}
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	df 90       	pop	r13
    1452:	cf 90       	pop	r12
    1454:	08 95       	ret

00001456 <main>:
/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	//pin 25
	DDRA |= (1<<PA3);
    1456:	0b 9a       	sbi	0x01, 3	; 1
	PORTA &= ~(1<<PA3);
    1458:	13 98       	cbi	0x02, 3	; 2

	//pin 26
	DDRA |= (1<<PA4);
    145a:	0c 9a       	sbi	0x01, 4	; 1
	PORTA &= ~(1<<PA4);
    145c:	14 98       	cbi	0x02, 4	; 2

	//pin 27
	DDRA |= (1<<PA5);
    145e:	0d 9a       	sbi	0x01, 5	; 1
	PORTA &= ~(1<<PA5);
    1460:	15 98       	cbi	0x02, 5	; 2

	//pin 28
	DDRA |= (1<<PA6);
    1462:	0e 9a       	sbi	0x01, 6	; 1
	PORTA &= ~(1<<PA6);
    1464:	16 98       	cbi	0x02, 6	; 2

	//pin 29
	DDRA |= (1<<PA7);
    1466:	0f 9a       	sbi	0x01, 7	; 1
	PORTA &= ~(1<<PA7);
    1468:	17 98       	cbi	0x02, 7	; 2

	//pin 30
	DDRC |= (1<<PC7);
    146a:	3f 9a       	sbi	0x07, 7	; 7
	PORTC &= ~(1<<PC7);
    146c:	47 98       	cbi	0x08, 7	; 8

	setup();
    146e:	88 da       	rcall	.-2800   	; 0x980 <setup>
	OS_Init();
    1470:	19 d8       	rcall	.-4046   	; 0x4a4 <OS_Init>
	Task_Create_Idle();
    1472:	90 d9       	rcall	.-3296   	; 0x794 <Task_Create_Idle>
	Task_Create_System(a_main, 42);
    1474:	6a e2       	ldi	r22, 0x2A	; 42
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	88 e4       	ldi	r24, 0x48	; 72
    147a:	91 e0       	ldi	r25, 0x01	; 1
    147c:	60 d9       	rcall	.-3392   	; 0x73e <Task_Create_System>
	OS_Start();
    147e:	c3 ce       	rjmp	.-634    	; 0x1206 <OS_Start>
    1480:	08 95       	ret

00001482 <enqueue>:
}

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1488:	28 81       	ld	r18, Y
    148a:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    148c:	2f 30       	cpi	r18, 0x0F	; 15
    148e:	31 05       	cpc	r19, r1
    1490:	e9 f0       	breq	.+58     	; 0x14cc <enqueue+0x4a>
        return NULL;
    }

    int i = (*QCount) - 1;
    1492:	e8 81       	ld	r30, Y
    1494:	f9 81       	ldd	r31, Y+1	; 0x01
    1496:	9f 01       	movw	r18, r30
    1498:	21 50       	subi	r18, 0x01	; 1
    149a:	31 09       	sbc	r19, r1
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    149c:	62 f0       	brmi	.+24     	; 0x14b6 <enqueue+0x34>
    149e:	ee 0f       	add	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	e6 0f       	add	r30, r22
    14a4:	f7 1f       	adc	r31, r23
    14a6:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    14a8:	32 91       	ld	r19, -Z
    14aa:	22 91       	ld	r18, -Z
    14ac:	33 83       	std	Z+3, r19	; 0x03
    14ae:	22 83       	std	Z+2, r18	; 0x02

    int i = (*QCount) - 1;
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    14b0:	ea 17       	cp	r30, r26
    14b2:	fb 07       	cpc	r31, r27
    14b4:	c9 f7       	brne	.-14     	; 0x14a8 <enqueue+0x26>
        i--;
        temp = Queue[i];
    }

    //Queue[i+1] = *p; //original code
	Queue[0] = *p;
    14b6:	fc 01       	movw	r30, r24
    14b8:	80 81       	ld	r24, Z
    14ba:	91 81       	ldd	r25, Z+1	; 0x01
    14bc:	fb 01       	movw	r30, r22
    14be:	91 83       	std	Z+1, r25	; 0x01
    14c0:	80 83       	st	Z, r24
    (*QCount)++;
    14c2:	88 81       	ld	r24, Y
    14c4:	99 81       	ldd	r25, Y+1	; 0x01
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	99 83       	std	Y+1, r25	; 0x01
    14ca:	88 83       	st	Y, r24
}
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	08 95       	ret

000014d2 <dequeue>:


/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    14d2:	ac 01       	movw	r20, r24
    14d4:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    14d6:	8d 91       	ld	r24, X+
    14d8:	9c 91       	ld	r25, X
    14da:	11 97       	sbiw	r26, 0x01	; 1

/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
   if(isEmpty(QCount)) {
    14dc:	89 2b       	or	r24, r25
    14de:	01 f1       	breq	.+64     	; 0x1520 <dequeue+0x4e>
	   return NULL;
   }

   volatile PD *result = (Queue[(*QCount)-1]);
    14e0:	ed 91       	ld	r30, X+
    14e2:	fc 91       	ld	r31, X
    14e4:	11 97       	sbiw	r26, 0x01	; 1
    14e6:	e1 50       	subi	r30, 0x01	; 1
    14e8:	f0 48       	sbci	r31, 0x80	; 128
    14ea:	ee 0f       	add	r30, r30
    14ec:	ff 1f       	adc	r31, r31
    14ee:	e4 0f       	add	r30, r20
    14f0:	f5 1f       	adc	r31, r21
    14f2:	80 81       	ld	r24, Z
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
    14f6:	2d 91       	ld	r18, X+
    14f8:	3c 91       	ld	r19, X
    14fa:	11 97       	sbiw	r26, 0x01	; 1
    14fc:	f9 01       	movw	r30, r18
    14fe:	e1 50       	subi	r30, 0x01	; 1
    1500:	f0 48       	sbci	r31, 0x80	; 128
    1502:	ee 0f       	add	r30, r30
    1504:	ff 1f       	adc	r31, r31
    1506:	e4 0f       	add	r30, r20
    1508:	f5 1f       	adc	r31, r21
    150a:	11 82       	std	Z+1, r1	; 0x01
    150c:	10 82       	st	Z, r1
   (*QCount)--;
    150e:	2d 91       	ld	r18, X+
    1510:	3c 91       	ld	r19, X
    1512:	11 97       	sbiw	r26, 0x01	; 1
    1514:	21 50       	subi	r18, 0x01	; 1
    1516:	31 09       	sbc	r19, r1
    1518:	11 96       	adiw	r26, 0x01	; 1
    151a:	3c 93       	st	X, r19
    151c:	2e 93       	st	-X, r18

   return result;
    151e:	08 95       	ret
/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
   if(isEmpty(QCount)) {
	   return NULL;
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
   volatile PD *result = (Queue[(*QCount)-1]);
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
   (*QCount)--;

   return result;
}
    1524:	08 95       	ret

00001526 <enqueuePeriodic>:

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1526:	cf 92       	push	r12
    1528:	df 92       	push	r13
    152a:	ef 92       	push	r14
    152c:	ff 92       	push	r15
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1538:	ea 01       	movw	r28, r20
    153a:	28 81       	ld	r18, Y
    153c:	39 81       	ldd	r19, Y+1	; 0x01

   return result;
}

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
	if(isFull(QCount)) {
    153e:	2f 30       	cpi	r18, 0x0F	; 15
    1540:	31 05       	cpc	r19, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <enqueuePeriodic+0x20>
    1544:	4a c0       	rjmp	.+148    	; 0x15da <enqueuePeriodic+0xb4>
		return;
	}

	int i = (*QCount) - 1;
    1546:	28 81       	ld	r18, Y
    1548:	39 81       	ldd	r19, Y+1	; 0x01
    154a:	21 50       	subi	r18, 0x01	; 1
    154c:	31 09       	sbc	r19, r1

	volatile PD *new = *p;
    154e:	fc 01       	movw	r30, r24
    1550:	00 81       	ld	r16, Z
    1552:	11 81       	ldd	r17, Z+1	; 0x01

	volatile PD *temp = Queue[i];
    1554:	f9 01       	movw	r30, r18
    1556:	ee 0f       	add	r30, r30
    1558:	ff 1f       	adc	r31, r31
    155a:	db 01       	movw	r26, r22
    155c:	ae 0f       	add	r26, r30
    155e:	bf 1f       	adc	r27, r31
    1560:	4d 91       	ld	r20, X+
    1562:	5c 91       	ld	r21, X

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    1564:	33 23       	and	r19, r19
    1566:	3c f1       	brlt	.+78     	; 0x15b6 <enqueuePeriodic+0x90>
    1568:	d8 01       	movw	r26, r16
    156a:	aa 5e       	subi	r26, 0xEA	; 234
    156c:	be 4f       	sbci	r27, 0xFE	; 254
    156e:	ed 90       	ld	r14, X+
    1570:	fc 90       	ld	r15, X
    1572:	da 01       	movw	r26, r20
    1574:	aa 5e       	subi	r26, 0xEA	; 234
    1576:	be 4f       	sbci	r27, 0xFE	; 254
    1578:	4d 91       	ld	r20, X+
    157a:	5c 91       	ld	r21, X
    157c:	e4 16       	cp	r14, r20
    157e:	f5 06       	cpc	r15, r21
    1580:	d4 f0       	brlt	.+52     	; 0x15b6 <enqueuePeriodic+0x90>
    1582:	e6 0f       	add	r30, r22
    1584:	f7 1f       	adc	r31, r23
    1586:	0a 5e       	subi	r16, 0xEA	; 234
    1588:	1e 4f       	sbci	r17, 0xFE	; 254
		Queue[i+1] = Queue[i];
    158a:	a0 81       	ld	r26, Z
    158c:	b1 81       	ldd	r27, Z+1	; 0x01
    158e:	b3 83       	std	Z+3, r27	; 0x03
    1590:	a2 83       	std	Z+2, r26	; 0x02
		i--;
    1592:	21 50       	subi	r18, 0x01	; 1
    1594:	31 09       	sbc	r19, r1
		temp = Queue[i];
    1596:	b2 91       	ld	r27, -Z
    1598:	a2 91       	ld	r26, -Z

	volatile PD *new = *p;

	volatile PD *temp = Queue[i];

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    159a:	2f 3f       	cpi	r18, 0xFF	; 255
    159c:	4f ef       	ldi	r20, 0xFF	; 255
    159e:	34 07       	cpc	r19, r20
    15a0:	51 f0       	breq	.+20     	; 0x15b6 <enqueuePeriodic+0x90>
    15a2:	e8 01       	movw	r28, r16
    15a4:	e8 80       	ld	r14, Y
    15a6:	f9 80       	ldd	r15, Y+1	; 0x01
    15a8:	aa 5e       	subi	r26, 0xEA	; 234
    15aa:	be 4f       	sbci	r27, 0xFE	; 254
    15ac:	4d 91       	ld	r20, X+
    15ae:	5c 91       	ld	r21, X
    15b0:	e4 16       	cp	r14, r20
    15b2:	f5 06       	cpc	r15, r21
    15b4:	54 f7       	brge	.-44     	; 0x158a <enqueuePeriodic+0x64>
		Queue[i+1] = Queue[i];
		i--;
		temp = Queue[i];
	}

	Queue[i+1] = *p;
    15b6:	fc 01       	movw	r30, r24
    15b8:	80 81       	ld	r24, Z
    15ba:	91 81       	ldd	r25, Z+1	; 0x01
    15bc:	2f 5f       	subi	r18, 0xFF	; 255
    15be:	3f 4f       	sbci	r19, 0xFF	; 255
    15c0:	22 0f       	add	r18, r18
    15c2:	33 1f       	adc	r19, r19
    15c4:	fb 01       	movw	r30, r22
    15c6:	e2 0f       	add	r30, r18
    15c8:	f3 1f       	adc	r31, r19
    15ca:	91 83       	std	Z+1, r25	; 0x01
    15cc:	80 83       	st	Z, r24
	(*QCount)++;
    15ce:	e6 01       	movw	r28, r12
    15d0:	88 81       	ld	r24, Y
    15d2:	99 81       	ldd	r25, Y+1	; 0x01
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	99 83       	std	Y+1, r25	; 0x01
    15d8:	88 83       	st	Y, r24
}
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	df 90       	pop	r13
    15e8:	cf 90       	pop	r12
    15ea:	08 95       	ret

000015ec <peek>:

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    15ec:	fb 01       	movw	r30, r22
    15ee:	20 81       	ld	r18, Z
    15f0:	31 81       	ldd	r19, Z+1	; 0x01
	Queue[i+1] = *p;
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
    15f2:	23 2b       	or	r18, r19
    15f4:	61 f0       	breq	.+24     	; 0x160e <peek+0x22>
		return NULL;
	}
	volatile PD *result = (Queue[(*QCount)-1]);
    15f6:	20 81       	ld	r18, Z
    15f8:	31 81       	ldd	r19, Z+1	; 0x01
    15fa:	f9 01       	movw	r30, r18
    15fc:	e1 50       	subi	r30, 0x01	; 1
    15fe:	f0 48       	sbci	r31, 0x80	; 128
    1600:	ee 0f       	add	r30, r30
    1602:	ff 1f       	adc	r31, r31
    1604:	e8 0f       	add	r30, r24
    1606:	f9 1f       	adc	r31, r25
    1608:	80 81       	ld	r24, Z
    160a:	91 81       	ldd	r25, Z+1	; 0x01
	return result;
    160c:	08 95       	ret
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
		return NULL;
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	90 e0       	ldi	r25, 0x00	; 0
	}
	volatile PD *result = (Queue[(*QCount)-1]);
	return result;
    1612:	08 95       	ret

00001614 <error_check>:
	add_to_trace(trace, temp);
	Task_Terminate();
}

static void error_check(){
	int curret_time = Now();
    1614:	6d d9       	rcall	.-3366   	; 0x8f0 <Now>
	itoa(curret_time, temp, 10);
    1616:	4a e0       	ldi	r20, 0x0A	; 10
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	6c e1       	ldi	r22, 0x1C	; 28
    161c:	77 e1       	ldi	r23, 0x17	; 23
    161e:	47 d2       	rcall	.+1166   	; 0x1aae <itoa>
	add_to_trace(trace, temp);
    1620:	6c e1       	ldi	r22, 0x1C	; 28
    1622:	77 e1       	ldi	r23, 0x17	; 23
    1624:	81 e2       	ldi	r24, 0x21	; 33
    1626:	97 e1       	ldi	r25, 0x17	; 23
    1628:	68 d0       	rcall	.+208    	; 0x16fa <add_to_trace>
	if(strcmp(trace, "60708090140150240250320") == 0)
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	72 e0       	ldi	r23, 0x02	; 2
    162e:	81 e2       	ldi	r24, 0x21	; 33
    1630:	97 e1       	ldi	r25, 0x17	; 23
    1632:	34 d2       	rcall	.+1128   	; 0x1a9c <strcmp>
    1634:	89 2b       	or	r24, r25
    1636:	21 f4       	brne	.+8      	; 0x1640 <error_check+0x2c>
		uart_write("test_periodic_task_timing PASSED");
    1638:	88 e1       	ldi	r24, 0x18	; 24
    163a:	92 e0       	ldi	r25, 0x02	; 2
    163c:	77 d0       	rcall	.+238    	; 0x172c <uart_write>
    163e:	03 c0       	rjmp	.+6      	; 0x1646 <error_check+0x32>
	else
		uart_write("test_periodic_task_overlap FAILED");
    1640:	89 e3       	ldi	r24, 0x39	; 57
    1642:	92 e0       	ldi	r25, 0x02	; 2
    1644:	73 d0       	rcall	.+230    	; 0x172c <uart_write>
	Task_Terminate();
    1646:	0c 94 4f 01 	jmp	0x29e	; 0x29e <Task_Terminate>
    164a:	08 95       	ret

0000164c <Periodic_Task>:

static char trace[30] = "";
static char temp[5] = "";

static void Periodic_Task(){
	int curret_time = Now();
    164c:	51 d9       	rcall	.-3422   	; 0x8f0 <Now>
	itoa(curret_time, temp, 10);
    164e:	4a e0       	ldi	r20, 0x0A	; 10
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	6c e1       	ldi	r22, 0x1C	; 28
    1654:	77 e1       	ldi	r23, 0x17	; 23
    1656:	2b d2       	rcall	.+1110   	; 0x1aae <itoa>
	add_to_trace(trace, temp);
    1658:	6c e1       	ldi	r22, 0x1C	; 28
    165a:	77 e1       	ldi	r23, 0x17	; 23
    165c:	81 e2       	ldi	r24, 0x21	; 33
    165e:	97 e1       	ldi	r25, 0x17	; 23
    1660:	4c d0       	rcall	.+152    	; 0x16fa <add_to_trace>
	Task_Next();
    1662:	d3 d8       	rcall	.-3674   	; 0x80a <Task_Next>
	curret_time = Now();
    1664:	45 d9       	rcall	.-3446   	; 0x8f0 <Now>
	itoa(curret_time, temp, 10);
    1666:	4a e0       	ldi	r20, 0x0A	; 10
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	6c e1       	ldi	r22, 0x1C	; 28
    166c:	77 e1       	ldi	r23, 0x17	; 23
    166e:	1f d2       	rcall	.+1086   	; 0x1aae <itoa>
	add_to_trace(trace, temp);
    1670:	6c e1       	ldi	r22, 0x1C	; 28
    1672:	77 e1       	ldi	r23, 0x17	; 23
    1674:	81 e2       	ldi	r24, 0x21	; 33
    1676:	97 e1       	ldi	r25, 0x17	; 23
    1678:	40 d0       	rcall	.+128    	; 0x16fa <add_to_trace>
	Task_Terminate();
    167a:	0c 94 4f 01 	jmp	0x29e	; 0x29e <Task_Terminate>
    167e:	08 95       	ret

00001680 <test_periodic_task_timing>:
	else
		uart_write("test_periodic_task_overlap FAILED");
	Task_Terminate();
}

void test_periodic_task_timing(void){
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
	uart_start();
    1684:	3e d0       	rcall	.+124    	; 0x1702 <uart_start>
	Task_Create_Period(Periodic_Task, 0, 16, 1, 8);
    1686:	08 e0       	ldi	r16, 0x08	; 8
    1688:	10 e0       	ldi	r17, 0x00	; 0
    168a:	21 e0       	ldi	r18, 0x01	; 1
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e1       	ldi	r20, 0x10	; 16
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	86 e2       	ldi	r24, 0x26	; 38
    1698:	9b e0       	ldi	r25, 0x0B	; 11
    169a:	65 d8       	rcall	.-3894   	; 0x766 <Task_Create_Period>
	Task_Create_Period(Periodic_Task, 0, 16, 1, 9);
    169c:	09 e0       	ldi	r16, 0x09	; 9
    169e:	10 e0       	ldi	r17, 0x00	; 0
    16a0:	21 e0       	ldi	r18, 0x01	; 1
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e1       	ldi	r20, 0x10	; 16
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	86 e2       	ldi	r24, 0x26	; 38
    16ae:	9b e0       	ldi	r25, 0x0B	; 11
    16b0:	5a d8       	rcall	.-3916   	; 0x766 <Task_Create_Period>
	Task_Create_Period(Periodic_Task, 0, 8, 1, 6);
    16b2:	06 e0       	ldi	r16, 0x06	; 6
    16b4:	10 e0       	ldi	r17, 0x00	; 0
    16b6:	21 e0       	ldi	r18, 0x01	; 1
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	48 e0       	ldi	r20, 0x08	; 8
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	86 e2       	ldi	r24, 0x26	; 38
    16c4:	9b e0       	ldi	r25, 0x0B	; 11
    16c6:	4f d8       	rcall	.-3938   	; 0x766 <Task_Create_Period>
	Task_Create_Period(Periodic_Task, 0, 8, 1, 7);
    16c8:	07 e0       	ldi	r16, 0x07	; 7
    16ca:	10 e0       	ldi	r17, 0x00	; 0
    16cc:	21 e0       	ldi	r18, 0x01	; 1
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	48 e0       	ldi	r20, 0x08	; 8
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	86 e2       	ldi	r24, 0x26	; 38
    16da:	9b e0       	ldi	r25, 0x0B	; 11
    16dc:	44 d8       	rcall	.-3960   	; 0x766 <Task_Create_Period>
	Task_Create_Period(error_check, 0, 33, 1, 32);
    16de:	00 e2       	ldi	r16, 0x20	; 32
    16e0:	10 e0       	ldi	r17, 0x00	; 0
    16e2:	21 e0       	ldi	r18, 0x01	; 1
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	41 e2       	ldi	r20, 0x21	; 33
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	8a e0       	ldi	r24, 0x0A	; 10
    16f0:	9b e0       	ldi	r25, 0x0B	; 11
    16f2:	39 d8       	rcall	.-3982   	; 0x766 <Task_Create_Period>
}
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	08 95       	ret

000016fa <add_to_trace>:

static char trace[30] = "";
static char temp[5] = "";

void add_to_trace(char* a_string, char* addition){
	Disable_Interrupt();
    16fa:	f8 94       	cli
	strcat(a_string, addition);
    16fc:	c4 d1       	rcall	.+904    	; 0x1a86 <strcat>
	Enable_Interrupt();
    16fe:	78 94       	sei
    1700:	08 95       	ret

00001702 <uart_start>:

#include "uart.h"
#include "os.h"

void uart_start(void) {
	Disable_Interrupt();
    1702:	f8 94       	cli
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //transmit side of hardware
    1704:	e1 ec       	ldi	r30, 0xC1	; 193
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	88 61       	ori	r24, 0x18	; 24
    170c:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); //receive side of hardware
    170e:	a2 ec       	ldi	r26, 0xC2	; 194
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	8c 91       	ld	r24, X
    1714:	86 60       	ori	r24, 0x06	; 6
    1716:	8c 93       	st	X, r24

	UBRR0L = BAUD_PRESCALE; //set the baud to 9600, have to split it into the two registers
    1718:	87 e6       	ldi	r24, 0x67	; 103
    171a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = (BAUD_PRESCALE >> 8); //high end of baud register
    171e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>

	UCSR0B |= (1 << RXCIE0); //recieve data interrupt, makes sure we don't loose data
    1722:	80 81       	ld	r24, Z
    1724:	80 68       	ori	r24, 0x80	; 128
    1726:	80 83       	st	Z, r24
	Enable_Interrupt();
    1728:	78 94       	sei
    172a:	08 95       	ret

0000172c <uart_write>:
}

void uart_write(char *data) {
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
	Disable_Interrupt();
    1730:	f8 94       	cli
    while (*data) {
    1732:	fc 01       	movw	r30, r24
    1734:	20 81       	ld	r18, Z
    1736:	22 23       	and	r18, r18
    1738:	69 f0       	breq	.+26     	; 0x1754 <uart_write+0x28>
    173a:	dc 01       	movw	r26, r24
    173c:	11 96       	adiw	r26, 0x01	; 1
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    173e:	e0 ec       	ldi	r30, 0xC0	; 192
    1740:	f0 e0       	ldi	r31, 0x00	; 0
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
    1742:	c6 ec       	ldi	r28, 0xC6	; 198
    1744:	d0 e0       	ldi	r29, 0x00	; 0
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
	Disable_Interrupt();
    while (*data) {
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    1746:	90 81       	ld	r25, Z
    1748:	95 ff       	sbrs	r25, 5
    174a:	fd cf       	rjmp	.-6      	; 0x1746 <uart_write+0x1a>
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
    174c:	28 83       	st	Y, r18
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
	Disable_Interrupt();
    while (*data) {
    174e:	2d 91       	ld	r18, X+
    1750:	21 11       	cpse	r18, r1
    1752:	f9 cf       	rjmp	.-14     	; 0x1746 <uart_write+0x1a>
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
        data += 1;//go to new bit in string
    }
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    1754:	e0 ec       	ldi	r30, 0xC0	; 192
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	85 ff       	sbrs	r24, 5
    175c:	fd cf       	rjmp	.-6      	; 0x1758 <uart_write+0x2c>
    UDR0 = '\n';//send a new line just to be sure
    175e:	8a e0       	ldi	r24, 0x0A	; 10
    1760:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	Enable_Interrupt();
    1764:	78 94       	sei
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	08 95       	ret

0000176c <__divsf3>:
    176c:	0c d0       	rcall	.+24     	; 0x1786 <__divsf3x>
    176e:	e6 c0       	rjmp	.+460    	; 0x193c <__fp_round>
    1770:	de d0       	rcall	.+444    	; 0x192e <__fp_pscB>
    1772:	40 f0       	brcs	.+16     	; 0x1784 <__divsf3+0x18>
    1774:	d5 d0       	rcall	.+426    	; 0x1920 <__fp_pscA>
    1776:	30 f0       	brcs	.+12     	; 0x1784 <__divsf3+0x18>
    1778:	21 f4       	brne	.+8      	; 0x1782 <__divsf3+0x16>
    177a:	5f 3f       	cpi	r21, 0xFF	; 255
    177c:	19 f0       	breq	.+6      	; 0x1784 <__divsf3+0x18>
    177e:	c7 c0       	rjmp	.+398    	; 0x190e <__fp_inf>
    1780:	51 11       	cpse	r21, r1
    1782:	10 c1       	rjmp	.+544    	; 0x19a4 <__fp_szero>
    1784:	ca c0       	rjmp	.+404    	; 0x191a <__fp_nan>

00001786 <__divsf3x>:
    1786:	eb d0       	rcall	.+470    	; 0x195e <__fp_split3>
    1788:	98 f3       	brcs	.-26     	; 0x1770 <__divsf3+0x4>

0000178a <__divsf3_pse>:
    178a:	99 23       	and	r25, r25
    178c:	c9 f3       	breq	.-14     	; 0x1780 <__divsf3+0x14>
    178e:	55 23       	and	r21, r21
    1790:	b1 f3       	breq	.-20     	; 0x177e <__divsf3+0x12>
    1792:	95 1b       	sub	r25, r21
    1794:	55 0b       	sbc	r21, r21
    1796:	bb 27       	eor	r27, r27
    1798:	aa 27       	eor	r26, r26
    179a:	62 17       	cp	r22, r18
    179c:	73 07       	cpc	r23, r19
    179e:	84 07       	cpc	r24, r20
    17a0:	38 f0       	brcs	.+14     	; 0x17b0 <__divsf3_pse+0x26>
    17a2:	9f 5f       	subi	r25, 0xFF	; 255
    17a4:	5f 4f       	sbci	r21, 0xFF	; 255
    17a6:	22 0f       	add	r18, r18
    17a8:	33 1f       	adc	r19, r19
    17aa:	44 1f       	adc	r20, r20
    17ac:	aa 1f       	adc	r26, r26
    17ae:	a9 f3       	breq	.-22     	; 0x179a <__divsf3_pse+0x10>
    17b0:	33 d0       	rcall	.+102    	; 0x1818 <__divsf3_pse+0x8e>
    17b2:	0e 2e       	mov	r0, r30
    17b4:	3a f0       	brmi	.+14     	; 0x17c4 <__divsf3_pse+0x3a>
    17b6:	e0 e8       	ldi	r30, 0x80	; 128
    17b8:	30 d0       	rcall	.+96     	; 0x181a <__divsf3_pse+0x90>
    17ba:	91 50       	subi	r25, 0x01	; 1
    17bc:	50 40       	sbci	r21, 0x00	; 0
    17be:	e6 95       	lsr	r30
    17c0:	00 1c       	adc	r0, r0
    17c2:	ca f7       	brpl	.-14     	; 0x17b6 <__divsf3_pse+0x2c>
    17c4:	29 d0       	rcall	.+82     	; 0x1818 <__divsf3_pse+0x8e>
    17c6:	fe 2f       	mov	r31, r30
    17c8:	27 d0       	rcall	.+78     	; 0x1818 <__divsf3_pse+0x8e>
    17ca:	66 0f       	add	r22, r22
    17cc:	77 1f       	adc	r23, r23
    17ce:	88 1f       	adc	r24, r24
    17d0:	bb 1f       	adc	r27, r27
    17d2:	26 17       	cp	r18, r22
    17d4:	37 07       	cpc	r19, r23
    17d6:	48 07       	cpc	r20, r24
    17d8:	ab 07       	cpc	r26, r27
    17da:	b0 e8       	ldi	r27, 0x80	; 128
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <__divsf3_pse+0x56>
    17de:	bb 0b       	sbc	r27, r27
    17e0:	80 2d       	mov	r24, r0
    17e2:	bf 01       	movw	r22, r30
    17e4:	ff 27       	eor	r31, r31
    17e6:	93 58       	subi	r25, 0x83	; 131
    17e8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ea:	2a f0       	brmi	.+10     	; 0x17f6 <__divsf3_pse+0x6c>
    17ec:	9e 3f       	cpi	r25, 0xFE	; 254
    17ee:	51 05       	cpc	r21, r1
    17f0:	68 f0       	brcs	.+26     	; 0x180c <__divsf3_pse+0x82>
    17f2:	8d c0       	rjmp	.+282    	; 0x190e <__fp_inf>
    17f4:	d7 c0       	rjmp	.+430    	; 0x19a4 <__fp_szero>
    17f6:	5f 3f       	cpi	r21, 0xFF	; 255
    17f8:	ec f3       	brlt	.-6      	; 0x17f4 <__divsf3_pse+0x6a>
    17fa:	98 3e       	cpi	r25, 0xE8	; 232
    17fc:	dc f3       	brlt	.-10     	; 0x17f4 <__divsf3_pse+0x6a>
    17fe:	86 95       	lsr	r24
    1800:	77 95       	ror	r23
    1802:	67 95       	ror	r22
    1804:	b7 95       	ror	r27
    1806:	f7 95       	ror	r31
    1808:	9f 5f       	subi	r25, 0xFF	; 255
    180a:	c9 f7       	brne	.-14     	; 0x17fe <__divsf3_pse+0x74>
    180c:	88 0f       	add	r24, r24
    180e:	91 1d       	adc	r25, r1
    1810:	96 95       	lsr	r25
    1812:	87 95       	ror	r24
    1814:	97 f9       	bld	r25, 7
    1816:	08 95       	ret
    1818:	e1 e0       	ldi	r30, 0x01	; 1
    181a:	66 0f       	add	r22, r22
    181c:	77 1f       	adc	r23, r23
    181e:	88 1f       	adc	r24, r24
    1820:	bb 1f       	adc	r27, r27
    1822:	62 17       	cp	r22, r18
    1824:	73 07       	cpc	r23, r19
    1826:	84 07       	cpc	r24, r20
    1828:	ba 07       	cpc	r27, r26
    182a:	20 f0       	brcs	.+8      	; 0x1834 <__divsf3_pse+0xaa>
    182c:	62 1b       	sub	r22, r18
    182e:	73 0b       	sbc	r23, r19
    1830:	84 0b       	sbc	r24, r20
    1832:	ba 0b       	sbc	r27, r26
    1834:	ee 1f       	adc	r30, r30
    1836:	88 f7       	brcc	.-30     	; 0x181a <__divsf3_pse+0x90>
    1838:	e0 95       	com	r30
    183a:	08 95       	ret

0000183c <__fixunssfsi>:
    183c:	98 d0       	rcall	.+304    	; 0x196e <__fp_splitA>
    183e:	88 f0       	brcs	.+34     	; 0x1862 <__fixunssfsi+0x26>
    1840:	9f 57       	subi	r25, 0x7F	; 127
    1842:	90 f0       	brcs	.+36     	; 0x1868 <__fixunssfsi+0x2c>
    1844:	b9 2f       	mov	r27, r25
    1846:	99 27       	eor	r25, r25
    1848:	b7 51       	subi	r27, 0x17	; 23
    184a:	a0 f0       	brcs	.+40     	; 0x1874 <__fixunssfsi+0x38>
    184c:	d1 f0       	breq	.+52     	; 0x1882 <__fixunssfsi+0x46>
    184e:	66 0f       	add	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	88 1f       	adc	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	1a f0       	brmi	.+6      	; 0x185e <__fixunssfsi+0x22>
    1858:	ba 95       	dec	r27
    185a:	c9 f7       	brne	.-14     	; 0x184e <__fixunssfsi+0x12>
    185c:	12 c0       	rjmp	.+36     	; 0x1882 <__fixunssfsi+0x46>
    185e:	b1 30       	cpi	r27, 0x01	; 1
    1860:	81 f0       	breq	.+32     	; 0x1882 <__fixunssfsi+0x46>
    1862:	9f d0       	rcall	.+318    	; 0x19a2 <__fp_zero>
    1864:	b1 e0       	ldi	r27, 0x01	; 1
    1866:	08 95       	ret
    1868:	9c c0       	rjmp	.+312    	; 0x19a2 <__fp_zero>
    186a:	67 2f       	mov	r22, r23
    186c:	78 2f       	mov	r23, r24
    186e:	88 27       	eor	r24, r24
    1870:	b8 5f       	subi	r27, 0xF8	; 248
    1872:	39 f0       	breq	.+14     	; 0x1882 <__fixunssfsi+0x46>
    1874:	b9 3f       	cpi	r27, 0xF9	; 249
    1876:	cc f3       	brlt	.-14     	; 0x186a <__fixunssfsi+0x2e>
    1878:	86 95       	lsr	r24
    187a:	77 95       	ror	r23
    187c:	67 95       	ror	r22
    187e:	b3 95       	inc	r27
    1880:	d9 f7       	brne	.-10     	; 0x1878 <__fixunssfsi+0x3c>
    1882:	3e f4       	brtc	.+14     	; 0x1892 <__fixunssfsi+0x56>
    1884:	90 95       	com	r25
    1886:	80 95       	com	r24
    1888:	70 95       	com	r23
    188a:	61 95       	neg	r22
    188c:	7f 4f       	sbci	r23, 0xFF	; 255
    188e:	8f 4f       	sbci	r24, 0xFF	; 255
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	08 95       	ret

00001894 <__floatunsisf>:
    1894:	e8 94       	clt
    1896:	09 c0       	rjmp	.+18     	; 0x18aa <__floatsisf+0x12>

00001898 <__floatsisf>:
    1898:	97 fb       	bst	r25, 7
    189a:	3e f4       	brtc	.+14     	; 0x18aa <__floatsisf+0x12>
    189c:	90 95       	com	r25
    189e:	80 95       	com	r24
    18a0:	70 95       	com	r23
    18a2:	61 95       	neg	r22
    18a4:	7f 4f       	sbci	r23, 0xFF	; 255
    18a6:	8f 4f       	sbci	r24, 0xFF	; 255
    18a8:	9f 4f       	sbci	r25, 0xFF	; 255
    18aa:	99 23       	and	r25, r25
    18ac:	a9 f0       	breq	.+42     	; 0x18d8 <__floatsisf+0x40>
    18ae:	f9 2f       	mov	r31, r25
    18b0:	96 e9       	ldi	r25, 0x96	; 150
    18b2:	bb 27       	eor	r27, r27
    18b4:	93 95       	inc	r25
    18b6:	f6 95       	lsr	r31
    18b8:	87 95       	ror	r24
    18ba:	77 95       	ror	r23
    18bc:	67 95       	ror	r22
    18be:	b7 95       	ror	r27
    18c0:	f1 11       	cpse	r31, r1
    18c2:	f8 cf       	rjmp	.-16     	; 0x18b4 <__floatsisf+0x1c>
    18c4:	fa f4       	brpl	.+62     	; 0x1904 <__floatsisf+0x6c>
    18c6:	bb 0f       	add	r27, r27
    18c8:	11 f4       	brne	.+4      	; 0x18ce <__floatsisf+0x36>
    18ca:	60 ff       	sbrs	r22, 0
    18cc:	1b c0       	rjmp	.+54     	; 0x1904 <__floatsisf+0x6c>
    18ce:	6f 5f       	subi	r22, 0xFF	; 255
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	8f 4f       	sbci	r24, 0xFF	; 255
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	16 c0       	rjmp	.+44     	; 0x1904 <__floatsisf+0x6c>
    18d8:	88 23       	and	r24, r24
    18da:	11 f0       	breq	.+4      	; 0x18e0 <__floatsisf+0x48>
    18dc:	96 e9       	ldi	r25, 0x96	; 150
    18de:	11 c0       	rjmp	.+34     	; 0x1902 <__floatsisf+0x6a>
    18e0:	77 23       	and	r23, r23
    18e2:	21 f0       	breq	.+8      	; 0x18ec <__floatsisf+0x54>
    18e4:	9e e8       	ldi	r25, 0x8E	; 142
    18e6:	87 2f       	mov	r24, r23
    18e8:	76 2f       	mov	r23, r22
    18ea:	05 c0       	rjmp	.+10     	; 0x18f6 <__floatsisf+0x5e>
    18ec:	66 23       	and	r22, r22
    18ee:	71 f0       	breq	.+28     	; 0x190c <__floatsisf+0x74>
    18f0:	96 e8       	ldi	r25, 0x86	; 134
    18f2:	86 2f       	mov	r24, r22
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	2a f0       	brmi	.+10     	; 0x1904 <__floatsisf+0x6c>
    18fa:	9a 95       	dec	r25
    18fc:	66 0f       	add	r22, r22
    18fe:	77 1f       	adc	r23, r23
    1900:	88 1f       	adc	r24, r24
    1902:	da f7       	brpl	.-10     	; 0x18fa <__floatsisf+0x62>
    1904:	88 0f       	add	r24, r24
    1906:	96 95       	lsr	r25
    1908:	87 95       	ror	r24
    190a:	97 f9       	bld	r25, 7
    190c:	08 95       	ret

0000190e <__fp_inf>:
    190e:	97 f9       	bld	r25, 7
    1910:	9f 67       	ori	r25, 0x7F	; 127
    1912:	80 e8       	ldi	r24, 0x80	; 128
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	08 95       	ret

0000191a <__fp_nan>:
    191a:	9f ef       	ldi	r25, 0xFF	; 255
    191c:	80 ec       	ldi	r24, 0xC0	; 192
    191e:	08 95       	ret

00001920 <__fp_pscA>:
    1920:	00 24       	eor	r0, r0
    1922:	0a 94       	dec	r0
    1924:	16 16       	cp	r1, r22
    1926:	17 06       	cpc	r1, r23
    1928:	18 06       	cpc	r1, r24
    192a:	09 06       	cpc	r0, r25
    192c:	08 95       	ret

0000192e <__fp_pscB>:
    192e:	00 24       	eor	r0, r0
    1930:	0a 94       	dec	r0
    1932:	12 16       	cp	r1, r18
    1934:	13 06       	cpc	r1, r19
    1936:	14 06       	cpc	r1, r20
    1938:	05 06       	cpc	r0, r21
    193a:	08 95       	ret

0000193c <__fp_round>:
    193c:	09 2e       	mov	r0, r25
    193e:	03 94       	inc	r0
    1940:	00 0c       	add	r0, r0
    1942:	11 f4       	brne	.+4      	; 0x1948 <__fp_round+0xc>
    1944:	88 23       	and	r24, r24
    1946:	52 f0       	brmi	.+20     	; 0x195c <__fp_round+0x20>
    1948:	bb 0f       	add	r27, r27
    194a:	40 f4       	brcc	.+16     	; 0x195c <__fp_round+0x20>
    194c:	bf 2b       	or	r27, r31
    194e:	11 f4       	brne	.+4      	; 0x1954 <__fp_round+0x18>
    1950:	60 ff       	sbrs	r22, 0
    1952:	04 c0       	rjmp	.+8      	; 0x195c <__fp_round+0x20>
    1954:	6f 5f       	subi	r22, 0xFF	; 255
    1956:	7f 4f       	sbci	r23, 0xFF	; 255
    1958:	8f 4f       	sbci	r24, 0xFF	; 255
    195a:	9f 4f       	sbci	r25, 0xFF	; 255
    195c:	08 95       	ret

0000195e <__fp_split3>:
    195e:	57 fd       	sbrc	r21, 7
    1960:	90 58       	subi	r25, 0x80	; 128
    1962:	44 0f       	add	r20, r20
    1964:	55 1f       	adc	r21, r21
    1966:	59 f0       	breq	.+22     	; 0x197e <__fp_splitA+0x10>
    1968:	5f 3f       	cpi	r21, 0xFF	; 255
    196a:	71 f0       	breq	.+28     	; 0x1988 <__fp_splitA+0x1a>
    196c:	47 95       	ror	r20

0000196e <__fp_splitA>:
    196e:	88 0f       	add	r24, r24
    1970:	97 fb       	bst	r25, 7
    1972:	99 1f       	adc	r25, r25
    1974:	61 f0       	breq	.+24     	; 0x198e <__fp_splitA+0x20>
    1976:	9f 3f       	cpi	r25, 0xFF	; 255
    1978:	79 f0       	breq	.+30     	; 0x1998 <__fp_splitA+0x2a>
    197a:	87 95       	ror	r24
    197c:	08 95       	ret
    197e:	12 16       	cp	r1, r18
    1980:	13 06       	cpc	r1, r19
    1982:	14 06       	cpc	r1, r20
    1984:	55 1f       	adc	r21, r21
    1986:	f2 cf       	rjmp	.-28     	; 0x196c <__fp_split3+0xe>
    1988:	46 95       	lsr	r20
    198a:	f1 df       	rcall	.-30     	; 0x196e <__fp_splitA>
    198c:	08 c0       	rjmp	.+16     	; 0x199e <__fp_splitA+0x30>
    198e:	16 16       	cp	r1, r22
    1990:	17 06       	cpc	r1, r23
    1992:	18 06       	cpc	r1, r24
    1994:	99 1f       	adc	r25, r25
    1996:	f1 cf       	rjmp	.-30     	; 0x197a <__fp_splitA+0xc>
    1998:	86 95       	lsr	r24
    199a:	71 05       	cpc	r23, r1
    199c:	61 05       	cpc	r22, r1
    199e:	08 94       	sec
    19a0:	08 95       	ret

000019a2 <__fp_zero>:
    19a2:	e8 94       	clt

000019a4 <__fp_szero>:
    19a4:	bb 27       	eor	r27, r27
    19a6:	66 27       	eor	r22, r22
    19a8:	77 27       	eor	r23, r23
    19aa:	cb 01       	movw	r24, r22
    19ac:	97 f9       	bld	r25, 7
    19ae:	08 95       	ret

000019b0 <__mulsf3>:
    19b0:	0b d0       	rcall	.+22     	; 0x19c8 <__mulsf3x>
    19b2:	c4 cf       	rjmp	.-120    	; 0x193c <__fp_round>
    19b4:	b5 df       	rcall	.-150    	; 0x1920 <__fp_pscA>
    19b6:	28 f0       	brcs	.+10     	; 0x19c2 <__mulsf3+0x12>
    19b8:	ba df       	rcall	.-140    	; 0x192e <__fp_pscB>
    19ba:	18 f0       	brcs	.+6      	; 0x19c2 <__mulsf3+0x12>
    19bc:	95 23       	and	r25, r21
    19be:	09 f0       	breq	.+2      	; 0x19c2 <__mulsf3+0x12>
    19c0:	a6 cf       	rjmp	.-180    	; 0x190e <__fp_inf>
    19c2:	ab cf       	rjmp	.-170    	; 0x191a <__fp_nan>
    19c4:	11 24       	eor	r1, r1
    19c6:	ee cf       	rjmp	.-36     	; 0x19a4 <__fp_szero>

000019c8 <__mulsf3x>:
    19c8:	ca df       	rcall	.-108    	; 0x195e <__fp_split3>
    19ca:	a0 f3       	brcs	.-24     	; 0x19b4 <__mulsf3+0x4>

000019cc <__mulsf3_pse>:
    19cc:	95 9f       	mul	r25, r21
    19ce:	d1 f3       	breq	.-12     	; 0x19c4 <__mulsf3+0x14>
    19d0:	95 0f       	add	r25, r21
    19d2:	50 e0       	ldi	r21, 0x00	; 0
    19d4:	55 1f       	adc	r21, r21
    19d6:	62 9f       	mul	r22, r18
    19d8:	f0 01       	movw	r30, r0
    19da:	72 9f       	mul	r23, r18
    19dc:	bb 27       	eor	r27, r27
    19de:	f0 0d       	add	r31, r0
    19e0:	b1 1d       	adc	r27, r1
    19e2:	63 9f       	mul	r22, r19
    19e4:	aa 27       	eor	r26, r26
    19e6:	f0 0d       	add	r31, r0
    19e8:	b1 1d       	adc	r27, r1
    19ea:	aa 1f       	adc	r26, r26
    19ec:	64 9f       	mul	r22, r20
    19ee:	66 27       	eor	r22, r22
    19f0:	b0 0d       	add	r27, r0
    19f2:	a1 1d       	adc	r26, r1
    19f4:	66 1f       	adc	r22, r22
    19f6:	82 9f       	mul	r24, r18
    19f8:	22 27       	eor	r18, r18
    19fa:	b0 0d       	add	r27, r0
    19fc:	a1 1d       	adc	r26, r1
    19fe:	62 1f       	adc	r22, r18
    1a00:	73 9f       	mul	r23, r19
    1a02:	b0 0d       	add	r27, r0
    1a04:	a1 1d       	adc	r26, r1
    1a06:	62 1f       	adc	r22, r18
    1a08:	83 9f       	mul	r24, r19
    1a0a:	a0 0d       	add	r26, r0
    1a0c:	61 1d       	adc	r22, r1
    1a0e:	22 1f       	adc	r18, r18
    1a10:	74 9f       	mul	r23, r20
    1a12:	33 27       	eor	r19, r19
    1a14:	a0 0d       	add	r26, r0
    1a16:	61 1d       	adc	r22, r1
    1a18:	23 1f       	adc	r18, r19
    1a1a:	84 9f       	mul	r24, r20
    1a1c:	60 0d       	add	r22, r0
    1a1e:	21 1d       	adc	r18, r1
    1a20:	82 2f       	mov	r24, r18
    1a22:	76 2f       	mov	r23, r22
    1a24:	6a 2f       	mov	r22, r26
    1a26:	11 24       	eor	r1, r1
    1a28:	9f 57       	subi	r25, 0x7F	; 127
    1a2a:	50 40       	sbci	r21, 0x00	; 0
    1a2c:	8a f0       	brmi	.+34     	; 0x1a50 <__mulsf3_pse+0x84>
    1a2e:	e1 f0       	breq	.+56     	; 0x1a68 <__mulsf3_pse+0x9c>
    1a30:	88 23       	and	r24, r24
    1a32:	4a f0       	brmi	.+18     	; 0x1a46 <__mulsf3_pse+0x7a>
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	bb 1f       	adc	r27, r27
    1a3a:	66 1f       	adc	r22, r22
    1a3c:	77 1f       	adc	r23, r23
    1a3e:	88 1f       	adc	r24, r24
    1a40:	91 50       	subi	r25, 0x01	; 1
    1a42:	50 40       	sbci	r21, 0x00	; 0
    1a44:	a9 f7       	brne	.-22     	; 0x1a30 <__mulsf3_pse+0x64>
    1a46:	9e 3f       	cpi	r25, 0xFE	; 254
    1a48:	51 05       	cpc	r21, r1
    1a4a:	70 f0       	brcs	.+28     	; 0x1a68 <__mulsf3_pse+0x9c>
    1a4c:	60 cf       	rjmp	.-320    	; 0x190e <__fp_inf>
    1a4e:	aa cf       	rjmp	.-172    	; 0x19a4 <__fp_szero>
    1a50:	5f 3f       	cpi	r21, 0xFF	; 255
    1a52:	ec f3       	brlt	.-6      	; 0x1a4e <__mulsf3_pse+0x82>
    1a54:	98 3e       	cpi	r25, 0xE8	; 232
    1a56:	dc f3       	brlt	.-10     	; 0x1a4e <__mulsf3_pse+0x82>
    1a58:	86 95       	lsr	r24
    1a5a:	77 95       	ror	r23
    1a5c:	67 95       	ror	r22
    1a5e:	b7 95       	ror	r27
    1a60:	f7 95       	ror	r31
    1a62:	e7 95       	ror	r30
    1a64:	9f 5f       	subi	r25, 0xFF	; 255
    1a66:	c1 f7       	brne	.-16     	; 0x1a58 <__mulsf3_pse+0x8c>
    1a68:	fe 2b       	or	r31, r30
    1a6a:	88 0f       	add	r24, r24
    1a6c:	91 1d       	adc	r25, r1
    1a6e:	96 95       	lsr	r25
    1a70:	87 95       	ror	r24
    1a72:	97 f9       	bld	r25, 7
    1a74:	08 95       	ret

00001a76 <__tablejump2__>:
    1a76:	ee 0f       	add	r30, r30
    1a78:	ff 1f       	adc	r31, r31
    1a7a:	88 1f       	adc	r24, r24
    1a7c:	8b bf       	out	0x3b, r24	; 59
    1a7e:	07 90       	elpm	r0, Z+
    1a80:	f6 91       	elpm	r31, Z
    1a82:	e0 2d       	mov	r30, r0
    1a84:	19 94       	eijmp

00001a86 <strcat>:
    1a86:	fb 01       	movw	r30, r22
    1a88:	dc 01       	movw	r26, r24
    1a8a:	0d 90       	ld	r0, X+
    1a8c:	00 20       	and	r0, r0
    1a8e:	e9 f7       	brne	.-6      	; 0x1a8a <strcat+0x4>
    1a90:	11 97       	sbiw	r26, 0x01	; 1
    1a92:	01 90       	ld	r0, Z+
    1a94:	0d 92       	st	X+, r0
    1a96:	00 20       	and	r0, r0
    1a98:	e1 f7       	brne	.-8      	; 0x1a92 <strcat+0xc>
    1a9a:	08 95       	ret

00001a9c <strcmp>:
    1a9c:	fb 01       	movw	r30, r22
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	8d 91       	ld	r24, X+
    1aa2:	01 90       	ld	r0, Z+
    1aa4:	80 19       	sub	r24, r0
    1aa6:	01 10       	cpse	r0, r1
    1aa8:	d9 f3       	breq	.-10     	; 0x1aa0 <strcmp+0x4>
    1aaa:	99 0b       	sbc	r25, r25
    1aac:	08 95       	ret

00001aae <itoa>:
    1aae:	45 32       	cpi	r20, 0x25	; 37
    1ab0:	51 05       	cpc	r21, r1
    1ab2:	18 f4       	brcc	.+6      	; 0x1aba <itoa+0xc>
    1ab4:	42 30       	cpi	r20, 0x02	; 2
    1ab6:	08 f0       	brcs	.+2      	; 0x1aba <itoa+0xc>
    1ab8:	04 c0       	rjmp	.+8      	; 0x1ac2 <__itoa_ncheck>
    1aba:	fb 01       	movw	r30, r22
    1abc:	10 82       	st	Z, r1
    1abe:	cb 01       	movw	r24, r22
    1ac0:	08 95       	ret

00001ac2 <__itoa_ncheck>:
    1ac2:	bb 27       	eor	r27, r27
    1ac4:	4a 30       	cpi	r20, 0x0A	; 10
    1ac6:	31 f4       	brne	.+12     	; 0x1ad4 <__itoa_ncheck+0x12>
    1ac8:	99 23       	and	r25, r25
    1aca:	22 f4       	brpl	.+8      	; 0x1ad4 <__itoa_ncheck+0x12>
    1acc:	bd e2       	ldi	r27, 0x2D	; 45
    1ace:	90 95       	com	r25
    1ad0:	81 95       	neg	r24
    1ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad4:	01 c0       	rjmp	.+2      	; 0x1ad8 <__utoa_common>

00001ad6 <__utoa_ncheck>:
    1ad6:	bb 27       	eor	r27, r27

00001ad8 <__utoa_common>:
    1ad8:	fb 01       	movw	r30, r22
    1ada:	55 27       	eor	r21, r21
    1adc:	aa 27       	eor	r26, r26
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	aa 1f       	adc	r26, r26
    1ae4:	a4 17       	cp	r26, r20
    1ae6:	10 f0       	brcs	.+4      	; 0x1aec <__utoa_common+0x14>
    1ae8:	a4 1b       	sub	r26, r20
    1aea:	83 95       	inc	r24
    1aec:	50 51       	subi	r21, 0x10	; 16
    1aee:	b9 f7       	brne	.-18     	; 0x1ade <__utoa_common+0x6>
    1af0:	a0 5d       	subi	r26, 0xD0	; 208
    1af2:	aa 33       	cpi	r26, 0x3A	; 58
    1af4:	08 f0       	brcs	.+2      	; 0x1af8 <__utoa_common+0x20>
    1af6:	a9 5d       	subi	r26, 0xD9	; 217
    1af8:	a1 93       	st	Z+, r26
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	79 f7       	brne	.-34     	; 0x1adc <__utoa_common+0x4>
    1afe:	b1 11       	cpse	r27, r1
    1b00:	b1 93       	st	Z+, r27
    1b02:	11 92       	st	Z+, r1
    1b04:	cb 01       	movw	r24, r22
    1b06:	00 c0       	rjmp	.+0      	; 0x1b08 <strrev>

00001b08 <strrev>:
    1b08:	dc 01       	movw	r26, r24
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	67 2f       	mov	r22, r23
    1b0e:	71 91       	ld	r23, Z+
    1b10:	77 23       	and	r23, r23
    1b12:	e1 f7       	brne	.-8      	; 0x1b0c <strrev+0x4>
    1b14:	32 97       	sbiw	r30, 0x02	; 2
    1b16:	04 c0       	rjmp	.+8      	; 0x1b20 <strrev+0x18>
    1b18:	7c 91       	ld	r23, X
    1b1a:	6d 93       	st	X+, r22
    1b1c:	70 83       	st	Z, r23
    1b1e:	62 91       	ld	r22, -Z
    1b20:	ae 17       	cp	r26, r30
    1b22:	bf 07       	cpc	r27, r31
    1b24:	c8 f3       	brcs	.-14     	; 0x1b18 <strrev+0x10>
    1b26:	08 95       	ret

00001b28 <_exit>:
    1b28:	f8 94       	cli

00001b2a <__stop_program>:
    1b2a:	ff cf       	rjmp	.-2      	; 0x1b2a <__stop_program>
