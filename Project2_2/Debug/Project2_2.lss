
Project2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800200  00001b92  00001c26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000154f  0080026c  0080026c  00001c92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00001d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b2c  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000160e  00000000  00000000  00005a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001610  00000000  00000000  000070aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000060c  00000000  00000000  000086bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b5a  00000000  00000000  00008cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016a3  00000000  00000000  00009822  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000aec5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
       2:	00 00       	nop
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	00 00       	nop
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
       e:	00 00       	nop
      10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
      12:	00 00       	nop
      14:	92 c0       	rjmp	.+292    	; 0x13a <__bad_interrupt>
      16:	00 00       	nop
      18:	90 c0       	rjmp	.+288    	; 0x13a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	7d c4       	rjmp	.+2298   	; 0x940 <__vector_17>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	6a c0       	rjmp	.+212    	; 0x13a <__bad_interrupt>
      66:	00 00       	nop
      68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
      6e:	00 00       	nop
      70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
      72:	00 00       	nop
      74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
      76:	00 00       	nop
      78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
      7e:	00 00       	nop
      80:	c0 c4       	rjmp	.+2432   	; 0xa02 <__vector_32>
      82:	00 00       	nop
      84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
      86:	00 00       	nop
      88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
      8e:	00 00       	nop
      90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
      92:	00 00       	nop
      94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
      96:	00 00       	nop
      98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	48 c0       	rjmp	.+144    	; 0x13a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	46 c0       	rjmp	.+140    	; 0x13a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	44 c0       	rjmp	.+136    	; 0x13a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	42 c0       	rjmp	.+132    	; 0x13a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	40 c0       	rjmp	.+128    	; 0x13a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c0       	rjmp	.+124    	; 0x13a <__bad_interrupt>
      be:	00 00       	nop
      c0:	3c c0       	rjmp	.+120    	; 0x13a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3a c0       	rjmp	.+116    	; 0x13a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	38 c0       	rjmp	.+112    	; 0x13a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	36 c0       	rjmp	.+108    	; 0x13a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	34 c0       	rjmp	.+104    	; 0x13a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	32 c0       	rjmp	.+100    	; 0x13a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	30 c0       	rjmp	.+96     	; 0x13a <__bad_interrupt>
      da:	00 00       	nop
      dc:	2e c0       	rjmp	.+92     	; 0x13a <__bad_interrupt>
      de:	00 00       	nop
      e0:	2c c0       	rjmp	.+88     	; 0x13a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	8c 09       	sbc	r24, r12
      e6:	e9 09       	sbc	r30, r9
      e8:	d2 09       	sbc	r29, r2
      ea:	a4 09       	sbc	r26, r4
      ec:	0e 0a       	sbc	r0, r30
      ee:	4c 0a       	sbc	r4, r28
      f0:	46 0a       	sbc	r4, r22
      f2:	48 0a       	sbc	r4, r24
      f4:	4a 0a       	sbc	r4, r26
      f6:	44 0a       	sbc	r4, r20

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d1 e2       	ldi	r29, 0x21	; 33
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
     108:	12 e0       	ldi	r17, 0x02	; 2
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	e2 e9       	ldi	r30, 0x92	; 146
     110:	fb e1       	ldi	r31, 0x1B	; 27
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	ac 36       	cpi	r26, 0x6C	; 108
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	27 e1       	ldi	r18, 0x17	; 23
     124:	ac e6       	ldi	r26, 0x6C	; 108
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	ab 3b       	cpi	r26, 0xBB	; 187
     12e:	b2 07       	cpc	r27, r18
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 66 0a 	call	0x14cc	; 0x14cc <main>
     136:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     13c:	0f 92       	push	r0
     13e:	1f 92       	push	r1
     140:	2f 92       	push	r2
     142:	3f 92       	push	r3
     144:	4f 92       	push	r4
     146:	5f 92       	push	r5
     148:	6f 92       	push	r6
     14a:	7f 92       	push	r7
     14c:	8f 92       	push	r8
     14e:	9f 92       	push	r9
     150:	af 92       	push	r10
     152:	bf 92       	push	r11
     154:	cf 92       	push	r12
     156:	df 92       	push	r13
     158:	ef 92       	push	r14
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	2f 93       	push	r18
     162:	3f 93       	push	r19
     164:	4f 93       	push	r20
     166:	5f 93       	push	r21
     168:	6f 93       	push	r22
     16a:	7f 93       	push	r23
     16c:	8f 93       	push	r24
     16e:	9f 93       	push	r25
     170:	af 93       	push	r26
     172:	bf 93       	push	r27
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	ef 93       	push	r30
     17a:	ff 93       	push	r31
     17c:	0f b7       	in	r16, 0x3f	; 63
     17e:	0f 93       	push	r16
     180:	fc b7       	in	r31, 0x3c	; 60
     182:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     184:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     186:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     188:	e0 93 99 17 	sts	0x1799, r30	; 0x801799 <KernelSp>
        sts  KernelSp+1, r31
     18c:	f0 93 9a 17 	sts	0x179A, r31	; 0x80179a <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     190:	e0 91 77 17 	lds	r30, 0x1777	; 0x801777 <CurrentSp>
        lds  r31, CurrentSp+1
     194:	f0 91 78 17 	lds	r31, 0x1778	; 0x801778 <CurrentSp+0x1>
        out  SPL, r30
     198:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     19a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     19c:	ff 91       	pop	r31
     19e:	fc bf       	out	0x3c, r31	; 60
     1a0:	0f 91       	pop	r16
     1a2:	0f bf       	out	0x3f, r16	; 63
     1a4:	ff 91       	pop	r31
     1a6:	ef 91       	pop	r30
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	bf 91       	pop	r27
     1ae:	af 91       	pop	r26
     1b0:	9f 91       	pop	r25
     1b2:	8f 91       	pop	r24
     1b4:	7f 91       	pop	r23
     1b6:	6f 91       	pop	r22
     1b8:	5f 91       	pop	r21
     1ba:	4f 91       	pop	r20
     1bc:	3f 91       	pop	r19
     1be:	2f 91       	pop	r18
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	cf 90       	pop	r12
     1cc:	bf 90       	pop	r11
     1ce:	af 90       	pop	r10
     1d0:	9f 90       	pop	r9
     1d2:	8f 90       	pop	r8
     1d4:	7f 90       	pop	r7
     1d6:	6f 90       	pop	r6
     1d8:	5f 90       	pop	r5
     1da:	4f 90       	pop	r4
     1dc:	3f 90       	pop	r3
     1de:	2f 90       	pop	r2
     1e0:	1f 90       	pop	r1
     1e2:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1e4:	18 95       	reti

000001e6 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1e6:	0f 92       	push	r0
     1e8:	1f 92       	push	r1
     1ea:	2f 92       	push	r2
     1ec:	3f 92       	push	r3
     1ee:	4f 92       	push	r4
     1f0:	5f 92       	push	r5
     1f2:	6f 92       	push	r6
     1f4:	7f 92       	push	r7
     1f6:	8f 92       	push	r8
     1f8:	9f 92       	push	r9
     1fa:	af 92       	push	r10
     1fc:	bf 92       	push	r11
     1fe:	cf 92       	push	r12
     200:	df 92       	push	r13
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
     20a:	2f 93       	push	r18
     20c:	3f 93       	push	r19
     20e:	4f 93       	push	r20
     210:	5f 93       	push	r21
     212:	6f 93       	push	r22
     214:	7f 93       	push	r23
     216:	8f 93       	push	r24
     218:	9f 93       	push	r25
     21a:	af 93       	push	r26
     21c:	bf 93       	push	r27
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	ef 93       	push	r30
     224:	ff 93       	push	r31
     226:	0f b7       	in	r16, 0x3f	; 63
     228:	0f 93       	push	r16
     22a:	fc b7       	in	r31, 0x3c	; 60
     22c:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     22e:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     230:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     232:	e0 93 77 17 	sts	0x1777, r30	; 0x801777 <CurrentSp>
        sts  CurrentSp+1, r31
     236:	f0 93 78 17 	sts	0x1778, r31	; 0x801778 <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     23a:	e0 91 99 17 	lds	r30, 0x1799	; 0x801799 <KernelSp>
        lds  r31, KernelSp+1
     23e:	f0 91 9a 17 	lds	r31, 0x179A	; 0x80179a <KernelSp+0x1>
        out  SPL, r30
     242:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     244:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     246:	ff 91       	pop	r31
     248:	fc bf       	out	0x3c, r31	; 60
     24a:	0f 91       	pop	r16
     24c:	0f bf       	out	0x3f, r16	; 63
     24e:	ff 91       	pop	r31
     250:	ef 91       	pop	r30
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	bf 91       	pop	r27
     258:	af 91       	pop	r26
     25a:	9f 91       	pop	r25
     25c:	8f 91       	pop	r24
     25e:	7f 91       	pop	r23
     260:	6f 91       	pop	r22
     262:	5f 91       	pop	r21
     264:	4f 91       	pop	r20
     266:	3f 91       	pop	r19
     268:	2f 91       	pop	r18
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	ff 90       	pop	r15
     270:	ef 90       	pop	r14
     272:	df 90       	pop	r13
     274:	cf 90       	pop	r12
     276:	bf 90       	pop	r11
     278:	af 90       	pop	r10
     27a:	9f 90       	pop	r9
     27c:	8f 90       	pop	r8
     27e:	7f 90       	pop	r7
     280:	6f 90       	pop	r6
     282:	5f 90       	pop	r5
     284:	4f 90       	pop	r4
     286:	3f 90       	pop	r3
     288:	2f 90       	pop	r2
     28a:	1f 90       	pop	r1
     28c:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     28e:	08 95       	ret

00000290 <a_main>:
	Task_Create_RR(ASDF4,5);
	Task_Create_System(ASDF5,6);
	Task_Create_System(ASDF3,3);
	Task_Create_RR(ASDF4,4);
	*/
	Task_Create_System(test_chan_send_recieve, 0);
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	84 e9       	ldi	r24, 0x94	; 148
     296:	9c e0       	ldi	r25, 0x0C	; 12
     298:	52 c2       	rjmp	.+1188   	; 0x73e <Task_Create_System>
     29a:	08 95       	ret

0000029c <idle>:
unsigned int Now(){
	volatile uint16_t t = TCNT1;
	volatile unsigned int temp = t;
	volatile float f = ((temp*1.0)/635)*10;
	return time_since_system_start*10 + (unsigned int)f;
}
     29c:	ff cf       	rjmp	.-2      	; 0x29c <idle>

0000029e <Task_Terminate>:
     29e:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <KernelActive>
     2a2:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <KernelActive+0x1>
     2a6:	89 2b       	or	r24, r25
     2a8:	51 f0       	breq	.+20     	; 0x2be <Task_Terminate+0x20>
     2aa:	f8 94       	cli
     2ac:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <Cp>
     2b0:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <Cp+0x1>
     2b4:	e5 5f       	subi	r30, 0xF5	; 245
     2b6:	fe 4f       	sbci	r31, 0xFE	; 254
     2b8:	86 e0       	ldi	r24, 0x06	; 6
     2ba:	80 83       	st	Z, r24
     2bc:	94 cf       	rjmp	.-216    	; 0x1e6 <Enter_Kernel>
     2be:	08 95       	ret

000002c0 <Kernel_Create_Task_At>:
     2c0:	8f 92       	push	r8
     2c2:	9f 92       	push	r9
     2c4:	af 92       	push	r10
     2c6:	bf 92       	push	r11
     2c8:	cf 92       	push	r12
     2ca:	df 92       	push	r13
     2cc:	ef 92       	push	r14
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	1f 92       	push	r1
     2da:	1f 92       	push	r1
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	9a 83       	std	Y+2, r25	; 0x02
     2e2:	89 83       	std	Y+1, r24	; 0x01
     2e4:	5c 01       	movw	r10, r24
     2e6:	a4 e0       	ldi	r26, 0x04	; 4
     2e8:	aa 0e       	add	r10, r26
     2ea:	b1 1c       	adc	r11, r1
     2ec:	81 2c       	mov	r8, r1
     2ee:	99 24       	eor	r9, r9
     2f0:	93 94       	inc	r9
     2f2:	f5 01       	movw	r30, r10
     2f4:	d4 01       	movw	r26, r8
     2f6:	11 92       	st	Z+, r1
     2f8:	11 97       	sbiw	r26, 0x01	; 1
     2fa:	e9 f7       	brne	.-6      	; 0x2f6 <Kernel_Create_Task_At+0x36>
     2fc:	dc 01       	movw	r26, r24
     2fe:	ad 5f       	subi	r26, 0xFD	; 253
     300:	be 4f       	sbci	r27, 0xFE	; 254
     302:	ef e4       	ldi	r30, 0x4F	; 79
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	ec 93       	st	X, r30
     308:	11 97       	sbiw	r26, 0x01	; 1
     30a:	fc 93       	st	X, r31
     30c:	fc 01       	movw	r30, r24
     30e:	ef 5f       	subi	r30, 0xFF	; 255
     310:	fe 4f       	sbci	r31, 0xFE	; 254
     312:	10 82       	st	Z, r1
     314:	31 97       	sbiw	r30, 0x01	; 1
     316:	60 83       	st	Z, r22
     318:	31 97       	sbiw	r30, 0x01	; 1
     31a:	70 83       	st	Z, r23
     31c:	31 97       	sbiw	r30, 0x01	; 1
     31e:	10 82       	st	Z, r1
     320:	b3 97       	sbiw	r30, 0x23	; 35
     322:	dc 01       	movw	r26, r24
     324:	13 96       	adiw	r26, 0x03	; 3
     326:	fc 93       	st	X, r31
     328:	ee 93       	st	-X, r30
     32a:	12 97       	sbiw	r26, 0x02	; 2
     32c:	be 96       	adiw	r30, 0x2e	; 46
     32e:	71 83       	std	Z+1, r23	; 0x01
     330:	60 83       	st	Z, r22
     332:	32 96       	adiw	r30, 0x02	; 2
     334:	10 82       	st	Z, r1
     336:	60 91 06 05 	lds	r22, 0x0506	; 0x800506 <pCount>
     33a:	70 91 07 05 	lds	r23, 0x0507	; 0x800507 <pCount+0x1>
     33e:	fc 01       	movw	r30, r24
     340:	71 83       	std	Z+1, r23	; 0x01
     342:	60 83       	st	Z, r22
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	9a 81       	ldd	r25, Y+2	; 0x02
     348:	fc 01       	movw	r30, r24
     34a:	eb 5f       	subi	r30, 0xFB	; 251
     34c:	fe 4f       	sbci	r31, 0xFE	; 254
     34e:	51 83       	std	Z+1, r21	; 0x01
     350:	40 83       	st	Z, r20
     352:	32 96       	adiw	r30, 0x02	; 2
     354:	31 83       	std	Z+1, r19	; 0x01
     356:	20 83       	st	Z, r18
     358:	3f 96       	adiw	r30, 0x0f	; 15
     35a:	2f ef       	ldi	r18, 0xFF	; 255
     35c:	3f ef       	ldi	r19, 0xFF	; 255
     35e:	31 83       	std	Z+1, r19	; 0x01
     360:	20 83       	st	Z, r18
     362:	32 96       	adiw	r30, 0x02	; 2
     364:	11 82       	std	Z+1, r1	; 0x01
     366:	10 82       	st	Z, r1
     368:	34 97       	sbiw	r30, 0x04	; 4
     36a:	11 83       	std	Z+1, r17	; 0x01
     36c:	00 83       	st	Z, r16
     36e:	34 97       	sbiw	r30, 0x04	; 4
     370:	d1 82       	std	Z+1, r13	; 0x01
     372:	c0 82       	st	Z, r12
     374:	32 96       	adiw	r30, 0x02	; 2
     376:	f1 82       	std	Z+1, r15	; 0x01
     378:	e0 82       	st	Z, r14
     37a:	20 91 08 05 	lds	r18, 0x0508	; 0x800508 <Tasks>
     37e:	30 91 09 05 	lds	r19, 0x0509	; 0x800509 <Tasks+0x1>
     382:	2f 5f       	subi	r18, 0xFF	; 255
     384:	3f 4f       	sbci	r19, 0xFF	; 255
     386:	30 93 09 05 	sts	0x0509, r19	; 0x800509 <Tasks+0x1>
     38a:	20 93 08 05 	sts	0x0508, r18	; 0x800508 <Tasks>
     38e:	20 91 06 05 	lds	r18, 0x0506	; 0x800506 <pCount>
     392:	30 91 07 05 	lds	r19, 0x0507	; 0x800507 <pCount+0x1>
     396:	2f 5f       	subi	r18, 0xFF	; 255
     398:	3f 4f       	sbci	r19, 0xFF	; 255
     39a:	30 93 07 05 	sts	0x0507, r19	; 0x800507 <pCount+0x1>
     39e:	20 93 06 05 	sts	0x0506, r18	; 0x800506 <pCount>
     3a2:	3e 97       	sbiw	r30, 0x0e	; 14
     3a4:	21 e0       	ldi	r18, 0x01	; 1
     3a6:	20 83       	st	Z, r18
     3a8:	43 30       	cpi	r20, 0x03	; 3
     3aa:	51 05       	cpc	r21, r1
     3ac:	49 f4       	brne	.+18     	; 0x3c0 <Kernel_Create_Task_At+0x100>
     3ae:	42 e0       	ldi	r20, 0x02	; 2
     3b0:	55 e0       	ldi	r21, 0x05	; 5
     3b2:	65 e5       	ldi	r22, 0x55	; 85
     3b4:	77 e1       	ldi	r23, 0x17	; 23
     3b6:	ce 01       	movw	r24, r28
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <enqueue>
     3be:	1c c0       	rjmp	.+56     	; 0x3f8 <Kernel_Create_Task_At+0x138>
     3c0:	42 30       	cpi	r20, 0x02	; 2
     3c2:	51 05       	cpc	r21, r1
     3c4:	71 f4       	brne	.+28     	; 0x3e2 <Kernel_Create_Task_At+0x122>
     3c6:	fc 01       	movw	r30, r24
     3c8:	ea 5e       	subi	r30, 0xEA	; 234
     3ca:	fe 4f       	sbci	r31, 0xFE	; 254
     3cc:	11 83       	std	Z+1, r17	; 0x01
     3ce:	00 83       	st	Z, r16
     3d0:	40 e0       	ldi	r20, 0x00	; 0
     3d2:	55 e0       	ldi	r21, 0x05	; 5
     3d4:	69 e7       	ldi	r22, 0x79	; 121
     3d6:	77 e1       	ldi	r23, 0x17	; 23
     3d8:	ce 01       	movw	r24, r28
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	0e 94 cf 0a 	call	0x159e	; 0x159e <enqueuePeriodic>
     3e0:	0b c0       	rjmp	.+22     	; 0x3f8 <Kernel_Create_Task_At+0x138>
     3e2:	41 30       	cpi	r20, 0x01	; 1
     3e4:	51 05       	cpc	r21, r1
     3e6:	41 f4       	brne	.+16     	; 0x3f8 <Kernel_Create_Task_At+0x138>
     3e8:	4e ef       	ldi	r20, 0xFE	; 254
     3ea:	54 e0       	ldi	r21, 0x04	; 4
     3ec:	6b e9       	ldi	r22, 0x9B	; 155
     3ee:	77 e1       	ldi	r23, 0x17	; 23
     3f0:	ce 01       	movw	r24, r28
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <enqueue>
     3f8:	e9 81       	ldd	r30, Y+1	; 0x01
     3fa:	fa 81       	ldd	r31, Y+2	; 0x02
     3fc:	80 81       	ld	r24, Z
     3fe:	91 81       	ldd	r25, Z+1	; 0x01
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	df 90       	pop	r13
     412:	cf 90       	pop	r12
     414:	bf 90       	pop	r11
     416:	af 90       	pop	r10
     418:	9f 90       	pop	r9
     41a:	8f 90       	pop	r8
     41c:	08 95       	ret

0000041e <Kernel_Create_Task>:
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	e9 01       	movw	r28, r18
     430:	20 91 08 05 	lds	r18, 0x0508	; 0x800508 <Tasks>
     434:	30 91 09 05 	lds	r19, 0x0509	; 0x800509 <Tasks+0x1>
     438:	20 31       	cpi	r18, 0x10	; 16
     43a:	31 05       	cpc	r19, r1
     43c:	41 f1       	breq	.+80     	; 0x48e <Kernel_Create_Task+0x70>
     43e:	20 91 12 06 	lds	r18, 0x0612	; 0x800612 <Process+0x104>
     442:	22 23       	and	r18, r18
     444:	71 f0       	breq	.+28     	; 0x462 <Kernel_Create_Task+0x44>
     446:	a4 e3       	ldi	r26, 0x34	; 52
     448:	b7 e0       	ldi	r27, 0x07	; 7
     44a:	e1 e0       	ldi	r30, 0x01	; 1
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	3c 91       	ld	r19, X
     450:	33 23       	and	r19, r19
     452:	49 f0       	breq	.+18     	; 0x466 <Kernel_Create_Task+0x48>
     454:	31 96       	adiw	r30, 0x01	; 1
     456:	ae 5d       	subi	r26, 0xDE	; 222
     458:	be 4f       	sbci	r27, 0xFE	; 254
     45a:	e0 31       	cpi	r30, 0x10	; 16
     45c:	f1 05       	cpc	r31, r1
     45e:	b9 f7       	brne	.-18     	; 0x44e <Kernel_Create_Task+0x30>
     460:	02 c0       	rjmp	.+4      	; 0x466 <Kernel_Create_Task+0x48>
     462:	e0 e0       	ldi	r30, 0x00	; 0
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	67 01       	movw	r12, r14
     468:	78 01       	movw	r14, r16
     46a:	8e 01       	movw	r16, r28
     46c:	9a 01       	movw	r18, r20
     46e:	ab 01       	movw	r20, r22
     470:	bc 01       	movw	r22, r24
     472:	82 e2       	ldi	r24, 0x22	; 34
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	e8 9f       	mul	r30, r24
     478:	d0 01       	movw	r26, r0
     47a:	e9 9f       	mul	r30, r25
     47c:	b0 0d       	add	r27, r0
     47e:	f8 9f       	mul	r31, r24
     480:	b0 0d       	add	r27, r0
     482:	11 24       	eor	r1, r1
     484:	cd 01       	movw	r24, r26
     486:	82 5f       	subi	r24, 0xF2	; 242
     488:	9a 4f       	sbci	r25, 0xFA	; 250
     48a:	1a df       	rcall	.-460    	; 0x2c0 <Kernel_Create_Task_At>
     48c:	02 c0       	rjmp	.+4      	; 0x492 <Kernel_Create_Task+0x74>
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	ff 90       	pop	r15
     49c:	ef 90       	pop	r14
     49e:	df 90       	pop	r13
     4a0:	cf 90       	pop	r12
     4a2:	08 95       	ret

000004a4 <OS_Init>:
     4a4:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <Tasks+0x1>
     4a8:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <Tasks>
     4ac:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <KernelActive+0x1>
     4b0:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <KernelActive>
     4b4:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <pCount+0x1>
     4b8:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <pCount>
     4bc:	ee e0       	ldi	r30, 0x0E	; 14
     4be:	f5 e0       	ldi	r31, 0x05	; 5
     4c0:	2e e2       	ldi	r18, 0x2E	; 46
     4c2:	37 e1       	ldi	r19, 0x17	; 23
     4c4:	82 e2       	ldi	r24, 0x22	; 34
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	df 01       	movw	r26, r30
     4ca:	ac 01       	movw	r20, r24
     4cc:	1d 92       	st	X+, r1
     4ce:	41 50       	subi	r20, 0x01	; 1
     4d0:	50 40       	sbci	r21, 0x00	; 0
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <OS_Init+0x28>
     4d4:	df 01       	movw	r26, r30
     4d6:	ac 5f       	subi	r26, 0xFC	; 252
     4d8:	be 4f       	sbci	r27, 0xFE	; 254
     4da:	1c 92       	st	X, r1
     4dc:	11 82       	std	Z+1, r1	; 0x01
     4de:	10 82       	st	Z, r1
     4e0:	ee 5d       	subi	r30, 0xDE	; 222
     4e2:	fe 4f       	sbci	r31, 0xFE	; 254
     4e4:	e2 17       	cp	r30, r18
     4e6:	f3 07       	cpc	r31, r19
     4e8:	79 f7       	brne	.-34     	; 0x4c8 <OS_Init+0x24>
     4ea:	ae e6       	ldi	r26, 0x6E	; 110
     4ec:	b2 e0       	ldi	r27, 0x02	; 2
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	29 e2       	ldi	r18, 0x29	; 41
     4f4:	fd 01       	movw	r30, r26
     4f6:	32 2f       	mov	r19, r18
     4f8:	11 92       	st	Z+, r1
     4fa:	3a 95       	dec	r19
     4fc:	e9 f7       	brne	.-6      	; 0x4f8 <OS_Init+0x54>
     4fe:	28 9f       	mul	r18, r24
     500:	f0 01       	movw	r30, r0
     502:	29 9f       	mul	r18, r25
     504:	f0 0d       	add	r31, r0
     506:	11 24       	eor	r1, r1
     508:	e2 59       	subi	r30, 0x92	; 146
     50a:	fd 4f       	sbci	r31, 0xFD	; 253
     50c:	16 a2       	std	Z+38, r1	; 0x26
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	91 83       	std	Z+1, r25	; 0x01
     512:	80 83       	st	Z, r24
     514:	99 96       	adiw	r26, 0x29	; 41
     516:	80 31       	cpi	r24, 0x10	; 16
     518:	91 05       	cpc	r25, r1
     51a:	61 f7       	brne	.-40     	; 0x4f4 <OS_Init+0x50>
     51c:	08 95       	ret

0000051e <OS_Abort>:
     51e:	47 9a       	sbi	0x08, 7	; 8
     520:	47 98       	cbi	0x08, 7	; 8
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <_exit>

0000052a <CheckTimingViolation>:
     52a:	a0 91 00 05 	lds	r26, 0x0500	; 0x800500 <PeriodicCount>
     52e:	b0 91 01 05 	lds	r27, 0x0501	; 0x800501 <PeriodicCount+0x1>
     532:	cd 01       	movw	r24, r26
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	da f0       	brmi	.+54     	; 0x56e <CheckTimingViolation+0x44>
     538:	aa 0f       	add	r26, r26
     53a:	bb 1f       	adc	r27, r27
     53c:	a7 58       	subi	r26, 0x87	; 135
     53e:	b8 4e       	sbci	r27, 0xE8	; 232
     540:	49 e7       	ldi	r20, 0x79	; 121
     542:	57 e1       	ldi	r21, 0x17	; 23
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	fe 91       	ld	r31, -X
     54a:	ee 91       	ld	r30, -X
     54c:	ea 5e       	subi	r30, 0xEA	; 234
     54e:	fe 4f       	sbci	r31, 0xFE	; 254
     550:	80 81       	ld	r24, Z
     552:	91 81       	ldd	r25, Z+1	; 0x01
     554:	89 2b       	or	r24, r25
     556:	11 f4       	brne	.+4      	; 0x55c <CheckTimingViolation+0x32>
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	a4 17       	cp	r26, r20
     55e:	b5 07       	cpc	r27, r21
     560:	99 f7       	brne	.-26     	; 0x548 <CheckTimingViolation+0x1e>
     562:	22 30       	cpi	r18, 0x02	; 2
     564:	31 05       	cpc	r19, r1
     566:	1c f0       	brlt	.+6      	; 0x56e <CheckTimingViolation+0x44>
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	d8 cf       	rjmp	.-80     	; 0x51e <OS_Abort>
     56e:	08 95       	ret

00000570 <Dispatch>:
     570:	dc df       	rcall	.-72     	; 0x52a <CheckTimingViolation>
     572:	62 e0       	ldi	r22, 0x02	; 2
     574:	75 e0       	ldi	r23, 0x05	; 5
     576:	85 e5       	ldi	r24, 0x55	; 85
     578:	97 e1       	ldi	r25, 0x17	; 23
     57a:	e7 d7       	rcall	.+4046   	; 0x154a <dequeue>
     57c:	90 93 0d 05 	sts	0x050D, r25	; 0x80050d <Cp+0x1>
     580:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <Cp>
     584:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <PeriodicCount>
     588:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <PeriodicCount+0x1>
     58c:	89 2b       	or	r24, r25
     58e:	e1 f0       	breq	.+56     	; 0x5c8 <Dispatch+0x58>
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	75 e0       	ldi	r23, 0x05	; 5
     594:	89 e7       	ldi	r24, 0x79	; 121
     596:	97 e1       	ldi	r25, 0x17	; 23
     598:	0e 94 32 0b 	call	0x1664	; 0x1664 <peek>
     59c:	fc 01       	movw	r30, r24
     59e:	ea 5e       	subi	r30, 0xEA	; 234
     5a0:	fe 4f       	sbci	r31, 0xFE	; 254
     5a2:	80 81       	ld	r24, Z
     5a4:	91 81       	ldd	r25, Z+1	; 0x01
     5a6:	89 2b       	or	r24, r25
     5a8:	79 f4       	brne	.+30     	; 0x5c8 <Dispatch+0x58>
     5aa:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <Cp>
     5ae:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <Cp+0x1>
     5b2:	89 2b       	or	r24, r25
     5b4:	01 f5       	brne	.+64     	; 0x5f6 <Dispatch+0x86>
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	75 e0       	ldi	r23, 0x05	; 5
     5ba:	89 e7       	ldi	r24, 0x79	; 121
     5bc:	97 e1       	ldi	r25, 0x17	; 23
     5be:	c5 d7       	rcall	.+3978   	; 0x154a <dequeue>
     5c0:	90 93 0d 05 	sts	0x050D, r25	; 0x80050d <Cp+0x1>
     5c4:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <Cp>
     5c8:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <Cp>
     5cc:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <Cp+0x1>
     5d0:	89 2b       	or	r24, r25
     5d2:	89 f4       	brne	.+34     	; 0x5f6 <Dispatch+0x86>
     5d4:	6e ef       	ldi	r22, 0xFE	; 254
     5d6:	74 e0       	ldi	r23, 0x04	; 4
     5d8:	8b e9       	ldi	r24, 0x9B	; 155
     5da:	97 e1       	ldi	r25, 0x17	; 23
     5dc:	b6 d7       	rcall	.+3948   	; 0x154a <dequeue>
     5de:	90 93 0d 05 	sts	0x050D, r25	; 0x80050d <Cp+0x1>
     5e2:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <Cp>
     5e6:	89 2b       	or	r24, r25
     5e8:	31 f4       	brne	.+12     	; 0x5f6 <Dispatch+0x86>
     5ea:	8e e0       	ldi	r24, 0x0E	; 14
     5ec:	95 e0       	ldi	r25, 0x05	; 5
     5ee:	90 93 0d 05 	sts	0x050D, r25	; 0x80050d <Cp+0x1>
     5f2:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <Cp>
     5f6:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <Cp>
     5fa:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <Cp+0x1>
     5fe:	82 81       	ldd	r24, Z+2	; 0x02
     600:	93 81       	ldd	r25, Z+3	; 0x03
     602:	90 93 78 17 	sts	0x1778, r25	; 0x801778 <CurrentSp+0x1>
     606:	80 93 77 17 	sts	0x1777, r24	; 0x801777 <CurrentSp>
     60a:	ec 5f       	subi	r30, 0xFC	; 252
     60c:	fe 4f       	sbci	r31, 0xFE	; 254
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	80 83       	st	Z, r24
     612:	08 95       	ret

00000614 <Task_Create>:
     614:	6f 92       	push	r6
     616:	7f 92       	push	r7
     618:	8f 92       	push	r8
     61a:	9f 92       	push	r9
     61c:	af 92       	push	r10
     61e:	bf 92       	push	r11
     620:	cf 92       	push	r12
     622:	df 92       	push	r13
     624:	ef 92       	push	r14
     626:	ff 92       	push	r15
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <KernelActive>
     634:	f0 91 0b 05 	lds	r31, 0x050B	; 0x80050b <KernelActive+0x1>
     638:	ef 2b       	or	r30, r31
     63a:	09 f4       	brne	.+2      	; 0x63e <Task_Create+0x2a>
     63c:	69 c0       	rjmp	.+210    	; 0x710 <Task_Create+0xfc>
     63e:	f8 94       	cli
     640:	63 30       	cpi	r22, 0x03	; 3
     642:	71 05       	cpc	r23, r1
     644:	49 f4       	brne	.+18     	; 0x658 <Task_Create+0x44>
     646:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <Cp>
     64a:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <Cp+0x1>
     64e:	e5 5f       	subi	r30, 0xF5	; 245
     650:	fe 4f       	sbci	r31, 0xFE	; 254
     652:	62 e0       	ldi	r22, 0x02	; 2
     654:	60 83       	st	Z, r22
     656:	22 c0       	rjmp	.+68     	; 0x69c <Task_Create+0x88>
     658:	62 30       	cpi	r22, 0x02	; 2
     65a:	71 05       	cpc	r23, r1
     65c:	81 f4       	brne	.+32     	; 0x67e <Task_Create+0x6a>
     65e:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <Cp>
     662:	70 91 0d 05 	lds	r23, 0x050D	; 0x80050d <Cp+0x1>
     666:	fb 01       	movw	r30, r22
     668:	e5 5f       	subi	r30, 0xF5	; 245
     66a:	fe 4f       	sbci	r31, 0xFE	; 254
     66c:	a4 e0       	ldi	r26, 0x04	; 4
     66e:	a0 83       	st	Z, r26
     670:	3b 96       	adiw	r30, 0x0b	; 11
     672:	b9 01       	movw	r22, r18
     674:	6e 0d       	add	r22, r14
     676:	7f 1d       	adc	r23, r15
     678:	71 83       	std	Z+1, r23	; 0x01
     67a:	60 83       	st	Z, r22
     67c:	0f c0       	rjmp	.+30     	; 0x69c <Task_Create+0x88>
     67e:	61 30       	cpi	r22, 0x01	; 1
     680:	71 05       	cpc	r23, r1
     682:	49 f4       	brne	.+18     	; 0x696 <Task_Create+0x82>
     684:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <Cp>
     688:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <Cp+0x1>
     68c:	e5 5f       	subi	r30, 0xF5	; 245
     68e:	fe 4f       	sbci	r31, 0xFE	; 254
     690:	63 e0       	ldi	r22, 0x03	; 3
     692:	60 83       	st	Z, r22
     694:	03 c0       	rjmp	.+6      	; 0x69c <Task_Create+0x88>
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	41 df       	rcall	.-382    	; 0x51e <OS_Abort>
     69c:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <Cp>
     6a0:	70 91 0d 05 	lds	r23, 0x050D	; 0x80050d <Cp+0x1>
     6a4:	fb 01       	movw	r30, r22
     6a6:	e7 5f       	subi	r30, 0xF7	; 247
     6a8:	fe 4f       	sbci	r31, 0xFE	; 254
     6aa:	91 83       	std	Z+1, r25	; 0x01
     6ac:	80 83       	st	Z, r24
     6ae:	32 97       	sbiw	r30, 0x02	; 2
     6b0:	60 80       	ld	r6, Z
     6b2:	71 80       	ldd	r7, Z+1	; 0x01
     6b4:	51 83       	std	Z+1, r21	; 0x01
     6b6:	40 83       	st	Z, r20
     6b8:	db 01       	movw	r26, r22
     6ba:	ac 5e       	subi	r26, 0xEC	; 236
     6bc:	be 4f       	sbci	r27, 0xFE	; 254
     6be:	ad 90       	ld	r10, X+
     6c0:	bc 90       	ld	r11, X
     6c2:	11 97       	sbiw	r26, 0x01	; 1
     6c4:	3b 96       	adiw	r30, 0x0b	; 11
     6c6:	c0 80       	ld	r12, Z
     6c8:	d1 80       	ldd	r13, Z+1	; 0x01
     6ca:	60 5f       	subi	r22, 0xF0	; 240
     6cc:	7e 4f       	sbci	r23, 0xFE	; 254
     6ce:	eb 01       	movw	r28, r22
     6d0:	88 80       	ld	r8, Y
     6d2:	99 80       	ldd	r9, Y+1	; 0x01
     6d4:	11 96       	adiw	r26, 0x01	; 1
     6d6:	3c 93       	st	X, r19
     6d8:	2e 93       	st	-X, r18
     6da:	11 83       	std	Z+1, r17	; 0x01
     6dc:	00 83       	st	Z, r16
     6de:	f9 82       	std	Y+1, r15	; 0x01
     6e0:	e8 82       	st	Y, r14
     6e2:	81 dd       	rcall	.-1278   	; 0x1e6 <Enter_Kernel>
     6e4:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <Cp>
     6e8:	30 91 0d 05 	lds	r19, 0x050D	; 0x80050d <Cp+0x1>
     6ec:	f9 01       	movw	r30, r18
     6ee:	e4 5f       	subi	r30, 0xF4	; 244
     6f0:	fe 4f       	sbci	r31, 0xFE	; 254
     6f2:	80 81       	ld	r24, Z
     6f4:	91 81       	ldd	r25, Z+1	; 0x01
     6f6:	38 96       	adiw	r30, 0x08	; 8
     6f8:	b1 82       	std	Z+1, r11	; 0x01
     6fa:	a0 82       	st	Z, r10
     6fc:	32 97       	sbiw	r30, 0x02	; 2
     6fe:	d1 82       	std	Z+1, r13	; 0x01
     700:	c0 82       	st	Z, r12
     702:	32 97       	sbiw	r30, 0x02	; 2
     704:	91 82       	std	Z+1, r9	; 0x01
     706:	80 82       	st	Z, r8
     708:	39 97       	sbiw	r30, 0x09	; 9
     70a:	71 82       	std	Z+1, r7	; 0x01
     70c:	60 82       	st	Z, r6
     70e:	08 c0       	rjmp	.+16     	; 0x720 <Task_Create+0x10c>
     710:	ee 24       	eor	r14, r14
     712:	ea 94       	dec	r14
     714:	fe 2c       	mov	r15, r14
     716:	0f ef       	ldi	r16, 0xFF	; 255
     718:	1f ef       	ldi	r17, 0xFF	; 255
     71a:	2f ef       	ldi	r18, 0xFF	; 255
     71c:	3f ef       	ldi	r19, 0xFF	; 255
     71e:	7f de       	rcall	.-770    	; 0x41e <Kernel_Create_Task>
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	cf 90       	pop	r12
     730:	bf 90       	pop	r11
     732:	af 90       	pop	r10
     734:	9f 90       	pop	r9
     736:	8f 90       	pop	r8
     738:	7f 90       	pop	r7
     73a:	6f 90       	pop	r6
     73c:	08 95       	ret

0000073e <Task_Create_System>:
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	ab 01       	movw	r20, r22
     748:	ee 24       	eor	r14, r14
     74a:	ea 94       	dec	r14
     74c:	fe 2c       	mov	r15, r14
     74e:	0f ef       	ldi	r16, 0xFF	; 255
     750:	1f ef       	ldi	r17, 0xFF	; 255
     752:	2f ef       	ldi	r18, 0xFF	; 255
     754:	3f ef       	ldi	r19, 0xFF	; 255
     756:	63 e0       	ldi	r22, 0x03	; 3
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	5c df       	rcall	.-328    	; 0x614 <Task_Create>
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	ff 90       	pop	r15
     762:	ef 90       	pop	r14
     764:	08 95       	ret

00000766 <Task_Create_RR>:
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	ab 01       	movw	r20, r22
     770:	ee 24       	eor	r14, r14
     772:	ea 94       	dec	r14
     774:	fe 2c       	mov	r15, r14
     776:	0f ef       	ldi	r16, 0xFF	; 255
     778:	1f ef       	ldi	r17, 0xFF	; 255
     77a:	2f ef       	ldi	r18, 0xFF	; 255
     77c:	3f ef       	ldi	r19, 0xFF	; 255
     77e:	61 e0       	ldi	r22, 0x01	; 1
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	48 df       	rcall	.-368    	; 0x614 <Task_Create>
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	ff 90       	pop	r15
     78a:	ef 90       	pop	r14
     78c:	08 95       	ret

0000078e <Task_Create_Period>:
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	7a 01       	movw	r14, r20
     798:	a8 01       	movw	r20, r16
     79a:	2e 15       	cp	r18, r14
     79c:	3f 05       	cpc	r19, r15
     79e:	18 f0       	brcs	.+6      	; 0x7a6 <Task_Create_Period+0x18>
     7a0:	83 e0       	ldi	r24, 0x03	; 3
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	bc de       	rcall	.-648    	; 0x51e <OS_Abort>
     7a6:	89 01       	movw	r16, r18
     7a8:	9a 01       	movw	r18, r20
     7aa:	ab 01       	movw	r20, r22
     7ac:	62 e0       	ldi	r22, 0x02	; 2
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	31 df       	rcall	.-414    	; 0x614 <Task_Create>
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	ff 90       	pop	r15
     7b8:	ef 90       	pop	r14
     7ba:	08 95       	ret

000007bc <Task_Create_Idle>:
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <KernelActive>
     7c8:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <KernelActive+0x1>
     7cc:	89 2b       	or	r24, r25
     7ce:	f1 f0       	breq	.+60     	; 0x80c <Task_Create_Idle+0x50>
     7d0:	f8 94       	cli
     7d2:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <Cp>
     7d6:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <Cp+0x1>
     7da:	fc 01       	movw	r30, r24
     7dc:	e7 5f       	subi	r30, 0xF7	; 247
     7de:	fe 4f       	sbci	r31, 0xFE	; 254
     7e0:	2e e4       	ldi	r18, 0x4E	; 78
     7e2:	31 e0       	ldi	r19, 0x01	; 1
     7e4:	31 83       	std	Z+1, r19	; 0x01
     7e6:	20 83       	st	Z, r18
     7e8:	34 97       	sbiw	r30, 0x04	; 4
     7ea:	24 e0       	ldi	r18, 0x04	; 4
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	31 83       	std	Z+1, r19	; 0x01
     7f0:	20 83       	st	Z, r18
     7f2:	32 96       	adiw	r30, 0x02	; 2
     7f4:	11 82       	std	Z+1, r1	; 0x01
     7f6:	10 82       	st	Z, r1
     7f8:	f6 dc       	rcall	.-1556   	; 0x1e6 <Enter_Kernel>
     7fa:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <Cp>
     7fe:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <Cp+0x1>
     802:	e4 5f       	subi	r30, 0xF4	; 244
     804:	fe 4f       	sbci	r31, 0xFE	; 254
     806:	80 81       	ld	r24, Z
     808:	91 81       	ldd	r25, Z+1	; 0x01
     80a:	0e c0       	rjmp	.+28     	; 0x828 <Task_Create_Idle+0x6c>
     80c:	ee 24       	eor	r14, r14
     80e:	ea 94       	dec	r14
     810:	fe 2c       	mov	r15, r14
     812:	0f ef       	ldi	r16, 0xFF	; 255
     814:	1f ef       	ldi	r17, 0xFF	; 255
     816:	2f ef       	ldi	r18, 0xFF	; 255
     818:	3f ef       	ldi	r19, 0xFF	; 255
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	64 e0       	ldi	r22, 0x04	; 4
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	8e e4       	ldi	r24, 0x4E	; 78
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	fb dd       	rcall	.-1034   	; 0x41e <Kernel_Create_Task>
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	08 95       	ret

00000832 <Run_Next>:
     832:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <KernelActive>
     836:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <KernelActive+0x1>
     83a:	89 2b       	or	r24, r25
     83c:	09 f4       	brne	.+2      	; 0x840 <Run_Next+0xe>
     83e:	41 c0       	rjmp	.+130    	; 0x8c2 <Run_Next+0x90>
     840:	f8 94       	cli
     842:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <Cp>
     846:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <Cp+0x1>
     84a:	fc 01       	movw	r30, r24
     84c:	eb 5f       	subi	r30, 0xFB	; 251
     84e:	fe 4f       	sbci	r31, 0xFE	; 254
     850:	20 81       	ld	r18, Z
     852:	31 81       	ldd	r19, Z+1	; 0x01
     854:	23 30       	cpi	r18, 0x03	; 3
     856:	31 05       	cpc	r19, r1
     858:	21 f4       	brne	.+8      	; 0x862 <Run_Next+0x30>
     85a:	36 96       	adiw	r30, 0x06	; 6
     85c:	8a e0       	ldi	r24, 0x0A	; 10
     85e:	80 83       	st	Z, r24
     860:	2f c0       	rjmp	.+94     	; 0x8c0 <Run_Next+0x8e>
     862:	fc 01       	movw	r30, r24
     864:	eb 5f       	subi	r30, 0xFB	; 251
     866:	fe 4f       	sbci	r31, 0xFE	; 254
     868:	20 81       	ld	r18, Z
     86a:	31 81       	ldd	r19, Z+1	; 0x01
     86c:	22 30       	cpi	r18, 0x02	; 2
     86e:	31 05       	cpc	r19, r1
     870:	11 f5       	brne	.+68     	; 0x8b6 <Run_Next+0x84>
     872:	73 96       	adiw	r30, 0x13	; 19
     874:	40 81       	ld	r20, Z
     876:	51 81       	ldd	r21, Z+1	; 0x01
     878:	36 97       	sbiw	r30, 0x06	; 6
     87a:	20 81       	ld	r18, Z
     87c:	31 81       	ldd	r19, Z+1	; 0x01
     87e:	42 17       	cp	r20, r18
     880:	53 07       	cpc	r21, r19
     882:	18 f0       	brcs	.+6      	; 0x88a <Run_Next+0x58>
     884:	84 e0       	ldi	r24, 0x04	; 4
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	4a de       	rcall	.-876    	; 0x51e <OS_Abort>
     88a:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <SysCount>
     88e:	30 91 03 05 	lds	r19, 0x0503	; 0x800503 <SysCount+0x1>
     892:	12 16       	cp	r1, r18
     894:	13 06       	cpc	r1, r19
     896:	4c f4       	brge	.+18     	; 0x8aa <Run_Next+0x78>
     898:	fc 01       	movw	r30, r24
     89a:	ea 5e       	subi	r30, 0xEA	; 234
     89c:	fe 4f       	sbci	r31, 0xFE	; 254
     89e:	11 82       	std	Z+1, r1	; 0x01
     8a0:	10 82       	st	Z, r1
     8a2:	3b 97       	sbiw	r30, 0x0b	; 11
     8a4:	85 e0       	ldi	r24, 0x05	; 5
     8a6:	80 83       	st	Z, r24
     8a8:	0b c0       	rjmp	.+22     	; 0x8c0 <Run_Next+0x8e>
     8aa:	fc 01       	movw	r30, r24
     8ac:	e5 5f       	subi	r30, 0xF5	; 245
     8ae:	fe 4f       	sbci	r31, 0xFE	; 254
     8b0:	8a e0       	ldi	r24, 0x0A	; 10
     8b2:	80 83       	st	Z, r24
     8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <Run_Next+0x8e>
     8b6:	fc 01       	movw	r30, r24
     8b8:	e5 5f       	subi	r30, 0xF5	; 245
     8ba:	fe 4f       	sbci	r31, 0xFE	; 254
     8bc:	85 e0       	ldi	r24, 0x05	; 5
     8be:	80 83       	st	Z, r24
     8c0:	92 cc       	rjmp	.-1756   	; 0x1e6 <Enter_Kernel>
     8c2:	08 95       	ret

000008c4 <Task_GetArg>:
     8c4:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <Cp>
     8c8:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <Cp+0x1>
     8cc:	e9 5f       	subi	r30, 0xF9	; 249
     8ce:	fe 4f       	sbci	r31, 0xFE	; 254
     8d0:	80 81       	ld	r24, Z
     8d2:	91 81       	ldd	r25, Z+1	; 0x01
     8d4:	08 95       	ret

000008d6 <setup>:
/**
  * Setup pins and timers
  */
void setup() {
	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
     8d6:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
     8d8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
     8dc:	e1 e8       	ldi	r30, 0x81	; 129
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
     8e2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     8e6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
     8ea:	80 e7       	ldi	r24, 0x70	; 112
     8ec:	92 e0       	ldi	r25, 0x02	; 2
     8ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     8f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
     8f6:	80 81       	ld	r24, Z
     8f8:	88 60       	ori	r24, 0x08	; 8
     8fa:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
     8fc:	80 81       	ld	r24, Z
     8fe:	84 60       	ori	r24, 0x04	; 4
     900:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
     902:	ef e6       	ldi	r30, 0x6F	; 111
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	80 81       	ld	r24, Z
     908:	82 60       	ori	r24, 0x02	; 2
     90a:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
     90c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
     910:	e1 e9       	ldi	r30, 0x91	; 145
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
     916:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     91a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
     91e:	83 e2       	ldi	r24, 0x23	; 35
     920:	94 ef       	ldi	r25, 0xF4	; 244
     922:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     926:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
     92a:	80 81       	ld	r24, Z
     92c:	88 60       	ori	r24, 0x08	; 8
     92e:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
     930:	80 81       	ld	r24, Z
     932:	84 60       	ori	r24, 0x04	; 4
     934:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>

	Enable_Interrupt();
     93c:	78 94       	sei
     93e:	08 95       	ret

00000940 <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) { 
     940:	1f 92       	push	r1
     942:	0f 92       	push	r0
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	0f 92       	push	r0
     948:	11 24       	eor	r1, r1
     94a:	0b b6       	in	r0, 0x3b	; 59
     94c:	0f 92       	push	r0
     94e:	2f 93       	push	r18
     950:	3f 93       	push	r19
     952:	4f 93       	push	r20
     954:	5f 93       	push	r21
     956:	6f 93       	push	r22
     958:	7f 93       	push	r23
     95a:	8f 93       	push	r24
     95c:	9f 93       	push	r25
     95e:	af 93       	push	r26
     960:	bf 93       	push	r27
     962:	ef 93       	push	r30
     964:	ff 93       	push	r31
	int i;
	if (Cp->priority == PERIODIC) {
     966:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <Cp>
     96a:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <Cp+0x1>
     96e:	fc 01       	movw	r30, r24
     970:	eb 5f       	subi	r30, 0xFB	; 251
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	20 81       	ld	r18, Z
     976:	31 81       	ldd	r19, Z+1	; 0x01
     978:	22 30       	cpi	r18, 0x02	; 2
     97a:	31 05       	cpc	r19, r1
     97c:	31 f4       	brne	.+12     	; 0x98a <__vector_17+0x4a>
		Cp->runningTime++;
     97e:	73 96       	adiw	r30, 0x13	; 19
     980:	80 81       	ld	r24, Z
     982:	91 81       	ldd	r25, Z+1	; 0x01
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	91 83       	std	Z+1, r25	; 0x01
     988:	80 83       	st	Z, r24
	}
	time_since_system_start++;
     98a:	80 91 75 17 	lds	r24, 0x1775	; 0x801775 <time_since_system_start>
     98e:	90 91 76 17 	lds	r25, 0x1776	; 0x801776 <time_since_system_start+0x1>
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	90 93 76 17 	sts	0x1776, r25	; 0x801776 <time_since_system_start+0x1>
     998:	80 93 75 17 	sts	0x1775, r24	; 0x801775 <time_since_system_start>
	for (i = PeriodicCount-1; i >= 0; i--) 
     99c:	a0 91 00 05 	lds	r26, 0x0500	; 0x800500 <PeriodicCount>
     9a0:	b0 91 01 05 	lds	r27, 0x0501	; 0x800501 <PeriodicCount+0x1>
     9a4:	cd 01       	movw	r24, r26
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	c2 f0       	brmi	.+48     	; 0x9da <__vector_17+0x9a>
     9aa:	aa 0f       	add	r26, r26
     9ac:	bb 1f       	adc	r27, r27
     9ae:	a7 58       	subi	r26, 0x87	; 135
     9b0:	b8 4e       	sbci	r27, 0xE8	; 232
     9b2:	49 e7       	ldi	r20, 0x79	; 121
     9b4:	57 e1       	ldi	r21, 0x17	; 23
		if (PeriodicQueue[i]->countdown > 0) PeriodicQueue[i]->countdown -= 1;
     9b6:	9e 91       	ld	r25, -X
     9b8:	8e 91       	ld	r24, -X
     9ba:	fc 01       	movw	r30, r24
     9bc:	ea 5e       	subi	r30, 0xEA	; 234
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	20 81       	ld	r18, Z
     9c2:	31 81       	ldd	r19, Z+1	; 0x01
     9c4:	12 16       	cp	r1, r18
     9c6:	13 06       	cpc	r1, r19
     9c8:	2c f4       	brge	.+10     	; 0x9d4 <__vector_17+0x94>
     9ca:	80 81       	ld	r24, Z
     9cc:	91 81       	ldd	r25, Z+1	; 0x01
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	91 83       	std	Z+1, r25	; 0x01
     9d2:	80 83       	st	Z, r24
	int i;
	if (Cp->priority == PERIODIC) {
		Cp->runningTime++;
	}
	time_since_system_start++;
	for (i = PeriodicCount-1; i >= 0; i--) 
     9d4:	a4 17       	cp	r26, r20
     9d6:	b5 07       	cpc	r27, r21
     9d8:	71 f7       	brne	.-36     	; 0x9b6 <__vector_17+0x76>
		if (PeriodicQueue[i]->countdown > 0) PeriodicQueue[i]->countdown -= 1;
	Run_Next();
     9da:	2b df       	rcall	.-426    	; 0x832 <Run_Next>
}
     9dc:	ff 91       	pop	r31
     9de:	ef 91       	pop	r30
     9e0:	bf 91       	pop	r27
     9e2:	af 91       	pop	r26
     9e4:	9f 91       	pop	r25
     9e6:	8f 91       	pop	r24
     9e8:	7f 91       	pop	r23
     9ea:	6f 91       	pop	r22
     9ec:	5f 91       	pop	r21
     9ee:	4f 91       	pop	r20
     9f0:	3f 91       	pop	r19
     9f2:	2f 91       	pop	r18
     9f4:	0f 90       	pop	r0
     9f6:	0b be       	out	0x3b, r0	; 59
     9f8:	0f 90       	pop	r0
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	0f 90       	pop	r0
     9fe:	1f 90       	pop	r1
     a00:	18 95       	reti

00000a02 <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) { // PERIOD: 1 s
     a02:	1f 92       	push	r1
     a04:	0f 92       	push	r0
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	0f 92       	push	r0
     a0a:	11 24       	eor	r1, r1
     a0c:	8f 93       	push	r24
     a0e:	9f 93       	push	r25
	tickOverflowCount += 1;
     a10:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <tickOverflowCount>
     a14:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <tickOverflowCount+0x1>
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <tickOverflowCount+0x1>
     a1e:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <tickOverflowCount>
}
     a22:	9f 91       	pop	r25
     a24:	8f 91       	pop	r24
     a26:	0f 90       	pop	r0
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	0f 90       	pop	r0
     a2c:	1f 90       	pop	r1
     a2e:	18 95       	reti

00000a30 <Chan_Init>:
 */

 CHAN Chan_Init() {
	int x;

	if (Channels == MAXCHAN) return NULL;  /* Too many task! */
     a30:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end>
     a34:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <__data_end+0x1>
     a38:	40 97       	sbiw	r24, 0x10	; 16
     a3a:	b1 f1       	breq	.+108    	; 0xaa8 <Chan_Init+0x78>

	/* find an UNITIALIZED CD that we can use  */
	for (x = 0; x < MAXCHAN; x++) {
		if (ChannelArray[x].state == UNITIALIZED) {
     a3c:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <ChannelArray+0x26>
     a40:	88 23       	and	r24, r24
     a42:	71 f0       	breq	.+28     	; 0xa60 <Chan_Init+0x30>
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	39 e2       	ldi	r19, 0x29	; 41
     a4a:	38 9f       	mul	r19, r24
     a4c:	f0 01       	movw	r30, r0
     a4e:	39 9f       	mul	r19, r25
     a50:	f0 0d       	add	r31, r0
     a52:	11 24       	eor	r1, r1
     a54:	e2 59       	subi	r30, 0x92	; 146
     a56:	fd 4f       	sbci	r31, 0xFD	; 253
     a58:	26 a1       	ldd	r18, Z+38	; 0x26
     a5a:	21 11       	cpse	r18, r1
     a5c:	13 c0       	rjmp	.+38     	; 0xa84 <Chan_Init+0x54>
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <Chan_Init+0x34>
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
			ChannelArray[x].state = USED;
     a64:	29 e2       	ldi	r18, 0x29	; 41
     a66:	28 9f       	mul	r18, r24
     a68:	f0 01       	movw	r30, r0
     a6a:	29 9f       	mul	r18, r25
     a6c:	f0 0d       	add	r31, r0
     a6e:	11 24       	eor	r1, r1
     a70:	e2 59       	subi	r30, 0x92	; 146
     a72:	fd 4f       	sbci	r31, 0xFD	; 253
     a74:	22 e0       	ldi	r18, 0x02	; 2
     a76:	26 a3       	std	Z+38, r18	; 0x26
			ChannelArray[x].numberReceivers = 0;
     a78:	15 a2       	std	Z+37, r1	; 0x25
     a7a:	14 a2       	std	Z+36, r1	; 0x24
			break;
		}
	}

	if (x == MAXCHAN) return NULL;
     a7c:	80 31       	cpi	r24, 0x10	; 16
     a7e:	91 05       	cpc	r25, r1
     a80:	41 f4       	brne	.+16     	; 0xa92 <Chan_Init+0x62>
     a82:	15 c0       	rjmp	.+42     	; 0xaae <Chan_Init+0x7e>
	int x;

	if (Channels == MAXCHAN) return NULL;  /* Too many task! */

	/* find an UNITIALIZED CD that we can use  */
	for (x = 0; x < MAXCHAN; x++) {
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	80 31       	cpi	r24, 0x10	; 16
     a88:	91 05       	cpc	r25, r1
     a8a:	f9 f6       	brne	.-66     	; 0xa4a <Chan_Init+0x1a>
			ChannelArray[x].numberReceivers = 0;
			break;
		}
	}

	if (x == MAXCHAN) return NULL;
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	08 95       	ret
	return ChannelArray[x].channelID;
     a92:	29 e2       	ldi	r18, 0x29	; 41
     a94:	28 9f       	mul	r18, r24
     a96:	f0 01       	movw	r30, r0
     a98:	29 9f       	mul	r18, r25
     a9a:	f0 0d       	add	r31, r0
     a9c:	11 24       	eor	r1, r1
     a9e:	e2 59       	subi	r30, 0x92	; 146
     aa0:	fd 4f       	sbci	r31, 0xFD	; 253
     aa2:	80 81       	ld	r24, Z
     aa4:	91 81       	ldd	r25, Z+1	; 0x01
     aa6:	08 95       	ret
 */

 CHAN Chan_Init() {
	int x;

	if (Channels == MAXCHAN) return NULL;  /* Too many task! */
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	08 95       	ret
			ChannelArray[x].numberReceivers = 0;
			break;
		}
	}

	if (x == MAXCHAN) return NULL;
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
	return ChannelArray[x].channelID;
 }
     ab2:	08 95       	ret

00000ab4 <Send>:

void Send(CHAN ch, int v) {
	if (Cp->priority == PERIODIC) OS_Abort(5); // periodic tasks are not allowed to use csp
     ab4:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <Cp>
     ab8:	30 91 0d 05 	lds	r19, 0x050D	; 0x80050d <Cp+0x1>
     abc:	f9 01       	movw	r30, r18
     abe:	eb 5f       	subi	r30, 0xFB	; 251
     ac0:	fe 4f       	sbci	r31, 0xFE	; 254
     ac2:	40 81       	ld	r20, Z
     ac4:	51 81       	ldd	r21, Z+1	; 0x01
     ac6:	42 30       	cpi	r20, 0x02	; 2
     ac8:	51 05       	cpc	r21, r1
     aca:	19 f4       	brne	.+6      	; 0xad2 <Send+0x1e>
     acc:	85 e0       	ldi	r24, 0x05	; 5
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	26 dd       	rcall	.-1460   	; 0x51e <OS_Abort>
	Cp->request = SEND;
     ad2:	f9 01       	movw	r30, r18
     ad4:	e5 5f       	subi	r30, 0xF5	; 245
     ad6:	fe 4f       	sbci	r31, 0xFE	; 254
     ad8:	47 e0       	ldi	r20, 0x07	; 7
     ada:	40 83       	st	Z, r20
	Cp->senderChannel = ch;
     adc:	71 96       	adiw	r30, 0x11	; 17
     ade:	91 83       	std	Z+1, r25	; 0x01
     ae0:	80 83       	st	Z, r24
	Cp->val = v;
     ae2:	34 96       	adiw	r30, 0x04	; 4
     ae4:	71 83       	std	Z+1, r23	; 0x01
     ae6:	60 83       	st	Z, r22
	Enter_Kernel();
     ae8:	7e cb       	rjmp	.-2308   	; 0x1e6 <Enter_Kernel>
     aea:	08 95       	ret

00000aec <kernel_send>:
}

void kernel_send() {
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
	if (ChannelArray[Cp->senderChannel - 1].numberReceivers == 0) { // no receivers waiting
     af4:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <Cp>
     af8:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <Cp+0x1>
     afc:	fc 01       	movw	r30, r24
     afe:	e4 5e       	subi	r30, 0xE4	; 228
     b00:	fe 4f       	sbci	r31, 0xFE	; 254
     b02:	20 81       	ld	r18, Z
     b04:	31 81       	ldd	r19, Z+1	; 0x01
     b06:	21 50       	subi	r18, 0x01	; 1
     b08:	31 09       	sbc	r19, r1
     b0a:	49 e2       	ldi	r20, 0x29	; 41
     b0c:	42 9f       	mul	r20, r18
     b0e:	f0 01       	movw	r30, r0
     b10:	43 9f       	mul	r20, r19
     b12:	f0 0d       	add	r31, r0
     b14:	11 24       	eor	r1, r1
     b16:	e2 59       	subi	r30, 0x92	; 146
     b18:	fd 4f       	sbci	r31, 0xFD	; 253
     b1a:	24 a1       	ldd	r18, Z+36	; 0x24
     b1c:	35 a1       	ldd	r19, Z+37	; 0x25
     b1e:	23 2b       	or	r18, r19
     b20:	09 f0       	breq	.+2      	; 0xb24 <kernel_send+0x38>
     b22:	3d c0       	rjmp	.+122    	; 0xb9e <kernel_send+0xb2>
		if (ChannelArray[Cp->senderChannel - 1].sender == NULL) ChannelArray[Cp->senderChannel - 1].sender = Cp;
     b24:	fc 01       	movw	r30, r24
     b26:	e4 5e       	subi	r30, 0xE4	; 228
     b28:	fe 4f       	sbci	r31, 0xFE	; 254
     b2a:	20 81       	ld	r18, Z
     b2c:	31 81       	ldd	r19, Z+1	; 0x01
     b2e:	21 50       	subi	r18, 0x01	; 1
     b30:	31 09       	sbc	r19, r1
     b32:	42 9f       	mul	r20, r18
     b34:	f0 01       	movw	r30, r0
     b36:	43 9f       	mul	r20, r19
     b38:	f0 0d       	add	r31, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	e2 59       	subi	r30, 0x92	; 146
     b3e:	fd 4f       	sbci	r31, 0xFD	; 253
     b40:	22 81       	ldd	r18, Z+2	; 0x02
     b42:	33 81       	ldd	r19, Z+3	; 0x03
     b44:	23 2b       	or	r18, r19
     b46:	41 f5       	brne	.+80     	; 0xb98 <kernel_send+0xac>
     b48:	dc 01       	movw	r26, r24
     b4a:	a4 5e       	subi	r26, 0xE4	; 228
     b4c:	be 4f       	sbci	r27, 0xFE	; 254
     b4e:	2d 91       	ld	r18, X+
     b50:	3c 91       	ld	r19, X
     b52:	11 97       	sbiw	r26, 0x01	; 1
     b54:	21 50       	subi	r18, 0x01	; 1
     b56:	31 09       	sbc	r19, r1
     b58:	42 9f       	mul	r20, r18
     b5a:	f0 01       	movw	r30, r0
     b5c:	43 9f       	mul	r20, r19
     b5e:	f0 0d       	add	r31, r0
     b60:	11 24       	eor	r1, r1
     b62:	e2 59       	subi	r30, 0x92	; 146
     b64:	fd 4f       	sbci	r31, 0xFD	; 253
     b66:	93 83       	std	Z+3, r25	; 0x03
     b68:	82 83       	std	Z+2, r24	; 0x02
		else OS_Abort(6); // cant have more than 1 sender

		Cp->state = BLOCKED;
     b6a:	fc 01       	movw	r30, r24
     b6c:	ec 5f       	subi	r30, 0xFC	; 252
     b6e:	fe 4f       	sbci	r31, 0xFE	; 254
     b70:	23 e0       	ldi	r18, 0x03	; 3
     b72:	20 83       	st	Z, r18
		ChannelArray[Cp->senderChannel - 1].val = Cp->val;
     b74:	2d 91       	ld	r18, X+
     b76:	3c 91       	ld	r19, X
     b78:	21 50       	subi	r18, 0x01	; 1
     b7a:	31 09       	sbc	r19, r1
     b7c:	7c 96       	adiw	r30, 0x1c	; 28
     b7e:	80 81       	ld	r24, Z
     b80:	91 81       	ldd	r25, Z+1	; 0x01
     b82:	42 9f       	mul	r20, r18
     b84:	f0 01       	movw	r30, r0
     b86:	43 9f       	mul	r20, r19
     b88:	f0 0d       	add	r31, r0
     b8a:	11 24       	eor	r1, r1
     b8c:	e2 59       	subi	r30, 0x92	; 146
     b8e:	fd 4f       	sbci	r31, 0xFD	; 253
     b90:	90 a7       	std	Z+40, r25	; 0x28
     b92:	87 a3       	std	Z+39, r24	; 0x27
		Dispatch();
     b94:	ed dc       	rcall	.-1574   	; 0x570 <Dispatch>
     b96:	0d c1       	rjmp	.+538    	; 0xdb2 <kernel_send+0x2c6>
}

void kernel_send() {
	if (ChannelArray[Cp->senderChannel - 1].numberReceivers == 0) { // no receivers waiting
		if (ChannelArray[Cp->senderChannel - 1].sender == NULL) ChannelArray[Cp->senderChannel - 1].sender = Cp;
		else OS_Abort(6); // cant have more than 1 sender
     b98:	86 e0       	ldi	r24, 0x06	; 6
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	c0 dc       	rcall	.-1664   	; 0x51e <OS_Abort>

		Cp->state = BLOCKED;
		ChannelArray[Cp->senderChannel - 1].val = Cp->val;
		Dispatch();
	} else { //receivers are waiting
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(6); // cant have more than 1 sender
     b9e:	fc 01       	movw	r30, r24
     ba0:	e4 5e       	subi	r30, 0xE4	; 228
     ba2:	fe 4f       	sbci	r31, 0xFE	; 254
     ba4:	20 81       	ld	r18, Z
     ba6:	31 81       	ldd	r19, Z+1	; 0x01
     ba8:	21 50       	subi	r18, 0x01	; 1
     baa:	31 09       	sbc	r19, r1
     bac:	49 e2       	ldi	r20, 0x29	; 41
     bae:	42 9f       	mul	r20, r18
     bb0:	f0 01       	movw	r30, r0
     bb2:	43 9f       	mul	r20, r19
     bb4:	f0 0d       	add	r31, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	e2 59       	subi	r30, 0x92	; 146
     bba:	fd 4f       	sbci	r31, 0xFD	; 253
     bbc:	22 81       	ldd	r18, Z+2	; 0x02
     bbe:	33 81       	ldd	r19, Z+3	; 0x03
     bc0:	23 2b       	or	r18, r19
     bc2:	19 f0       	breq	.+6      	; 0xbca <kernel_send+0xde>
     bc4:	86 e0       	ldi	r24, 0x06	; 6
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	aa dc       	rcall	.-1708   	; 0x51e <OS_Abort>
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
     bca:	fc 01       	movw	r30, r24
     bcc:	e4 5e       	subi	r30, 0xE4	; 228
     bce:	fe 4f       	sbci	r31, 0xFE	; 254
     bd0:	80 81       	ld	r24, Z
     bd2:	91 81       	ldd	r25, Z+1	; 0x01
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	29 e2       	ldi	r18, 0x29	; 41
     bd8:	28 9f       	mul	r18, r24
     bda:	f0 01       	movw	r30, r0
     bdc:	29 9f       	mul	r18, r25
     bde:	f0 0d       	add	r31, r0
     be0:	11 24       	eor	r1, r1
     be2:	e2 59       	subi	r30, 0x92	; 146
     be4:	fd 4f       	sbci	r31, 0xFD	; 253
     be6:	c4 a1       	ldd	r28, Z+36	; 0x24
     be8:	d5 a1       	ldd	r29, Z+37	; 0x25
     bea:	21 97       	sbiw	r28, 0x01	; 1
     bec:	0a f4       	brpl	.+2      	; 0xbf0 <kernel_send+0x104>
     bee:	ce c0       	rjmp	.+412    	; 0xd8c <kernel_send+0x2a0>
			ChannelArray[Cp->senderChannel - 1].receivers[l]->state = READY;
     bf0:	19 e2       	ldi	r17, 0x29	; 41
     bf2:	01 e0       	ldi	r16, 0x01	; 1
     bf4:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <Cp>
     bf8:	30 91 0d 05 	lds	r19, 0x050D	; 0x80050d <Cp+0x1>
     bfc:	c9 01       	movw	r24, r18
     bfe:	84 5e       	subi	r24, 0xE4	; 228
     c00:	9e 4f       	sbci	r25, 0xFE	; 254
     c02:	dc 01       	movw	r26, r24
     c04:	4d 91       	ld	r20, X+
     c06:	5c 91       	ld	r21, X
     c08:	41 50       	subi	r20, 0x01	; 1
     c0a:	51 09       	sbc	r21, r1
     c0c:	fe 01       	movw	r30, r28
     c0e:	32 96       	adiw	r30, 0x02	; 2
     c10:	ee 0f       	add	r30, r30
     c12:	ff 1f       	adc	r31, r31
     c14:	14 9f       	mul	r17, r20
     c16:	d0 01       	movw	r26, r0
     c18:	15 9f       	mul	r17, r21
     c1a:	b0 0d       	add	r27, r0
     c1c:	11 24       	eor	r1, r1
     c1e:	ae 0f       	add	r26, r30
     c20:	bf 1f       	adc	r27, r31
     c22:	a2 59       	subi	r26, 0x92	; 146
     c24:	bd 4f       	sbci	r27, 0xFD	; 253
     c26:	0d 90       	ld	r0, X+
     c28:	bc 91       	ld	r27, X
     c2a:	a0 2d       	mov	r26, r0
     c2c:	ac 5f       	subi	r26, 0xFC	; 252
     c2e:	be 4f       	sbci	r27, 0xFE	; 254
     c30:	0c 93       	st	X, r16
			ChannelArray[Cp->senderChannel - 1].receivers[l]->val = Cp->val;
     c32:	dc 01       	movw	r26, r24
     c34:	4d 91       	ld	r20, X+
     c36:	5c 91       	ld	r21, X
     c38:	41 50       	subi	r20, 0x01	; 1
     c3a:	51 09       	sbc	r21, r1
     c3c:	14 9f       	mul	r17, r20
     c3e:	d0 01       	movw	r26, r0
     c40:	15 9f       	mul	r17, r21
     c42:	b0 0d       	add	r27, r0
     c44:	11 24       	eor	r1, r1
     c46:	ae 0f       	add	r26, r30
     c48:	bf 1f       	adc	r27, r31
     c4a:	a2 59       	subi	r26, 0x92	; 146
     c4c:	bd 4f       	sbci	r27, 0xFD	; 253
     c4e:	6d 91       	ld	r22, X+
     c50:	7c 91       	ld	r23, X
     c52:	a9 01       	movw	r20, r18
     c54:	40 5e       	subi	r20, 0xE0	; 224
     c56:	5e 4f       	sbci	r21, 0xFE	; 254
     c58:	da 01       	movw	r26, r20
     c5a:	4d 91       	ld	r20, X+
     c5c:	5c 91       	ld	r21, X
     c5e:	db 01       	movw	r26, r22
     c60:	a0 5e       	subi	r26, 0xE0	; 224
     c62:	be 4f       	sbci	r27, 0xFE	; 254
     c64:	4d 93       	st	X+, r20
     c66:	5c 93       	st	X, r21

			if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == SYSTEM) {
     c68:	dc 01       	movw	r26, r24
     c6a:	4d 91       	ld	r20, X+
     c6c:	5c 91       	ld	r21, X
     c6e:	11 97       	sbiw	r26, 0x01	; 1
     c70:	41 50       	subi	r20, 0x01	; 1
     c72:	51 09       	sbc	r21, r1
     c74:	14 9f       	mul	r17, r20
     c76:	c0 01       	movw	r24, r0
     c78:	15 9f       	mul	r17, r21
     c7a:	90 0d       	add	r25, r0
     c7c:	11 24       	eor	r1, r1
     c7e:	e8 0f       	add	r30, r24
     c80:	f9 1f       	adc	r31, r25
     c82:	e2 59       	subi	r30, 0x92	; 146
     c84:	fd 4f       	sbci	r31, 0xFD	; 253
     c86:	01 90       	ld	r0, Z+
     c88:	f0 81       	ld	r31, Z
     c8a:	e0 2d       	mov	r30, r0
     c8c:	eb 5f       	subi	r30, 0xFB	; 251
     c8e:	fe 4f       	sbci	r31, 0xFE	; 254
     c90:	80 81       	ld	r24, Z
     c92:	91 81       	ldd	r25, Z+1	; 0x01
     c94:	03 97       	sbiw	r24, 0x03	; 3
     c96:	c1 f4       	brne	.+48     	; 0xcc8 <kernel_send+0x1dc>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &SysQueue, &SysCount);
     c98:	fd 01       	movw	r30, r26
     c9a:	40 81       	ld	r20, Z
     c9c:	51 81       	ldd	r21, Z+1	; 0x01
     c9e:	ce 01       	movw	r24, r28
     ca0:	02 96       	adiw	r24, 0x02	; 2
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	41 50       	subi	r20, 0x01	; 1
     ca8:	51 09       	sbc	r21, r1
     caa:	14 9f       	mul	r17, r20
     cac:	90 01       	movw	r18, r0
     cae:	15 9f       	mul	r17, r21
     cb0:	30 0d       	add	r19, r0
     cb2:	11 24       	eor	r1, r1
     cb4:	82 0f       	add	r24, r18
     cb6:	93 1f       	adc	r25, r19
     cb8:	42 e0       	ldi	r20, 0x02	; 2
     cba:	55 e0       	ldi	r21, 0x05	; 5
     cbc:	65 e5       	ldi	r22, 0x55	; 85
     cbe:	77 e1       	ldi	r23, 0x17	; 23
     cc0:	82 59       	subi	r24, 0x92	; 146
     cc2:	9d 4f       	sbci	r25, 0xFD	; 253
     cc4:	1a d4       	rcall	.+2100   	; 0x14fa <enqueue>
     cc6:	36 c0       	rjmp	.+108    	; 0xd34 <kernel_send+0x248>
				} else if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == RR) {
     cc8:	f9 01       	movw	r30, r18
     cca:	e4 5e       	subi	r30, 0xE4	; 228
     ccc:	fe 4f       	sbci	r31, 0xFE	; 254
     cce:	40 81       	ld	r20, Z
     cd0:	51 81       	ldd	r21, Z+1	; 0x01
     cd2:	41 50       	subi	r20, 0x01	; 1
     cd4:	51 09       	sbc	r21, r1
     cd6:	fe 01       	movw	r30, r28
     cd8:	32 96       	adiw	r30, 0x02	; 2
     cda:	ee 0f       	add	r30, r30
     cdc:	ff 1f       	adc	r31, r31
     cde:	14 9f       	mul	r17, r20
     ce0:	c0 01       	movw	r24, r0
     ce2:	15 9f       	mul	r17, r21
     ce4:	90 0d       	add	r25, r0
     ce6:	11 24       	eor	r1, r1
     ce8:	e8 0f       	add	r30, r24
     cea:	f9 1f       	adc	r31, r25
     cec:	e2 59       	subi	r30, 0x92	; 146
     cee:	fd 4f       	sbci	r31, 0xFD	; 253
     cf0:	01 90       	ld	r0, Z+
     cf2:	f0 81       	ld	r31, Z
     cf4:	e0 2d       	mov	r30, r0
     cf6:	eb 5f       	subi	r30, 0xFB	; 251
     cf8:	fe 4f       	sbci	r31, 0xFE	; 254
     cfa:	80 81       	ld	r24, Z
     cfc:	91 81       	ldd	r25, Z+1	; 0x01
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	c9 f4       	brne	.+50     	; 0xd34 <kernel_send+0x248>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
     d02:	f9 01       	movw	r30, r18
     d04:	e4 5e       	subi	r30, 0xE4	; 228
     d06:	fe 4f       	sbci	r31, 0xFE	; 254
     d08:	40 81       	ld	r20, Z
     d0a:	51 81       	ldd	r21, Z+1	; 0x01
     d0c:	ce 01       	movw	r24, r28
     d0e:	02 96       	adiw	r24, 0x02	; 2
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	41 50       	subi	r20, 0x01	; 1
     d16:	51 09       	sbc	r21, r1
     d18:	14 9f       	mul	r17, r20
     d1a:	90 01       	movw	r18, r0
     d1c:	15 9f       	mul	r17, r21
     d1e:	30 0d       	add	r19, r0
     d20:	11 24       	eor	r1, r1
     d22:	82 0f       	add	r24, r18
     d24:	93 1f       	adc	r25, r19
     d26:	4e ef       	ldi	r20, 0xFE	; 254
     d28:	54 e0       	ldi	r21, 0x04	; 4
     d2a:	6b e9       	ldi	r22, 0x9B	; 155
     d2c:	77 e1       	ldi	r23, 0x17	; 23
     d2e:	82 59       	subi	r24, 0x92	; 146
     d30:	9d 4f       	sbci	r25, 0xFD	; 253
     d32:	e3 d3       	rcall	.+1990   	; 0x14fa <enqueue>
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
     d34:	a0 91 0c 05 	lds	r26, 0x050C	; 0x80050c <Cp>
     d38:	b0 91 0d 05 	lds	r27, 0x050D	; 0x80050d <Cp+0x1>
     d3c:	a4 5e       	subi	r26, 0xE4	; 228
     d3e:	be 4f       	sbci	r27, 0xFE	; 254
     d40:	2d 91       	ld	r18, X+
     d42:	3c 91       	ld	r19, X
     d44:	11 97       	sbiw	r26, 0x01	; 1
     d46:	21 50       	subi	r18, 0x01	; 1
     d48:	31 09       	sbc	r19, r1
     d4a:	fe 01       	movw	r30, r28
     d4c:	32 96       	adiw	r30, 0x02	; 2
     d4e:	ee 0f       	add	r30, r30
     d50:	ff 1f       	adc	r31, r31
     d52:	12 9f       	mul	r17, r18
     d54:	c0 01       	movw	r24, r0
     d56:	13 9f       	mul	r17, r19
     d58:	90 0d       	add	r25, r0
     d5a:	11 24       	eor	r1, r1
     d5c:	e8 0f       	add	r30, r24
     d5e:	f9 1f       	adc	r31, r25
     d60:	e2 59       	subi	r30, 0x92	; 146
     d62:	fd 4f       	sbci	r31, 0xFD	; 253
     d64:	11 82       	std	Z+1, r1	; 0x01
     d66:	10 82       	st	Z, r1
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
     d68:	8d 91       	ld	r24, X+
     d6a:	9c 91       	ld	r25, X
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	18 9f       	mul	r17, r24
     d70:	f0 01       	movw	r30, r0
     d72:	19 9f       	mul	r17, r25
     d74:	f0 0d       	add	r31, r0
     d76:	11 24       	eor	r1, r1
     d78:	e2 59       	subi	r30, 0x92	; 146
     d7a:	fd 4f       	sbci	r31, 0xFD	; 253
     d7c:	84 a1       	ldd	r24, Z+36	; 0x24
     d7e:	95 a1       	ldd	r25, Z+37	; 0x25
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	95 a3       	std	Z+37, r25	; 0x25
     d84:	84 a3       	std	Z+36, r24	; 0x24
		ChannelArray[Cp->senderChannel - 1].val = Cp->val;
		Dispatch();
	} else { //receivers are waiting
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(6); // cant have more than 1 sender
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
     d86:	21 97       	sbiw	r28, 0x01	; 1
     d88:	0a f0       	brmi	.+2      	; 0xd8c <kernel_send+0x2a0>
     d8a:	34 cf       	rjmp	.-408    	; 0xbf4 <kernel_send+0x108>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
		}
		ChannelArray[Cp->senderChannel - 1].val = NULL;
     d8c:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <Cp>
     d90:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <Cp+0x1>
     d94:	e4 5e       	subi	r30, 0xE4	; 228
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
     d98:	80 81       	ld	r24, Z
     d9a:	91 81       	ldd	r25, Z+1	; 0x01
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	29 e2       	ldi	r18, 0x29	; 41
     da0:	28 9f       	mul	r18, r24
     da2:	f0 01       	movw	r30, r0
     da4:	29 9f       	mul	r18, r25
     da6:	f0 0d       	add	r31, r0
     da8:	11 24       	eor	r1, r1
     daa:	e2 59       	subi	r30, 0x92	; 146
     dac:	fd 4f       	sbci	r31, 0xFD	; 253
     dae:	10 a6       	std	Z+40, r1	; 0x28
     db0:	17 a2       	std	Z+39, r1	; 0x27
	}
}
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	08 95       	ret

00000dbc <Recv>:

int Recv(CHAN ch) {
	if (Cp->priority == PERIODIC) OS_Abort(5); // periodic tasks are not allowed to use csp
     dbc:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <Cp>
     dc0:	30 91 0d 05 	lds	r19, 0x050D	; 0x80050d <Cp+0x1>
     dc4:	f9 01       	movw	r30, r18
     dc6:	eb 5f       	subi	r30, 0xFB	; 251
     dc8:	fe 4f       	sbci	r31, 0xFE	; 254
     dca:	40 81       	ld	r20, Z
     dcc:	51 81       	ldd	r21, Z+1	; 0x01
     dce:	42 30       	cpi	r20, 0x02	; 2
     dd0:	51 05       	cpc	r21, r1
     dd2:	19 f4       	brne	.+6      	; 0xdda <Recv+0x1e>
     dd4:	85 e0       	ldi	r24, 0x05	; 5
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	a2 db       	rcall	.-2236   	; 0x51e <OS_Abort>
	Cp->request = RECEIVE;
     dda:	f9 01       	movw	r30, r18
     ddc:	e5 5f       	subi	r30, 0xF5	; 245
     dde:	fe 4f       	sbci	r31, 0xFE	; 254
     de0:	49 e0       	ldi	r20, 0x09	; 9
     de2:	40 83       	st	Z, r20
	Cp->receiverChannel = ch;
     de4:	73 96       	adiw	r30, 0x13	; 19
     de6:	91 83       	std	Z+1, r25	; 0x01
     de8:	80 83       	st	Z, r24
	Enter_Kernel();
     dea:	fd d9       	rcall	.-3078   	; 0x1e6 <Enter_Kernel>
	return Cp->val;
     dec:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <Cp>
     df0:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <Cp+0x1>
     df4:	e0 5e       	subi	r30, 0xE0	; 224
     df6:	fe 4f       	sbci	r31, 0xFE	; 254
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
}
     dfc:	08 95       	ret

00000dfe <kernel_receive>:

void kernel_receive() {
	if (ChannelArray[Cp->receiverChannel - 1].sender == NULL) { // no sender waiting
     dfe:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <Cp>
     e02:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <Cp+0x1>
     e06:	fc 01       	movw	r30, r24
     e08:	e2 5e       	subi	r30, 0xE2	; 226
     e0a:	fe 4f       	sbci	r31, 0xFE	; 254
     e0c:	20 81       	ld	r18, Z
     e0e:	31 81       	ldd	r19, Z+1	; 0x01
     e10:	21 50       	subi	r18, 0x01	; 1
     e12:	31 09       	sbc	r19, r1
     e14:	49 e2       	ldi	r20, 0x29	; 41
     e16:	42 9f       	mul	r20, r18
     e18:	f0 01       	movw	r30, r0
     e1a:	43 9f       	mul	r20, r19
     e1c:	f0 0d       	add	r31, r0
     e1e:	11 24       	eor	r1, r1
     e20:	e2 59       	subi	r30, 0x92	; 146
     e22:	fd 4f       	sbci	r31, 0xFD	; 253
     e24:	22 81       	ldd	r18, Z+2	; 0x02
     e26:	33 81       	ldd	r19, Z+3	; 0x03
     e28:	23 2b       	or	r18, r19
     e2a:	09 f5       	brne	.+66     	; 0xe6e <kernel_receive+0x70>
		Cp->state = BLOCKED;
     e2c:	fc 01       	movw	r30, r24
     e2e:	ec 5f       	subi	r30, 0xFC	; 252
     e30:	fe 4f       	sbci	r31, 0xFE	; 254
     e32:	23 e0       	ldi	r18, 0x03	; 3
     e34:	20 83       	st	Z, r18
		enqueue(&Cp, &ChannelArray[Cp->receiverChannel - 1].receivers, &ChannelArray[Cp->receiverChannel - 1].numberReceivers);
     e36:	7a 96       	adiw	r30, 0x1a	; 26
     e38:	20 81       	ld	r18, Z
     e3a:	31 81       	ldd	r19, Z+1	; 0x01
     e3c:	80 81       	ld	r24, Z
     e3e:	91 81       	ldd	r25, Z+1	; 0x01
     e40:	21 50       	subi	r18, 0x01	; 1
     e42:	31 09       	sbc	r19, r1
     e44:	e9 e2       	ldi	r30, 0x29	; 41
     e46:	e2 9f       	mul	r30, r18
     e48:	a0 01       	movw	r20, r0
     e4a:	e3 9f       	mul	r30, r19
     e4c:	50 0d       	add	r21, r0
     e4e:	11 24       	eor	r1, r1
     e50:	4e 56       	subi	r20, 0x6E	; 110
     e52:	5d 4f       	sbci	r21, 0xFD	; 253
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	e8 9f       	mul	r30, r24
     e58:	b0 01       	movw	r22, r0
     e5a:	e9 9f       	mul	r30, r25
     e5c:	70 0d       	add	r23, r0
     e5e:	11 24       	eor	r1, r1
     e60:	6e 58       	subi	r22, 0x8E	; 142
     e62:	7d 4f       	sbci	r23, 0xFD	; 253
     e64:	8c e0       	ldi	r24, 0x0C	; 12
     e66:	95 e0       	ldi	r25, 0x05	; 5
     e68:	48 d3       	rcall	.+1680   	; 0x14fa <enqueue>
		Dispatch();
     e6a:	82 cb       	rjmp	.-2300   	; 0x570 <Dispatch>
     e6c:	08 95       	ret
		} else { // sender is waiting
		ChannelArray[Cp->receiverChannel - 1].sender->state = READY;
     e6e:	fc 01       	movw	r30, r24
     e70:	e2 5e       	subi	r30, 0xE2	; 226
     e72:	fe 4f       	sbci	r31, 0xFE	; 254
     e74:	20 81       	ld	r18, Z
     e76:	31 81       	ldd	r19, Z+1	; 0x01
     e78:	21 50       	subi	r18, 0x01	; 1
     e7a:	31 09       	sbc	r19, r1
     e7c:	49 e2       	ldi	r20, 0x29	; 41
     e7e:	42 9f       	mul	r20, r18
     e80:	d0 01       	movw	r26, r0
     e82:	43 9f       	mul	r20, r19
     e84:	b0 0d       	add	r27, r0
     e86:	11 24       	eor	r1, r1
     e88:	a2 59       	subi	r26, 0x92	; 146
     e8a:	bd 4f       	sbci	r27, 0xFD	; 253
     e8c:	12 96       	adiw	r26, 0x02	; 2
     e8e:	0d 90       	ld	r0, X+
     e90:	bc 91       	ld	r27, X
     e92:	a0 2d       	mov	r26, r0
     e94:	ac 5f       	subi	r26, 0xFC	; 252
     e96:	be 4f       	sbci	r27, 0xFE	; 254
     e98:	21 e0       	ldi	r18, 0x01	; 1
     e9a:	2c 93       	st	X, r18
		Cp->val = ChannelArray[Cp->receiverChannel - 1].val;
     e9c:	20 81       	ld	r18, Z
     e9e:	31 81       	ldd	r19, Z+1	; 0x01
     ea0:	21 50       	subi	r18, 0x01	; 1
     ea2:	31 09       	sbc	r19, r1
     ea4:	42 9f       	mul	r20, r18
     ea6:	d0 01       	movw	r26, r0
     ea8:	43 9f       	mul	r20, r19
     eaa:	b0 0d       	add	r27, r0
     eac:	11 24       	eor	r1, r1
     eae:	a2 59       	subi	r26, 0x92	; 146
     eb0:	bd 4f       	sbci	r27, 0xFD	; 253
     eb2:	97 96       	adiw	r26, 0x27	; 39
     eb4:	2d 91       	ld	r18, X+
     eb6:	3c 91       	ld	r19, X
     eb8:	98 97       	sbiw	r26, 0x28	; 40
     eba:	dc 01       	movw	r26, r24
     ebc:	a0 5e       	subi	r26, 0xE0	; 224
     ebe:	be 4f       	sbci	r27, 0xFE	; 254
     ec0:	11 96       	adiw	r26, 0x01	; 1
     ec2:	3c 93       	st	X, r19
     ec4:	2e 93       	st	-X, r18

		if (ChannelArray[Cp->receiverChannel - 1].sender->priority == SYSTEM) {
     ec6:	20 81       	ld	r18, Z
     ec8:	31 81       	ldd	r19, Z+1	; 0x01
     eca:	21 50       	subi	r18, 0x01	; 1
     ecc:	31 09       	sbc	r19, r1
     ece:	42 9f       	mul	r20, r18
     ed0:	f0 01       	movw	r30, r0
     ed2:	43 9f       	mul	r20, r19
     ed4:	f0 0d       	add	r31, r0
     ed6:	11 24       	eor	r1, r1
     ed8:	e2 59       	subi	r30, 0x92	; 146
     eda:	fd 4f       	sbci	r31, 0xFD	; 253
     edc:	02 80       	ldd	r0, Z+2	; 0x02
     ede:	f3 81       	ldd	r31, Z+3	; 0x03
     ee0:	e0 2d       	mov	r30, r0
     ee2:	eb 5f       	subi	r30, 0xFB	; 251
     ee4:	fe 4f       	sbci	r31, 0xFE	; 254
     ee6:	20 81       	ld	r18, Z
     ee8:	31 81       	ldd	r19, Z+1	; 0x01
     eea:	23 30       	cpi	r18, 0x03	; 3
     eec:	31 05       	cpc	r19, r1
     eee:	a1 f4       	brne	.+40     	; 0xf18 <kernel_receive+0x11a>
			enqueue(&ChannelArray[Cp->receiverChannel - 1].sender, &SysQueue, &SysCount);
     ef0:	fc 01       	movw	r30, r24
     ef2:	e2 5e       	subi	r30, 0xE2	; 226
     ef4:	fe 4f       	sbci	r31, 0xFE	; 254
     ef6:	20 81       	ld	r18, Z
     ef8:	31 81       	ldd	r19, Z+1	; 0x01
     efa:	21 50       	subi	r18, 0x01	; 1
     efc:	31 09       	sbc	r19, r1
     efe:	42 9f       	mul	r20, r18
     f00:	c0 01       	movw	r24, r0
     f02:	43 9f       	mul	r20, r19
     f04:	90 0d       	add	r25, r0
     f06:	11 24       	eor	r1, r1
     f08:	42 e0       	ldi	r20, 0x02	; 2
     f0a:	55 e0       	ldi	r21, 0x05	; 5
     f0c:	65 e5       	ldi	r22, 0x55	; 85
     f0e:	77 e1       	ldi	r23, 0x17	; 23
     f10:	80 59       	subi	r24, 0x90	; 144
     f12:	9d 4f       	sbci	r25, 0xFD	; 253
     f14:	f2 d2       	rcall	.+1508   	; 0x14fa <enqueue>
     f16:	2c c0       	rjmp	.+88     	; 0xf70 <kernel_receive+0x172>
			} else if (ChannelArray[Cp->receiverChannel - 1].sender->priority == RR) {
     f18:	fc 01       	movw	r30, r24
     f1a:	e2 5e       	subi	r30, 0xE2	; 226
     f1c:	fe 4f       	sbci	r31, 0xFE	; 254
     f1e:	20 81       	ld	r18, Z
     f20:	31 81       	ldd	r19, Z+1	; 0x01
     f22:	21 50       	subi	r18, 0x01	; 1
     f24:	31 09       	sbc	r19, r1
     f26:	49 e2       	ldi	r20, 0x29	; 41
     f28:	42 9f       	mul	r20, r18
     f2a:	f0 01       	movw	r30, r0
     f2c:	43 9f       	mul	r20, r19
     f2e:	f0 0d       	add	r31, r0
     f30:	11 24       	eor	r1, r1
     f32:	e2 59       	subi	r30, 0x92	; 146
     f34:	fd 4f       	sbci	r31, 0xFD	; 253
     f36:	02 80       	ldd	r0, Z+2	; 0x02
     f38:	f3 81       	ldd	r31, Z+3	; 0x03
     f3a:	e0 2d       	mov	r30, r0
     f3c:	eb 5f       	subi	r30, 0xFB	; 251
     f3e:	fe 4f       	sbci	r31, 0xFE	; 254
     f40:	20 81       	ld	r18, Z
     f42:	31 81       	ldd	r19, Z+1	; 0x01
     f44:	21 30       	cpi	r18, 0x01	; 1
     f46:	31 05       	cpc	r19, r1
     f48:	99 f4       	brne	.+38     	; 0xf70 <kernel_receive+0x172>
			enqueue(&ChannelArray[Cp->receiverChannel - 1].sender, &RRQueue, &RRCount);
     f4a:	fc 01       	movw	r30, r24
     f4c:	e2 5e       	subi	r30, 0xE2	; 226
     f4e:	fe 4f       	sbci	r31, 0xFE	; 254
     f50:	20 81       	ld	r18, Z
     f52:	31 81       	ldd	r19, Z+1	; 0x01
     f54:	21 50       	subi	r18, 0x01	; 1
     f56:	31 09       	sbc	r19, r1
     f58:	42 9f       	mul	r20, r18
     f5a:	c0 01       	movw	r24, r0
     f5c:	43 9f       	mul	r20, r19
     f5e:	90 0d       	add	r25, r0
     f60:	11 24       	eor	r1, r1
     f62:	4e ef       	ldi	r20, 0xFE	; 254
     f64:	54 e0       	ldi	r21, 0x04	; 4
     f66:	6b e9       	ldi	r22, 0x9B	; 155
     f68:	77 e1       	ldi	r23, 0x17	; 23
     f6a:	80 59       	subi	r24, 0x90	; 144
     f6c:	9d 4f       	sbci	r25, 0xFD	; 253
     f6e:	c5 d2       	rcall	.+1418   	; 0x14fa <enqueue>
		}
		ChannelArray[Cp->receiverChannel - 1].sender = NULL;
     f70:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <Cp>
     f74:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <Cp+0x1>
     f78:	fc 01       	movw	r30, r24
     f7a:	e2 5e       	subi	r30, 0xE2	; 226
     f7c:	fe 4f       	sbci	r31, 0xFE	; 254
     f7e:	20 81       	ld	r18, Z
     f80:	31 81       	ldd	r19, Z+1	; 0x01
     f82:	21 50       	subi	r18, 0x01	; 1
     f84:	31 09       	sbc	r19, r1
     f86:	49 e2       	ldi	r20, 0x29	; 41
     f88:	42 9f       	mul	r20, r18
     f8a:	f0 01       	movw	r30, r0
     f8c:	43 9f       	mul	r20, r19
     f8e:	f0 0d       	add	r31, r0
     f90:	11 24       	eor	r1, r1
     f92:	e2 59       	subi	r30, 0x92	; 146
     f94:	fd 4f       	sbci	r31, 0xFD	; 253
     f96:	13 82       	std	Z+3, r1	; 0x03
     f98:	12 82       	std	Z+2, r1	; 0x02
		ChannelArray[Cp->senderChannel - 1].val = NULL;
     f9a:	fc 01       	movw	r30, r24
     f9c:	e4 5e       	subi	r30, 0xE4	; 228
     f9e:	fe 4f       	sbci	r31, 0xFE	; 254
     fa0:	80 81       	ld	r24, Z
     fa2:	91 81       	ldd	r25, Z+1	; 0x01
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	48 9f       	mul	r20, r24
     fa8:	f0 01       	movw	r30, r0
     faa:	49 9f       	mul	r20, r25
     fac:	f0 0d       	add	r31, r0
     fae:	11 24       	eor	r1, r1
     fb0:	e2 59       	subi	r30, 0x92	; 146
     fb2:	fd 4f       	sbci	r31, 0xFD	; 253
     fb4:	10 a6       	std	Z+40, r1	; 0x28
     fb6:	17 a2       	std	Z+39, r1	; 0x27
     fb8:	08 95       	ret

00000fba <Write>:
	}
}

void Write(CHAN ch, int v) {
	//if (Cp->priority == PERIODIC) OS_Abort(5); // periodic tasks are not allowed to use csp
	Cp->request = ASYNC_SEND;
     fba:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <Cp>
     fbe:	30 91 0d 05 	lds	r19, 0x050D	; 0x80050d <Cp+0x1>
     fc2:	f9 01       	movw	r30, r18
     fc4:	e5 5f       	subi	r30, 0xF5	; 245
     fc6:	fe 4f       	sbci	r31, 0xFE	; 254
     fc8:	48 e0       	ldi	r20, 0x08	; 8
     fca:	40 83       	st	Z, r20
	Cp->senderChannel = ch;
     fcc:	71 96       	adiw	r30, 0x11	; 17
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	80 83       	st	Z, r24
	Cp->val = v;
     fd2:	34 96       	adiw	r30, 0x04	; 4
     fd4:	71 83       	std	Z+1, r23	; 0x01
     fd6:	60 83       	st	Z, r22
	Enter_Kernel();
     fd8:	06 c9       	rjmp	.-3572   	; 0x1e6 <Enter_Kernel>
     fda:	08 95       	ret

00000fdc <kernel_async_send>:
}

void kernel_async_send() {
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
	if (ChannelArray[Cp->senderChannel - 1].numberReceivers == 0) { // no receivers waiting
     fe4:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <Cp>
     fe8:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <Cp+0x1>
     fec:	fc 01       	movw	r30, r24
     fee:	e4 5e       	subi	r30, 0xE4	; 228
     ff0:	fe 4f       	sbci	r31, 0xFE	; 254
     ff2:	20 81       	ld	r18, Z
     ff4:	31 81       	ldd	r19, Z+1	; 0x01
     ff6:	21 50       	subi	r18, 0x01	; 1
     ff8:	31 09       	sbc	r19, r1
     ffa:	49 e2       	ldi	r20, 0x29	; 41
     ffc:	42 9f       	mul	r20, r18
     ffe:	f0 01       	movw	r30, r0
    1000:	43 9f       	mul	r20, r19
    1002:	f0 0d       	add	r31, r0
    1004:	11 24       	eor	r1, r1
    1006:	e2 59       	subi	r30, 0x92	; 146
    1008:	fd 4f       	sbci	r31, 0xFD	; 253
    100a:	24 a1       	ldd	r18, Z+36	; 0x24
    100c:	35 a1       	ldd	r19, Z+37	; 0x25
    100e:	23 2b       	or	r18, r19
    1010:	31 f5       	brne	.+76     	; 0x105e <kernel_async_send+0x82>
		if (ChannelArray[Cp->senderChannel - 1].sender == NULL) ChannelArray[Cp->senderChannel - 1].sender = Cp;
    1012:	fc 01       	movw	r30, r24
    1014:	e4 5e       	subi	r30, 0xE4	; 228
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	20 81       	ld	r18, Z
    101a:	31 81       	ldd	r19, Z+1	; 0x01
    101c:	21 50       	subi	r18, 0x01	; 1
    101e:	31 09       	sbc	r19, r1
    1020:	42 9f       	mul	r20, r18
    1022:	f0 01       	movw	r30, r0
    1024:	43 9f       	mul	r20, r19
    1026:	f0 0d       	add	r31, r0
    1028:	11 24       	eor	r1, r1
    102a:	e2 59       	subi	r30, 0x92	; 146
    102c:	fd 4f       	sbci	r31, 0xFD	; 253
    102e:	22 81       	ldd	r18, Z+2	; 0x02
    1030:	33 81       	ldd	r19, Z+3	; 0x03
    1032:	23 2b       	or	r18, r19
    1034:	89 f4       	brne	.+34     	; 0x1058 <kernel_async_send+0x7c>
    1036:	fc 01       	movw	r30, r24
    1038:	e4 5e       	subi	r30, 0xE4	; 228
    103a:	fe 4f       	sbci	r31, 0xFE	; 254
    103c:	20 81       	ld	r18, Z
    103e:	31 81       	ldd	r19, Z+1	; 0x01
    1040:	21 50       	subi	r18, 0x01	; 1
    1042:	31 09       	sbc	r19, r1
    1044:	42 9f       	mul	r20, r18
    1046:	f0 01       	movw	r30, r0
    1048:	43 9f       	mul	r20, r19
    104a:	f0 0d       	add	r31, r0
    104c:	11 24       	eor	r1, r1
    104e:	e2 59       	subi	r30, 0x92	; 146
    1050:	fd 4f       	sbci	r31, 0xFD	; 253
    1052:	93 83       	std	Z+3, r25	; 0x03
    1054:	82 83       	std	Z+2, r24	; 0x02
    1056:	0d c1       	rjmp	.+538    	; 0x1272 <kernel_async_send+0x296>
		else OS_Abort(6); // cant have more than 1 sender
    1058:	86 e0       	ldi	r24, 0x06	; 6
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	60 da       	rcall	.-2880   	; 0x51e <OS_Abort>
		return; // return without blocking
	} else { //receivers are waiting
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(6); // cant have more than 1 sender
    105e:	fc 01       	movw	r30, r24
    1060:	e4 5e       	subi	r30, 0xE4	; 228
    1062:	fe 4f       	sbci	r31, 0xFE	; 254
    1064:	20 81       	ld	r18, Z
    1066:	31 81       	ldd	r19, Z+1	; 0x01
    1068:	21 50       	subi	r18, 0x01	; 1
    106a:	31 09       	sbc	r19, r1
    106c:	49 e2       	ldi	r20, 0x29	; 41
    106e:	42 9f       	mul	r20, r18
    1070:	f0 01       	movw	r30, r0
    1072:	43 9f       	mul	r20, r19
    1074:	f0 0d       	add	r31, r0
    1076:	11 24       	eor	r1, r1
    1078:	e2 59       	subi	r30, 0x92	; 146
    107a:	fd 4f       	sbci	r31, 0xFD	; 253
    107c:	22 81       	ldd	r18, Z+2	; 0x02
    107e:	33 81       	ldd	r19, Z+3	; 0x03
    1080:	23 2b       	or	r18, r19
    1082:	19 f0       	breq	.+6      	; 0x108a <kernel_async_send+0xae>
    1084:	86 e0       	ldi	r24, 0x06	; 6
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	4a da       	rcall	.-2924   	; 0x51e <OS_Abort>
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
    108a:	fc 01       	movw	r30, r24
    108c:	e4 5e       	subi	r30, 0xE4	; 228
    108e:	fe 4f       	sbci	r31, 0xFE	; 254
    1090:	80 81       	ld	r24, Z
    1092:	91 81       	ldd	r25, Z+1	; 0x01
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	29 e2       	ldi	r18, 0x29	; 41
    1098:	28 9f       	mul	r18, r24
    109a:	f0 01       	movw	r30, r0
    109c:	29 9f       	mul	r18, r25
    109e:	f0 0d       	add	r31, r0
    10a0:	11 24       	eor	r1, r1
    10a2:	e2 59       	subi	r30, 0x92	; 146
    10a4:	fd 4f       	sbci	r31, 0xFD	; 253
    10a6:	c4 a1       	ldd	r28, Z+36	; 0x24
    10a8:	d5 a1       	ldd	r29, Z+37	; 0x25
    10aa:	21 97       	sbiw	r28, 0x01	; 1
    10ac:	0a f4       	brpl	.+2      	; 0x10b0 <kernel_async_send+0xd4>
    10ae:	ce c0       	rjmp	.+412    	; 0x124c <kernel_async_send+0x270>
			ChannelArray[Cp->senderChannel - 1].receivers[l]->state = READY;
    10b0:	19 e2       	ldi	r17, 0x29	; 41
    10b2:	01 e0       	ldi	r16, 0x01	; 1
    10b4:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <Cp>
    10b8:	30 91 0d 05 	lds	r19, 0x050D	; 0x80050d <Cp+0x1>
    10bc:	c9 01       	movw	r24, r18
    10be:	84 5e       	subi	r24, 0xE4	; 228
    10c0:	9e 4f       	sbci	r25, 0xFE	; 254
    10c2:	dc 01       	movw	r26, r24
    10c4:	4d 91       	ld	r20, X+
    10c6:	5c 91       	ld	r21, X
    10c8:	41 50       	subi	r20, 0x01	; 1
    10ca:	51 09       	sbc	r21, r1
    10cc:	fe 01       	movw	r30, r28
    10ce:	32 96       	adiw	r30, 0x02	; 2
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	14 9f       	mul	r17, r20
    10d6:	d0 01       	movw	r26, r0
    10d8:	15 9f       	mul	r17, r21
    10da:	b0 0d       	add	r27, r0
    10dc:	11 24       	eor	r1, r1
    10de:	ae 0f       	add	r26, r30
    10e0:	bf 1f       	adc	r27, r31
    10e2:	a2 59       	subi	r26, 0x92	; 146
    10e4:	bd 4f       	sbci	r27, 0xFD	; 253
    10e6:	0d 90       	ld	r0, X+
    10e8:	bc 91       	ld	r27, X
    10ea:	a0 2d       	mov	r26, r0
    10ec:	ac 5f       	subi	r26, 0xFC	; 252
    10ee:	be 4f       	sbci	r27, 0xFE	; 254
    10f0:	0c 93       	st	X, r16
			ChannelArray[Cp->senderChannel - 1].receivers[l]->val = Cp->val;
    10f2:	dc 01       	movw	r26, r24
    10f4:	4d 91       	ld	r20, X+
    10f6:	5c 91       	ld	r21, X
    10f8:	41 50       	subi	r20, 0x01	; 1
    10fa:	51 09       	sbc	r21, r1
    10fc:	14 9f       	mul	r17, r20
    10fe:	d0 01       	movw	r26, r0
    1100:	15 9f       	mul	r17, r21
    1102:	b0 0d       	add	r27, r0
    1104:	11 24       	eor	r1, r1
    1106:	ae 0f       	add	r26, r30
    1108:	bf 1f       	adc	r27, r31
    110a:	a2 59       	subi	r26, 0x92	; 146
    110c:	bd 4f       	sbci	r27, 0xFD	; 253
    110e:	6d 91       	ld	r22, X+
    1110:	7c 91       	ld	r23, X
    1112:	a9 01       	movw	r20, r18
    1114:	40 5e       	subi	r20, 0xE0	; 224
    1116:	5e 4f       	sbci	r21, 0xFE	; 254
    1118:	da 01       	movw	r26, r20
    111a:	4d 91       	ld	r20, X+
    111c:	5c 91       	ld	r21, X
    111e:	db 01       	movw	r26, r22
    1120:	a0 5e       	subi	r26, 0xE0	; 224
    1122:	be 4f       	sbci	r27, 0xFE	; 254
    1124:	4d 93       	st	X+, r20
    1126:	5c 93       	st	X, r21

			if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == SYSTEM) {
    1128:	dc 01       	movw	r26, r24
    112a:	4d 91       	ld	r20, X+
    112c:	5c 91       	ld	r21, X
    112e:	11 97       	sbiw	r26, 0x01	; 1
    1130:	41 50       	subi	r20, 0x01	; 1
    1132:	51 09       	sbc	r21, r1
    1134:	14 9f       	mul	r17, r20
    1136:	c0 01       	movw	r24, r0
    1138:	15 9f       	mul	r17, r21
    113a:	90 0d       	add	r25, r0
    113c:	11 24       	eor	r1, r1
    113e:	e8 0f       	add	r30, r24
    1140:	f9 1f       	adc	r31, r25
    1142:	e2 59       	subi	r30, 0x92	; 146
    1144:	fd 4f       	sbci	r31, 0xFD	; 253
    1146:	01 90       	ld	r0, Z+
    1148:	f0 81       	ld	r31, Z
    114a:	e0 2d       	mov	r30, r0
    114c:	eb 5f       	subi	r30, 0xFB	; 251
    114e:	fe 4f       	sbci	r31, 0xFE	; 254
    1150:	80 81       	ld	r24, Z
    1152:	91 81       	ldd	r25, Z+1	; 0x01
    1154:	03 97       	sbiw	r24, 0x03	; 3
    1156:	c1 f4       	brne	.+48     	; 0x1188 <kernel_async_send+0x1ac>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &SysQueue, &SysCount);
    1158:	fd 01       	movw	r30, r26
    115a:	40 81       	ld	r20, Z
    115c:	51 81       	ldd	r21, Z+1	; 0x01
    115e:	ce 01       	movw	r24, r28
    1160:	02 96       	adiw	r24, 0x02	; 2
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	41 50       	subi	r20, 0x01	; 1
    1168:	51 09       	sbc	r21, r1
    116a:	14 9f       	mul	r17, r20
    116c:	90 01       	movw	r18, r0
    116e:	15 9f       	mul	r17, r21
    1170:	30 0d       	add	r19, r0
    1172:	11 24       	eor	r1, r1
    1174:	82 0f       	add	r24, r18
    1176:	93 1f       	adc	r25, r19
    1178:	42 e0       	ldi	r20, 0x02	; 2
    117a:	55 e0       	ldi	r21, 0x05	; 5
    117c:	65 e5       	ldi	r22, 0x55	; 85
    117e:	77 e1       	ldi	r23, 0x17	; 23
    1180:	82 59       	subi	r24, 0x92	; 146
    1182:	9d 4f       	sbci	r25, 0xFD	; 253
    1184:	ba d1       	rcall	.+884    	; 0x14fa <enqueue>
    1186:	36 c0       	rjmp	.+108    	; 0x11f4 <kernel_async_send+0x218>
				} else if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == RR) {
    1188:	f9 01       	movw	r30, r18
    118a:	e4 5e       	subi	r30, 0xE4	; 228
    118c:	fe 4f       	sbci	r31, 0xFE	; 254
    118e:	40 81       	ld	r20, Z
    1190:	51 81       	ldd	r21, Z+1	; 0x01
    1192:	41 50       	subi	r20, 0x01	; 1
    1194:	51 09       	sbc	r21, r1
    1196:	fe 01       	movw	r30, r28
    1198:	32 96       	adiw	r30, 0x02	; 2
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	14 9f       	mul	r17, r20
    11a0:	c0 01       	movw	r24, r0
    11a2:	15 9f       	mul	r17, r21
    11a4:	90 0d       	add	r25, r0
    11a6:	11 24       	eor	r1, r1
    11a8:	e8 0f       	add	r30, r24
    11aa:	f9 1f       	adc	r31, r25
    11ac:	e2 59       	subi	r30, 0x92	; 146
    11ae:	fd 4f       	sbci	r31, 0xFD	; 253
    11b0:	01 90       	ld	r0, Z+
    11b2:	f0 81       	ld	r31, Z
    11b4:	e0 2d       	mov	r30, r0
    11b6:	eb 5f       	subi	r30, 0xFB	; 251
    11b8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ba:	80 81       	ld	r24, Z
    11bc:	91 81       	ldd	r25, Z+1	; 0x01
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	c9 f4       	brne	.+50     	; 0x11f4 <kernel_async_send+0x218>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
    11c2:	f9 01       	movw	r30, r18
    11c4:	e4 5e       	subi	r30, 0xE4	; 228
    11c6:	fe 4f       	sbci	r31, 0xFE	; 254
    11c8:	40 81       	ld	r20, Z
    11ca:	51 81       	ldd	r21, Z+1	; 0x01
    11cc:	ce 01       	movw	r24, r28
    11ce:	02 96       	adiw	r24, 0x02	; 2
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	41 50       	subi	r20, 0x01	; 1
    11d6:	51 09       	sbc	r21, r1
    11d8:	14 9f       	mul	r17, r20
    11da:	90 01       	movw	r18, r0
    11dc:	15 9f       	mul	r17, r21
    11de:	30 0d       	add	r19, r0
    11e0:	11 24       	eor	r1, r1
    11e2:	82 0f       	add	r24, r18
    11e4:	93 1f       	adc	r25, r19
    11e6:	4e ef       	ldi	r20, 0xFE	; 254
    11e8:	54 e0       	ldi	r21, 0x04	; 4
    11ea:	6b e9       	ldi	r22, 0x9B	; 155
    11ec:	77 e1       	ldi	r23, 0x17	; 23
    11ee:	82 59       	subi	r24, 0x92	; 146
    11f0:	9d 4f       	sbci	r25, 0xFD	; 253
    11f2:	83 d1       	rcall	.+774    	; 0x14fa <enqueue>
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
    11f4:	a0 91 0c 05 	lds	r26, 0x050C	; 0x80050c <Cp>
    11f8:	b0 91 0d 05 	lds	r27, 0x050D	; 0x80050d <Cp+0x1>
    11fc:	a4 5e       	subi	r26, 0xE4	; 228
    11fe:	be 4f       	sbci	r27, 0xFE	; 254
    1200:	2d 91       	ld	r18, X+
    1202:	3c 91       	ld	r19, X
    1204:	11 97       	sbiw	r26, 0x01	; 1
    1206:	21 50       	subi	r18, 0x01	; 1
    1208:	31 09       	sbc	r19, r1
    120a:	fe 01       	movw	r30, r28
    120c:	32 96       	adiw	r30, 0x02	; 2
    120e:	ee 0f       	add	r30, r30
    1210:	ff 1f       	adc	r31, r31
    1212:	12 9f       	mul	r17, r18
    1214:	c0 01       	movw	r24, r0
    1216:	13 9f       	mul	r17, r19
    1218:	90 0d       	add	r25, r0
    121a:	11 24       	eor	r1, r1
    121c:	e8 0f       	add	r30, r24
    121e:	f9 1f       	adc	r31, r25
    1220:	e2 59       	subi	r30, 0x92	; 146
    1222:	fd 4f       	sbci	r31, 0xFD	; 253
    1224:	11 82       	std	Z+1, r1	; 0x01
    1226:	10 82       	st	Z, r1
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
    1228:	8d 91       	ld	r24, X+
    122a:	9c 91       	ld	r25, X
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	18 9f       	mul	r17, r24
    1230:	f0 01       	movw	r30, r0
    1232:	19 9f       	mul	r17, r25
    1234:	f0 0d       	add	r31, r0
    1236:	11 24       	eor	r1, r1
    1238:	e2 59       	subi	r30, 0x92	; 146
    123a:	fd 4f       	sbci	r31, 0xFD	; 253
    123c:	84 a1       	ldd	r24, Z+36	; 0x24
    123e:	95 a1       	ldd	r25, Z+37	; 0x25
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	95 a3       	std	Z+37, r25	; 0x25
    1244:	84 a3       	std	Z+36, r24	; 0x24
		else OS_Abort(6); // cant have more than 1 sender
		return; // return without blocking
	} else { //receivers are waiting
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(6); // cant have more than 1 sender
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
    1246:	21 97       	sbiw	r28, 0x01	; 1
    1248:	0a f0       	brmi	.+2      	; 0x124c <kernel_async_send+0x270>
    124a:	34 cf       	rjmp	.-408    	; 0x10b4 <kernel_async_send+0xd8>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
		}
		ChannelArray[Cp->senderChannel - 1].val = NULL;
    124c:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <Cp>
    1250:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <Cp+0x1>
    1254:	e4 5e       	subi	r30, 0xE4	; 228
    1256:	fe 4f       	sbci	r31, 0xFE	; 254
    1258:	80 81       	ld	r24, Z
    125a:	91 81       	ldd	r25, Z+1	; 0x01
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	29 e2       	ldi	r18, 0x29	; 41
    1260:	28 9f       	mul	r18, r24
    1262:	f0 01       	movw	r30, r0
    1264:	29 9f       	mul	r18, r25
    1266:	f0 0d       	add	r31, r0
    1268:	11 24       	eor	r1, r1
    126a:	e2 59       	subi	r30, 0x92	; 146
    126c:	fd 4f       	sbci	r31, 0xFD	; 253
    126e:	10 a6       	std	Z+40, r1	; 0x28
    1270:	17 a2       	std	Z+39, r1	; 0x27
	}
}
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	08 95       	ret

0000127c <OS_Start>:
}

/**
  * This function starts the RTOS after creating a_main
  */
void OS_Start() {   
    127c:	cf 92       	push	r12
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
	if ( (! KernelActive) && (Tasks > 0)) {
    128c:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <KernelActive>
    1290:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <KernelActive+0x1>
    1294:	89 2b       	or	r24, r25
    1296:	09 f0       	breq	.+2      	; 0x129a <OS_Start+0x1e>
    1298:	10 c1       	rjmp	.+544    	; 0x14ba <OS_Start+0x23e>
    129a:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <Tasks>
    129e:	90 91 09 05 	lds	r25, 0x0509	; 0x800509 <Tasks+0x1>
    12a2:	89 2b       	or	r24, r25
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <OS_Start+0x2c>
    12a6:	09 c1       	rjmp	.+530    	; 0x14ba <OS_Start+0x23e>
		Disable_Interrupt();
    12a8:	f8 94       	cli

		KernelActive = 1;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <KernelActive+0x1>
    12b2:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <KernelActive>
  * corresponding kernel function on its behalf.
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */
    12b6:	5c d9       	rcall	.-3400   	; 0x570 <Dispatch>
			if(Cp->priority == SYSTEM) 
				break;
			else
				Cp->request = NEXT;
cnext:	case NEXT:
			Cp->state = READY;
    12b8:	dd 24       	eor	r13, r13
    12ba:	d3 94       	inc	r13
		case CREATE_SYS:
			Cp->response = Kernel_Create_Task( Cp->code, SYSTEM, Cp->arg, -1, -1, -1);
			if(Cp->priority == SYSTEM) 
				break;
			else
				Cp->request = NEXT;
    12bc:	0f 2e       	mov	r0, r31
    12be:	f5 e0       	ldi	r31, 0x05	; 5
    12c0:	cf 2e       	mov	r12, r31
    12c2:	f0 2d       	mov	r31, r0
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */

	while(1) {
		Cp->request = NONE; /* clear its request */
    12c4:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <Cp>
    12c8:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <Cp+0x1>
    12cc:	df 01       	movw	r26, r30
    12ce:	a5 5f       	subi	r26, 0xF5	; 245
    12d0:	be 4f       	sbci	r27, 0xFE	; 254
    12d2:	1c 92       	st	X, r1

		/* activate this newly selected task */
		CurrentSp = Cp->sp;
    12d4:	82 81       	ldd	r24, Z+2	; 0x02
    12d6:	93 81       	ldd	r25, Z+3	; 0x03
    12d8:	90 93 78 17 	sts	0x1778, r25	; 0x801778 <CurrentSp+0x1>
    12dc:	80 93 77 17 	sts	0x1777, r24	; 0x801777 <CurrentSp>

		Exit_Kernel();    /* or CSwitch() */
    12e0:	0e 94 9e 00 	call	0x13c	; 0x13c <CSwitch>

		/* if this task makes a system call, it will return to here! */

		/* save the Cp's stack pointer */
		Cp->sp = CurrentSp;
    12e4:	c0 91 0c 05 	lds	r28, 0x050C	; 0x80050c <Cp>
    12e8:	d0 91 0d 05 	lds	r29, 0x050D	; 0x80050d <Cp+0x1>
    12ec:	80 91 77 17 	lds	r24, 0x1777	; 0x801777 <CurrentSp>
    12f0:	90 91 78 17 	lds	r25, 0x1778	; 0x801778 <CurrentSp+0x1>
    12f4:	9b 83       	std	Y+3, r25	; 0x03
    12f6:	8a 83       	std	Y+2, r24	; 0x02

		switch(Cp->request){
    12f8:	fe 01       	movw	r30, r28
    12fa:	e5 5f       	subi	r30, 0xF5	; 245
    12fc:	fe 4f       	sbci	r31, 0xFE	; 254
    12fe:	e0 81       	ld	r30, Z
    1300:	8e 2f       	mov	r24, r30
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	fc 01       	movw	r30, r24
    1306:	31 97       	sbiw	r30, 0x01	; 1
    1308:	ea 30       	cpi	r30, 0x0A	; 10
    130a:	f1 05       	cpc	r31, r1
    130c:	d8 f6       	brcc	.-74     	; 0x12c4 <OS_Start+0x48>
    130e:	88 27       	eor	r24, r24
    1310:	ee 58       	subi	r30, 0x8E	; 142
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	8f 4f       	sbci	r24, 0xFF	; 255
    1316:	e2 c3       	rjmp	.+1988   	; 0x1adc <__tablejump2__>
		case CREATE:
			Cp->response = Kernel_Create_Task( Cp->code, Cp->priority, Cp->arg, -1, -1, -1);
    1318:	fe 01       	movw	r30, r28
    131a:	e9 5f       	subi	r30, 0xF9	; 249
    131c:	fe 4f       	sbci	r31, 0xFE	; 254
    131e:	40 81       	ld	r20, Z
    1320:	51 81       	ldd	r21, Z+1	; 0x01
    1322:	32 97       	sbiw	r30, 0x02	; 2
    1324:	60 81       	ld	r22, Z
    1326:	71 81       	ldd	r23, Z+1	; 0x01
    1328:	34 96       	adiw	r30, 0x04	; 4
    132a:	80 81       	ld	r24, Z
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	ee 24       	eor	r14, r14
    1330:	ea 94       	dec	r14
    1332:	fe 2c       	mov	r15, r14
    1334:	0f ef       	ldi	r16, 0xFF	; 255
    1336:	1f ef       	ldi	r17, 0xFF	; 255
    1338:	2f ef       	ldi	r18, 0xFF	; 255
    133a:	3f ef       	ldi	r19, 0xFF	; 255
    133c:	70 d8       	rcall	.-3872   	; 0x41e <Kernel_Create_Task>
    133e:	c4 5f       	subi	r28, 0xF4	; 244
    1340:	de 4f       	sbci	r29, 0xFE	; 254
    1342:	99 83       	std	Y+1, r25	; 0x01
    1344:	88 83       	st	Y, r24
    1346:	be cf       	rjmp	.-132    	; 0x12c4 <OS_Start+0x48>
			break;
		case CREATE_PERIODIC:
			Cp->response = Kernel_Create_Task( Cp->code, PERIODIC, Cp->arg, Cp->offset, Cp->wcet, Cp->period);
    1348:	fe 01       	movw	r30, r28
    134a:	e0 5f       	subi	r30, 0xF0	; 240
    134c:	fe 4f       	sbci	r31, 0xFE	; 254
    134e:	e0 80       	ld	r14, Z
    1350:	f1 80       	ldd	r15, Z+1	; 0x01
    1352:	32 96       	adiw	r30, 0x02	; 2
    1354:	00 81       	ld	r16, Z
    1356:	11 81       	ldd	r17, Z+1	; 0x01
    1358:	32 96       	adiw	r30, 0x02	; 2
    135a:	20 81       	ld	r18, Z
    135c:	31 81       	ldd	r19, Z+1	; 0x01
    135e:	3d 97       	sbiw	r30, 0x0d	; 13
    1360:	40 81       	ld	r20, Z
    1362:	51 81       	ldd	r21, Z+1	; 0x01
    1364:	32 96       	adiw	r30, 0x02	; 2
    1366:	80 81       	ld	r24, Z
    1368:	91 81       	ldd	r25, Z+1	; 0x01
    136a:	62 e0       	ldi	r22, 0x02	; 2
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	57 d8       	rcall	.-3922   	; 0x41e <Kernel_Create_Task>
    1370:	c4 5f       	subi	r28, 0xF4	; 244
    1372:	de 4f       	sbci	r29, 0xFE	; 254
    1374:	99 83       	std	Y+1, r25	; 0x01
    1376:	88 83       	st	Y, r24
			if(Cp->priority == RR && Cp->offset == 0){
    1378:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <Cp>
    137c:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <Cp+0x1>
    1380:	fc 01       	movw	r30, r24
    1382:	eb 5f       	subi	r30, 0xFB	; 251
    1384:	fe 4f       	sbci	r31, 0xFE	; 254
    1386:	20 81       	ld	r18, Z
    1388:	31 81       	ldd	r19, Z+1	; 0x01
    138a:	21 30       	cpi	r18, 0x01	; 1
    138c:	31 05       	cpc	r19, r1
    138e:	09 f0       	breq	.+2      	; 0x1392 <OS_Start+0x116>
    1390:	99 cf       	rjmp	.-206    	; 0x12c4 <OS_Start+0x48>
    1392:	3f 96       	adiw	r30, 0x0f	; 15
    1394:	20 81       	ld	r18, Z
    1396:	31 81       	ldd	r19, Z+1	; 0x01
    1398:	23 2b       	or	r18, r19
    139a:	09 f0       	breq	.+2      	; 0x139e <OS_Start+0x122>
    139c:	93 cf       	rjmp	.-218    	; 0x12c4 <OS_Start+0x48>
				Cp->request = NEXT;
    139e:	39 97       	sbiw	r30, 0x09	; 9
    13a0:	c0 82       	st	Z, r12
    13a2:	3c c0       	rjmp	.+120    	; 0x141c <OS_Start+0x1a0>
				goto cnext;
			}
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
    13a4:	fe 01       	movw	r30, r28
    13a6:	e9 5f       	subi	r30, 0xF9	; 249
    13a8:	fe 4f       	sbci	r31, 0xFE	; 254
    13aa:	40 81       	ld	r20, Z
    13ac:	51 81       	ldd	r21, Z+1	; 0x01
    13ae:	32 96       	adiw	r30, 0x02	; 2
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	ee 24       	eor	r14, r14
    13b6:	ea 94       	dec	r14
    13b8:	fe 2c       	mov	r15, r14
    13ba:	0f ef       	ldi	r16, 0xFF	; 255
    13bc:	1f ef       	ldi	r17, 0xFF	; 255
    13be:	2f ef       	ldi	r18, 0xFF	; 255
    13c0:	3f ef       	ldi	r19, 0xFF	; 255
    13c2:	61 e0       	ldi	r22, 0x01	; 1
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	2b d8       	rcall	.-4010   	; 0x41e <Kernel_Create_Task>
    13c8:	c4 5f       	subi	r28, 0xF4	; 244
    13ca:	de 4f       	sbci	r29, 0xFE	; 254
    13cc:	99 83       	std	Y+1, r25	; 0x01
    13ce:	88 83       	st	Y, r24
    13d0:	79 cf       	rjmp	.-270    	; 0x12c4 <OS_Start+0x48>
			break;
		case CREATE_SYS:
			Cp->response = Kernel_Create_Task( Cp->code, SYSTEM, Cp->arg, -1, -1, -1);
    13d2:	fe 01       	movw	r30, r28
    13d4:	e9 5f       	subi	r30, 0xF9	; 249
    13d6:	fe 4f       	sbci	r31, 0xFE	; 254
    13d8:	40 81       	ld	r20, Z
    13da:	51 81       	ldd	r21, Z+1	; 0x01
    13dc:	32 96       	adiw	r30, 0x02	; 2
    13de:	80 81       	ld	r24, Z
    13e0:	91 81       	ldd	r25, Z+1	; 0x01
    13e2:	ee 24       	eor	r14, r14
    13e4:	ea 94       	dec	r14
    13e6:	fe 2c       	mov	r15, r14
    13e8:	0f ef       	ldi	r16, 0xFF	; 255
    13ea:	1f ef       	ldi	r17, 0xFF	; 255
    13ec:	2f ef       	ldi	r18, 0xFF	; 255
    13ee:	3f ef       	ldi	r19, 0xFF	; 255
    13f0:	63 e0       	ldi	r22, 0x03	; 3
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	14 d8       	rcall	.-4056   	; 0x41e <Kernel_Create_Task>
    13f6:	c4 5f       	subi	r28, 0xF4	; 244
    13f8:	de 4f       	sbci	r29, 0xFE	; 254
    13fa:	99 83       	std	Y+1, r25	; 0x01
    13fc:	88 83       	st	Y, r24
			if(Cp->priority == SYSTEM) 
    13fe:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <Cp>
    1402:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <Cp+0x1>
    1406:	fc 01       	movw	r30, r24
    1408:	eb 5f       	subi	r30, 0xFB	; 251
    140a:	fe 4f       	sbci	r31, 0xFE	; 254
    140c:	20 81       	ld	r18, Z
    140e:	31 81       	ldd	r19, Z+1	; 0x01
    1410:	23 30       	cpi	r18, 0x03	; 3
    1412:	31 05       	cpc	r19, r1
    1414:	09 f4       	brne	.+2      	; 0x1418 <OS_Start+0x19c>
    1416:	56 cf       	rjmp	.-340    	; 0x12c4 <OS_Start+0x48>
				break;
			else
				Cp->request = NEXT;
    1418:	36 96       	adiw	r30, 0x06	; 6
    141a:	c0 82       	st	Z, r12
cnext:	case NEXT:
			Cp->state = READY;
    141c:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <Cp>
    1420:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <Cp+0x1>
    1424:	fc 01       	movw	r30, r24
    1426:	ec 5f       	subi	r30, 0xFC	; 252
    1428:	fe 4f       	sbci	r31, 0xFE	; 254
    142a:	d0 82       	st	Z, r13
			if (Cp->priority == SYSTEM) {
    142c:	31 96       	adiw	r30, 0x01	; 1
    142e:	20 81       	ld	r18, Z
    1430:	31 81       	ldd	r19, Z+1	; 0x01
    1432:	23 30       	cpi	r18, 0x03	; 3
    1434:	31 05       	cpc	r19, r1
    1436:	41 f4       	brne	.+16     	; 0x1448 <OS_Start+0x1cc>
				enqueue(&Cp, &SysQueue, &SysCount);
    1438:	42 e0       	ldi	r20, 0x02	; 2
    143a:	55 e0       	ldi	r21, 0x05	; 5
    143c:	65 e5       	ldi	r22, 0x55	; 85
    143e:	77 e1       	ldi	r23, 0x17	; 23
    1440:	8c e0       	ldi	r24, 0x0C	; 12
    1442:	95 e0       	ldi	r25, 0x05	; 5
    1444:	5a d0       	rcall	.+180    	; 0x14fa <enqueue>
    1446:	1e c0       	rjmp	.+60     	; 0x1484 <OS_Start+0x208>
			} else if (Cp->priority == PERIODIC) {
    1448:	fc 01       	movw	r30, r24
    144a:	eb 5f       	subi	r30, 0xFB	; 251
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	20 81       	ld	r18, Z
    1450:	31 81       	ldd	r19, Z+1	; 0x01
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	41 f4       	brne	.+16     	; 0x1468 <OS_Start+0x1ec>
				enqueuePeriodic(&Cp, &PeriodicQueue, &PeriodicCount);
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	55 e0       	ldi	r21, 0x05	; 5
    145c:	69 e7       	ldi	r22, 0x79	; 121
    145e:	77 e1       	ldi	r23, 0x17	; 23
    1460:	8c e0       	ldi	r24, 0x0C	; 12
    1462:	95 e0       	ldi	r25, 0x05	; 5
    1464:	9c d0       	rcall	.+312    	; 0x159e <enqueuePeriodic>
    1466:	0e c0       	rjmp	.+28     	; 0x1484 <OS_Start+0x208>
			} else if (Cp->priority == RR) {
    1468:	fc 01       	movw	r30, r24
    146a:	eb 5f       	subi	r30, 0xFB	; 251
    146c:	fe 4f       	sbci	r31, 0xFE	; 254
    146e:	80 81       	ld	r24, Z
    1470:	91 81       	ldd	r25, Z+1	; 0x01
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	39 f4       	brne	.+14     	; 0x1484 <OS_Start+0x208>
				enqueue(&Cp, &RRQueue, &RRCount);
    1476:	4e ef       	ldi	r20, 0xFE	; 254
    1478:	54 e0       	ldi	r21, 0x04	; 4
    147a:	6b e9       	ldi	r22, 0x9B	; 155
    147c:	77 e1       	ldi	r23, 0x17	; 23
    147e:	8c e0       	ldi	r24, 0x0C	; 12
    1480:	95 e0       	ldi	r25, 0x05	; 5
    1482:	3b d0       	rcall	.+118    	; 0x14fa <enqueue>
			}
			Dispatch();
    1484:	75 d8       	rcall	.-3862   	; 0x570 <Dispatch>
    1486:	1e cf       	rjmp	.-452    	; 0x12c4 <OS_Start+0x48>
			break;
		case NONE:
			break;
		case CHECK_TIME_VIOLATION:
			CheckTimingViolation();
    1488:	50 d8       	rcall	.-3936   	; 0x52a <CheckTimingViolation>
    148a:	1c cf       	rjmp	.-456    	; 0x12c4 <OS_Start+0x48>
			break;
		case SEND:
			kernel_send();
    148c:	2f db       	rcall	.-2466   	; 0xaec <kernel_send>
    148e:	1a cf       	rjmp	.-460    	; 0x12c4 <OS_Start+0x48>
			break;
		case ASYNC_SEND:
			kernel_async_send();
    1490:	a5 dd       	rcall	.-1206   	; 0xfdc <kernel_async_send>
    1492:	18 cf       	rjmp	.-464    	; 0x12c4 <OS_Start+0x48>
			break;
		case RECEIVE:
			kernel_receive();
    1494:	b4 dc       	rcall	.-1688   	; 0xdfe <kernel_receive>
    1496:	16 cf       	rjmp	.-468    	; 0x12c4 <OS_Start+0x48>

/**
  *  Terminate a task
  */
static void Kernel_Terminate_Task() {
	Cp->state = DEAD;
    1498:	fe 01       	movw	r30, r28
    149a:	ec 5f       	subi	r30, 0xFC	; 252
    149c:	fe 4f       	sbci	r31, 0xFE	; 254
    149e:	10 82       	st	Z, r1
	Cp->processID = 0;
    14a0:	19 82       	std	Y+1, r1	; 0x01
    14a2:	18 82       	st	Y, r1
	Tasks--;
    14a4:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <Tasks>
    14a8:	90 91 09 05 	lds	r25, 0x0509	; 0x800509 <Tasks+0x1>
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <Tasks+0x1>
    14b2:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <Tasks>
			kernel_receive();
			break;
		case TERMINATE:
			/* deallocate all resources used by this task */
			Kernel_Terminate_Task();
			Dispatch();
    14b6:	5c d8       	rcall	.-3912   	; 0x570 <Dispatch>
    14b8:	05 cf       	rjmp	.-502    	; 0x12c4 <OS_Start+0x48>

		KernelActive = 1;
		Next_Kernel_Request();
		/* SHOULD NEVER GET HERE!!! */
	}
}
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	cf 90       	pop	r12
    14ca:	08 95       	ret

000014cc <main>:
/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	//pin 25
	DDRA |= (1<<PA3);
    14cc:	0b 9a       	sbi	0x01, 3	; 1
	PORTA &= ~(1<<PA3);
    14ce:	13 98       	cbi	0x02, 3	; 2

	//pin 26
	DDRA |= (1<<PA4);
    14d0:	0c 9a       	sbi	0x01, 4	; 1
	PORTA &= ~(1<<PA4);
    14d2:	14 98       	cbi	0x02, 4	; 2

	//pin 27
	DDRA |= (1<<PA5);
    14d4:	0d 9a       	sbi	0x01, 5	; 1
	PORTA &= ~(1<<PA5);
    14d6:	15 98       	cbi	0x02, 5	; 2

	//pin 28
	DDRA |= (1<<PA6);
    14d8:	0e 9a       	sbi	0x01, 6	; 1
	PORTA &= ~(1<<PA6);
    14da:	16 98       	cbi	0x02, 6	; 2

	//pin 29
	DDRA |= (1<<PA7);
    14dc:	0f 9a       	sbi	0x01, 7	; 1
	PORTA &= ~(1<<PA7);
    14de:	17 98       	cbi	0x02, 7	; 2

	//pin 30
	DDRC |= (1<<PC7);
    14e0:	3f 9a       	sbi	0x07, 7	; 7
	PORTC &= ~(1<<PC7);
    14e2:	47 98       	cbi	0x08, 7	; 8

	setup();
    14e4:	f8 d9       	rcall	.-3088   	; 0x8d6 <setup>
	OS_Init();
    14e6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <OS_Init>
	Task_Create_Idle();
    14ea:	68 d9       	rcall	.-3376   	; 0x7bc <Task_Create_Idle>
	Task_Create_System(a_main, 42);
    14ec:	6a e2       	ldi	r22, 0x2A	; 42
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	88 e4       	ldi	r24, 0x48	; 72
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	24 d9       	rcall	.-3512   	; 0x73e <Task_Create_System>
	OS_Start();
    14f6:	c2 ce       	rjmp	.-636    	; 0x127c <OS_Start>
    14f8:	08 95       	ret

000014fa <enqueue>:
}

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1500:	28 81       	ld	r18, Y
    1502:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1504:	2f 30       	cpi	r18, 0x0F	; 15
    1506:	31 05       	cpc	r19, r1
    1508:	e9 f0       	breq	.+58     	; 0x1544 <enqueue+0x4a>
        return NULL;
    }

    int i = (*QCount) - 1;
    150a:	e8 81       	ld	r30, Y
    150c:	f9 81       	ldd	r31, Y+1	; 0x01
    150e:	9f 01       	movw	r18, r30
    1510:	21 50       	subi	r18, 0x01	; 1
    1512:	31 09       	sbc	r19, r1
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    1514:	62 f0       	brmi	.+24     	; 0x152e <enqueue+0x34>
    1516:	ee 0f       	add	r30, r30
    1518:	ff 1f       	adc	r31, r31
    151a:	e6 0f       	add	r30, r22
    151c:	f7 1f       	adc	r31, r23
    151e:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    1520:	32 91       	ld	r19, -Z
    1522:	22 91       	ld	r18, -Z
    1524:	33 83       	std	Z+3, r19	; 0x03
    1526:	22 83       	std	Z+2, r18	; 0x02

    int i = (*QCount) - 1;
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    1528:	ea 17       	cp	r30, r26
    152a:	fb 07       	cpc	r31, r27
    152c:	c9 f7       	brne	.-14     	; 0x1520 <enqueue+0x26>
        i--;
        temp = Queue[i];
    }

    //Queue[i+1] = *p; //original code
	Queue[0] = *p;
    152e:	fc 01       	movw	r30, r24
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	fb 01       	movw	r30, r22
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	80 83       	st	Z, r24
    (*QCount)++;
    153a:	88 81       	ld	r24, Y
    153c:	99 81       	ldd	r25, Y+1	; 0x01
    153e:	01 96       	adiw	r24, 0x01	; 1
    1540:	99 83       	std	Y+1, r25	; 0x01
    1542:	88 83       	st	Y, r24
}
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret

0000154a <dequeue>:


/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    154a:	ac 01       	movw	r20, r24
    154c:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    154e:	8d 91       	ld	r24, X+
    1550:	9c 91       	ld	r25, X
    1552:	11 97       	sbiw	r26, 0x01	; 1

/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
   if(isEmpty(QCount)) {
    1554:	89 2b       	or	r24, r25
    1556:	01 f1       	breq	.+64     	; 0x1598 <dequeue+0x4e>
	   return NULL;
   }

   volatile PD *result = (Queue[(*QCount)-1]);
    1558:	ed 91       	ld	r30, X+
    155a:	fc 91       	ld	r31, X
    155c:	11 97       	sbiw	r26, 0x01	; 1
    155e:	e1 50       	subi	r30, 0x01	; 1
    1560:	f0 48       	sbci	r31, 0x80	; 128
    1562:	ee 0f       	add	r30, r30
    1564:	ff 1f       	adc	r31, r31
    1566:	e4 0f       	add	r30, r20
    1568:	f5 1f       	adc	r31, r21
    156a:	80 81       	ld	r24, Z
    156c:	91 81       	ldd	r25, Z+1	; 0x01
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
    156e:	2d 91       	ld	r18, X+
    1570:	3c 91       	ld	r19, X
    1572:	11 97       	sbiw	r26, 0x01	; 1
    1574:	f9 01       	movw	r30, r18
    1576:	e1 50       	subi	r30, 0x01	; 1
    1578:	f0 48       	sbci	r31, 0x80	; 128
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	e4 0f       	add	r30, r20
    1580:	f5 1f       	adc	r31, r21
    1582:	11 82       	std	Z+1, r1	; 0x01
    1584:	10 82       	st	Z, r1
   (*QCount)--;
    1586:	2d 91       	ld	r18, X+
    1588:	3c 91       	ld	r19, X
    158a:	11 97       	sbiw	r26, 0x01	; 1
    158c:	21 50       	subi	r18, 0x01	; 1
    158e:	31 09       	sbc	r19, r1
    1590:	11 96       	adiw	r26, 0x01	; 1
    1592:	3c 93       	st	X, r19
    1594:	2e 93       	st	-X, r18

   return result;
    1596:	08 95       	ret
/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
   if(isEmpty(QCount)) {
	   return NULL;
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
   volatile PD *result = (Queue[(*QCount)-1]);
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
   (*QCount)--;

   return result;
}
    159c:	08 95       	ret

0000159e <enqueuePeriodic>:

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    15b0:	ea 01       	movw	r28, r20
    15b2:	28 81       	ld	r18, Y
    15b4:	39 81       	ldd	r19, Y+1	; 0x01

   return result;
}

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
	if(isFull(QCount)) {
    15b6:	2f 30       	cpi	r18, 0x0F	; 15
    15b8:	31 05       	cpc	r19, r1
    15ba:	09 f4       	brne	.+2      	; 0x15be <enqueuePeriodic+0x20>
    15bc:	4a c0       	rjmp	.+148    	; 0x1652 <enqueuePeriodic+0xb4>
		return;
	}

	int i = (*QCount) - 1;
    15be:	28 81       	ld	r18, Y
    15c0:	39 81       	ldd	r19, Y+1	; 0x01
    15c2:	21 50       	subi	r18, 0x01	; 1
    15c4:	31 09       	sbc	r19, r1

	volatile PD *new = *p;
    15c6:	fc 01       	movw	r30, r24
    15c8:	00 81       	ld	r16, Z
    15ca:	11 81       	ldd	r17, Z+1	; 0x01

	volatile PD *temp = Queue[i];
    15cc:	f9 01       	movw	r30, r18
    15ce:	ee 0f       	add	r30, r30
    15d0:	ff 1f       	adc	r31, r31
    15d2:	db 01       	movw	r26, r22
    15d4:	ae 0f       	add	r26, r30
    15d6:	bf 1f       	adc	r27, r31
    15d8:	4d 91       	ld	r20, X+
    15da:	5c 91       	ld	r21, X

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    15dc:	33 23       	and	r19, r19
    15de:	3c f1       	brlt	.+78     	; 0x162e <enqueuePeriodic+0x90>
    15e0:	d8 01       	movw	r26, r16
    15e2:	aa 5e       	subi	r26, 0xEA	; 234
    15e4:	be 4f       	sbci	r27, 0xFE	; 254
    15e6:	ed 90       	ld	r14, X+
    15e8:	fc 90       	ld	r15, X
    15ea:	da 01       	movw	r26, r20
    15ec:	aa 5e       	subi	r26, 0xEA	; 234
    15ee:	be 4f       	sbci	r27, 0xFE	; 254
    15f0:	4d 91       	ld	r20, X+
    15f2:	5c 91       	ld	r21, X
    15f4:	e4 16       	cp	r14, r20
    15f6:	f5 06       	cpc	r15, r21
    15f8:	d4 f0       	brlt	.+52     	; 0x162e <enqueuePeriodic+0x90>
    15fa:	e6 0f       	add	r30, r22
    15fc:	f7 1f       	adc	r31, r23
    15fe:	0a 5e       	subi	r16, 0xEA	; 234
    1600:	1e 4f       	sbci	r17, 0xFE	; 254
		Queue[i+1] = Queue[i];
    1602:	a0 81       	ld	r26, Z
    1604:	b1 81       	ldd	r27, Z+1	; 0x01
    1606:	b3 83       	std	Z+3, r27	; 0x03
    1608:	a2 83       	std	Z+2, r26	; 0x02
		i--;
    160a:	21 50       	subi	r18, 0x01	; 1
    160c:	31 09       	sbc	r19, r1
		temp = Queue[i];
    160e:	b2 91       	ld	r27, -Z
    1610:	a2 91       	ld	r26, -Z

	volatile PD *new = *p;

	volatile PD *temp = Queue[i];

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    1612:	2f 3f       	cpi	r18, 0xFF	; 255
    1614:	4f ef       	ldi	r20, 0xFF	; 255
    1616:	34 07       	cpc	r19, r20
    1618:	51 f0       	breq	.+20     	; 0x162e <enqueuePeriodic+0x90>
    161a:	e8 01       	movw	r28, r16
    161c:	e8 80       	ld	r14, Y
    161e:	f9 80       	ldd	r15, Y+1	; 0x01
    1620:	aa 5e       	subi	r26, 0xEA	; 234
    1622:	be 4f       	sbci	r27, 0xFE	; 254
    1624:	4d 91       	ld	r20, X+
    1626:	5c 91       	ld	r21, X
    1628:	e4 16       	cp	r14, r20
    162a:	f5 06       	cpc	r15, r21
    162c:	54 f7       	brge	.-44     	; 0x1602 <enqueuePeriodic+0x64>
		Queue[i+1] = Queue[i];
		i--;
		temp = Queue[i];
	}

	Queue[i+1] = *p;
    162e:	fc 01       	movw	r30, r24
    1630:	80 81       	ld	r24, Z
    1632:	91 81       	ldd	r25, Z+1	; 0x01
    1634:	2f 5f       	subi	r18, 0xFF	; 255
    1636:	3f 4f       	sbci	r19, 0xFF	; 255
    1638:	22 0f       	add	r18, r18
    163a:	33 1f       	adc	r19, r19
    163c:	fb 01       	movw	r30, r22
    163e:	e2 0f       	add	r30, r18
    1640:	f3 1f       	adc	r31, r19
    1642:	91 83       	std	Z+1, r25	; 0x01
    1644:	80 83       	st	Z, r24
	(*QCount)++;
    1646:	e6 01       	movw	r28, r12
    1648:	88 81       	ld	r24, Y
    164a:	99 81       	ldd	r25, Y+1	; 0x01
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	99 83       	std	Y+1, r25	; 0x01
    1650:	88 83       	st	Y, r24
}
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	df 90       	pop	r13
    1660:	cf 90       	pop	r12
    1662:	08 95       	ret

00001664 <peek>:

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1664:	fb 01       	movw	r30, r22
    1666:	20 81       	ld	r18, Z
    1668:	31 81       	ldd	r19, Z+1	; 0x01
	Queue[i+1] = *p;
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
    166a:	23 2b       	or	r18, r19
    166c:	61 f0       	breq	.+24     	; 0x1686 <peek+0x22>
		return NULL;
	}
	volatile PD *result = (Queue[(*QCount)-1]);
    166e:	20 81       	ld	r18, Z
    1670:	31 81       	ldd	r19, Z+1	; 0x01
    1672:	f9 01       	movw	r30, r18
    1674:	e1 50       	subi	r30, 0x01	; 1
    1676:	f0 48       	sbci	r31, 0x80	; 128
    1678:	ee 0f       	add	r30, r30
    167a:	ff 1f       	adc	r31, r31
    167c:	e8 0f       	add	r30, r24
    167e:	f9 1f       	adc	r31, r25
    1680:	80 81       	ld	r24, Z
    1682:	91 81       	ldd	r25, Z+1	; 0x01
	return result;
    1684:	08 95       	ret
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
		return NULL;
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
	}
	volatile PD *result = (Queue[(*QCount)-1]);
	return result;
    168a:	08 95       	ret

0000168c <Periodic_Task>:
		add_to_trace(trace, temp);
	}
}

static void Periodic_Task(){
	itoa(Task_GetArg(), temp, 10);
    168c:	1b d9       	rcall	.-3530   	; 0x8c4 <Task_GetArg>
    168e:	4a e0       	ldi	r20, 0x0A	; 10
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	62 e3       	ldi	r22, 0x32	; 50
    1694:	77 e1       	ldi	r23, 0x17	; 23
    1696:	3e d2       	rcall	.+1148   	; 0x1b14 <itoa>
	add_to_trace(trace, temp);
    1698:	62 e3       	ldi	r22, 0x32	; 50
    169a:	77 e1       	ldi	r23, 0x17	; 23
    169c:	87 e3       	ldi	r24, 0x37	; 55
    169e:	97 e1       	ldi	r25, 0x17	; 23
    16a0:	e4 d1       	rcall	.+968    	; 0x1a6a <add_to_trace>
	sent_value = Task_GetArg();
    16a2:	10 d9       	rcall	.-3552   	; 0x8c4 <Task_GetArg>
    16a4:	90 93 2f 17 	sts	0x172F, r25	; 0x80172f <sent_value+0x1>
    16a8:	80 93 2e 17 	sts	0x172E, r24	; 0x80172e <sent_value>
	Write(c, Task_GetArg());
    16ac:	0b d9       	rcall	.-3562   	; 0x8c4 <Task_GetArg>
    16ae:	bc 01       	movw	r22, r24
    16b0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    16b4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    16b8:	80 dc       	rcall	.-1792   	; 0xfba <Write>
	itoa(Task_GetArg(), temp, 10);
    16ba:	04 d9       	rcall	.-3576   	; 0x8c4 <Task_GetArg>
    16bc:	4a e0       	ldi	r20, 0x0A	; 10
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	62 e3       	ldi	r22, 0x32	; 50
    16c2:	77 e1       	ldi	r23, 0x17	; 23
    16c4:	27 d2       	rcall	.+1102   	; 0x1b14 <itoa>
	add_to_trace(trace, temp);
    16c6:	62 e3       	ldi	r22, 0x32	; 50
    16c8:	77 e1       	ldi	r23, 0x17	; 23
    16ca:	87 e3       	ldi	r24, 0x37	; 55
    16cc:	97 e1       	ldi	r25, 0x17	; 23
    16ce:	cd c1       	rjmp	.+922    	; 0x1a6a <add_to_trace>
    16d0:	08 95       	ret

000016d2 <RR_Task_2>:
	itoa(Task_GetArg(), temp, 10);
	add_to_trace(trace, temp);
}

static void RR_Task_2(){
	itoa(Task_GetArg(), temp, 10);
    16d2:	f8 d8       	rcall	.-3600   	; 0x8c4 <Task_GetArg>
    16d4:	4a e0       	ldi	r20, 0x0A	; 10
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	62 e3       	ldi	r22, 0x32	; 50
    16da:	77 e1       	ldi	r23, 0x17	; 23
    16dc:	1b d2       	rcall	.+1078   	; 0x1b14 <itoa>
	add_to_trace(trace, temp);
    16de:	62 e3       	ldi	r22, 0x32	; 50
    16e0:	77 e1       	ldi	r23, 0x17	; 23
    16e2:	87 e3       	ldi	r24, 0x37	; 55
    16e4:	97 e1       	ldi	r25, 0x17	; 23
    16e6:	c1 d1       	rcall	.+898    	; 0x1a6a <add_to_trace>
	if(test == 1 || test == 2 || (test == 3 && c == -1))
    16e8:	80 91 30 17 	lds	r24, 0x1730	; 0x801730 <test>
    16ec:	90 91 31 17 	lds	r25, 0x1731	; 0x801731 <test+0x1>
    16f0:	9c 01       	movw	r18, r24
    16f2:	21 50       	subi	r18, 0x01	; 1
    16f4:	31 09       	sbc	r19, r1
    16f6:	22 30       	cpi	r18, 0x02	; 2
    16f8:	31 05       	cpc	r19, r1
    16fa:	40 f0       	brcs	.+16     	; 0x170c <RR_Task_2+0x3a>
    16fc:	03 97       	sbiw	r24, 0x03	; 3
    16fe:	59 f4       	brne	.+22     	; 0x1716 <RR_Task_2+0x44>
    1700:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    1704:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	29 f4       	brne	.+10     	; 0x1716 <RR_Task_2+0x44>
		c = Chan_Init();
    170c:	91 d9       	rcall	.-3294   	; 0xa30 <Chan_Init>
    170e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    1712:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
	int k = Recv(c);
    1716:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    171a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    171e:	4e db       	rcall	.-2404   	; 0xdbc <Recv>
	if(k == sent_value){
    1720:	20 91 2e 17 	lds	r18, 0x172E	; 0x80172e <sent_value>
    1724:	30 91 2f 17 	lds	r19, 0x172F	; 0x80172f <sent_value+0x1>
    1728:	82 17       	cp	r24, r18
    172a:	93 07       	cpc	r25, r19
    172c:	59 f4       	brne	.+22     	; 0x1744 <RR_Task_2+0x72>
		itoa(Task_GetArg(), temp, 10);
    172e:	ca d8       	rcall	.-3692   	; 0x8c4 <Task_GetArg>
    1730:	4a e0       	ldi	r20, 0x0A	; 10
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	62 e3       	ldi	r22, 0x32	; 50
    1736:	77 e1       	ldi	r23, 0x17	; 23
    1738:	ed d1       	rcall	.+986    	; 0x1b14 <itoa>
		add_to_trace(trace, temp);
    173a:	62 e3       	ldi	r22, 0x32	; 50
    173c:	77 e1       	ldi	r23, 0x17	; 23
    173e:	87 e3       	ldi	r24, 0x37	; 55
    1740:	97 e1       	ldi	r25, 0x17	; 23
    1742:	93 c1       	rjmp	.+806    	; 0x1a6a <add_to_trace>
    1744:	08 95       	ret

00001746 <System_Task_2>:
	itoa(Task_GetArg(), temp, 10);
	add_to_trace(trace, temp);
}

static void System_Task_2(){
	itoa(Task_GetArg(), temp, 10);
    1746:	be d8       	rcall	.-3716   	; 0x8c4 <Task_GetArg>
    1748:	4a e0       	ldi	r20, 0x0A	; 10
    174a:	50 e0       	ldi	r21, 0x00	; 0
    174c:	62 e3       	ldi	r22, 0x32	; 50
    174e:	77 e1       	ldi	r23, 0x17	; 23
    1750:	e1 d1       	rcall	.+962    	; 0x1b14 <itoa>
	add_to_trace(trace, temp);
    1752:	62 e3       	ldi	r22, 0x32	; 50
    1754:	77 e1       	ldi	r23, 0x17	; 23
    1756:	87 e3       	ldi	r24, 0x37	; 55
    1758:	97 e1       	ldi	r25, 0x17	; 23
    175a:	87 d1       	rcall	.+782    	; 0x1a6a <add_to_trace>
	if(test == 1 || test == 2 || (test == 3 && c == -1) || (test == 4 && c == -1))
    175c:	80 91 30 17 	lds	r24, 0x1730	; 0x801730 <test>
    1760:	90 91 31 17 	lds	r25, 0x1731	; 0x801731 <test+0x1>
    1764:	9c 01       	movw	r18, r24
    1766:	21 50       	subi	r18, 0x01	; 1
    1768:	31 09       	sbc	r19, r1
    176a:	22 30       	cpi	r18, 0x02	; 2
    176c:	31 05       	cpc	r19, r1
    176e:	90 f0       	brcs	.+36     	; 0x1794 <System_Task_2+0x4e>
    1770:	83 30       	cpi	r24, 0x03	; 3
    1772:	91 05       	cpc	r25, r1
    1774:	39 f4       	brne	.+14     	; 0x1784 <System_Task_2+0x3e>
    1776:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    177a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	71 f4       	brne	.+28     	; 0x179e <System_Task_2+0x58>
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <System_Task_2+0x4e>
    1784:	04 97       	sbiw	r24, 0x04	; 4
    1786:	59 f4       	brne	.+22     	; 0x179e <System_Task_2+0x58>
    1788:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    178c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	29 f4       	brne	.+10     	; 0x179e <System_Task_2+0x58>
		c = Chan_Init();
    1794:	4d d9       	rcall	.-3430   	; 0xa30 <Chan_Init>
    1796:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    179a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
	int k = Recv(c);
    179e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    17a2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    17a6:	0a db       	rcall	.-2540   	; 0xdbc <Recv>
	if(k == sent_value){
    17a8:	20 91 2e 17 	lds	r18, 0x172E	; 0x80172e <sent_value>
    17ac:	30 91 2f 17 	lds	r19, 0x172F	; 0x80172f <sent_value+0x1>
    17b0:	82 17       	cp	r24, r18
    17b2:	93 07       	cpc	r25, r19
    17b4:	59 f4       	brne	.+22     	; 0x17cc <System_Task_2+0x86>
		itoa(Task_GetArg(), temp, 10);
    17b6:	86 d8       	rcall	.-3828   	; 0x8c4 <Task_GetArg>
    17b8:	4a e0       	ldi	r20, 0x0A	; 10
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	62 e3       	ldi	r22, 0x32	; 50
    17be:	77 e1       	ldi	r23, 0x17	; 23
    17c0:	a9 d1       	rcall	.+850    	; 0x1b14 <itoa>
		add_to_trace(trace, temp);
    17c2:	62 e3       	ldi	r22, 0x32	; 50
    17c4:	77 e1       	ldi	r23, 0x17	; 23
    17c6:	87 e3       	ldi	r24, 0x37	; 55
    17c8:	97 e1       	ldi	r25, 0x17	; 23
    17ca:	4f c1       	rjmp	.+670    	; 0x1a6a <add_to_trace>
    17cc:	08 95       	ret

000017ce <RR_Task_1>:
	itoa(Task_GetArg(), temp, 10);
	add_to_trace(trace, temp);
}

static void RR_Task_1(){
	itoa(Task_GetArg(), temp, 10);
    17ce:	7a d8       	rcall	.-3852   	; 0x8c4 <Task_GetArg>
    17d0:	4a e0       	ldi	r20, 0x0A	; 10
    17d2:	50 e0       	ldi	r21, 0x00	; 0
    17d4:	62 e3       	ldi	r22, 0x32	; 50
    17d6:	77 e1       	ldi	r23, 0x17	; 23
    17d8:	9d d1       	rcall	.+826    	; 0x1b14 <itoa>
	add_to_trace(trace, temp);
    17da:	62 e3       	ldi	r22, 0x32	; 50
    17dc:	77 e1       	ldi	r23, 0x17	; 23
    17de:	87 e3       	ldi	r24, 0x37	; 55
    17e0:	97 e1       	ldi	r25, 0x17	; 23
    17e2:	43 d1       	rcall	.+646    	; 0x1a6a <add_to_trace>
	sent_value = Task_GetArg();
    17e4:	6f d8       	rcall	.-3874   	; 0x8c4 <Task_GetArg>
    17e6:	90 93 2f 17 	sts	0x172F, r25	; 0x80172f <sent_value+0x1>
    17ea:	80 93 2e 17 	sts	0x172E, r24	; 0x80172e <sent_value>
	Send(c, Task_GetArg());
    17ee:	6a d8       	rcall	.-3884   	; 0x8c4 <Task_GetArg>
    17f0:	bc 01       	movw	r22, r24
    17f2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    17f6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    17fa:	5c d9       	rcall	.-3400   	; 0xab4 <Send>
	itoa(Task_GetArg(), temp, 10);
    17fc:	63 d8       	rcall	.-3898   	; 0x8c4 <Task_GetArg>
    17fe:	4a e0       	ldi	r20, 0x0A	; 10
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	62 e3       	ldi	r22, 0x32	; 50
    1804:	77 e1       	ldi	r23, 0x17	; 23
    1806:	86 d1       	rcall	.+780    	; 0x1b14 <itoa>
	add_to_trace(trace, temp);
    1808:	62 e3       	ldi	r22, 0x32	; 50
    180a:	77 e1       	ldi	r23, 0x17	; 23
    180c:	87 e3       	ldi	r24, 0x37	; 55
    180e:	97 e1       	ldi	r25, 0x17	; 23
    1810:	2c c1       	rjmp	.+600    	; 0x1a6a <add_to_trace>
    1812:	08 95       	ret

00001814 <System_Task_1>:
static CHAN c = -1;
static int test;
static int sent_value;

static void System_Task_1(){
	itoa(Task_GetArg(), temp, 10);
    1814:	57 d8       	rcall	.-3922   	; 0x8c4 <Task_GetArg>
    1816:	4a e0       	ldi	r20, 0x0A	; 10
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	62 e3       	ldi	r22, 0x32	; 50
    181c:	77 e1       	ldi	r23, 0x17	; 23
    181e:	7a d1       	rcall	.+756    	; 0x1b14 <itoa>
	add_to_trace(trace, temp);
    1820:	62 e3       	ldi	r22, 0x32	; 50
    1822:	77 e1       	ldi	r23, 0x17	; 23
    1824:	87 e3       	ldi	r24, 0x37	; 55
    1826:	97 e1       	ldi	r25, 0x17	; 23
    1828:	20 d1       	rcall	.+576    	; 0x1a6a <add_to_trace>
	if(test == 0)
    182a:	80 91 30 17 	lds	r24, 0x1730	; 0x801730 <test>
    182e:	90 91 31 17 	lds	r25, 0x1731	; 0x801731 <test+0x1>
    1832:	89 2b       	or	r24, r25
    1834:	29 f4       	brne	.+10     	; 0x1840 <System_Task_1+0x2c>
		c = Chan_Init();
    1836:	fc d8       	rcall	.-3592   	; 0xa30 <Chan_Init>
    1838:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    183c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
	sent_value = Task_GetArg();
    1840:	41 d8       	rcall	.-3966   	; 0x8c4 <Task_GetArg>
    1842:	90 93 2f 17 	sts	0x172F, r25	; 0x80172f <sent_value+0x1>
    1846:	80 93 2e 17 	sts	0x172E, r24	; 0x80172e <sent_value>
	Send(c, Task_GetArg());
    184a:	3c d8       	rcall	.-3976   	; 0x8c4 <Task_GetArg>
    184c:	bc 01       	movw	r22, r24
    184e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    1852:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    1856:	2e d9       	rcall	.-3492   	; 0xab4 <Send>
	itoa(Task_GetArg(), temp, 10);
    1858:	35 d8       	rcall	.-3990   	; 0x8c4 <Task_GetArg>
    185a:	4a e0       	ldi	r20, 0x0A	; 10
    185c:	50 e0       	ldi	r21, 0x00	; 0
    185e:	62 e3       	ldi	r22, 0x32	; 50
    1860:	77 e1       	ldi	r23, 0x17	; 23
    1862:	58 d1       	rcall	.+688    	; 0x1b14 <itoa>
	add_to_trace(trace, temp);
    1864:	62 e3       	ldi	r22, 0x32	; 50
    1866:	77 e1       	ldi	r23, 0x17	; 23
    1868:	87 e3       	ldi	r24, 0x37	; 55
    186a:	97 e1       	ldi	r25, 0x17	; 23
    186c:	fe c0       	rjmp	.+508    	; 0x1a6a <add_to_trace>
    186e:	08 95       	ret

00001870 <error_check>:
		add_to_trace(trace, temp);
	}
}

static void error_check(){
	switch(test){
    1870:	80 91 30 17 	lds	r24, 0x1730	; 0x801730 <test>
    1874:	90 91 31 17 	lds	r25, 0x1731	; 0x801731 <test+0x1>
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	91 05       	cpc	r25, r1
    187c:	c9 f0       	breq	.+50     	; 0x18b0 <error_check+0x40>
    187e:	1c f4       	brge	.+6      	; 0x1886 <error_check+0x16>
    1880:	89 2b       	or	r24, r25
    1882:	39 f0       	breq	.+14     	; 0x1892 <error_check+0x22>
    1884:	42 c0       	rjmp	.+132    	; 0x190a <error_check+0x9a>
    1886:	82 30       	cpi	r24, 0x02	; 2
    1888:	91 05       	cpc	r25, r1
    188a:	09 f1       	breq	.+66     	; 0x18ce <error_check+0x5e>
    188c:	03 97       	sbiw	r24, 0x03	; 3
    188e:	71 f1       	breq	.+92     	; 0x18ec <error_check+0x7c>
    1890:	3c c0       	rjmp	.+120    	; 0x190a <error_check+0x9a>
		case 0:
			if(strcmp(trace, "1221") == 0)
    1892:	62 e0       	ldi	r22, 0x02	; 2
    1894:	72 e0       	ldi	r23, 0x02	; 2
    1896:	87 e3       	ldi	r24, 0x37	; 55
    1898:	97 e1       	ldi	r25, 0x17	; 23
    189a:	33 d1       	rcall	.+614    	; 0x1b02 <strcmp>
    189c:	89 2b       	or	r24, r25
    189e:	21 f4       	brne	.+8      	; 0x18a8 <error_check+0x38>
				uart_write("test_chan_send_recieve PASSED");
    18a0:	87 e0       	ldi	r24, 0x07	; 7
    18a2:	92 e0       	ldi	r25, 0x02	; 2
    18a4:	fb c0       	rjmp	.+502    	; 0x1a9c <uart_write>
    18a6:	08 95       	ret
			else 
				uart_write("test_chan_send_recieve FAILED");
    18a8:	85 e2       	ldi	r24, 0x25	; 37
    18aa:	92 e0       	ldi	r25, 0x02	; 2
    18ac:	f7 c0       	rjmp	.+494    	; 0x1a9c <uart_write>
    18ae:	08 95       	ret
			break;
		case 1:
			if(strcmp(trace, "3443") == 0)
    18b0:	63 e4       	ldi	r22, 0x43	; 67
    18b2:	72 e0       	ldi	r23, 0x02	; 2
    18b4:	87 e3       	ldi	r24, 0x37	; 55
    18b6:	97 e1       	ldi	r25, 0x17	; 23
    18b8:	24 d1       	rcall	.+584    	; 0x1b02 <strcmp>
    18ba:	89 2b       	or	r24, r25
    18bc:	21 f4       	brne	.+8      	; 0x18c6 <error_check+0x56>
				uart_write("test_chan_send_recieve PASSED");
    18be:	87 e0       	ldi	r24, 0x07	; 7
    18c0:	92 e0       	ldi	r25, 0x02	; 2
    18c2:	ec c0       	rjmp	.+472    	; 0x1a9c <uart_write>
    18c4:	08 95       	ret
			else
				uart_write("test_chan_send_recieve FAILED");
    18c6:	85 e2       	ldi	r24, 0x25	; 37
    18c8:	92 e0       	ldi	r25, 0x02	; 2
    18ca:	e8 c0       	rjmp	.+464    	; 0x1a9c <uart_write>
    18cc:	08 95       	ret
			break;
		case 2:
			if(strcmp(trace, "5665") == 0)
    18ce:	68 e4       	ldi	r22, 0x48	; 72
    18d0:	72 e0       	ldi	r23, 0x02	; 2
    18d2:	87 e3       	ldi	r24, 0x37	; 55
    18d4:	97 e1       	ldi	r25, 0x17	; 23
    18d6:	15 d1       	rcall	.+554    	; 0x1b02 <strcmp>
    18d8:	89 2b       	or	r24, r25
    18da:	21 f4       	brne	.+8      	; 0x18e4 <error_check+0x74>
				uart_write("test_chan_send_recieve PASSED");
    18dc:	87 e0       	ldi	r24, 0x07	; 7
    18de:	92 e0       	ldi	r25, 0x02	; 2
    18e0:	dd c0       	rjmp	.+442    	; 0x1a9c <uart_write>
    18e2:	08 95       	ret
			else
				uart_write("test_chan_send_recieve FAILED");
    18e4:	85 e2       	ldi	r24, 0x25	; 37
    18e6:	92 e0       	ldi	r25, 0x02	; 2
    18e8:	d9 c0       	rjmp	.+434    	; 0x1a9c <uart_write>
    18ea:	08 95       	ret
			break;
		case 3:
			if(strcmp(trace, "67899678") == 0)
    18ec:	6d e4       	ldi	r22, 0x4D	; 77
    18ee:	72 e0       	ldi	r23, 0x02	; 2
    18f0:	87 e3       	ldi	r24, 0x37	; 55
    18f2:	97 e1       	ldi	r25, 0x17	; 23
    18f4:	06 d1       	rcall	.+524    	; 0x1b02 <strcmp>
    18f6:	89 2b       	or	r24, r25
    18f8:	21 f4       	brne	.+8      	; 0x1902 <error_check+0x92>
				uart_write("test_chan_send_recieve PASSED");
    18fa:	87 e0       	ldi	r24, 0x07	; 7
    18fc:	92 e0       	ldi	r25, 0x02	; 2
    18fe:	ce c0       	rjmp	.+412    	; 0x1a9c <uart_write>
    1900:	08 95       	ret
			else
				uart_write("test_chan_send_recieve FAILED");
    1902:	85 e2       	ldi	r24, 0x25	; 37
    1904:	92 e0       	ldi	r25, 0x02	; 2
    1906:	ca c0       	rjmp	.+404    	; 0x1a9c <uart_write>
    1908:	08 95       	ret
			break;
		default:
			if(strcmp(trace, "10111213141410111213") == 0)
    190a:	66 e5       	ldi	r22, 0x56	; 86
    190c:	72 e0       	ldi	r23, 0x02	; 2
    190e:	87 e3       	ldi	r24, 0x37	; 55
    1910:	97 e1       	ldi	r25, 0x17	; 23
    1912:	f7 d0       	rcall	.+494    	; 0x1b02 <strcmp>
    1914:	89 2b       	or	r24, r25
    1916:	21 f4       	brne	.+8      	; 0x1920 <error_check+0xb0>
				uart_write("test_chan_send_recieve PASSED");
    1918:	87 e0       	ldi	r24, 0x07	; 7
    191a:	92 e0       	ldi	r25, 0x02	; 2
    191c:	bf c0       	rjmp	.+382    	; 0x1a9c <uart_write>
    191e:	08 95       	ret
			else
				uart_write("test_chan_send_recieve FAILED");
    1920:	85 e2       	ldi	r24, 0x25	; 37
    1922:	92 e0       	ldi	r25, 0x02	; 2
    1924:	bb c0       	rjmp	.+374    	; 0x1a9c <uart_write>
    1926:	08 95       	ret

00001928 <test_chan_send_recieve>:
			break;
	}
}

void test_chan_send_recieve(void){
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
	uart_start();
    192c:	a2 d0       	rcall	.+324    	; 0x1a72 <uart_start>
	test = Task_GetArg();
    192e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <Task_GetArg>
    1932:	90 93 31 17 	sts	0x1731, r25	; 0x801731 <test+0x1>
    1936:	80 93 30 17 	sts	0x1730, r24	; 0x801730 <test>
	switch(test){
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	91 05       	cpc	r25, r1
    193e:	e9 f0       	breq	.+58     	; 0x197a <test_chan_send_recieve+0x52>
    1940:	1c f4       	brge	.+6      	; 0x1948 <test_chan_send_recieve+0x20>
    1942:	89 2b       	or	r24, r25
    1944:	39 f0       	breq	.+14     	; 0x1954 <test_chan_send_recieve+0x2c>
    1946:	5e c0       	rjmp	.+188    	; 0x1a04 <test_chan_send_recieve+0xdc>
    1948:	82 30       	cpi	r24, 0x02	; 2
    194a:	91 05       	cpc	r25, r1
    194c:	49 f1       	breq	.+82     	; 0x19a0 <test_chan_send_recieve+0x78>
    194e:	03 97       	sbiw	r24, 0x03	; 3
    1950:	d1 f1       	breq	.+116    	; 0x19c6 <test_chan_send_recieve+0x9e>
    1952:	58 c0       	rjmp	.+176    	; 0x1a04 <test_chan_send_recieve+0xdc>
		case 0: //One system task sends a value on a channel then waits. Another receives the value and both continue;
			Task_Create_System(System_Task_1, 1);
    1954:	61 e0       	ldi	r22, 0x01	; 1
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	8a e0       	ldi	r24, 0x0A	; 10
    195a:	9c e0       	ldi	r25, 0x0C	; 12
    195c:	0e 94 9f 03 	call	0x73e	; 0x73e <Task_Create_System>
			Task_Create_System(System_Task_2, 2);
    1960:	62 e0       	ldi	r22, 0x02	; 2
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	83 ea       	ldi	r24, 0xA3	; 163
    1966:	9b e0       	ldi	r25, 0x0B	; 11
    1968:	0e 94 9f 03 	call	0x73e	; 0x73e <Task_Create_System>
			Task_Create_RR(error_check, 0);
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	88 e3       	ldi	r24, 0x38	; 56
    1972:	9c e0       	ldi	r25, 0x0C	; 12
    1974:	0e 94 b3 03 	call	0x766	; 0x766 <Task_Create_RR>
			break;
    1978:	75 c0       	rjmp	.+234    	; 0x1a64 <test_chan_send_recieve+0x13c>
		case 1:	//One system task receives on a channel then waits. Another sends on the channel and both continue;
			Task_Create_System(System_Task_2, 3);
    197a:	63 e0       	ldi	r22, 0x03	; 3
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	83 ea       	ldi	r24, 0xA3	; 163
    1980:	9b e0       	ldi	r25, 0x0B	; 11
    1982:	0e 94 9f 03 	call	0x73e	; 0x73e <Task_Create_System>
			Task_Create_System(System_Task_1, 4);
    1986:	64 e0       	ldi	r22, 0x04	; 4
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	8a e0       	ldi	r24, 0x0A	; 10
    198c:	9c e0       	ldi	r25, 0x0C	; 12
    198e:	0e 94 9f 03 	call	0x73e	; 0x73e <Task_Create_System>
			Task_Create_RR(error_check, 0);
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	88 e3       	ldi	r24, 0x38	; 56
    1998:	9c e0       	ldi	r25, 0x0C	; 12
    199a:	0e 94 b3 03 	call	0x766	; 0x766 <Task_Create_RR>
			break;
    199e:	62 c0       	rjmp	.+196    	; 0x1a64 <test_chan_send_recieve+0x13c>
		case 2:	//One system task receives on a channel then waits. A RR sends on the channel and both continue;
			Task_Create_System(System_Task_2, 5);
    19a0:	65 e0       	ldi	r22, 0x05	; 5
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	83 ea       	ldi	r24, 0xA3	; 163
    19a6:	9b e0       	ldi	r25, 0x0B	; 11
    19a8:	0e 94 9f 03 	call	0x73e	; 0x73e <Task_Create_System>
			Task_Create_RR(RR_Task_1, 6);
    19ac:	66 e0       	ldi	r22, 0x06	; 6
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	87 ee       	ldi	r24, 0xE7	; 231
    19b2:	9b e0       	ldi	r25, 0x0B	; 11
    19b4:	0e 94 b3 03 	call	0x766	; 0x766 <Task_Create_RR>
			Task_Create_RR(error_check, 0);
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	70 e0       	ldi	r23, 0x00	; 0
    19bc:	88 e3       	ldi	r24, 0x38	; 56
    19be:	9c e0       	ldi	r25, 0x0C	; 12
    19c0:	0e 94 b3 03 	call	0x766	; 0x766 <Task_Create_RR>
			break;
    19c4:	4f c0       	rjmp	.+158    	; 0x1a64 <test_chan_send_recieve+0x13c>
		case 3:	//Multiple system tasks receive on a channel then wait. A system task sends on a channel and all continue;
			Task_Create_System(System_Task_2, 6);
    19c6:	66 e0       	ldi	r22, 0x06	; 6
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	83 ea       	ldi	r24, 0xA3	; 163
    19cc:	9b e0       	ldi	r25, 0x0B	; 11
    19ce:	0e 94 9f 03 	call	0x73e	; 0x73e <Task_Create_System>
			Task_Create_System(System_Task_2, 7);
    19d2:	67 e0       	ldi	r22, 0x07	; 7
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	83 ea       	ldi	r24, 0xA3	; 163
    19d8:	9b e0       	ldi	r25, 0x0B	; 11
    19da:	0e 94 9f 03 	call	0x73e	; 0x73e <Task_Create_System>
			Task_Create_System(System_Task_2, 8);
    19de:	68 e0       	ldi	r22, 0x08	; 8
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	83 ea       	ldi	r24, 0xA3	; 163
    19e4:	9b e0       	ldi	r25, 0x0B	; 11
    19e6:	0e 94 9f 03 	call	0x73e	; 0x73e <Task_Create_System>
			Task_Create_System(System_Task_1, 9);
    19ea:	69 e0       	ldi	r22, 0x09	; 9
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	8a e0       	ldi	r24, 0x0A	; 10
    19f0:	9c e0       	ldi	r25, 0x0C	; 12
    19f2:	0e 94 9f 03 	call	0x73e	; 0x73e <Task_Create_System>
			Task_Create_RR(error_check, 0);
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	88 e3       	ldi	r24, 0x38	; 56
    19fc:	9c e0       	ldi	r25, 0x0C	; 12
    19fe:	0e 94 b3 03 	call	0x766	; 0x766 <Task_Create_RR>
			break;
    1a02:	30 c0       	rjmp	.+96     	; 0x1a64 <test_chan_send_recieve+0x13c>
		default: //Create two system tasks and two RR tasks. Make them wait on a channel. Create a periodic task to wake all of them up with write();
			Task_Create_System(System_Task_2, 10);
    1a04:	6a e0       	ldi	r22, 0x0A	; 10
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	83 ea       	ldi	r24, 0xA3	; 163
    1a0a:	9b e0       	ldi	r25, 0x0B	; 11
    1a0c:	0e 94 9f 03 	call	0x73e	; 0x73e <Task_Create_System>
			Task_Create_System(System_Task_2, 11);
    1a10:	6b e0       	ldi	r22, 0x0B	; 11
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	83 ea       	ldi	r24, 0xA3	; 163
    1a16:	9b e0       	ldi	r25, 0x0B	; 11
    1a18:	0e 94 9f 03 	call	0x73e	; 0x73e <Task_Create_System>
			Task_Create_RR(RR_Task_2, 12);
    1a1c:	6c e0       	ldi	r22, 0x0C	; 12
    1a1e:	70 e0       	ldi	r23, 0x00	; 0
    1a20:	89 e6       	ldi	r24, 0x69	; 105
    1a22:	9b e0       	ldi	r25, 0x0B	; 11
    1a24:	0e 94 b3 03 	call	0x766	; 0x766 <Task_Create_RR>
			Task_Create_RR(RR_Task_2, 13);
    1a28:	6d e0       	ldi	r22, 0x0D	; 13
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	89 e6       	ldi	r24, 0x69	; 105
    1a2e:	9b e0       	ldi	r25, 0x0B	; 11
    1a30:	0e 94 b3 03 	call	0x766	; 0x766 <Task_Create_RR>
			Task_Create_Period(Periodic_Task, 14, 5, 2, 3);
    1a34:	03 e0       	ldi	r16, 0x03	; 3
    1a36:	10 e0       	ldi	r17, 0x00	; 0
    1a38:	22 e0       	ldi	r18, 0x02	; 2
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	45 e0       	ldi	r20, 0x05	; 5
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	6e e0       	ldi	r22, 0x0E	; 14
    1a42:	70 e0       	ldi	r23, 0x00	; 0
    1a44:	86 e4       	ldi	r24, 0x46	; 70
    1a46:	9b e0       	ldi	r25, 0x0B	; 11
    1a48:	0e 94 c7 03 	call	0x78e	; 0x78e <Task_Create_Period>
			Task_Create_Period(error_check, 0, 10, 1, 9);
    1a4c:	09 e0       	ldi	r16, 0x09	; 9
    1a4e:	10 e0       	ldi	r17, 0x00	; 0
    1a50:	21 e0       	ldi	r18, 0x01	; 1
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	4a e0       	ldi	r20, 0x0A	; 10
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	60 e0       	ldi	r22, 0x00	; 0
    1a5a:	70 e0       	ldi	r23, 0x00	; 0
    1a5c:	88 e3       	ldi	r24, 0x38	; 56
    1a5e:	9c e0       	ldi	r25, 0x0C	; 12
    1a60:	0e 94 c7 03 	call	0x78e	; 0x78e <Task_Create_Period>
			break;
	}
	
}
    1a64:	1f 91       	pop	r17
    1a66:	0f 91       	pop	r16
    1a68:	08 95       	ret

00001a6a <add_to_trace>:

static char trace[30] = "";
static char temp[5] = "";

void add_to_trace(char* a_string, char* addition){
	Disable_Interrupt();
    1a6a:	f8 94       	cli
	strcat(a_string, addition);
    1a6c:	3f d0       	rcall	.+126    	; 0x1aec <strcat>
	Enable_Interrupt();
    1a6e:	78 94       	sei
    1a70:	08 95       	ret

00001a72 <uart_start>:

#include "uart.h"
#include "os.h"

void uart_start(void) {
	Disable_Interrupt();
    1a72:	f8 94       	cli
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //transmit side of hardware
    1a74:	e1 ec       	ldi	r30, 0xC1	; 193
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	88 61       	ori	r24, 0x18	; 24
    1a7c:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); //receive side of hardware
    1a7e:	a2 ec       	ldi	r26, 0xC2	; 194
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	8c 91       	ld	r24, X
    1a84:	86 60       	ori	r24, 0x06	; 6
    1a86:	8c 93       	st	X, r24

	UBRR0L = BAUD_PRESCALE; //set the baud to 9600, have to split it into the two registers
    1a88:	87 e6       	ldi	r24, 0x67	; 103
    1a8a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = (BAUD_PRESCALE >> 8); //high end of baud register
    1a8e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>

	UCSR0B |= (1 << RXCIE0); //recieve data interrupt, makes sure we don't loose data
    1a92:	80 81       	ld	r24, Z
    1a94:	80 68       	ori	r24, 0x80	; 128
    1a96:	80 83       	st	Z, r24
	Enable_Interrupt();
    1a98:	78 94       	sei
    1a9a:	08 95       	ret

00001a9c <uart_write>:
}

void uart_write(char *data) {
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
	Disable_Interrupt();
    1aa0:	f8 94       	cli
    while (*data) {
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	20 81       	ld	r18, Z
    1aa6:	22 23       	and	r18, r18
    1aa8:	69 f0       	breq	.+26     	; 0x1ac4 <uart_write+0x28>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	11 96       	adiw	r26, 0x01	; 1
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    1aae:	e0 ec       	ldi	r30, 0xC0	; 192
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
    1ab2:	c6 ec       	ldi	r28, 0xC6	; 198
    1ab4:	d0 e0       	ldi	r29, 0x00	; 0
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
	Disable_Interrupt();
    while (*data) {
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    1ab6:	90 81       	ld	r25, Z
    1ab8:	95 ff       	sbrs	r25, 5
    1aba:	fd cf       	rjmp	.-6      	; 0x1ab6 <uart_write+0x1a>
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
    1abc:	28 83       	st	Y, r18
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
	Disable_Interrupt();
    while (*data) {
    1abe:	2d 91       	ld	r18, X+
    1ac0:	21 11       	cpse	r18, r1
    1ac2:	f9 cf       	rjmp	.-14     	; 0x1ab6 <uart_write+0x1a>
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
        data += 1;//go to new bit in string
    }
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    1ac4:	e0 ec       	ldi	r30, 0xC0	; 192
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	85 ff       	sbrs	r24, 5
    1acc:	fd cf       	rjmp	.-6      	; 0x1ac8 <uart_write+0x2c>
    UDR0 = '\n';//send a new line just to be sure
    1ace:	8a e0       	ldi	r24, 0x0A	; 10
    1ad0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	Enable_Interrupt();
    1ad4:	78 94       	sei
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	08 95       	ret

00001adc <__tablejump2__>:
    1adc:	ee 0f       	add	r30, r30
    1ade:	ff 1f       	adc	r31, r31
    1ae0:	88 1f       	adc	r24, r24
    1ae2:	8b bf       	out	0x3b, r24	; 59
    1ae4:	07 90       	elpm	r0, Z+
    1ae6:	f6 91       	elpm	r31, Z
    1ae8:	e0 2d       	mov	r30, r0
    1aea:	19 94       	eijmp

00001aec <strcat>:
    1aec:	fb 01       	movw	r30, r22
    1aee:	dc 01       	movw	r26, r24
    1af0:	0d 90       	ld	r0, X+
    1af2:	00 20       	and	r0, r0
    1af4:	e9 f7       	brne	.-6      	; 0x1af0 <strcat+0x4>
    1af6:	11 97       	sbiw	r26, 0x01	; 1
    1af8:	01 90       	ld	r0, Z+
    1afa:	0d 92       	st	X+, r0
    1afc:	00 20       	and	r0, r0
    1afe:	e1 f7       	brne	.-8      	; 0x1af8 <strcat+0xc>
    1b00:	08 95       	ret

00001b02 <strcmp>:
    1b02:	fb 01       	movw	r30, r22
    1b04:	dc 01       	movw	r26, r24
    1b06:	8d 91       	ld	r24, X+
    1b08:	01 90       	ld	r0, Z+
    1b0a:	80 19       	sub	r24, r0
    1b0c:	01 10       	cpse	r0, r1
    1b0e:	d9 f3       	breq	.-10     	; 0x1b06 <strcmp+0x4>
    1b10:	99 0b       	sbc	r25, r25
    1b12:	08 95       	ret

00001b14 <itoa>:
    1b14:	45 32       	cpi	r20, 0x25	; 37
    1b16:	51 05       	cpc	r21, r1
    1b18:	18 f4       	brcc	.+6      	; 0x1b20 <itoa+0xc>
    1b1a:	42 30       	cpi	r20, 0x02	; 2
    1b1c:	08 f0       	brcs	.+2      	; 0x1b20 <itoa+0xc>
    1b1e:	04 c0       	rjmp	.+8      	; 0x1b28 <__itoa_ncheck>
    1b20:	fb 01       	movw	r30, r22
    1b22:	10 82       	st	Z, r1
    1b24:	cb 01       	movw	r24, r22
    1b26:	08 95       	ret

00001b28 <__itoa_ncheck>:
    1b28:	bb 27       	eor	r27, r27
    1b2a:	4a 30       	cpi	r20, 0x0A	; 10
    1b2c:	31 f4       	brne	.+12     	; 0x1b3a <__itoa_ncheck+0x12>
    1b2e:	99 23       	and	r25, r25
    1b30:	22 f4       	brpl	.+8      	; 0x1b3a <__itoa_ncheck+0x12>
    1b32:	bd e2       	ldi	r27, 0x2D	; 45
    1b34:	90 95       	com	r25
    1b36:	81 95       	neg	r24
    1b38:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3a:	01 c0       	rjmp	.+2      	; 0x1b3e <__utoa_common>

00001b3c <__utoa_ncheck>:
    1b3c:	bb 27       	eor	r27, r27

00001b3e <__utoa_common>:
    1b3e:	fb 01       	movw	r30, r22
    1b40:	55 27       	eor	r21, r21
    1b42:	aa 27       	eor	r26, r26
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	aa 1f       	adc	r26, r26
    1b4a:	a4 17       	cp	r26, r20
    1b4c:	10 f0       	brcs	.+4      	; 0x1b52 <__utoa_common+0x14>
    1b4e:	a4 1b       	sub	r26, r20
    1b50:	83 95       	inc	r24
    1b52:	50 51       	subi	r21, 0x10	; 16
    1b54:	b9 f7       	brne	.-18     	; 0x1b44 <__utoa_common+0x6>
    1b56:	a0 5d       	subi	r26, 0xD0	; 208
    1b58:	aa 33       	cpi	r26, 0x3A	; 58
    1b5a:	08 f0       	brcs	.+2      	; 0x1b5e <__utoa_common+0x20>
    1b5c:	a9 5d       	subi	r26, 0xD9	; 217
    1b5e:	a1 93       	st	Z+, r26
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	79 f7       	brne	.-34     	; 0x1b42 <__utoa_common+0x4>
    1b64:	b1 11       	cpse	r27, r1
    1b66:	b1 93       	st	Z+, r27
    1b68:	11 92       	st	Z+, r1
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	00 c0       	rjmp	.+0      	; 0x1b6e <strrev>

00001b6e <strrev>:
    1b6e:	dc 01       	movw	r26, r24
    1b70:	fc 01       	movw	r30, r24
    1b72:	67 2f       	mov	r22, r23
    1b74:	71 91       	ld	r23, Z+
    1b76:	77 23       	and	r23, r23
    1b78:	e1 f7       	brne	.-8      	; 0x1b72 <strrev+0x4>
    1b7a:	32 97       	sbiw	r30, 0x02	; 2
    1b7c:	04 c0       	rjmp	.+8      	; 0x1b86 <strrev+0x18>
    1b7e:	7c 91       	ld	r23, X
    1b80:	6d 93       	st	X+, r22
    1b82:	70 83       	st	Z, r23
    1b84:	62 91       	ld	r22, -Z
    1b86:	ae 17       	cp	r26, r30
    1b88:	bf 07       	cpc	r27, r31
    1b8a:	c8 f3       	brcs	.-14     	; 0x1b7e <strrev+0x10>
    1b8c:	08 95       	ret

00001b8e <_exit>:
    1b8e:	f8 94       	cli

00001b90 <__stop_program>:
    1b90:	ff cf       	rjmp	.-2      	; 0x1b90 <__stop_program>
