
Project2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00001740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001526  00800200  00800200  00001740  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001770  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000017b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002818  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000120d  00000000  00000000  00004170  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010aa  00000000  00000000  0000537d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b0  00000000  00000000  00006428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a24  00000000  00000000  000068d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001569  00000000  00000000  000072fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00008865  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
       2:	00 00       	nop
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	00 00       	nop
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
       e:	00 00       	nop
      10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
      12:	00 00       	nop
      14:	92 c0       	rjmp	.+292    	; 0x13a <__bad_interrupt>
      16:	00 00       	nop
      18:	90 c0       	rjmp	.+288    	; 0x13a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	ff c4       	rjmp	.+2558   	; 0xa44 <__vector_17>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	6a c0       	rjmp	.+212    	; 0x13a <__bad_interrupt>
      66:	00 00       	nop
      68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
      6e:	00 00       	nop
      70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
      72:	00 00       	nop
      74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
      76:	00 00       	nop
      78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
      7e:	00 00       	nop
      80:	39 c5       	rjmp	.+2674   	; 0xaf4 <__vector_32>
      82:	00 00       	nop
      84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
      86:	00 00       	nop
      88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
      8e:	00 00       	nop
      90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
      92:	00 00       	nop
      94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
      96:	00 00       	nop
      98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	48 c0       	rjmp	.+144    	; 0x13a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	46 c0       	rjmp	.+140    	; 0x13a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	44 c0       	rjmp	.+136    	; 0x13a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	42 c0       	rjmp	.+132    	; 0x13a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	40 c0       	rjmp	.+128    	; 0x13a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c0       	rjmp	.+124    	; 0x13a <__bad_interrupt>
      be:	00 00       	nop
      c0:	3c c0       	rjmp	.+120    	; 0x13a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3a c0       	rjmp	.+116    	; 0x13a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	38 c0       	rjmp	.+112    	; 0x13a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	36 c0       	rjmp	.+108    	; 0x13a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	34 c0       	rjmp	.+104    	; 0x13a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	32 c0       	rjmp	.+100    	; 0x13a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	30 c0       	rjmp	.+96     	; 0x13a <__bad_interrupt>
      da:	00 00       	nop
      dc:	2e c0       	rjmp	.+92     	; 0x13a <__bad_interrupt>
      de:	00 00       	nop
      e0:	2c c0       	rjmp	.+88     	; 0x13a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ce 09       	sbc	r28, r14
      e6:	e6 09       	sbc	r30, r6
      e8:	16 0a       	sbc	r1, r22
      ea:	fd 09       	sbc	r31, r13
      ec:	2d 0a       	sbc	r2, r29
      ee:	64 0a       	sbc	r6, r20
      f0:	5e 0a       	sbc	r5, r30
      f2:	60 0a       	sbc	r6, r16
      f4:	62 0a       	sbc	r6, r18
      f6:	5c 0a       	sbc	r5, r28

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d1 e2       	ldi	r29, 0x21	; 33
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
     108:	12 e0       	ldi	r17, 0x02	; 2
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	ec ec       	ldi	r30, 0xCC	; 204
     110:	f6 e1       	ldi	r31, 0x16	; 22
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	a0 30       	cpi	r26, 0x00	; 0
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	27 e1       	ldi	r18, 0x17	; 23
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	a6 32       	cpi	r26, 0x26	; 38
     12e:	b2 07       	cpc	r27, r18
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <main>
     136:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <CSwitch>:
     13c:	0f 92       	push	r0
     13e:	1f 92       	push	r1
     140:	2f 92       	push	r2
     142:	3f 92       	push	r3
     144:	4f 92       	push	r4
     146:	5f 92       	push	r5
     148:	6f 92       	push	r6
     14a:	7f 92       	push	r7
     14c:	8f 92       	push	r8
     14e:	9f 92       	push	r9
     150:	af 92       	push	r10
     152:	bf 92       	push	r11
     154:	cf 92       	push	r12
     156:	df 92       	push	r13
     158:	ef 92       	push	r14
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	2f 93       	push	r18
     162:	3f 93       	push	r19
     164:	4f 93       	push	r20
     166:	5f 93       	push	r21
     168:	6f 93       	push	r22
     16a:	7f 93       	push	r23
     16c:	8f 93       	push	r24
     16e:	9f 93       	push	r25
     170:	af 93       	push	r26
     172:	bf 93       	push	r27
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	ef 93       	push	r30
     17a:	ff 93       	push	r31
     17c:	0f b7       	in	r16, 0x3f	; 63
     17e:	0f 93       	push	r16
     180:	fc b7       	in	r31, 0x3c	; 60
     182:	ff 93       	push	r31
     184:	ed b7       	in	r30, 0x3d	; 61
     186:	fe b7       	in	r31, 0x3e	; 62
     188:	e0 93 04 17 	sts	0x1704, r30	; 0x801704 <KernelSp>
     18c:	f0 93 05 17 	sts	0x1705, r31	; 0x801705 <KernelSp+0x1>
     190:	e0 91 e2 16 	lds	r30, 0x16E2	; 0x8016e2 <CurrentSp>
     194:	f0 91 e3 16 	lds	r31, 0x16E3	; 0x8016e3 <CurrentSp+0x1>
     198:	ed bf       	out	0x3d, r30	; 61
     19a:	fe bf       	out	0x3e, r31	; 62
     19c:	ff 91       	pop	r31
     19e:	fc bf       	out	0x3c, r31	; 60
     1a0:	0f 91       	pop	r16
     1a2:	0f bf       	out	0x3f, r16	; 63
     1a4:	ff 91       	pop	r31
     1a6:	ef 91       	pop	r30
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	bf 91       	pop	r27
     1ae:	af 91       	pop	r26
     1b0:	9f 91       	pop	r25
     1b2:	8f 91       	pop	r24
     1b4:	7f 91       	pop	r23
     1b6:	6f 91       	pop	r22
     1b8:	5f 91       	pop	r21
     1ba:	4f 91       	pop	r20
     1bc:	3f 91       	pop	r19
     1be:	2f 91       	pop	r18
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	cf 90       	pop	r12
     1cc:	bf 90       	pop	r11
     1ce:	af 90       	pop	r10
     1d0:	9f 90       	pop	r9
     1d2:	8f 90       	pop	r8
     1d4:	7f 90       	pop	r7
     1d6:	6f 90       	pop	r6
     1d8:	5f 90       	pop	r5
     1da:	4f 90       	pop	r4
     1dc:	3f 90       	pop	r3
     1de:	2f 90       	pop	r2
     1e0:	1f 90       	pop	r1
     1e2:	0f 90       	pop	r0
     1e4:	18 95       	reti

000001e6 <Enter_Kernel>:
     1e6:	0f 92       	push	r0
     1e8:	1f 92       	push	r1
     1ea:	2f 92       	push	r2
     1ec:	3f 92       	push	r3
     1ee:	4f 92       	push	r4
     1f0:	5f 92       	push	r5
     1f2:	6f 92       	push	r6
     1f4:	7f 92       	push	r7
     1f6:	8f 92       	push	r8
     1f8:	9f 92       	push	r9
     1fa:	af 92       	push	r10
     1fc:	bf 92       	push	r11
     1fe:	cf 92       	push	r12
     200:	df 92       	push	r13
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
     20a:	2f 93       	push	r18
     20c:	3f 93       	push	r19
     20e:	4f 93       	push	r20
     210:	5f 93       	push	r21
     212:	6f 93       	push	r22
     214:	7f 93       	push	r23
     216:	8f 93       	push	r24
     218:	9f 93       	push	r25
     21a:	af 93       	push	r26
     21c:	bf 93       	push	r27
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	ef 93       	push	r30
     224:	ff 93       	push	r31
     226:	0f b7       	in	r16, 0x3f	; 63
     228:	0f 93       	push	r16
     22a:	fc b7       	in	r31, 0x3c	; 60
     22c:	ff 93       	push	r31
     22e:	ed b7       	in	r30, 0x3d	; 61
     230:	fe b7       	in	r31, 0x3e	; 62
     232:	e0 93 e2 16 	sts	0x16E2, r30	; 0x8016e2 <CurrentSp>
     236:	f0 93 e3 16 	sts	0x16E3, r31	; 0x8016e3 <CurrentSp+0x1>
     23a:	e0 91 04 17 	lds	r30, 0x1704	; 0x801704 <KernelSp>
     23e:	f0 91 05 17 	lds	r31, 0x1705	; 0x801705 <KernelSp+0x1>
     242:	ed bf       	out	0x3d, r30	; 61
     244:	fe bf       	out	0x3e, r31	; 62
     246:	ff 91       	pop	r31
     248:	fc bf       	out	0x3c, r31	; 60
     24a:	0f 91       	pop	r16
     24c:	0f bf       	out	0x3f, r16	; 63
     24e:	ff 91       	pop	r31
     250:	ef 91       	pop	r30
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	bf 91       	pop	r27
     258:	af 91       	pop	r26
     25a:	9f 91       	pop	r25
     25c:	8f 91       	pop	r24
     25e:	7f 91       	pop	r23
     260:	6f 91       	pop	r22
     262:	5f 91       	pop	r21
     264:	4f 91       	pop	r20
     266:	3f 91       	pop	r19
     268:	2f 91       	pop	r18
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	ff 90       	pop	r15
     270:	ef 90       	pop	r14
     272:	df 90       	pop	r13
     274:	cf 90       	pop	r12
     276:	bf 90       	pop	r11
     278:	af 90       	pop	r10
     27a:	9f 90       	pop	r9
     27c:	8f 90       	pop	r8
     27e:	7f 90       	pop	r7
     280:	6f 90       	pop	r6
     282:	5f 90       	pop	r5
     284:	4f 90       	pop	r4
     286:	3f 90       	pop	r3
     288:	2f 90       	pop	r2
     28a:	1f 90       	pop	r1
     28c:	0f 90       	pop	r0
     28e:	08 95       	ret

00000290 <ASDF4>:

void ASDF4()
{
	for(;;){
		//pin 28
		PORTA |= (1<<PA6);
     290:	16 9a       	sbi	0x02, 6	; 2
		PORTA &= ~(1<<PA6);
     292:	16 98       	cbi	0x02, 6	; 2
	}
     294:	fd cf       	rjmp	.-6      	; 0x290 <ASDF4>

00000296 <ASDF1>:
/***** Core System Tasks *****/
void ASDF1()
{
	for (;;) {
		//pin 25
		PORTA |= (1<<PA3);
     296:	13 9a       	sbi	0x02, 3	; 2
		PORTA &= ~(1<<PA3);
     298:	13 98       	cbi	0x02, 3	; 2
		Task_Next();
     29a:	2c d3       	rcall	.+1624   	; 0x8f4 <Task_Next>
	}
     29c:	fc cf       	rjmp	.-8      	; 0x296 <ASDF1>

0000029e <ASDF2>:

void ASDF2()
{
	for (;;) {
		//pin 26
		PORTA |= (1<<PA4);
     29e:	14 9a       	sbi	0x02, 4	; 2
		PORTA &= ~(1<<PA4);
     2a0:	14 98       	cbi	0x02, 4	; 2
		Task_Next();
     2a2:	28 d3       	rcall	.+1616   	; 0x8f4 <Task_Next>
	}
     2a4:	fc cf       	rjmp	.-8      	; 0x29e <ASDF2>

000002a6 <ASDF3>:

void ASDF3()
{
	for (;;) {
		//pin 27
		PORTA |= (1<<PA5);
     2a6:	15 9a       	sbi	0x02, 5	; 2
		PORTA &= ~(1<<PA5);
     2a8:	15 98       	cbi	0x02, 5	; 2
		Task_Next();
     2aa:	24 d3       	rcall	.+1608   	; 0x8f4 <Task_Next>
	}
     2ac:	fc cf       	rjmp	.-8      	; 0x2a6 <ASDF3>

000002ae <ASDF5>:
	}
}

void ASDF5()
{
	Chan_Init();
     2ae:	39 d4       	rcall	.+2162   	; 0xb22 <Chan_Init>
	int x = 0;
	for(;;x++)
	{
		//pin 29
		PORTA |= (1<<PA7);
     2b0:	17 9a       	sbi	0x02, 7	; 2
		PORTA &= ~(1<<PA7);
     2b2:	17 98       	cbi	0x02, 7	; 2
}

void ASDF5()
{
	Chan_Init();
	int x = 0;
     2b4:	c0 e0       	ldi	r28, 0x00	; 0
     2b6:	d0 e0       	ldi	r29, 0x00	; 0
     2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <ASDF5+0x16>
	{
		//pin 29
		PORTA |= (1<<PA7);
		PORTA &= ~(1<<PA7);
		if (x == 1000) {
			Send(1, 69);
     2ba:	65 e4       	ldi	r22, 0x45	; 69
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	71 d4       	rcall	.+2274   	; 0xba6 <Send>

void ASDF5()
{
	Chan_Init();
	int x = 0;
	for(;;x++)
     2c4:	21 96       	adiw	r28, 0x01	; 1
	{
		//pin 29
		PORTA |= (1<<PA7);
     2c6:	17 9a       	sbi	0x02, 7	; 2
		PORTA &= ~(1<<PA7);
     2c8:	17 98       	cbi	0x02, 7	; 2
		if (x == 1000) {
     2ca:	c8 3e       	cpi	r28, 0xE8	; 232
     2cc:	83 e0       	ldi	r24, 0x03	; 3
     2ce:	d8 07       	cpc	r29, r24
     2d0:	c9 f7       	brne	.-14     	; 0x2c4 <ASDF5+0x16>
     2d2:	f3 cf       	rjmp	.-26     	; 0x2ba <ASDF5+0xc>

000002d4 <a_main>:
		}
	}
}

void a_main()
{
     2d4:	0f 93       	push	r16
     2d6:	1f 93       	push	r17
	
    // Initialize tasks
	Task_Create_Period(ASDF1,1, 10, 9, 0);
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	10 e0       	ldi	r17, 0x00	; 0
     2dc:	29 e0       	ldi	r18, 0x09	; 9
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	4a e0       	ldi	r20, 0x0A	; 10
     2e2:	50 e0       	ldi	r21, 0x00	; 0
     2e4:	61 e0       	ldi	r22, 0x01	; 1
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	8b e4       	ldi	r24, 0x4B	; 75
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	b1 d2       	rcall	.+1378   	; 0x850 <Task_Create_Period>
	Task_Create_Period(ASDF2,2, 10, 9 ,1);
     2ee:	01 e0       	ldi	r16, 0x01	; 1
     2f0:	10 e0       	ldi	r17, 0x00	; 0
     2f2:	29 e0       	ldi	r18, 0x09	; 9
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	4a e0       	ldi	r20, 0x0A	; 10
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	62 e0       	ldi	r22, 0x02	; 2
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	8f e4       	ldi	r24, 0x4F	; 79
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	a6 d2       	rcall	.+1356   	; 0x850 <Task_Create_Period>
	Task_Create_Period(ASDF3,2, 10, 9 ,2);
     304:	02 e0       	ldi	r16, 0x02	; 2
     306:	10 e0       	ldi	r17, 0x00	; 0
     308:	29 e0       	ldi	r18, 0x09	; 9
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	4a e0       	ldi	r20, 0x0A	; 10
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	62 e0       	ldi	r22, 0x02	; 2
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	83 e5       	ldi	r24, 0x53	; 83
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	9b d2       	rcall	.+1334   	; 0x850 <Task_Create_Period>
	Task_Create_RR(ASDF4,5);
     31a:	65 e0       	ldi	r22, 0x05	; 5
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	88 e4       	ldi	r24, 0x48	; 72
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	82 d2       	rcall	.+1284   	; 0x828 <Task_Create_RR>
	Task_Create_System(ASDF5,6);
     324:	66 e0       	ldi	r22, 0x06	; 6
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	87 e5       	ldi	r24, 0x57	; 87
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	69 d2       	rcall	.+1234   	; 0x800 <Task_Create_System>
	//Task_Create_System(ASDF3,3);
	//Task_Create_RR(ASDF4,4);

    // Kill the initialization task
    Task_Terminate();
     32e:	04 d0       	rcall	.+8      	; 0x338 <Task_Terminate>
}
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	08 95       	ret

00000336 <idle>:
void Write(CHAN ch, int v) {
	if (Cp->priority == PERIODIC) OS_Abort(5); // periodic tasks are not allowed to use csp
	Cp->request = ASYNC_SEND;
	Cp->senderChannel = ch;
	Cp->val = v;
	Enter_Kernel();
     336:	ff cf       	rjmp	.-2      	; 0x336 <idle>

00000338 <Task_Terminate>:
     338:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <KernelActive>
     33c:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <KernelActive+0x1>
     340:	89 2b       	or	r24, r25
     342:	51 f0       	breq	.+20     	; 0x358 <Task_Terminate+0x20>
     344:	f8 94       	cli
     346:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     34a:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     34e:	e5 5f       	subi	r30, 0xF5	; 245
     350:	fe 4f       	sbci	r31, 0xFE	; 254
     352:	86 e0       	ldi	r24, 0x06	; 6
     354:	80 83       	st	Z, r24
     356:	47 cf       	rjmp	.-370    	; 0x1e6 <Enter_Kernel>
     358:	08 95       	ret

0000035a <Kernel_Create_Task_At>:
     35a:	8f 92       	push	r8
     35c:	9f 92       	push	r9
     35e:	af 92       	push	r10
     360:	bf 92       	push	r11
     362:	cf 92       	push	r12
     364:	df 92       	push	r13
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	1f 92       	push	r1
     374:	1f 92       	push	r1
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	9a 83       	std	Y+2, r25	; 0x02
     37c:	89 83       	std	Y+1, r24	; 0x01
     37e:	5c 01       	movw	r10, r24
     380:	a4 e0       	ldi	r26, 0x04	; 4
     382:	aa 0e       	add	r10, r26
     384:	b1 1c       	adc	r11, r1
     386:	81 2c       	mov	r8, r1
     388:	99 24       	eor	r9, r9
     38a:	93 94       	inc	r9
     38c:	f5 01       	movw	r30, r10
     38e:	d4 01       	movw	r26, r8
     390:	11 92       	st	Z+, r1
     392:	11 97       	sbiw	r26, 0x01	; 1
     394:	e9 f7       	brne	.-6      	; 0x390 <Kernel_Create_Task_At+0x36>
     396:	dc 01       	movw	r26, r24
     398:	ad 5f       	subi	r26, 0xFD	; 253
     39a:	be 4f       	sbci	r27, 0xFE	; 254
     39c:	ec e9       	ldi	r30, 0x9C	; 156
     39e:	f1 e0       	ldi	r31, 0x01	; 1
     3a0:	ec 93       	st	X, r30
     3a2:	11 97       	sbiw	r26, 0x01	; 1
     3a4:	fc 93       	st	X, r31
     3a6:	fc 01       	movw	r30, r24
     3a8:	ef 5f       	subi	r30, 0xFF	; 255
     3aa:	fe 4f       	sbci	r31, 0xFE	; 254
     3ac:	10 82       	st	Z, r1
     3ae:	31 97       	sbiw	r30, 0x01	; 1
     3b0:	60 83       	st	Z, r22
     3b2:	31 97       	sbiw	r30, 0x01	; 1
     3b4:	70 83       	st	Z, r23
     3b6:	31 97       	sbiw	r30, 0x01	; 1
     3b8:	10 82       	st	Z, r1
     3ba:	b3 97       	sbiw	r30, 0x23	; 35
     3bc:	dc 01       	movw	r26, r24
     3be:	13 96       	adiw	r26, 0x03	; 3
     3c0:	fc 93       	st	X, r31
     3c2:	ee 93       	st	-X, r30
     3c4:	12 97       	sbiw	r26, 0x02	; 2
     3c6:	be 96       	adiw	r30, 0x2e	; 46
     3c8:	71 83       	std	Z+1, r23	; 0x01
     3ca:	60 83       	st	Z, r22
     3cc:	32 96       	adiw	r30, 0x02	; 2
     3ce:	10 82       	st	Z, r1
     3d0:	60 91 9a 04 	lds	r22, 0x049A	; 0x80049a <pCount>
     3d4:	70 91 9b 04 	lds	r23, 0x049B	; 0x80049b <pCount+0x1>
     3d8:	fc 01       	movw	r30, r24
     3da:	71 83       	std	Z+1, r23	; 0x01
     3dc:	60 83       	st	Z, r22
     3de:	89 81       	ldd	r24, Y+1	; 0x01
     3e0:	9a 81       	ldd	r25, Y+2	; 0x02
     3e2:	fc 01       	movw	r30, r24
     3e4:	eb 5f       	subi	r30, 0xFB	; 251
     3e6:	fe 4f       	sbci	r31, 0xFE	; 254
     3e8:	51 83       	std	Z+1, r21	; 0x01
     3ea:	40 83       	st	Z, r20
     3ec:	32 96       	adiw	r30, 0x02	; 2
     3ee:	31 83       	std	Z+1, r19	; 0x01
     3f0:	20 83       	st	Z, r18
     3f2:	3f 96       	adiw	r30, 0x0f	; 15
     3f4:	2f ef       	ldi	r18, 0xFF	; 255
     3f6:	3f ef       	ldi	r19, 0xFF	; 255
     3f8:	31 83       	std	Z+1, r19	; 0x01
     3fa:	20 83       	st	Z, r18
     3fc:	32 96       	adiw	r30, 0x02	; 2
     3fe:	11 82       	std	Z+1, r1	; 0x01
     400:	10 82       	st	Z, r1
     402:	34 97       	sbiw	r30, 0x04	; 4
     404:	11 83       	std	Z+1, r17	; 0x01
     406:	00 83       	st	Z, r16
     408:	34 97       	sbiw	r30, 0x04	; 4
     40a:	d1 82       	std	Z+1, r13	; 0x01
     40c:	c0 82       	st	Z, r12
     40e:	32 96       	adiw	r30, 0x02	; 2
     410:	f1 82       	std	Z+1, r15	; 0x01
     412:	e0 82       	st	Z, r14
     414:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <Tasks>
     418:	30 91 9d 04 	lds	r19, 0x049D	; 0x80049d <Tasks+0x1>
     41c:	2f 5f       	subi	r18, 0xFF	; 255
     41e:	3f 4f       	sbci	r19, 0xFF	; 255
     420:	30 93 9d 04 	sts	0x049D, r19	; 0x80049d <Tasks+0x1>
     424:	20 93 9c 04 	sts	0x049C, r18	; 0x80049c <Tasks>
     428:	20 91 9a 04 	lds	r18, 0x049A	; 0x80049a <pCount>
     42c:	30 91 9b 04 	lds	r19, 0x049B	; 0x80049b <pCount+0x1>
     430:	2f 5f       	subi	r18, 0xFF	; 255
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	30 93 9b 04 	sts	0x049B, r19	; 0x80049b <pCount+0x1>
     438:	20 93 9a 04 	sts	0x049A, r18	; 0x80049a <pCount>
     43c:	3e 97       	sbiw	r30, 0x0e	; 14
     43e:	21 e0       	ldi	r18, 0x01	; 1
     440:	20 83       	st	Z, r18
     442:	43 30       	cpi	r20, 0x03	; 3
     444:	51 05       	cpc	r21, r1
     446:	49 f4       	brne	.+18     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     448:	46 e9       	ldi	r20, 0x96	; 150
     44a:	54 e0       	ldi	r21, 0x04	; 4
     44c:	62 ec       	ldi	r22, 0xC2	; 194
     44e:	76 e1       	ldi	r23, 0x16	; 22
     450:	ce 01       	movw	r24, r28
     452:	01 96       	adiw	r24, 0x01	; 1
     454:	0e 94 93 0a 	call	0x1526	; 0x1526 <enqueue>
     458:	1c c0       	rjmp	.+56     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     45a:	42 30       	cpi	r20, 0x02	; 2
     45c:	51 05       	cpc	r21, r1
     45e:	71 f4       	brne	.+28     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     460:	fc 01       	movw	r30, r24
     462:	ea 5e       	subi	r30, 0xEA	; 234
     464:	fe 4f       	sbci	r31, 0xFE	; 254
     466:	11 83       	std	Z+1, r17	; 0x01
     468:	00 83       	st	Z, r16
     46a:	44 e9       	ldi	r20, 0x94	; 148
     46c:	54 e0       	ldi	r21, 0x04	; 4
     46e:	64 ee       	ldi	r22, 0xE4	; 228
     470:	76 e1       	ldi	r23, 0x16	; 22
     472:	ce 01       	movw	r24, r28
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <enqueuePeriodic>
     47a:	0b c0       	rjmp	.+22     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     47c:	41 30       	cpi	r20, 0x01	; 1
     47e:	51 05       	cpc	r21, r1
     480:	41 f4       	brne	.+16     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     482:	42 e9       	ldi	r20, 0x92	; 146
     484:	54 e0       	ldi	r21, 0x04	; 4
     486:	66 e0       	ldi	r22, 0x06	; 6
     488:	77 e1       	ldi	r23, 0x17	; 23
     48a:	ce 01       	movw	r24, r28
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	0e 94 93 0a 	call	0x1526	; 0x1526 <enqueue>
     492:	e9 81       	ldd	r30, Y+1	; 0x01
     494:	fa 81       	ldd	r31, Y+2	; 0x02
     496:	80 81       	ld	r24, Z
     498:	91 81       	ldd	r25, Z+1	; 0x01
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	bf 90       	pop	r11
     4b0:	af 90       	pop	r10
     4b2:	9f 90       	pop	r9
     4b4:	8f 90       	pop	r8
     4b6:	08 95       	ret

000004b8 <Kernel_Create_Task>:
     4b8:	cf 92       	push	r12
     4ba:	df 92       	push	r13
     4bc:	ef 92       	push	r14
     4be:	ff 92       	push	r15
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	e9 01       	movw	r28, r18
     4ca:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <Tasks>
     4ce:	30 91 9d 04 	lds	r19, 0x049D	; 0x80049d <Tasks+0x1>
     4d2:	20 31       	cpi	r18, 0x10	; 16
     4d4:	31 05       	cpc	r19, r1
     4d6:	41 f1       	breq	.+80     	; 0x528 <Kernel_Create_Task+0x70>
     4d8:	20 91 a6 05 	lds	r18, 0x05A6	; 0x8005a6 <Process+0x104>
     4dc:	22 23       	and	r18, r18
     4de:	71 f0       	breq	.+28     	; 0x4fc <Kernel_Create_Task+0x44>
     4e0:	a8 ec       	ldi	r26, 0xC8	; 200
     4e2:	b6 e0       	ldi	r27, 0x06	; 6
     4e4:	e1 e0       	ldi	r30, 0x01	; 1
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	3c 91       	ld	r19, X
     4ea:	33 23       	and	r19, r19
     4ec:	49 f0       	breq	.+18     	; 0x500 <Kernel_Create_Task+0x48>
     4ee:	31 96       	adiw	r30, 0x01	; 1
     4f0:	ae 5d       	subi	r26, 0xDE	; 222
     4f2:	be 4f       	sbci	r27, 0xFE	; 254
     4f4:	e0 31       	cpi	r30, 0x10	; 16
     4f6:	f1 05       	cpc	r31, r1
     4f8:	b9 f7       	brne	.-18     	; 0x4e8 <Kernel_Create_Task+0x30>
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <Kernel_Create_Task+0x48>
     4fc:	e0 e0       	ldi	r30, 0x00	; 0
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	67 01       	movw	r12, r14
     502:	78 01       	movw	r14, r16
     504:	8e 01       	movw	r16, r28
     506:	9a 01       	movw	r18, r20
     508:	ab 01       	movw	r20, r22
     50a:	bc 01       	movw	r22, r24
     50c:	82 e2       	ldi	r24, 0x22	; 34
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	e8 9f       	mul	r30, r24
     512:	d0 01       	movw	r26, r0
     514:	e9 9f       	mul	r30, r25
     516:	b0 0d       	add	r27, r0
     518:	f8 9f       	mul	r31, r24
     51a:	b0 0d       	add	r27, r0
     51c:	11 24       	eor	r1, r1
     51e:	cd 01       	movw	r24, r26
     520:	8e 55       	subi	r24, 0x5E	; 94
     522:	9b 4f       	sbci	r25, 0xFB	; 251
     524:	1a df       	rcall	.-460    	; 0x35a <Kernel_Create_Task_At>
     526:	02 c0       	rjmp	.+4      	; 0x52c <Kernel_Create_Task+0x74>
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	ff 90       	pop	r15
     536:	ef 90       	pop	r14
     538:	df 90       	pop	r13
     53a:	cf 90       	pop	r12
     53c:	08 95       	ret

0000053e <OS_Init>:
     53e:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <Tasks+0x1>
     542:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <Tasks>
     546:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <KernelActive+0x1>
     54a:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <KernelActive>
     54e:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <pCount+0x1>
     552:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <pCount>
     556:	e2 ea       	ldi	r30, 0xA2	; 162
     558:	f4 e0       	ldi	r31, 0x04	; 4
     55a:	22 ec       	ldi	r18, 0xC2	; 194
     55c:	36 e1       	ldi	r19, 0x16	; 22
     55e:	82 e2       	ldi	r24, 0x22	; 34
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	df 01       	movw	r26, r30
     564:	ac 01       	movw	r20, r24
     566:	1d 92       	st	X+, r1
     568:	41 50       	subi	r20, 0x01	; 1
     56a:	50 40       	sbci	r21, 0x00	; 0
     56c:	e1 f7       	brne	.-8      	; 0x566 <OS_Init+0x28>
     56e:	df 01       	movw	r26, r30
     570:	ac 5f       	subi	r26, 0xFC	; 252
     572:	be 4f       	sbci	r27, 0xFE	; 254
     574:	1c 92       	st	X, r1
     576:	11 82       	std	Z+1, r1	; 0x01
     578:	10 82       	st	Z, r1
     57a:	ee 5d       	subi	r30, 0xDE	; 222
     57c:	fe 4f       	sbci	r31, 0xFE	; 254
     57e:	e2 17       	cp	r30, r18
     580:	f3 07       	cpc	r31, r19
     582:	79 f7       	brne	.-34     	; 0x562 <OS_Init+0x24>
     584:	a2 e0       	ldi	r26, 0x02	; 2
     586:	b2 e0       	ldi	r27, 0x02	; 2
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	29 e2       	ldi	r18, 0x29	; 41
     58e:	fd 01       	movw	r30, r26
     590:	32 2f       	mov	r19, r18
     592:	11 92       	st	Z+, r1
     594:	3a 95       	dec	r19
     596:	e9 f7       	brne	.-6      	; 0x592 <OS_Init+0x54>
     598:	28 9f       	mul	r18, r24
     59a:	f0 01       	movw	r30, r0
     59c:	29 9f       	mul	r18, r25
     59e:	f0 0d       	add	r31, r0
     5a0:	11 24       	eor	r1, r1
     5a2:	ee 5f       	subi	r30, 0xFE	; 254
     5a4:	fd 4f       	sbci	r31, 0xFD	; 253
     5a6:	16 a2       	std	Z+38, r1	; 0x26
     5a8:	01 96       	adiw	r24, 0x01	; 1
     5aa:	91 83       	std	Z+1, r25	; 0x01
     5ac:	80 83       	st	Z, r24
     5ae:	99 96       	adiw	r26, 0x29	; 41
     5b0:	80 31       	cpi	r24, 0x10	; 16
     5b2:	91 05       	cpc	r25, r1
     5b4:	61 f7       	brne	.-40     	; 0x58e <OS_Init+0x50>
     5b6:	08 95       	ret

000005b8 <OS_Abort>:
     5b8:	47 9a       	sbi	0x08, 7	; 8
     5ba:	47 98       	cbi	0x08, 7	; 8
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_exit>

000005c4 <CheckTimingViolation>:
     5c4:	a0 91 94 04 	lds	r26, 0x0494	; 0x800494 <PeriodicCount>
     5c8:	b0 91 95 04 	lds	r27, 0x0495	; 0x800495 <PeriodicCount+0x1>
     5cc:	cd 01       	movw	r24, r26
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	da f0       	brmi	.+54     	; 0x608 <CheckTimingViolation+0x44>
     5d2:	aa 0f       	add	r26, r26
     5d4:	bb 1f       	adc	r27, r27
     5d6:	ac 51       	subi	r26, 0x1C	; 28
     5d8:	b9 4e       	sbci	r27, 0xE9	; 233
     5da:	44 ee       	ldi	r20, 0xE4	; 228
     5dc:	56 e1       	ldi	r21, 0x16	; 22
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	fe 91       	ld	r31, -X
     5e4:	ee 91       	ld	r30, -X
     5e6:	ea 5e       	subi	r30, 0xEA	; 234
     5e8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ea:	80 81       	ld	r24, Z
     5ec:	91 81       	ldd	r25, Z+1	; 0x01
     5ee:	89 2b       	or	r24, r25
     5f0:	11 f4       	brne	.+4      	; 0x5f6 <CheckTimingViolation+0x32>
     5f2:	2f 5f       	subi	r18, 0xFF	; 255
     5f4:	3f 4f       	sbci	r19, 0xFF	; 255
     5f6:	a4 17       	cp	r26, r20
     5f8:	b5 07       	cpc	r27, r21
     5fa:	99 f7       	brne	.-26     	; 0x5e2 <CheckTimingViolation+0x1e>
     5fc:	22 30       	cpi	r18, 0x02	; 2
     5fe:	31 05       	cpc	r19, r1
     600:	1c f0       	brlt	.+6      	; 0x608 <CheckTimingViolation+0x44>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	d8 cf       	rjmp	.-80     	; 0x5b8 <OS_Abort>
     608:	08 95       	ret

0000060a <Dispatch>:
     60a:	dc df       	rcall	.-72     	; 0x5c4 <CheckTimingViolation>
     60c:	66 e9       	ldi	r22, 0x96	; 150
     60e:	74 e0       	ldi	r23, 0x04	; 4
     610:	82 ec       	ldi	r24, 0xC2	; 194
     612:	96 e1       	ldi	r25, 0x16	; 22
     614:	b0 d7       	rcall	.+3936   	; 0x1576 <dequeue>
     616:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <Cp+0x1>
     61a:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <Cp>
     61e:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <PeriodicCount>
     622:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <PeriodicCount+0x1>
     626:	89 2b       	or	r24, r25
     628:	e1 f0       	breq	.+56     	; 0x662 <Dispatch+0x58>
     62a:	64 e9       	ldi	r22, 0x94	; 148
     62c:	74 e0       	ldi	r23, 0x04	; 4
     62e:	84 ee       	ldi	r24, 0xE4	; 228
     630:	96 e1       	ldi	r25, 0x16	; 22
     632:	0e 94 48 0b 	call	0x1690	; 0x1690 <peek>
     636:	fc 01       	movw	r30, r24
     638:	ea 5e       	subi	r30, 0xEA	; 234
     63a:	fe 4f       	sbci	r31, 0xFE	; 254
     63c:	80 81       	ld	r24, Z
     63e:	91 81       	ldd	r25, Z+1	; 0x01
     640:	89 2b       	or	r24, r25
     642:	79 f4       	brne	.+30     	; 0x662 <Dispatch+0x58>
     644:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     648:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     64c:	89 2b       	or	r24, r25
     64e:	01 f5       	brne	.+64     	; 0x690 <Dispatch+0x86>
     650:	64 e9       	ldi	r22, 0x94	; 148
     652:	74 e0       	ldi	r23, 0x04	; 4
     654:	84 ee       	ldi	r24, 0xE4	; 228
     656:	96 e1       	ldi	r25, 0x16	; 22
     658:	8e d7       	rcall	.+3868   	; 0x1576 <dequeue>
     65a:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <Cp+0x1>
     65e:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <Cp>
     662:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     666:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     66a:	89 2b       	or	r24, r25
     66c:	89 f4       	brne	.+34     	; 0x690 <Dispatch+0x86>
     66e:	62 e9       	ldi	r22, 0x92	; 146
     670:	74 e0       	ldi	r23, 0x04	; 4
     672:	86 e0       	ldi	r24, 0x06	; 6
     674:	97 e1       	ldi	r25, 0x17	; 23
     676:	7f d7       	rcall	.+3838   	; 0x1576 <dequeue>
     678:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <Cp+0x1>
     67c:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <Cp>
     680:	89 2b       	or	r24, r25
     682:	31 f4       	brne	.+12     	; 0x690 <Dispatch+0x86>
     684:	82 ea       	ldi	r24, 0xA2	; 162
     686:	94 e0       	ldi	r25, 0x04	; 4
     688:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <Cp+0x1>
     68c:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <Cp>
     690:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     694:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     698:	82 81       	ldd	r24, Z+2	; 0x02
     69a:	93 81       	ldd	r25, Z+3	; 0x03
     69c:	90 93 e3 16 	sts	0x16E3, r25	; 0x8016e3 <CurrentSp+0x1>
     6a0:	80 93 e2 16 	sts	0x16E2, r24	; 0x8016e2 <CurrentSp>
     6a4:	ec 5f       	subi	r30, 0xFC	; 252
     6a6:	fe 4f       	sbci	r31, 0xFE	; 254
     6a8:	82 e0       	ldi	r24, 0x02	; 2
     6aa:	80 83       	st	Z, r24
     6ac:	08 95       	ret

000006ae <Task_Create>:
     6ae:	4f 92       	push	r4
     6b0:	5f 92       	push	r5
     6b2:	6f 92       	push	r6
     6b4:	7f 92       	push	r7
     6b6:	8f 92       	push	r8
     6b8:	9f 92       	push	r9
     6ba:	af 92       	push	r10
     6bc:	bf 92       	push	r11
     6be:	cf 92       	push	r12
     6c0:	df 92       	push	r13
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <KernelActive>
     6d2:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <KernelActive+0x1>
     6d6:	ef 2b       	or	r30, r31
     6d8:	09 f4       	brne	.+2      	; 0x6dc <Task_Create+0x2e>
     6da:	79 c0       	rjmp	.+242    	; 0x7ce <Task_Create+0x120>
     6dc:	f8 94       	cli
     6de:	63 30       	cpi	r22, 0x03	; 3
     6e0:	71 05       	cpc	r23, r1
     6e2:	49 f4       	brne	.+18     	; 0x6f6 <Task_Create+0x48>
     6e4:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     6e8:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     6ec:	e5 5f       	subi	r30, 0xF5	; 245
     6ee:	fe 4f       	sbci	r31, 0xFE	; 254
     6f0:	a2 e0       	ldi	r26, 0x02	; 2
     6f2:	a0 83       	st	Z, r26
     6f4:	23 c0       	rjmp	.+70     	; 0x73c <Task_Create+0x8e>
     6f6:	62 30       	cpi	r22, 0x02	; 2
     6f8:	71 05       	cpc	r23, r1
     6fa:	89 f4       	brne	.+34     	; 0x71e <Task_Create+0x70>
     6fc:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     700:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     704:	df 01       	movw	r26, r30
     706:	a5 5f       	subi	r26, 0xF5	; 245
     708:	be 4f       	sbci	r27, 0xFE	; 254
     70a:	c4 e0       	ldi	r28, 0x04	; 4
     70c:	cc 93       	st	X, r28
     70e:	ea 5e       	subi	r30, 0xEA	; 234
     710:	fe 4f       	sbci	r31, 0xFE	; 254
     712:	d9 01       	movw	r26, r18
     714:	ae 0d       	add	r26, r14
     716:	bf 1d       	adc	r27, r15
     718:	b1 83       	std	Z+1, r27	; 0x01
     71a:	a0 83       	st	Z, r26
     71c:	0f c0       	rjmp	.+30     	; 0x73c <Task_Create+0x8e>
     71e:	61 30       	cpi	r22, 0x01	; 1
     720:	71 05       	cpc	r23, r1
     722:	49 f4       	brne	.+18     	; 0x736 <Task_Create+0x88>
     724:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     728:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     72c:	e5 5f       	subi	r30, 0xF5	; 245
     72e:	fe 4f       	sbci	r31, 0xFE	; 254
     730:	a3 e0       	ldi	r26, 0x03	; 3
     732:	a0 83       	st	Z, r26
     734:	03 c0       	rjmp	.+6      	; 0x73c <Task_Create+0x8e>
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	3e df       	rcall	.-388    	; 0x5b8 <OS_Abort>
     73c:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     740:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     744:	df 01       	movw	r26, r30
     746:	a7 5f       	subi	r26, 0xF7	; 247
     748:	be 4f       	sbci	r27, 0xFE	; 254
     74a:	11 96       	adiw	r26, 0x01	; 1
     74c:	9c 93       	st	X, r25
     74e:	8e 93       	st	-X, r24
     750:	14 97       	sbiw	r26, 0x04	; 4
     752:	8d 90       	ld	r8, X+
     754:	9c 90       	ld	r9, X
     756:	11 97       	sbiw	r26, 0x01	; 1
     758:	11 96       	adiw	r26, 0x01	; 1
     75a:	7c 93       	st	X, r23
     75c:	6e 93       	st	-X, r22
     75e:	12 96       	adiw	r26, 0x02	; 2
     760:	6d 90       	ld	r6, X+
     762:	7c 90       	ld	r7, X
     764:	11 97       	sbiw	r26, 0x01	; 1
     766:	11 96       	adiw	r26, 0x01	; 1
     768:	5c 93       	st	X, r21
     76a:	4e 93       	st	-X, r20
     76c:	cf 01       	movw	r24, r30
     76e:	8c 5e       	subi	r24, 0xEC	; 236
     770:	9e 4f       	sbci	r25, 0xFE	; 254
     772:	dc 01       	movw	r26, r24
     774:	ad 90       	ld	r10, X+
     776:	bc 90       	ld	r11, X
     778:	11 97       	sbiw	r26, 0x01	; 1
     77a:	12 97       	sbiw	r26, 0x02	; 2
     77c:	cd 90       	ld	r12, X+
     77e:	dc 90       	ld	r13, X
     780:	11 97       	sbiw	r26, 0x01	; 1
     782:	e0 5f       	subi	r30, 0xF0	; 240
     784:	fe 4f       	sbci	r31, 0xFE	; 254
     786:	40 80       	ld	r4, Z
     788:	51 80       	ldd	r5, Z+1	; 0x01
     78a:	ec 01       	movw	r28, r24
     78c:	39 83       	std	Y+1, r19	; 0x01
     78e:	28 83       	st	Y, r18
     790:	11 96       	adiw	r26, 0x01	; 1
     792:	1c 93       	st	X, r17
     794:	0e 93       	st	-X, r16
     796:	f1 82       	std	Z+1, r15	; 0x01
     798:	e0 82       	st	Z, r14
     79a:	25 dd       	rcall	.-1462   	; 0x1e6 <Enter_Kernel>
     79c:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <Cp>
     7a0:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <Cp+0x1>
     7a4:	f9 01       	movw	r30, r18
     7a6:	e4 5f       	subi	r30, 0xF4	; 244
     7a8:	fe 4f       	sbci	r31, 0xFE	; 254
     7aa:	80 81       	ld	r24, Z
     7ac:	91 81       	ldd	r25, Z+1	; 0x01
     7ae:	37 97       	sbiw	r30, 0x07	; 7
     7b0:	91 82       	std	Z+1, r9	; 0x01
     7b2:	80 82       	st	Z, r8
     7b4:	3f 96       	adiw	r30, 0x0f	; 15
     7b6:	b1 82       	std	Z+1, r11	; 0x01
     7b8:	a0 82       	st	Z, r10
     7ba:	32 97       	sbiw	r30, 0x02	; 2
     7bc:	d1 82       	std	Z+1, r13	; 0x01
     7be:	c0 82       	st	Z, r12
     7c0:	32 97       	sbiw	r30, 0x02	; 2
     7c2:	51 82       	std	Z+1, r5	; 0x01
     7c4:	40 82       	st	Z, r4
     7c6:	39 97       	sbiw	r30, 0x09	; 9
     7c8:	71 82       	std	Z+1, r7	; 0x01
     7ca:	60 82       	st	Z, r6
     7cc:	08 c0       	rjmp	.+16     	; 0x7de <Task_Create+0x130>
     7ce:	ee 24       	eor	r14, r14
     7d0:	ea 94       	dec	r14
     7d2:	fe 2c       	mov	r15, r14
     7d4:	0f ef       	ldi	r16, 0xFF	; 255
     7d6:	1f ef       	ldi	r17, 0xFF	; 255
     7d8:	2f ef       	ldi	r18, 0xFF	; 255
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	6d de       	rcall	.-806    	; 0x4b8 <Kernel_Create_Task>
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	bf 90       	pop	r11
     7f0:	af 90       	pop	r10
     7f2:	9f 90       	pop	r9
     7f4:	8f 90       	pop	r8
     7f6:	7f 90       	pop	r7
     7f8:	6f 90       	pop	r6
     7fa:	5f 90       	pop	r5
     7fc:	4f 90       	pop	r4
     7fe:	08 95       	ret

00000800 <Task_Create_System>:
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	ab 01       	movw	r20, r22
     80a:	ee 24       	eor	r14, r14
     80c:	ea 94       	dec	r14
     80e:	fe 2c       	mov	r15, r14
     810:	0f ef       	ldi	r16, 0xFF	; 255
     812:	1f ef       	ldi	r17, 0xFF	; 255
     814:	2f ef       	ldi	r18, 0xFF	; 255
     816:	3f ef       	ldi	r19, 0xFF	; 255
     818:	63 e0       	ldi	r22, 0x03	; 3
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	48 df       	rcall	.-368    	; 0x6ae <Task_Create>
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
     826:	08 95       	ret

00000828 <Task_Create_RR>:
     828:	ef 92       	push	r14
     82a:	ff 92       	push	r15
     82c:	0f 93       	push	r16
     82e:	1f 93       	push	r17
     830:	ab 01       	movw	r20, r22
     832:	ee 24       	eor	r14, r14
     834:	ea 94       	dec	r14
     836:	fe 2c       	mov	r15, r14
     838:	0f ef       	ldi	r16, 0xFF	; 255
     83a:	1f ef       	ldi	r17, 0xFF	; 255
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	34 df       	rcall	.-408    	; 0x6ae <Task_Create>
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	08 95       	ret

00000850 <Task_Create_Period>:
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	7a 01       	movw	r14, r20
     85a:	a8 01       	movw	r20, r16
     85c:	2e 15       	cp	r18, r14
     85e:	3f 05       	cpc	r19, r15
     860:	18 f0       	brcs	.+6      	; 0x868 <Task_Create_Period+0x18>
     862:	83 e0       	ldi	r24, 0x03	; 3
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	a8 de       	rcall	.-688    	; 0x5b8 <OS_Abort>
     868:	89 01       	movw	r16, r18
     86a:	9a 01       	movw	r18, r20
     86c:	ab 01       	movw	r20, r22
     86e:	62 e0       	ldi	r22, 0x02	; 2
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	1d df       	rcall	.-454    	; 0x6ae <Task_Create>
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	08 95       	ret

0000087e <Task_Create_Idle>:
     87e:	ef 92       	push	r14
     880:	ff 92       	push	r15
     882:	0f 93       	push	r16
     884:	1f 93       	push	r17
     886:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <KernelActive>
     88a:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <KernelActive+0x1>
     88e:	89 2b       	or	r24, r25
     890:	f1 f0       	breq	.+60     	; 0x8ce <Task_Create_Idle+0x50>
     892:	f8 94       	cli
     894:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     898:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     89c:	fc 01       	movw	r30, r24
     89e:	e7 5f       	subi	r30, 0xF7	; 247
     8a0:	fe 4f       	sbci	r31, 0xFE	; 254
     8a2:	2b e9       	ldi	r18, 0x9B	; 155
     8a4:	31 e0       	ldi	r19, 0x01	; 1
     8a6:	31 83       	std	Z+1, r19	; 0x01
     8a8:	20 83       	st	Z, r18
     8aa:	34 97       	sbiw	r30, 0x04	; 4
     8ac:	24 e0       	ldi	r18, 0x04	; 4
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	31 83       	std	Z+1, r19	; 0x01
     8b2:	20 83       	st	Z, r18
     8b4:	32 96       	adiw	r30, 0x02	; 2
     8b6:	11 82       	std	Z+1, r1	; 0x01
     8b8:	10 82       	st	Z, r1
     8ba:	95 dc       	rcall	.-1750   	; 0x1e6 <Enter_Kernel>
     8bc:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     8c0:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     8c4:	e4 5f       	subi	r30, 0xF4	; 244
     8c6:	fe 4f       	sbci	r31, 0xFE	; 254
     8c8:	80 81       	ld	r24, Z
     8ca:	91 81       	ldd	r25, Z+1	; 0x01
     8cc:	0e c0       	rjmp	.+28     	; 0x8ea <Task_Create_Idle+0x6c>
     8ce:	ee 24       	eor	r14, r14
     8d0:	ea 94       	dec	r14
     8d2:	fe 2c       	mov	r15, r14
     8d4:	0f ef       	ldi	r16, 0xFF	; 255
     8d6:	1f ef       	ldi	r17, 0xFF	; 255
     8d8:	2f ef       	ldi	r18, 0xFF	; 255
     8da:	3f ef       	ldi	r19, 0xFF	; 255
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	64 e0       	ldi	r22, 0x04	; 4
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	8b e9       	ldi	r24, 0x9B	; 155
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	e7 dd       	rcall	.-1074   	; 0x4b8 <Kernel_Create_Task>
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	08 95       	ret

000008f4 <Task_Next>:
     8f4:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <KernelActive>
     8f8:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <KernelActive+0x1>
     8fc:	89 2b       	or	r24, r25
     8fe:	19 f1       	breq	.+70     	; 0x946 <Task_Next+0x52>
     900:	f8 94       	cli
     902:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     906:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     90a:	fc 01       	movw	r30, r24
     90c:	eb 5f       	subi	r30, 0xFB	; 251
     90e:	fe 4f       	sbci	r31, 0xFE	; 254
     910:	20 81       	ld	r18, Z
     912:	31 81       	ldd	r19, Z+1	; 0x01
     914:	22 30       	cpi	r18, 0x02	; 2
     916:	31 05       	cpc	r19, r1
     918:	81 f4       	brne	.+32     	; 0x93a <Task_Next+0x46>
     91a:	3b 96       	adiw	r30, 0x0b	; 11
     91c:	20 81       	ld	r18, Z
     91e:	31 81       	ldd	r19, Z+1	; 0x01
     920:	38 96       	adiw	r30, 0x08	; 8
     922:	40 81       	ld	r20, Z
     924:	51 81       	ldd	r21, Z+1	; 0x01
     926:	24 1b       	sub	r18, r20
     928:	35 0b       	sbc	r19, r21
     92a:	dc 01       	movw	r26, r24
     92c:	aa 5e       	subi	r26, 0xEA	; 234
     92e:	be 4f       	sbci	r27, 0xFE	; 254
     930:	11 96       	adiw	r26, 0x01	; 1
     932:	3c 93       	st	X, r19
     934:	2e 93       	st	-X, r18
     936:	11 82       	std	Z+1, r1	; 0x01
     938:	10 82       	st	Z, r1
     93a:	fc 01       	movw	r30, r24
     93c:	e5 5f       	subi	r30, 0xF5	; 245
     93e:	fe 4f       	sbci	r31, 0xFE	; 254
     940:	85 e0       	ldi	r24, 0x05	; 5
     942:	80 83       	st	Z, r24
     944:	50 cc       	rjmp	.-1888   	; 0x1e6 <Enter_Kernel>
     946:	08 95       	ret

00000948 <Run_Next>:
     948:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <KernelActive>
     94c:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <KernelActive+0x1>
     950:	89 2b       	or	r24, r25
     952:	09 f4       	brne	.+2      	; 0x956 <Run_Next+0xe>
     954:	41 c0       	rjmp	.+130    	; 0x9d8 <Run_Next+0x90>
     956:	f8 94       	cli
     958:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     95c:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     960:	fc 01       	movw	r30, r24
     962:	eb 5f       	subi	r30, 0xFB	; 251
     964:	fe 4f       	sbci	r31, 0xFE	; 254
     966:	20 81       	ld	r18, Z
     968:	31 81       	ldd	r19, Z+1	; 0x01
     96a:	23 30       	cpi	r18, 0x03	; 3
     96c:	31 05       	cpc	r19, r1
     96e:	21 f4       	brne	.+8      	; 0x978 <Run_Next+0x30>
     970:	36 96       	adiw	r30, 0x06	; 6
     972:	8a e0       	ldi	r24, 0x0A	; 10
     974:	80 83       	st	Z, r24
     976:	2f c0       	rjmp	.+94     	; 0x9d6 <Run_Next+0x8e>
     978:	fc 01       	movw	r30, r24
     97a:	eb 5f       	subi	r30, 0xFB	; 251
     97c:	fe 4f       	sbci	r31, 0xFE	; 254
     97e:	20 81       	ld	r18, Z
     980:	31 81       	ldd	r19, Z+1	; 0x01
     982:	22 30       	cpi	r18, 0x02	; 2
     984:	31 05       	cpc	r19, r1
     986:	11 f5       	brne	.+68     	; 0x9cc <Run_Next+0x84>
     988:	73 96       	adiw	r30, 0x13	; 19
     98a:	40 81       	ld	r20, Z
     98c:	51 81       	ldd	r21, Z+1	; 0x01
     98e:	36 97       	sbiw	r30, 0x06	; 6
     990:	20 81       	ld	r18, Z
     992:	31 81       	ldd	r19, Z+1	; 0x01
     994:	42 17       	cp	r20, r18
     996:	53 07       	cpc	r21, r19
     998:	18 f0       	brcs	.+6      	; 0x9a0 <Run_Next+0x58>
     99a:	84 e0       	ldi	r24, 0x04	; 4
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0c de       	rcall	.-1000   	; 0x5b8 <OS_Abort>
     9a0:	20 91 96 04 	lds	r18, 0x0496	; 0x800496 <SysCount>
     9a4:	30 91 97 04 	lds	r19, 0x0497	; 0x800497 <SysCount+0x1>
     9a8:	12 16       	cp	r1, r18
     9aa:	13 06       	cpc	r1, r19
     9ac:	4c f4       	brge	.+18     	; 0x9c0 <Run_Next+0x78>
     9ae:	fc 01       	movw	r30, r24
     9b0:	ea 5e       	subi	r30, 0xEA	; 234
     9b2:	fe 4f       	sbci	r31, 0xFE	; 254
     9b4:	11 82       	std	Z+1, r1	; 0x01
     9b6:	10 82       	st	Z, r1
     9b8:	3b 97       	sbiw	r30, 0x0b	; 11
     9ba:	85 e0       	ldi	r24, 0x05	; 5
     9bc:	80 83       	st	Z, r24
     9be:	0b c0       	rjmp	.+22     	; 0x9d6 <Run_Next+0x8e>
     9c0:	fc 01       	movw	r30, r24
     9c2:	e5 5f       	subi	r30, 0xF5	; 245
     9c4:	fe 4f       	sbci	r31, 0xFE	; 254
     9c6:	8a e0       	ldi	r24, 0x0A	; 10
     9c8:	80 83       	st	Z, r24
     9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <Run_Next+0x8e>
     9cc:	fc 01       	movw	r30, r24
     9ce:	e5 5f       	subi	r30, 0xF5	; 245
     9d0:	fe 4f       	sbci	r31, 0xFE	; 254
     9d2:	85 e0       	ldi	r24, 0x05	; 5
     9d4:	80 83       	st	Z, r24
     9d6:	07 cc       	rjmp	.-2034   	; 0x1e6 <Enter_Kernel>
     9d8:	08 95       	ret

000009da <setup>:
     9da:	f8 94       	cli
     9dc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     9e0:	e1 e8       	ldi	r30, 0x81	; 129
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	10 82       	st	Z, r1
     9e6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     9ea:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     9ee:	80 e7       	ldi	r24, 0x70	; 112
     9f0:	92 e0       	ldi	r25, 0x02	; 2
     9f2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     9f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     9fa:	80 81       	ld	r24, Z
     9fc:	88 60       	ori	r24, 0x08	; 8
     9fe:	80 83       	st	Z, r24
     a00:	80 81       	ld	r24, Z
     a02:	84 60       	ori	r24, 0x04	; 4
     a04:	80 83       	st	Z, r24
     a06:	ef e6       	ldi	r30, 0x6F	; 111
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 81       	ld	r24, Z
     a0c:	82 60       	ori	r24, 0x02	; 2
     a0e:	80 83       	st	Z, r24
     a10:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     a14:	e1 e9       	ldi	r30, 0x91	; 145
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	10 82       	st	Z, r1
     a1a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     a1e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     a22:	83 e2       	ldi	r24, 0x23	; 35
     a24:	94 ef       	ldi	r25, 0xF4	; 244
     a26:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     a2a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     a2e:	80 81       	ld	r24, Z
     a30:	88 60       	ori	r24, 0x08	; 8
     a32:	80 83       	st	Z, r24
     a34:	80 81       	ld	r24, Z
     a36:	84 60       	ori	r24, 0x04	; 4
     a38:	80 83       	st	Z, r24
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     a40:	78 94       	sei
     a42:	08 95       	ret

00000a44 <__vector_17>:
     a44:	1f 92       	push	r1
     a46:	0f 92       	push	r0
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	0f 92       	push	r0
     a4c:	11 24       	eor	r1, r1
     a4e:	0b b6       	in	r0, 0x3b	; 59
     a50:	0f 92       	push	r0
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
     a6a:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     a6e:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     a72:	fc 01       	movw	r30, r24
     a74:	eb 5f       	subi	r30, 0xFB	; 251
     a76:	fe 4f       	sbci	r31, 0xFE	; 254
     a78:	20 81       	ld	r18, Z
     a7a:	31 81       	ldd	r19, Z+1	; 0x01
     a7c:	22 30       	cpi	r18, 0x02	; 2
     a7e:	31 05       	cpc	r19, r1
     a80:	31 f4       	brne	.+12     	; 0xa8e <__vector_17+0x4a>
     a82:	73 96       	adiw	r30, 0x13	; 19
     a84:	80 81       	ld	r24, Z
     a86:	91 81       	ldd	r25, Z+1	; 0x01
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	91 83       	std	Z+1, r25	; 0x01
     a8c:	80 83       	st	Z, r24
     a8e:	a0 91 94 04 	lds	r26, 0x0494	; 0x800494 <PeriodicCount>
     a92:	b0 91 95 04 	lds	r27, 0x0495	; 0x800495 <PeriodicCount+0x1>
     a96:	cd 01       	movw	r24, r26
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	c2 f0       	brmi	.+48     	; 0xacc <__vector_17+0x88>
     a9c:	aa 0f       	add	r26, r26
     a9e:	bb 1f       	adc	r27, r27
     aa0:	ac 51       	subi	r26, 0x1C	; 28
     aa2:	b9 4e       	sbci	r27, 0xE9	; 233
     aa4:	44 ee       	ldi	r20, 0xE4	; 228
     aa6:	56 e1       	ldi	r21, 0x16	; 22
     aa8:	9e 91       	ld	r25, -X
     aaa:	8e 91       	ld	r24, -X
     aac:	fc 01       	movw	r30, r24
     aae:	ea 5e       	subi	r30, 0xEA	; 234
     ab0:	fe 4f       	sbci	r31, 0xFE	; 254
     ab2:	20 81       	ld	r18, Z
     ab4:	31 81       	ldd	r19, Z+1	; 0x01
     ab6:	12 16       	cp	r1, r18
     ab8:	13 06       	cpc	r1, r19
     aba:	2c f4       	brge	.+10     	; 0xac6 <__vector_17+0x82>
     abc:	80 81       	ld	r24, Z
     abe:	91 81       	ldd	r25, Z+1	; 0x01
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	91 83       	std	Z+1, r25	; 0x01
     ac4:	80 83       	st	Z, r24
     ac6:	a4 17       	cp	r26, r20
     ac8:	b5 07       	cpc	r27, r21
     aca:	71 f7       	brne	.-36     	; 0xaa8 <__vector_17+0x64>
     acc:	3d df       	rcall	.-390    	; 0x948 <Run_Next>
     ace:	ff 91       	pop	r31
     ad0:	ef 91       	pop	r30
     ad2:	bf 91       	pop	r27
     ad4:	af 91       	pop	r26
     ad6:	9f 91       	pop	r25
     ad8:	8f 91       	pop	r24
     ada:	7f 91       	pop	r23
     adc:	6f 91       	pop	r22
     ade:	5f 91       	pop	r21
     ae0:	4f 91       	pop	r20
     ae2:	3f 91       	pop	r19
     ae4:	2f 91       	pop	r18
     ae6:	0f 90       	pop	r0
     ae8:	0b be       	out	0x3b, r0	; 59
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	0f 90       	pop	r0
     af0:	1f 90       	pop	r1
     af2:	18 95       	reti

00000af4 <__vector_32>:
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	8f 93       	push	r24
     b00:	9f 93       	push	r25
     b02:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <tickOverflowCount>
     b06:	90 91 99 04 	lds	r25, 0x0499	; 0x800499 <tickOverflowCount+0x1>
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <tickOverflowCount+0x1>
     b10:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <tickOverflowCount>
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	0f 90       	pop	r0
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	0f 90       	pop	r0
     b1e:	1f 90       	pop	r1
     b20:	18 95       	reti

00000b22 <Chan_Init>:
     b22:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
     b26:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x1>
     b2a:	40 97       	sbiw	r24, 0x10	; 16
     b2c:	b1 f1       	breq	.+108    	; 0xb9a <Chan_Init+0x78>
     b2e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <ChannelArray+0x26>
     b32:	88 23       	and	r24, r24
     b34:	71 f0       	breq	.+28     	; 0xb52 <Chan_Init+0x30>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	39 e2       	ldi	r19, 0x29	; 41
     b3c:	38 9f       	mul	r19, r24
     b3e:	f0 01       	movw	r30, r0
     b40:	39 9f       	mul	r19, r25
     b42:	f0 0d       	add	r31, r0
     b44:	11 24       	eor	r1, r1
     b46:	ee 5f       	subi	r30, 0xFE	; 254
     b48:	fd 4f       	sbci	r31, 0xFD	; 253
     b4a:	26 a1       	ldd	r18, Z+38	; 0x26
     b4c:	21 11       	cpse	r18, r1
     b4e:	13 c0       	rjmp	.+38     	; 0xb76 <Chan_Init+0x54>
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <Chan_Init+0x34>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	29 e2       	ldi	r18, 0x29	; 41
     b58:	28 9f       	mul	r18, r24
     b5a:	f0 01       	movw	r30, r0
     b5c:	29 9f       	mul	r18, r25
     b5e:	f0 0d       	add	r31, r0
     b60:	11 24       	eor	r1, r1
     b62:	ee 5f       	subi	r30, 0xFE	; 254
     b64:	fd 4f       	sbci	r31, 0xFD	; 253
     b66:	22 e0       	ldi	r18, 0x02	; 2
     b68:	26 a3       	std	Z+38, r18	; 0x26
     b6a:	15 a2       	std	Z+37, r1	; 0x25
     b6c:	14 a2       	std	Z+36, r1	; 0x24
     b6e:	80 31       	cpi	r24, 0x10	; 16
     b70:	91 05       	cpc	r25, r1
     b72:	41 f4       	brne	.+16     	; 0xb84 <Chan_Init+0x62>
     b74:	15 c0       	rjmp	.+42     	; 0xba0 <Chan_Init+0x7e>
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	80 31       	cpi	r24, 0x10	; 16
     b7a:	91 05       	cpc	r25, r1
     b7c:	f9 f6       	brne	.-66     	; 0xb3c <Chan_Init+0x1a>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	08 95       	ret
     b84:	29 e2       	ldi	r18, 0x29	; 41
     b86:	28 9f       	mul	r18, r24
     b88:	f0 01       	movw	r30, r0
     b8a:	29 9f       	mul	r18, r25
     b8c:	f0 0d       	add	r31, r0
     b8e:	11 24       	eor	r1, r1
     b90:	ee 5f       	subi	r30, 0xFE	; 254
     b92:	fd 4f       	sbci	r31, 0xFD	; 253
     b94:	80 81       	ld	r24, Z
     b96:	91 81       	ldd	r25, Z+1	; 0x01
     b98:	08 95       	ret
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	08 95       	ret
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	08 95       	ret

00000ba6 <Send>:
     ba6:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <Cp>
     baa:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <Cp+0x1>
     bae:	f9 01       	movw	r30, r18
     bb0:	eb 5f       	subi	r30, 0xFB	; 251
     bb2:	fe 4f       	sbci	r31, 0xFE	; 254
     bb4:	40 81       	ld	r20, Z
     bb6:	51 81       	ldd	r21, Z+1	; 0x01
     bb8:	42 30       	cpi	r20, 0x02	; 2
     bba:	51 05       	cpc	r21, r1
     bbc:	19 f4       	brne	.+6      	; 0xbc4 <Send+0x1e>
     bbe:	85 e0       	ldi	r24, 0x05	; 5
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	fa dc       	rcall	.-1548   	; 0x5b8 <OS_Abort>
     bc4:	f9 01       	movw	r30, r18
     bc6:	e5 5f       	subi	r30, 0xF5	; 245
     bc8:	fe 4f       	sbci	r31, 0xFE	; 254
     bca:	47 e0       	ldi	r20, 0x07	; 7
     bcc:	40 83       	st	Z, r20
     bce:	71 96       	adiw	r30, 0x11	; 17
     bd0:	91 83       	std	Z+1, r25	; 0x01
     bd2:	80 83       	st	Z, r24
     bd4:	34 96       	adiw	r30, 0x04	; 4
     bd6:	71 83       	std	Z+1, r23	; 0x01
     bd8:	60 83       	st	Z, r22
     bda:	05 cb       	rjmp	.-2550   	; 0x1e6 <Enter_Kernel>
     bdc:	08 95       	ret

00000bde <kernel_send>:
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     bea:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     bee:	fc 01       	movw	r30, r24
     bf0:	e4 5e       	subi	r30, 0xE4	; 228
     bf2:	fe 4f       	sbci	r31, 0xFE	; 254
     bf4:	20 81       	ld	r18, Z
     bf6:	31 81       	ldd	r19, Z+1	; 0x01
     bf8:	21 50       	subi	r18, 0x01	; 1
     bfa:	31 09       	sbc	r19, r1
     bfc:	49 e2       	ldi	r20, 0x29	; 41
     bfe:	42 9f       	mul	r20, r18
     c00:	f0 01       	movw	r30, r0
     c02:	43 9f       	mul	r20, r19
     c04:	f0 0d       	add	r31, r0
     c06:	11 24       	eor	r1, r1
     c08:	ee 5f       	subi	r30, 0xFE	; 254
     c0a:	fd 4f       	sbci	r31, 0xFD	; 253
     c0c:	24 a1       	ldd	r18, Z+36	; 0x24
     c0e:	35 a1       	ldd	r19, Z+37	; 0x25
     c10:	23 2b       	or	r18, r19
     c12:	09 f0       	breq	.+2      	; 0xc16 <kernel_send+0x38>
     c14:	3d c0       	rjmp	.+122    	; 0xc90 <kernel_send+0xb2>
     c16:	fc 01       	movw	r30, r24
     c18:	e4 5e       	subi	r30, 0xE4	; 228
     c1a:	fe 4f       	sbci	r31, 0xFE	; 254
     c1c:	20 81       	ld	r18, Z
     c1e:	31 81       	ldd	r19, Z+1	; 0x01
     c20:	21 50       	subi	r18, 0x01	; 1
     c22:	31 09       	sbc	r19, r1
     c24:	42 9f       	mul	r20, r18
     c26:	f0 01       	movw	r30, r0
     c28:	43 9f       	mul	r20, r19
     c2a:	f0 0d       	add	r31, r0
     c2c:	11 24       	eor	r1, r1
     c2e:	ee 5f       	subi	r30, 0xFE	; 254
     c30:	fd 4f       	sbci	r31, 0xFD	; 253
     c32:	22 81       	ldd	r18, Z+2	; 0x02
     c34:	33 81       	ldd	r19, Z+3	; 0x03
     c36:	23 2b       	or	r18, r19
     c38:	41 f5       	brne	.+80     	; 0xc8a <kernel_send+0xac>
     c3a:	dc 01       	movw	r26, r24
     c3c:	a4 5e       	subi	r26, 0xE4	; 228
     c3e:	be 4f       	sbci	r27, 0xFE	; 254
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	11 97       	sbiw	r26, 0x01	; 1
     c46:	21 50       	subi	r18, 0x01	; 1
     c48:	31 09       	sbc	r19, r1
     c4a:	42 9f       	mul	r20, r18
     c4c:	f0 01       	movw	r30, r0
     c4e:	43 9f       	mul	r20, r19
     c50:	f0 0d       	add	r31, r0
     c52:	11 24       	eor	r1, r1
     c54:	ee 5f       	subi	r30, 0xFE	; 254
     c56:	fd 4f       	sbci	r31, 0xFD	; 253
     c58:	93 83       	std	Z+3, r25	; 0x03
     c5a:	82 83       	std	Z+2, r24	; 0x02
     c5c:	fc 01       	movw	r30, r24
     c5e:	ec 5f       	subi	r30, 0xFC	; 252
     c60:	fe 4f       	sbci	r31, 0xFE	; 254
     c62:	23 e0       	ldi	r18, 0x03	; 3
     c64:	20 83       	st	Z, r18
     c66:	2d 91       	ld	r18, X+
     c68:	3c 91       	ld	r19, X
     c6a:	21 50       	subi	r18, 0x01	; 1
     c6c:	31 09       	sbc	r19, r1
     c6e:	7c 96       	adiw	r30, 0x1c	; 28
     c70:	80 81       	ld	r24, Z
     c72:	91 81       	ldd	r25, Z+1	; 0x01
     c74:	42 9f       	mul	r20, r18
     c76:	f0 01       	movw	r30, r0
     c78:	43 9f       	mul	r20, r19
     c7a:	f0 0d       	add	r31, r0
     c7c:	11 24       	eor	r1, r1
     c7e:	ee 5f       	subi	r30, 0xFE	; 254
     c80:	fd 4f       	sbci	r31, 0xFD	; 253
     c82:	90 a7       	std	Z+40, r25	; 0x28
     c84:	87 a3       	std	Z+39, r24	; 0x27
     c86:	c1 dc       	rcall	.-1662   	; 0x60a <Dispatch>
     c88:	0d c1       	rjmp	.+538    	; 0xea4 <kernel_send+0x2c6>
     c8a:	86 e0       	ldi	r24, 0x06	; 6
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	94 dc       	rcall	.-1752   	; 0x5b8 <OS_Abort>
     c90:	fc 01       	movw	r30, r24
     c92:	e4 5e       	subi	r30, 0xE4	; 228
     c94:	fe 4f       	sbci	r31, 0xFE	; 254
     c96:	20 81       	ld	r18, Z
     c98:	31 81       	ldd	r19, Z+1	; 0x01
     c9a:	21 50       	subi	r18, 0x01	; 1
     c9c:	31 09       	sbc	r19, r1
     c9e:	49 e2       	ldi	r20, 0x29	; 41
     ca0:	42 9f       	mul	r20, r18
     ca2:	f0 01       	movw	r30, r0
     ca4:	43 9f       	mul	r20, r19
     ca6:	f0 0d       	add	r31, r0
     ca8:	11 24       	eor	r1, r1
     caa:	ee 5f       	subi	r30, 0xFE	; 254
     cac:	fd 4f       	sbci	r31, 0xFD	; 253
     cae:	22 81       	ldd	r18, Z+2	; 0x02
     cb0:	33 81       	ldd	r19, Z+3	; 0x03
     cb2:	23 2b       	or	r18, r19
     cb4:	19 f0       	breq	.+6      	; 0xcbc <kernel_send+0xde>
     cb6:	86 e0       	ldi	r24, 0x06	; 6
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	7e dc       	rcall	.-1796   	; 0x5b8 <OS_Abort>
     cbc:	fc 01       	movw	r30, r24
     cbe:	e4 5e       	subi	r30, 0xE4	; 228
     cc0:	fe 4f       	sbci	r31, 0xFE	; 254
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	29 e2       	ldi	r18, 0x29	; 41
     cca:	28 9f       	mul	r18, r24
     ccc:	f0 01       	movw	r30, r0
     cce:	29 9f       	mul	r18, r25
     cd0:	f0 0d       	add	r31, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	ee 5f       	subi	r30, 0xFE	; 254
     cd6:	fd 4f       	sbci	r31, 0xFD	; 253
     cd8:	c4 a1       	ldd	r28, Z+36	; 0x24
     cda:	d5 a1       	ldd	r29, Z+37	; 0x25
     cdc:	21 97       	sbiw	r28, 0x01	; 1
     cde:	0a f4       	brpl	.+2      	; 0xce2 <kernel_send+0x104>
     ce0:	ce c0       	rjmp	.+412    	; 0xe7e <kernel_send+0x2a0>
     ce2:	19 e2       	ldi	r17, 0x29	; 41
     ce4:	01 e0       	ldi	r16, 0x01	; 1
     ce6:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <Cp>
     cea:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <Cp+0x1>
     cee:	c9 01       	movw	r24, r18
     cf0:	84 5e       	subi	r24, 0xE4	; 228
     cf2:	9e 4f       	sbci	r25, 0xFE	; 254
     cf4:	dc 01       	movw	r26, r24
     cf6:	4d 91       	ld	r20, X+
     cf8:	5c 91       	ld	r21, X
     cfa:	41 50       	subi	r20, 0x01	; 1
     cfc:	51 09       	sbc	r21, r1
     cfe:	fe 01       	movw	r30, r28
     d00:	32 96       	adiw	r30, 0x02	; 2
     d02:	ee 0f       	add	r30, r30
     d04:	ff 1f       	adc	r31, r31
     d06:	14 9f       	mul	r17, r20
     d08:	d0 01       	movw	r26, r0
     d0a:	15 9f       	mul	r17, r21
     d0c:	b0 0d       	add	r27, r0
     d0e:	11 24       	eor	r1, r1
     d10:	ae 0f       	add	r26, r30
     d12:	bf 1f       	adc	r27, r31
     d14:	ae 5f       	subi	r26, 0xFE	; 254
     d16:	bd 4f       	sbci	r27, 0xFD	; 253
     d18:	0d 90       	ld	r0, X+
     d1a:	bc 91       	ld	r27, X
     d1c:	a0 2d       	mov	r26, r0
     d1e:	ac 5f       	subi	r26, 0xFC	; 252
     d20:	be 4f       	sbci	r27, 0xFE	; 254
     d22:	0c 93       	st	X, r16
     d24:	dc 01       	movw	r26, r24
     d26:	4d 91       	ld	r20, X+
     d28:	5c 91       	ld	r21, X
     d2a:	41 50       	subi	r20, 0x01	; 1
     d2c:	51 09       	sbc	r21, r1
     d2e:	14 9f       	mul	r17, r20
     d30:	d0 01       	movw	r26, r0
     d32:	15 9f       	mul	r17, r21
     d34:	b0 0d       	add	r27, r0
     d36:	11 24       	eor	r1, r1
     d38:	ae 0f       	add	r26, r30
     d3a:	bf 1f       	adc	r27, r31
     d3c:	ae 5f       	subi	r26, 0xFE	; 254
     d3e:	bd 4f       	sbci	r27, 0xFD	; 253
     d40:	6d 91       	ld	r22, X+
     d42:	7c 91       	ld	r23, X
     d44:	a9 01       	movw	r20, r18
     d46:	40 5e       	subi	r20, 0xE0	; 224
     d48:	5e 4f       	sbci	r21, 0xFE	; 254
     d4a:	da 01       	movw	r26, r20
     d4c:	4d 91       	ld	r20, X+
     d4e:	5c 91       	ld	r21, X
     d50:	db 01       	movw	r26, r22
     d52:	a0 5e       	subi	r26, 0xE0	; 224
     d54:	be 4f       	sbci	r27, 0xFE	; 254
     d56:	4d 93       	st	X+, r20
     d58:	5c 93       	st	X, r21
     d5a:	dc 01       	movw	r26, r24
     d5c:	4d 91       	ld	r20, X+
     d5e:	5c 91       	ld	r21, X
     d60:	11 97       	sbiw	r26, 0x01	; 1
     d62:	41 50       	subi	r20, 0x01	; 1
     d64:	51 09       	sbc	r21, r1
     d66:	14 9f       	mul	r17, r20
     d68:	c0 01       	movw	r24, r0
     d6a:	15 9f       	mul	r17, r21
     d6c:	90 0d       	add	r25, r0
     d6e:	11 24       	eor	r1, r1
     d70:	e8 0f       	add	r30, r24
     d72:	f9 1f       	adc	r31, r25
     d74:	ee 5f       	subi	r30, 0xFE	; 254
     d76:	fd 4f       	sbci	r31, 0xFD	; 253
     d78:	01 90       	ld	r0, Z+
     d7a:	f0 81       	ld	r31, Z
     d7c:	e0 2d       	mov	r30, r0
     d7e:	eb 5f       	subi	r30, 0xFB	; 251
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	80 81       	ld	r24, Z
     d84:	91 81       	ldd	r25, Z+1	; 0x01
     d86:	03 97       	sbiw	r24, 0x03	; 3
     d88:	c1 f4       	brne	.+48     	; 0xdba <kernel_send+0x1dc>
     d8a:	fd 01       	movw	r30, r26
     d8c:	40 81       	ld	r20, Z
     d8e:	51 81       	ldd	r21, Z+1	; 0x01
     d90:	ce 01       	movw	r24, r28
     d92:	02 96       	adiw	r24, 0x02	; 2
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	41 50       	subi	r20, 0x01	; 1
     d9a:	51 09       	sbc	r21, r1
     d9c:	14 9f       	mul	r17, r20
     d9e:	90 01       	movw	r18, r0
     da0:	15 9f       	mul	r17, r21
     da2:	30 0d       	add	r19, r0
     da4:	11 24       	eor	r1, r1
     da6:	82 0f       	add	r24, r18
     da8:	93 1f       	adc	r25, r19
     daa:	46 e9       	ldi	r20, 0x96	; 150
     dac:	54 e0       	ldi	r21, 0x04	; 4
     dae:	62 ec       	ldi	r22, 0xC2	; 194
     db0:	76 e1       	ldi	r23, 0x16	; 22
     db2:	8e 5f       	subi	r24, 0xFE	; 254
     db4:	9d 4f       	sbci	r25, 0xFD	; 253
     db6:	b7 d3       	rcall	.+1902   	; 0x1526 <enqueue>
     db8:	36 c0       	rjmp	.+108    	; 0xe26 <kernel_send+0x248>
     dba:	f9 01       	movw	r30, r18
     dbc:	e4 5e       	subi	r30, 0xE4	; 228
     dbe:	fe 4f       	sbci	r31, 0xFE	; 254
     dc0:	40 81       	ld	r20, Z
     dc2:	51 81       	ldd	r21, Z+1	; 0x01
     dc4:	41 50       	subi	r20, 0x01	; 1
     dc6:	51 09       	sbc	r21, r1
     dc8:	fe 01       	movw	r30, r28
     dca:	32 96       	adiw	r30, 0x02	; 2
     dcc:	ee 0f       	add	r30, r30
     dce:	ff 1f       	adc	r31, r31
     dd0:	14 9f       	mul	r17, r20
     dd2:	c0 01       	movw	r24, r0
     dd4:	15 9f       	mul	r17, r21
     dd6:	90 0d       	add	r25, r0
     dd8:	11 24       	eor	r1, r1
     dda:	e8 0f       	add	r30, r24
     ddc:	f9 1f       	adc	r31, r25
     dde:	ee 5f       	subi	r30, 0xFE	; 254
     de0:	fd 4f       	sbci	r31, 0xFD	; 253
     de2:	01 90       	ld	r0, Z+
     de4:	f0 81       	ld	r31, Z
     de6:	e0 2d       	mov	r30, r0
     de8:	eb 5f       	subi	r30, 0xFB	; 251
     dea:	fe 4f       	sbci	r31, 0xFE	; 254
     dec:	80 81       	ld	r24, Z
     dee:	91 81       	ldd	r25, Z+1	; 0x01
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	c9 f4       	brne	.+50     	; 0xe26 <kernel_send+0x248>
     df4:	f9 01       	movw	r30, r18
     df6:	e4 5e       	subi	r30, 0xE4	; 228
     df8:	fe 4f       	sbci	r31, 0xFE	; 254
     dfa:	40 81       	ld	r20, Z
     dfc:	51 81       	ldd	r21, Z+1	; 0x01
     dfe:	ce 01       	movw	r24, r28
     e00:	02 96       	adiw	r24, 0x02	; 2
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	41 50       	subi	r20, 0x01	; 1
     e08:	51 09       	sbc	r21, r1
     e0a:	14 9f       	mul	r17, r20
     e0c:	90 01       	movw	r18, r0
     e0e:	15 9f       	mul	r17, r21
     e10:	30 0d       	add	r19, r0
     e12:	11 24       	eor	r1, r1
     e14:	82 0f       	add	r24, r18
     e16:	93 1f       	adc	r25, r19
     e18:	42 e9       	ldi	r20, 0x92	; 146
     e1a:	54 e0       	ldi	r21, 0x04	; 4
     e1c:	66 e0       	ldi	r22, 0x06	; 6
     e1e:	77 e1       	ldi	r23, 0x17	; 23
     e20:	8e 5f       	subi	r24, 0xFE	; 254
     e22:	9d 4f       	sbci	r25, 0xFD	; 253
     e24:	80 d3       	rcall	.+1792   	; 0x1526 <enqueue>
     e26:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <Cp>
     e2a:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <Cp+0x1>
     e2e:	a4 5e       	subi	r26, 0xE4	; 228
     e30:	be 4f       	sbci	r27, 0xFE	; 254
     e32:	2d 91       	ld	r18, X+
     e34:	3c 91       	ld	r19, X
     e36:	11 97       	sbiw	r26, 0x01	; 1
     e38:	21 50       	subi	r18, 0x01	; 1
     e3a:	31 09       	sbc	r19, r1
     e3c:	fe 01       	movw	r30, r28
     e3e:	32 96       	adiw	r30, 0x02	; 2
     e40:	ee 0f       	add	r30, r30
     e42:	ff 1f       	adc	r31, r31
     e44:	12 9f       	mul	r17, r18
     e46:	c0 01       	movw	r24, r0
     e48:	13 9f       	mul	r17, r19
     e4a:	90 0d       	add	r25, r0
     e4c:	11 24       	eor	r1, r1
     e4e:	e8 0f       	add	r30, r24
     e50:	f9 1f       	adc	r31, r25
     e52:	ee 5f       	subi	r30, 0xFE	; 254
     e54:	fd 4f       	sbci	r31, 0xFD	; 253
     e56:	11 82       	std	Z+1, r1	; 0x01
     e58:	10 82       	st	Z, r1
     e5a:	8d 91       	ld	r24, X+
     e5c:	9c 91       	ld	r25, X
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	18 9f       	mul	r17, r24
     e62:	f0 01       	movw	r30, r0
     e64:	19 9f       	mul	r17, r25
     e66:	f0 0d       	add	r31, r0
     e68:	11 24       	eor	r1, r1
     e6a:	ee 5f       	subi	r30, 0xFE	; 254
     e6c:	fd 4f       	sbci	r31, 0xFD	; 253
     e6e:	84 a1       	ldd	r24, Z+36	; 0x24
     e70:	95 a1       	ldd	r25, Z+37	; 0x25
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	95 a3       	std	Z+37, r25	; 0x25
     e76:	84 a3       	std	Z+36, r24	; 0x24
     e78:	21 97       	sbiw	r28, 0x01	; 1
     e7a:	0a f0       	brmi	.+2      	; 0xe7e <kernel_send+0x2a0>
     e7c:	34 cf       	rjmp	.-408    	; 0xce6 <kernel_send+0x108>
     e7e:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     e82:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     e86:	e4 5e       	subi	r30, 0xE4	; 228
     e88:	fe 4f       	sbci	r31, 0xFE	; 254
     e8a:	80 81       	ld	r24, Z
     e8c:	91 81       	ldd	r25, Z+1	; 0x01
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	29 e2       	ldi	r18, 0x29	; 41
     e92:	28 9f       	mul	r18, r24
     e94:	f0 01       	movw	r30, r0
     e96:	29 9f       	mul	r18, r25
     e98:	f0 0d       	add	r31, r0
     e9a:	11 24       	eor	r1, r1
     e9c:	ee 5f       	subi	r30, 0xFE	; 254
     e9e:	fd 4f       	sbci	r31, 0xFD	; 253
     ea0:	10 a6       	std	Z+40, r1	; 0x28
     ea2:	17 a2       	std	Z+39, r1	; 0x27
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	08 95       	ret

00000eae <kernel_receive>:
     eae:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     eb2:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     eb6:	fc 01       	movw	r30, r24
     eb8:	e2 5e       	subi	r30, 0xE2	; 226
     eba:	fe 4f       	sbci	r31, 0xFE	; 254
     ebc:	20 81       	ld	r18, Z
     ebe:	31 81       	ldd	r19, Z+1	; 0x01
     ec0:	21 50       	subi	r18, 0x01	; 1
     ec2:	31 09       	sbc	r19, r1
     ec4:	49 e2       	ldi	r20, 0x29	; 41
     ec6:	42 9f       	mul	r20, r18
     ec8:	f0 01       	movw	r30, r0
     eca:	43 9f       	mul	r20, r19
     ecc:	f0 0d       	add	r31, r0
     ece:	11 24       	eor	r1, r1
     ed0:	ee 5f       	subi	r30, 0xFE	; 254
     ed2:	fd 4f       	sbci	r31, 0xFD	; 253
     ed4:	22 81       	ldd	r18, Z+2	; 0x02
     ed6:	33 81       	ldd	r19, Z+3	; 0x03
     ed8:	23 2b       	or	r18, r19
     eda:	09 f5       	brne	.+66     	; 0xf1e <kernel_receive+0x70>
     edc:	fc 01       	movw	r30, r24
     ede:	ec 5f       	subi	r30, 0xFC	; 252
     ee0:	fe 4f       	sbci	r31, 0xFE	; 254
     ee2:	23 e0       	ldi	r18, 0x03	; 3
     ee4:	20 83       	st	Z, r18
     ee6:	7a 96       	adiw	r30, 0x1a	; 26
     ee8:	20 81       	ld	r18, Z
     eea:	31 81       	ldd	r19, Z+1	; 0x01
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	21 50       	subi	r18, 0x01	; 1
     ef2:	31 09       	sbc	r19, r1
     ef4:	e9 e2       	ldi	r30, 0x29	; 41
     ef6:	e2 9f       	mul	r30, r18
     ef8:	a0 01       	movw	r20, r0
     efa:	e3 9f       	mul	r30, r19
     efc:	50 0d       	add	r21, r0
     efe:	11 24       	eor	r1, r1
     f00:	4a 5d       	subi	r20, 0xDA	; 218
     f02:	5d 4f       	sbci	r21, 0xFD	; 253
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	e8 9f       	mul	r30, r24
     f08:	b0 01       	movw	r22, r0
     f0a:	e9 9f       	mul	r30, r25
     f0c:	70 0d       	add	r23, r0
     f0e:	11 24       	eor	r1, r1
     f10:	6a 5f       	subi	r22, 0xFA	; 250
     f12:	7d 4f       	sbci	r23, 0xFD	; 253
     f14:	80 ea       	ldi	r24, 0xA0	; 160
     f16:	94 e0       	ldi	r25, 0x04	; 4
     f18:	06 d3       	rcall	.+1548   	; 0x1526 <enqueue>
     f1a:	77 cb       	rjmp	.-2322   	; 0x60a <Dispatch>
     f1c:	08 95       	ret
     f1e:	fc 01       	movw	r30, r24
     f20:	e2 5e       	subi	r30, 0xE2	; 226
     f22:	fe 4f       	sbci	r31, 0xFE	; 254
     f24:	20 81       	ld	r18, Z
     f26:	31 81       	ldd	r19, Z+1	; 0x01
     f28:	21 50       	subi	r18, 0x01	; 1
     f2a:	31 09       	sbc	r19, r1
     f2c:	49 e2       	ldi	r20, 0x29	; 41
     f2e:	42 9f       	mul	r20, r18
     f30:	d0 01       	movw	r26, r0
     f32:	43 9f       	mul	r20, r19
     f34:	b0 0d       	add	r27, r0
     f36:	11 24       	eor	r1, r1
     f38:	ae 5f       	subi	r26, 0xFE	; 254
     f3a:	bd 4f       	sbci	r27, 0xFD	; 253
     f3c:	12 96       	adiw	r26, 0x02	; 2
     f3e:	0d 90       	ld	r0, X+
     f40:	bc 91       	ld	r27, X
     f42:	a0 2d       	mov	r26, r0
     f44:	ac 5f       	subi	r26, 0xFC	; 252
     f46:	be 4f       	sbci	r27, 0xFE	; 254
     f48:	21 e0       	ldi	r18, 0x01	; 1
     f4a:	2c 93       	st	X, r18
     f4c:	20 81       	ld	r18, Z
     f4e:	31 81       	ldd	r19, Z+1	; 0x01
     f50:	21 50       	subi	r18, 0x01	; 1
     f52:	31 09       	sbc	r19, r1
     f54:	42 9f       	mul	r20, r18
     f56:	d0 01       	movw	r26, r0
     f58:	43 9f       	mul	r20, r19
     f5a:	b0 0d       	add	r27, r0
     f5c:	11 24       	eor	r1, r1
     f5e:	ae 5f       	subi	r26, 0xFE	; 254
     f60:	bd 4f       	sbci	r27, 0xFD	; 253
     f62:	97 96       	adiw	r26, 0x27	; 39
     f64:	2d 91       	ld	r18, X+
     f66:	3c 91       	ld	r19, X
     f68:	98 97       	sbiw	r26, 0x28	; 40
     f6a:	dc 01       	movw	r26, r24
     f6c:	a0 5e       	subi	r26, 0xE0	; 224
     f6e:	be 4f       	sbci	r27, 0xFE	; 254
     f70:	11 96       	adiw	r26, 0x01	; 1
     f72:	3c 93       	st	X, r19
     f74:	2e 93       	st	-X, r18
     f76:	20 81       	ld	r18, Z
     f78:	31 81       	ldd	r19, Z+1	; 0x01
     f7a:	21 50       	subi	r18, 0x01	; 1
     f7c:	31 09       	sbc	r19, r1
     f7e:	42 9f       	mul	r20, r18
     f80:	f0 01       	movw	r30, r0
     f82:	43 9f       	mul	r20, r19
     f84:	f0 0d       	add	r31, r0
     f86:	11 24       	eor	r1, r1
     f88:	ee 5f       	subi	r30, 0xFE	; 254
     f8a:	fd 4f       	sbci	r31, 0xFD	; 253
     f8c:	02 80       	ldd	r0, Z+2	; 0x02
     f8e:	f3 81       	ldd	r31, Z+3	; 0x03
     f90:	e0 2d       	mov	r30, r0
     f92:	eb 5f       	subi	r30, 0xFB	; 251
     f94:	fe 4f       	sbci	r31, 0xFE	; 254
     f96:	20 81       	ld	r18, Z
     f98:	31 81       	ldd	r19, Z+1	; 0x01
     f9a:	23 30       	cpi	r18, 0x03	; 3
     f9c:	31 05       	cpc	r19, r1
     f9e:	a1 f4       	brne	.+40     	; 0xfc8 <kernel_receive+0x11a>
     fa0:	fc 01       	movw	r30, r24
     fa2:	e2 5e       	subi	r30, 0xE2	; 226
     fa4:	fe 4f       	sbci	r31, 0xFE	; 254
     fa6:	20 81       	ld	r18, Z
     fa8:	31 81       	ldd	r19, Z+1	; 0x01
     faa:	21 50       	subi	r18, 0x01	; 1
     fac:	31 09       	sbc	r19, r1
     fae:	42 9f       	mul	r20, r18
     fb0:	c0 01       	movw	r24, r0
     fb2:	43 9f       	mul	r20, r19
     fb4:	90 0d       	add	r25, r0
     fb6:	11 24       	eor	r1, r1
     fb8:	46 e9       	ldi	r20, 0x96	; 150
     fba:	54 e0       	ldi	r21, 0x04	; 4
     fbc:	62 ec       	ldi	r22, 0xC2	; 194
     fbe:	76 e1       	ldi	r23, 0x16	; 22
     fc0:	8c 5f       	subi	r24, 0xFC	; 252
     fc2:	9d 4f       	sbci	r25, 0xFD	; 253
     fc4:	b0 d2       	rcall	.+1376   	; 0x1526 <enqueue>
     fc6:	2c c0       	rjmp	.+88     	; 0x1020 <kernel_receive+0x172>
     fc8:	fc 01       	movw	r30, r24
     fca:	e2 5e       	subi	r30, 0xE2	; 226
     fcc:	fe 4f       	sbci	r31, 0xFE	; 254
     fce:	20 81       	ld	r18, Z
     fd0:	31 81       	ldd	r19, Z+1	; 0x01
     fd2:	21 50       	subi	r18, 0x01	; 1
     fd4:	31 09       	sbc	r19, r1
     fd6:	49 e2       	ldi	r20, 0x29	; 41
     fd8:	42 9f       	mul	r20, r18
     fda:	f0 01       	movw	r30, r0
     fdc:	43 9f       	mul	r20, r19
     fde:	f0 0d       	add	r31, r0
     fe0:	11 24       	eor	r1, r1
     fe2:	ee 5f       	subi	r30, 0xFE	; 254
     fe4:	fd 4f       	sbci	r31, 0xFD	; 253
     fe6:	02 80       	ldd	r0, Z+2	; 0x02
     fe8:	f3 81       	ldd	r31, Z+3	; 0x03
     fea:	e0 2d       	mov	r30, r0
     fec:	eb 5f       	subi	r30, 0xFB	; 251
     fee:	fe 4f       	sbci	r31, 0xFE	; 254
     ff0:	20 81       	ld	r18, Z
     ff2:	31 81       	ldd	r19, Z+1	; 0x01
     ff4:	21 30       	cpi	r18, 0x01	; 1
     ff6:	31 05       	cpc	r19, r1
     ff8:	99 f4       	brne	.+38     	; 0x1020 <kernel_receive+0x172>
     ffa:	fc 01       	movw	r30, r24
     ffc:	e2 5e       	subi	r30, 0xE2	; 226
     ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    1000:	20 81       	ld	r18, Z
    1002:	31 81       	ldd	r19, Z+1	; 0x01
    1004:	21 50       	subi	r18, 0x01	; 1
    1006:	31 09       	sbc	r19, r1
    1008:	42 9f       	mul	r20, r18
    100a:	c0 01       	movw	r24, r0
    100c:	43 9f       	mul	r20, r19
    100e:	90 0d       	add	r25, r0
    1010:	11 24       	eor	r1, r1
    1012:	42 e9       	ldi	r20, 0x92	; 146
    1014:	54 e0       	ldi	r21, 0x04	; 4
    1016:	66 e0       	ldi	r22, 0x06	; 6
    1018:	77 e1       	ldi	r23, 0x17	; 23
    101a:	8c 5f       	subi	r24, 0xFC	; 252
    101c:	9d 4f       	sbci	r25, 0xFD	; 253
    101e:	83 d2       	rcall	.+1286   	; 0x1526 <enqueue>
    1020:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
    1024:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
    1028:	fc 01       	movw	r30, r24
    102a:	e2 5e       	subi	r30, 0xE2	; 226
    102c:	fe 4f       	sbci	r31, 0xFE	; 254
    102e:	20 81       	ld	r18, Z
    1030:	31 81       	ldd	r19, Z+1	; 0x01
    1032:	21 50       	subi	r18, 0x01	; 1
    1034:	31 09       	sbc	r19, r1
    1036:	49 e2       	ldi	r20, 0x29	; 41
    1038:	42 9f       	mul	r20, r18
    103a:	f0 01       	movw	r30, r0
    103c:	43 9f       	mul	r20, r19
    103e:	f0 0d       	add	r31, r0
    1040:	11 24       	eor	r1, r1
    1042:	ee 5f       	subi	r30, 0xFE	; 254
    1044:	fd 4f       	sbci	r31, 0xFD	; 253
    1046:	13 82       	std	Z+3, r1	; 0x03
    1048:	12 82       	std	Z+2, r1	; 0x02
    104a:	fc 01       	movw	r30, r24
    104c:	e4 5e       	subi	r30, 0xE4	; 228
    104e:	fe 4f       	sbci	r31, 0xFE	; 254
    1050:	80 81       	ld	r24, Z
    1052:	91 81       	ldd	r25, Z+1	; 0x01
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	48 9f       	mul	r20, r24
    1058:	f0 01       	movw	r30, r0
    105a:	49 9f       	mul	r20, r25
    105c:	f0 0d       	add	r31, r0
    105e:	11 24       	eor	r1, r1
    1060:	ee 5f       	subi	r30, 0xFE	; 254
    1062:	fd 4f       	sbci	r31, 0xFD	; 253
    1064:	10 a6       	std	Z+40, r1	; 0x28
    1066:	17 a2       	std	Z+39, r1	; 0x27
    1068:	08 95       	ret

0000106a <kernel_async_send>:
}

void kernel_async_send() {
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
	if (ChannelArray[Cp->senderChannel - 1].numberReceivers == 0) { // no receivers waiting
    1072:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
    1076:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
    107a:	fc 01       	movw	r30, r24
    107c:	e4 5e       	subi	r30, 0xE4	; 228
    107e:	fe 4f       	sbci	r31, 0xFE	; 254
    1080:	20 81       	ld	r18, Z
    1082:	31 81       	ldd	r19, Z+1	; 0x01
    1084:	21 50       	subi	r18, 0x01	; 1
    1086:	31 09       	sbc	r19, r1
    1088:	49 e2       	ldi	r20, 0x29	; 41
    108a:	42 9f       	mul	r20, r18
    108c:	f0 01       	movw	r30, r0
    108e:	43 9f       	mul	r20, r19
    1090:	f0 0d       	add	r31, r0
    1092:	11 24       	eor	r1, r1
    1094:	ee 5f       	subi	r30, 0xFE	; 254
    1096:	fd 4f       	sbci	r31, 0xFD	; 253
    1098:	24 a1       	ldd	r18, Z+36	; 0x24
    109a:	35 a1       	ldd	r19, Z+37	; 0x25
    109c:	23 2b       	or	r18, r19
    109e:	31 f5       	brne	.+76     	; 0x10ec <kernel_async_send+0x82>
		if (ChannelArray[Cp->senderChannel - 1].sender == NULL) ChannelArray[Cp->senderChannel - 1].sender = Cp;
    10a0:	fc 01       	movw	r30, r24
    10a2:	e4 5e       	subi	r30, 0xE4	; 228
    10a4:	fe 4f       	sbci	r31, 0xFE	; 254
    10a6:	20 81       	ld	r18, Z
    10a8:	31 81       	ldd	r19, Z+1	; 0x01
    10aa:	21 50       	subi	r18, 0x01	; 1
    10ac:	31 09       	sbc	r19, r1
    10ae:	42 9f       	mul	r20, r18
    10b0:	f0 01       	movw	r30, r0
    10b2:	43 9f       	mul	r20, r19
    10b4:	f0 0d       	add	r31, r0
    10b6:	11 24       	eor	r1, r1
    10b8:	ee 5f       	subi	r30, 0xFE	; 254
    10ba:	fd 4f       	sbci	r31, 0xFD	; 253
    10bc:	22 81       	ldd	r18, Z+2	; 0x02
    10be:	33 81       	ldd	r19, Z+3	; 0x03
    10c0:	23 2b       	or	r18, r19
    10c2:	89 f4       	brne	.+34     	; 0x10e6 <kernel_async_send+0x7c>
    10c4:	fc 01       	movw	r30, r24
    10c6:	e4 5e       	subi	r30, 0xE4	; 228
    10c8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ca:	20 81       	ld	r18, Z
    10cc:	31 81       	ldd	r19, Z+1	; 0x01
    10ce:	21 50       	subi	r18, 0x01	; 1
    10d0:	31 09       	sbc	r19, r1
    10d2:	42 9f       	mul	r20, r18
    10d4:	f0 01       	movw	r30, r0
    10d6:	43 9f       	mul	r20, r19
    10d8:	f0 0d       	add	r31, r0
    10da:	11 24       	eor	r1, r1
    10dc:	ee 5f       	subi	r30, 0xFE	; 254
    10de:	fd 4f       	sbci	r31, 0xFD	; 253
    10e0:	93 83       	std	Z+3, r25	; 0x03
    10e2:	82 83       	std	Z+2, r24	; 0x02
    10e4:	0d c1       	rjmp	.+538    	; 0x1300 <kernel_async_send+0x296>
		else OS_Abort(6); // cant have more than 1 sender
    10e6:	86 e0       	ldi	r24, 0x06	; 6
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	66 da       	rcall	.-2868   	; 0x5b8 <OS_Abort>
		return; // return without blocking
	} else { //receivers are waiting
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(6); // cant have more than 1 sender
    10ec:	fc 01       	movw	r30, r24
    10ee:	e4 5e       	subi	r30, 0xE4	; 228
    10f0:	fe 4f       	sbci	r31, 0xFE	; 254
    10f2:	20 81       	ld	r18, Z
    10f4:	31 81       	ldd	r19, Z+1	; 0x01
    10f6:	21 50       	subi	r18, 0x01	; 1
    10f8:	31 09       	sbc	r19, r1
    10fa:	49 e2       	ldi	r20, 0x29	; 41
    10fc:	42 9f       	mul	r20, r18
    10fe:	f0 01       	movw	r30, r0
    1100:	43 9f       	mul	r20, r19
    1102:	f0 0d       	add	r31, r0
    1104:	11 24       	eor	r1, r1
    1106:	ee 5f       	subi	r30, 0xFE	; 254
    1108:	fd 4f       	sbci	r31, 0xFD	; 253
    110a:	22 81       	ldd	r18, Z+2	; 0x02
    110c:	33 81       	ldd	r19, Z+3	; 0x03
    110e:	23 2b       	or	r18, r19
    1110:	19 f0       	breq	.+6      	; 0x1118 <kernel_async_send+0xae>
    1112:	86 e0       	ldi	r24, 0x06	; 6
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	50 da       	rcall	.-2912   	; 0x5b8 <OS_Abort>
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
    1118:	fc 01       	movw	r30, r24
    111a:	e4 5e       	subi	r30, 0xE4	; 228
    111c:	fe 4f       	sbci	r31, 0xFE	; 254
    111e:	80 81       	ld	r24, Z
    1120:	91 81       	ldd	r25, Z+1	; 0x01
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	29 e2       	ldi	r18, 0x29	; 41
    1126:	28 9f       	mul	r18, r24
    1128:	f0 01       	movw	r30, r0
    112a:	29 9f       	mul	r18, r25
    112c:	f0 0d       	add	r31, r0
    112e:	11 24       	eor	r1, r1
    1130:	ee 5f       	subi	r30, 0xFE	; 254
    1132:	fd 4f       	sbci	r31, 0xFD	; 253
    1134:	c4 a1       	ldd	r28, Z+36	; 0x24
    1136:	d5 a1       	ldd	r29, Z+37	; 0x25
    1138:	21 97       	sbiw	r28, 0x01	; 1
    113a:	0a f4       	brpl	.+2      	; 0x113e <kernel_async_send+0xd4>
    113c:	ce c0       	rjmp	.+412    	; 0x12da <kernel_async_send+0x270>
			ChannelArray[Cp->senderChannel - 1].receivers[l]->state = READY;
    113e:	19 e2       	ldi	r17, 0x29	; 41
    1140:	01 e0       	ldi	r16, 0x01	; 1
    1142:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <Cp>
    1146:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <Cp+0x1>
    114a:	c9 01       	movw	r24, r18
    114c:	84 5e       	subi	r24, 0xE4	; 228
    114e:	9e 4f       	sbci	r25, 0xFE	; 254
    1150:	dc 01       	movw	r26, r24
    1152:	4d 91       	ld	r20, X+
    1154:	5c 91       	ld	r21, X
    1156:	41 50       	subi	r20, 0x01	; 1
    1158:	51 09       	sbc	r21, r1
    115a:	fe 01       	movw	r30, r28
    115c:	32 96       	adiw	r30, 0x02	; 2
    115e:	ee 0f       	add	r30, r30
    1160:	ff 1f       	adc	r31, r31
    1162:	14 9f       	mul	r17, r20
    1164:	d0 01       	movw	r26, r0
    1166:	15 9f       	mul	r17, r21
    1168:	b0 0d       	add	r27, r0
    116a:	11 24       	eor	r1, r1
    116c:	ae 0f       	add	r26, r30
    116e:	bf 1f       	adc	r27, r31
    1170:	ae 5f       	subi	r26, 0xFE	; 254
    1172:	bd 4f       	sbci	r27, 0xFD	; 253
    1174:	0d 90       	ld	r0, X+
    1176:	bc 91       	ld	r27, X
    1178:	a0 2d       	mov	r26, r0
    117a:	ac 5f       	subi	r26, 0xFC	; 252
    117c:	be 4f       	sbci	r27, 0xFE	; 254
    117e:	0c 93       	st	X, r16
			ChannelArray[Cp->senderChannel - 1].receivers[l]->val = Cp->val;
    1180:	dc 01       	movw	r26, r24
    1182:	4d 91       	ld	r20, X+
    1184:	5c 91       	ld	r21, X
    1186:	41 50       	subi	r20, 0x01	; 1
    1188:	51 09       	sbc	r21, r1
    118a:	14 9f       	mul	r17, r20
    118c:	d0 01       	movw	r26, r0
    118e:	15 9f       	mul	r17, r21
    1190:	b0 0d       	add	r27, r0
    1192:	11 24       	eor	r1, r1
    1194:	ae 0f       	add	r26, r30
    1196:	bf 1f       	adc	r27, r31
    1198:	ae 5f       	subi	r26, 0xFE	; 254
    119a:	bd 4f       	sbci	r27, 0xFD	; 253
    119c:	6d 91       	ld	r22, X+
    119e:	7c 91       	ld	r23, X
    11a0:	a9 01       	movw	r20, r18
    11a2:	40 5e       	subi	r20, 0xE0	; 224
    11a4:	5e 4f       	sbci	r21, 0xFE	; 254
    11a6:	da 01       	movw	r26, r20
    11a8:	4d 91       	ld	r20, X+
    11aa:	5c 91       	ld	r21, X
    11ac:	db 01       	movw	r26, r22
    11ae:	a0 5e       	subi	r26, 0xE0	; 224
    11b0:	be 4f       	sbci	r27, 0xFE	; 254
    11b2:	4d 93       	st	X+, r20
    11b4:	5c 93       	st	X, r21

			if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == SYSTEM) {
    11b6:	dc 01       	movw	r26, r24
    11b8:	4d 91       	ld	r20, X+
    11ba:	5c 91       	ld	r21, X
    11bc:	11 97       	sbiw	r26, 0x01	; 1
    11be:	41 50       	subi	r20, 0x01	; 1
    11c0:	51 09       	sbc	r21, r1
    11c2:	14 9f       	mul	r17, r20
    11c4:	c0 01       	movw	r24, r0
    11c6:	15 9f       	mul	r17, r21
    11c8:	90 0d       	add	r25, r0
    11ca:	11 24       	eor	r1, r1
    11cc:	e8 0f       	add	r30, r24
    11ce:	f9 1f       	adc	r31, r25
    11d0:	ee 5f       	subi	r30, 0xFE	; 254
    11d2:	fd 4f       	sbci	r31, 0xFD	; 253
    11d4:	01 90       	ld	r0, Z+
    11d6:	f0 81       	ld	r31, Z
    11d8:	e0 2d       	mov	r30, r0
    11da:	eb 5f       	subi	r30, 0xFB	; 251
    11dc:	fe 4f       	sbci	r31, 0xFE	; 254
    11de:	80 81       	ld	r24, Z
    11e0:	91 81       	ldd	r25, Z+1	; 0x01
    11e2:	03 97       	sbiw	r24, 0x03	; 3
    11e4:	c1 f4       	brne	.+48     	; 0x1216 <kernel_async_send+0x1ac>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &SysQueue, &SysCount);
    11e6:	fd 01       	movw	r30, r26
    11e8:	40 81       	ld	r20, Z
    11ea:	51 81       	ldd	r21, Z+1	; 0x01
    11ec:	ce 01       	movw	r24, r28
    11ee:	02 96       	adiw	r24, 0x02	; 2
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	41 50       	subi	r20, 0x01	; 1
    11f6:	51 09       	sbc	r21, r1
    11f8:	14 9f       	mul	r17, r20
    11fa:	90 01       	movw	r18, r0
    11fc:	15 9f       	mul	r17, r21
    11fe:	30 0d       	add	r19, r0
    1200:	11 24       	eor	r1, r1
    1202:	82 0f       	add	r24, r18
    1204:	93 1f       	adc	r25, r19
    1206:	46 e9       	ldi	r20, 0x96	; 150
    1208:	54 e0       	ldi	r21, 0x04	; 4
    120a:	62 ec       	ldi	r22, 0xC2	; 194
    120c:	76 e1       	ldi	r23, 0x16	; 22
    120e:	8e 5f       	subi	r24, 0xFE	; 254
    1210:	9d 4f       	sbci	r25, 0xFD	; 253
    1212:	89 d1       	rcall	.+786    	; 0x1526 <enqueue>
    1214:	36 c0       	rjmp	.+108    	; 0x1282 <kernel_async_send+0x218>
				} else if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == RR) {
    1216:	f9 01       	movw	r30, r18
    1218:	e4 5e       	subi	r30, 0xE4	; 228
    121a:	fe 4f       	sbci	r31, 0xFE	; 254
    121c:	40 81       	ld	r20, Z
    121e:	51 81       	ldd	r21, Z+1	; 0x01
    1220:	41 50       	subi	r20, 0x01	; 1
    1222:	51 09       	sbc	r21, r1
    1224:	fe 01       	movw	r30, r28
    1226:	32 96       	adiw	r30, 0x02	; 2
    1228:	ee 0f       	add	r30, r30
    122a:	ff 1f       	adc	r31, r31
    122c:	14 9f       	mul	r17, r20
    122e:	c0 01       	movw	r24, r0
    1230:	15 9f       	mul	r17, r21
    1232:	90 0d       	add	r25, r0
    1234:	11 24       	eor	r1, r1
    1236:	e8 0f       	add	r30, r24
    1238:	f9 1f       	adc	r31, r25
    123a:	ee 5f       	subi	r30, 0xFE	; 254
    123c:	fd 4f       	sbci	r31, 0xFD	; 253
    123e:	01 90       	ld	r0, Z+
    1240:	f0 81       	ld	r31, Z
    1242:	e0 2d       	mov	r30, r0
    1244:	eb 5f       	subi	r30, 0xFB	; 251
    1246:	fe 4f       	sbci	r31, 0xFE	; 254
    1248:	80 81       	ld	r24, Z
    124a:	91 81       	ldd	r25, Z+1	; 0x01
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	c9 f4       	brne	.+50     	; 0x1282 <kernel_async_send+0x218>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
    1250:	f9 01       	movw	r30, r18
    1252:	e4 5e       	subi	r30, 0xE4	; 228
    1254:	fe 4f       	sbci	r31, 0xFE	; 254
    1256:	40 81       	ld	r20, Z
    1258:	51 81       	ldd	r21, Z+1	; 0x01
    125a:	ce 01       	movw	r24, r28
    125c:	02 96       	adiw	r24, 0x02	; 2
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	41 50       	subi	r20, 0x01	; 1
    1264:	51 09       	sbc	r21, r1
    1266:	14 9f       	mul	r17, r20
    1268:	90 01       	movw	r18, r0
    126a:	15 9f       	mul	r17, r21
    126c:	30 0d       	add	r19, r0
    126e:	11 24       	eor	r1, r1
    1270:	82 0f       	add	r24, r18
    1272:	93 1f       	adc	r25, r19
    1274:	42 e9       	ldi	r20, 0x92	; 146
    1276:	54 e0       	ldi	r21, 0x04	; 4
    1278:	66 e0       	ldi	r22, 0x06	; 6
    127a:	77 e1       	ldi	r23, 0x17	; 23
    127c:	8e 5f       	subi	r24, 0xFE	; 254
    127e:	9d 4f       	sbci	r25, 0xFD	; 253
    1280:	52 d1       	rcall	.+676    	; 0x1526 <enqueue>
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
    1282:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <Cp>
    1286:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <Cp+0x1>
    128a:	a4 5e       	subi	r26, 0xE4	; 228
    128c:	be 4f       	sbci	r27, 0xFE	; 254
    128e:	2d 91       	ld	r18, X+
    1290:	3c 91       	ld	r19, X
    1292:	11 97       	sbiw	r26, 0x01	; 1
    1294:	21 50       	subi	r18, 0x01	; 1
    1296:	31 09       	sbc	r19, r1
    1298:	fe 01       	movw	r30, r28
    129a:	32 96       	adiw	r30, 0x02	; 2
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	12 9f       	mul	r17, r18
    12a2:	c0 01       	movw	r24, r0
    12a4:	13 9f       	mul	r17, r19
    12a6:	90 0d       	add	r25, r0
    12a8:	11 24       	eor	r1, r1
    12aa:	e8 0f       	add	r30, r24
    12ac:	f9 1f       	adc	r31, r25
    12ae:	ee 5f       	subi	r30, 0xFE	; 254
    12b0:	fd 4f       	sbci	r31, 0xFD	; 253
    12b2:	11 82       	std	Z+1, r1	; 0x01
    12b4:	10 82       	st	Z, r1
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
    12b6:	8d 91       	ld	r24, X+
    12b8:	9c 91       	ld	r25, X
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	18 9f       	mul	r17, r24
    12be:	f0 01       	movw	r30, r0
    12c0:	19 9f       	mul	r17, r25
    12c2:	f0 0d       	add	r31, r0
    12c4:	11 24       	eor	r1, r1
    12c6:	ee 5f       	subi	r30, 0xFE	; 254
    12c8:	fd 4f       	sbci	r31, 0xFD	; 253
    12ca:	84 a1       	ldd	r24, Z+36	; 0x24
    12cc:	95 a1       	ldd	r25, Z+37	; 0x25
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	95 a3       	std	Z+37, r25	; 0x25
    12d2:	84 a3       	std	Z+36, r24	; 0x24
		else OS_Abort(6); // cant have more than 1 sender
		return; // return without blocking
	} else { //receivers are waiting
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(6); // cant have more than 1 sender
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
    12d4:	21 97       	sbiw	r28, 0x01	; 1
    12d6:	0a f0       	brmi	.+2      	; 0x12da <kernel_async_send+0x270>
    12d8:	34 cf       	rjmp	.-408    	; 0x1142 <kernel_async_send+0xd8>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
		}
		ChannelArray[Cp->senderChannel - 1].val = NULL;
    12da:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
    12de:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
    12e2:	e4 5e       	subi	r30, 0xE4	; 228
    12e4:	fe 4f       	sbci	r31, 0xFE	; 254
    12e6:	80 81       	ld	r24, Z
    12e8:	91 81       	ldd	r25, Z+1	; 0x01
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	29 e2       	ldi	r18, 0x29	; 41
    12ee:	28 9f       	mul	r18, r24
    12f0:	f0 01       	movw	r30, r0
    12f2:	29 9f       	mul	r18, r25
    12f4:	f0 0d       	add	r31, r0
    12f6:	11 24       	eor	r1, r1
    12f8:	ee 5f       	subi	r30, 0xFE	; 254
    12fa:	fd 4f       	sbci	r31, 0xFD	; 253
    12fc:	10 a6       	std	Z+40, r1	; 0x28
    12fe:	17 a2       	std	Z+39, r1	; 0x27
	}
}
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	08 95       	ret

0000130a <OS_Start>:
}

/**
  * This function starts the RTOS after creating a_main
  */
void OS_Start() {   
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
	if ( (! KernelActive) && (Tasks > 0)) {
    1318:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <KernelActive>
    131c:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <KernelActive+0x1>
    1320:	89 2b       	or	r24, r25
    1322:	09 f0       	breq	.+2      	; 0x1326 <OS_Start+0x1c>
    1324:	e2 c0       	rjmp	.+452    	; 0x14ea <OS_Start+0x1e0>
    1326:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <Tasks>
    132a:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <Tasks+0x1>
    132e:	89 2b       	or	r24, r25
    1330:	09 f4       	brne	.+2      	; 0x1334 <OS_Start+0x2a>
    1332:	db c0       	rjmp	.+438    	; 0x14ea <OS_Start+0x1e0>
		Disable_Interrupt();
    1334:	f8 94       	cli

		KernelActive = 1;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <KernelActive+0x1>
    133e:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <KernelActive>
  * corresponding kernel function on its behalf.
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */
    1342:	63 d9       	rcall	.-3386   	; 0x60a <Dispatch>
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
			break;
		case NEXT:
			Cp->state = READY;
    1344:	dd 24       	eor	r13, r13
    1346:	d3 94       	inc	r13
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */

	while(1) {
		Cp->request = NONE; /* clear its request */
    1348:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
    134c:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
    1350:	df 01       	movw	r26, r30
    1352:	a5 5f       	subi	r26, 0xF5	; 245
    1354:	be 4f       	sbci	r27, 0xFE	; 254
    1356:	1c 92       	st	X, r1

		/* activate this newly selected task */
		CurrentSp = Cp->sp;
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	93 81       	ldd	r25, Z+3	; 0x03
    135c:	90 93 e3 16 	sts	0x16E3, r25	; 0x8016e3 <CurrentSp+0x1>
    1360:	80 93 e2 16 	sts	0x16E2, r24	; 0x8016e2 <CurrentSp>

		Exit_Kernel();    /* or CSwitch() */
    1364:	0e 94 9e 00 	call	0x13c	; 0x13c <CSwitch>

		/* if this task makes a system call, it will return to here! */

		/* save the Cp's stack pointer */
		Cp->sp = CurrentSp;
    1368:	c0 91 a0 04 	lds	r28, 0x04A0	; 0x8004a0 <Cp>
    136c:	d0 91 a1 04 	lds	r29, 0x04A1	; 0x8004a1 <Cp+0x1>
    1370:	80 91 e2 16 	lds	r24, 0x16E2	; 0x8016e2 <CurrentSp>
    1374:	90 91 e3 16 	lds	r25, 0x16E3	; 0x8016e3 <CurrentSp+0x1>
    1378:	9b 83       	std	Y+3, r25	; 0x03
    137a:	8a 83       	std	Y+2, r24	; 0x02

		switch(Cp->request){
    137c:	fe 01       	movw	r30, r28
    137e:	e5 5f       	subi	r30, 0xF5	; 245
    1380:	fe 4f       	sbci	r31, 0xFE	; 254
    1382:	e0 81       	ld	r30, Z
    1384:	8e 2f       	mov	r24, r30
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	fc 01       	movw	r30, r24
    138a:	31 97       	sbiw	r30, 0x01	; 1
    138c:	ea 30       	cpi	r30, 0x0A	; 10
    138e:	f1 05       	cpc	r31, r1
    1390:	d8 f6       	brcc	.-74     	; 0x1348 <OS_Start+0x3e>
    1392:	88 27       	eor	r24, r24
    1394:	ee 58       	subi	r30, 0x8E	; 142
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	8f 4f       	sbci	r24, 0xFF	; 255
    139a:	8e c1       	rjmp	.+796    	; 0x16b8 <__tablejump2__>
		case CREATE:
			Cp->response = Kernel_Create_Task( Cp->code, Cp->priority, Cp->arg, -1, -1, -1);
    139c:	fe 01       	movw	r30, r28
    139e:	e9 5f       	subi	r30, 0xF9	; 249
    13a0:	fe 4f       	sbci	r31, 0xFE	; 254
    13a2:	40 81       	ld	r20, Z
    13a4:	51 81       	ldd	r21, Z+1	; 0x01
    13a6:	32 97       	sbiw	r30, 0x02	; 2
    13a8:	60 81       	ld	r22, Z
    13aa:	71 81       	ldd	r23, Z+1	; 0x01
    13ac:	34 96       	adiw	r30, 0x04	; 4
    13ae:	80 81       	ld	r24, Z
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	ee 24       	eor	r14, r14
    13b4:	ea 94       	dec	r14
    13b6:	fe 2c       	mov	r15, r14
    13b8:	0f ef       	ldi	r16, 0xFF	; 255
    13ba:	1f ef       	ldi	r17, 0xFF	; 255
    13bc:	2f ef       	ldi	r18, 0xFF	; 255
    13be:	3f ef       	ldi	r19, 0xFF	; 255
    13c0:	7b d8       	rcall	.-3850   	; 0x4b8 <Kernel_Create_Task>
    13c2:	c4 5f       	subi	r28, 0xF4	; 244
    13c4:	de 4f       	sbci	r29, 0xFE	; 254
    13c6:	99 83       	std	Y+1, r25	; 0x01
    13c8:	88 83       	st	Y, r24
    13ca:	be cf       	rjmp	.-132    	; 0x1348 <OS_Start+0x3e>
			break;
		case CREATE_SYS:
			Cp->response = Kernel_Create_Task( Cp->code, SYSTEM, Cp->arg, -1, -1, -1);
    13cc:	fe 01       	movw	r30, r28
    13ce:	e9 5f       	subi	r30, 0xF9	; 249
    13d0:	fe 4f       	sbci	r31, 0xFE	; 254
    13d2:	40 81       	ld	r20, Z
    13d4:	51 81       	ldd	r21, Z+1	; 0x01
    13d6:	32 96       	adiw	r30, 0x02	; 2
    13d8:	80 81       	ld	r24, Z
    13da:	91 81       	ldd	r25, Z+1	; 0x01
    13dc:	ee 24       	eor	r14, r14
    13de:	ea 94       	dec	r14
    13e0:	fe 2c       	mov	r15, r14
    13e2:	0f ef       	ldi	r16, 0xFF	; 255
    13e4:	1f ef       	ldi	r17, 0xFF	; 255
    13e6:	2f ef       	ldi	r18, 0xFF	; 255
    13e8:	3f ef       	ldi	r19, 0xFF	; 255
    13ea:	63 e0       	ldi	r22, 0x03	; 3
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	64 d8       	rcall	.-3896   	; 0x4b8 <Kernel_Create_Task>
    13f0:	c4 5f       	subi	r28, 0xF4	; 244
    13f2:	de 4f       	sbci	r29, 0xFE	; 254
    13f4:	99 83       	std	Y+1, r25	; 0x01
    13f6:	88 83       	st	Y, r24
    13f8:	a7 cf       	rjmp	.-178    	; 0x1348 <OS_Start+0x3e>
			break;
		case CREATE_PERIODIC:
			Cp->response = Kernel_Create_Task( Cp->code, PERIODIC, Cp->arg, Cp->offset, Cp->wcet, Cp->period);
    13fa:	fe 01       	movw	r30, r28
    13fc:	e0 5f       	subi	r30, 0xF0	; 240
    13fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1400:	e0 80       	ld	r14, Z
    1402:	f1 80       	ldd	r15, Z+1	; 0x01
    1404:	32 96       	adiw	r30, 0x02	; 2
    1406:	00 81       	ld	r16, Z
    1408:	11 81       	ldd	r17, Z+1	; 0x01
    140a:	32 96       	adiw	r30, 0x02	; 2
    140c:	20 81       	ld	r18, Z
    140e:	31 81       	ldd	r19, Z+1	; 0x01
    1410:	3d 97       	sbiw	r30, 0x0d	; 13
    1412:	40 81       	ld	r20, Z
    1414:	51 81       	ldd	r21, Z+1	; 0x01
    1416:	32 96       	adiw	r30, 0x02	; 2
    1418:	80 81       	ld	r24, Z
    141a:	91 81       	ldd	r25, Z+1	; 0x01
    141c:	62 e0       	ldi	r22, 0x02	; 2
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	4b d8       	rcall	.-3946   	; 0x4b8 <Kernel_Create_Task>
    1422:	c4 5f       	subi	r28, 0xF4	; 244
    1424:	de 4f       	sbci	r29, 0xFE	; 254
    1426:	99 83       	std	Y+1, r25	; 0x01
    1428:	88 83       	st	Y, r24
    142a:	8e cf       	rjmp	.-228    	; 0x1348 <OS_Start+0x3e>
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
    142c:	fe 01       	movw	r30, r28
    142e:	e9 5f       	subi	r30, 0xF9	; 249
    1430:	fe 4f       	sbci	r31, 0xFE	; 254
    1432:	40 81       	ld	r20, Z
    1434:	51 81       	ldd	r21, Z+1	; 0x01
    1436:	32 96       	adiw	r30, 0x02	; 2
    1438:	80 81       	ld	r24, Z
    143a:	91 81       	ldd	r25, Z+1	; 0x01
    143c:	ee 24       	eor	r14, r14
    143e:	ea 94       	dec	r14
    1440:	fe 2c       	mov	r15, r14
    1442:	0f ef       	ldi	r16, 0xFF	; 255
    1444:	1f ef       	ldi	r17, 0xFF	; 255
    1446:	2f ef       	ldi	r18, 0xFF	; 255
    1448:	3f ef       	ldi	r19, 0xFF	; 255
    144a:	61 e0       	ldi	r22, 0x01	; 1
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	34 d8       	rcall	.-3992   	; 0x4b8 <Kernel_Create_Task>
    1450:	c4 5f       	subi	r28, 0xF4	; 244
    1452:	de 4f       	sbci	r29, 0xFE	; 254
    1454:	99 83       	std	Y+1, r25	; 0x01
    1456:	88 83       	st	Y, r24
    1458:	77 cf       	rjmp	.-274    	; 0x1348 <OS_Start+0x3e>
			break;
		case NEXT:
			Cp->state = READY;
    145a:	fe 01       	movw	r30, r28
    145c:	ec 5f       	subi	r30, 0xFC	; 252
    145e:	fe 4f       	sbci	r31, 0xFE	; 254
    1460:	d0 82       	st	Z, r13
			if (Cp->priority == SYSTEM) {
    1462:	31 96       	adiw	r30, 0x01	; 1
    1464:	80 81       	ld	r24, Z
    1466:	91 81       	ldd	r25, Z+1	; 0x01
    1468:	03 97       	sbiw	r24, 0x03	; 3
    146a:	41 f4       	brne	.+16     	; 0x147c <OS_Start+0x172>
				enqueue(&Cp, &SysQueue, &SysCount);
    146c:	46 e9       	ldi	r20, 0x96	; 150
    146e:	54 e0       	ldi	r21, 0x04	; 4
    1470:	62 ec       	ldi	r22, 0xC2	; 194
    1472:	76 e1       	ldi	r23, 0x16	; 22
    1474:	80 ea       	ldi	r24, 0xA0	; 160
    1476:	94 e0       	ldi	r25, 0x04	; 4
    1478:	56 d0       	rcall	.+172    	; 0x1526 <enqueue>
    147a:	1c c0       	rjmp	.+56     	; 0x14b4 <OS_Start+0x1aa>
			} else if (Cp->priority == PERIODIC) {
    147c:	fe 01       	movw	r30, r28
    147e:	eb 5f       	subi	r30, 0xFB	; 251
    1480:	fe 4f       	sbci	r31, 0xFE	; 254
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	02 97       	sbiw	r24, 0x02	; 2
    1488:	41 f4       	brne	.+16     	; 0x149a <OS_Start+0x190>
				enqueuePeriodic(&Cp, &PeriodicQueue, &PeriodicCount);
    148a:	44 e9       	ldi	r20, 0x94	; 148
    148c:	54 e0       	ldi	r21, 0x04	; 4
    148e:	64 ee       	ldi	r22, 0xE4	; 228
    1490:	76 e1       	ldi	r23, 0x16	; 22
    1492:	80 ea       	ldi	r24, 0xA0	; 160
    1494:	94 e0       	ldi	r25, 0x04	; 4
    1496:	99 d0       	rcall	.+306    	; 0x15ca <enqueuePeriodic>
    1498:	0d c0       	rjmp	.+26     	; 0x14b4 <OS_Start+0x1aa>
			} else if (Cp->priority == RR) {
    149a:	cb 5f       	subi	r28, 0xFB	; 251
    149c:	de 4f       	sbci	r29, 0xFE	; 254
    149e:	88 81       	ld	r24, Y
    14a0:	99 81       	ldd	r25, Y+1	; 0x01
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	39 f4       	brne	.+14     	; 0x14b4 <OS_Start+0x1aa>
				enqueue(&Cp, &RRQueue, &RRCount);
    14a6:	42 e9       	ldi	r20, 0x92	; 146
    14a8:	54 e0       	ldi	r21, 0x04	; 4
    14aa:	66 e0       	ldi	r22, 0x06	; 6
    14ac:	77 e1       	ldi	r23, 0x17	; 23
    14ae:	80 ea       	ldi	r24, 0xA0	; 160
    14b0:	94 e0       	ldi	r25, 0x04	; 4
    14b2:	39 d0       	rcall	.+114    	; 0x1526 <enqueue>
			}
			Dispatch();
    14b4:	aa d8       	rcall	.-3756   	; 0x60a <Dispatch>
    14b6:	48 cf       	rjmp	.-368    	; 0x1348 <OS_Start+0x3e>
			break;
		case NONE:
			break;
		case CHECK_TIME_VIOLATION:
			CheckTimingViolation();
    14b8:	85 d8       	rcall	.-3830   	; 0x5c4 <CheckTimingViolation>
    14ba:	46 cf       	rjmp	.-372    	; 0x1348 <OS_Start+0x3e>
			break;
		case SEND:
			kernel_send();
    14bc:	90 db       	rcall	.-2272   	; 0xbde <kernel_send>
    14be:	44 cf       	rjmp	.-376    	; 0x1348 <OS_Start+0x3e>
			break;
		case ASYNC_SEND:
			kernel_async_send();
    14c0:	d4 dd       	rcall	.-1112   	; 0x106a <kernel_async_send>
    14c2:	42 cf       	rjmp	.-380    	; 0x1348 <OS_Start+0x3e>
			break;
		case RECEIVE:
			kernel_receive();
    14c4:	f4 dc       	rcall	.-1560   	; 0xeae <kernel_receive>
    14c6:	40 cf       	rjmp	.-384    	; 0x1348 <OS_Start+0x3e>

/**
  *  Terminate a task
  */
static void Kernel_Terminate_Task() {
	Cp->state = DEAD;
    14c8:	fe 01       	movw	r30, r28
    14ca:	ec 5f       	subi	r30, 0xFC	; 252
    14cc:	fe 4f       	sbci	r31, 0xFE	; 254
    14ce:	10 82       	st	Z, r1
	Cp->processID = 0;
    14d0:	19 82       	std	Y+1, r1	; 0x01
    14d2:	18 82       	st	Y, r1
	Tasks--;
    14d4:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <Tasks>
    14d8:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <Tasks+0x1>
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <Tasks+0x1>
    14e2:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <Tasks>
			kernel_receive();
			break;
		case TERMINATE:
			/* deallocate all resources used by this task */
			Kernel_Terminate_Task();
			Dispatch();
    14e6:	91 d8       	rcall	.-3806   	; 0x60a <Dispatch>
    14e8:	2f cf       	rjmp	.-418    	; 0x1348 <OS_Start+0x3e>

		KernelActive = 1;
		Next_Kernel_Request();
		/* SHOULD NEVER GET HERE!!! */
	}
}
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	ff 90       	pop	r15
    14f4:	ef 90       	pop	r14
    14f6:	df 90       	pop	r13
    14f8:	08 95       	ret

000014fa <main>:
/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	//pin 25
	DDRA |= (1<<PA3);
    14fa:	0b 9a       	sbi	0x01, 3	; 1
	PORTA &= ~(1<<PA3);
    14fc:	13 98       	cbi	0x02, 3	; 2

	//pin 26
	DDRA |= (1<<PA4);
    14fe:	0c 9a       	sbi	0x01, 4	; 1
	PORTA &= ~(1<<PA4);
    1500:	14 98       	cbi	0x02, 4	; 2

	//pin 27
	DDRA |= (1<<PA5);
    1502:	0d 9a       	sbi	0x01, 5	; 1
	PORTA &= ~(1<<PA5);
    1504:	15 98       	cbi	0x02, 5	; 2

	//pin 28
	DDRA |= (1<<PA6);
    1506:	0e 9a       	sbi	0x01, 6	; 1
	PORTA &= ~(1<<PA6);
    1508:	16 98       	cbi	0x02, 6	; 2

	//pin 29
	DDRA |= (1<<PA7);
    150a:	0f 9a       	sbi	0x01, 7	; 1
	PORTA &= ~(1<<PA7);
    150c:	17 98       	cbi	0x02, 7	; 2

	//pin 30
	DDRC |= (1<<PC7);
    150e:	3f 9a       	sbi	0x07, 7	; 7
	PORTC &= ~(1<<PC7);
    1510:	47 98       	cbi	0x08, 7	; 8

	setup();
    1512:	63 da       	rcall	.-2874   	; 0x9da <setup>
	OS_Init();
    1514:	14 d8       	rcall	.-4056   	; 0x53e <OS_Init>
	Task_Create_Idle();
    1516:	b3 d9       	rcall	.-3226   	; 0x87e <Task_Create_Idle>
	Task_Create_System(a_main, 42);
    1518:	6a e2       	ldi	r22, 0x2A	; 42
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	8a e6       	ldi	r24, 0x6A	; 106
    151e:	91 e0       	ldi	r25, 0x01	; 1
    1520:	6f d9       	rcall	.-3362   	; 0x800 <Task_Create_System>
	OS_Start();
    1522:	f3 ce       	rjmp	.-538    	; 0x130a <OS_Start>
    1524:	08 95       	ret

00001526 <enqueue>:
}

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    152c:	28 81       	ld	r18, Y
    152e:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1530:	2f 30       	cpi	r18, 0x0F	; 15
    1532:	31 05       	cpc	r19, r1
    1534:	e9 f0       	breq	.+58     	; 0x1570 <enqueue+0x4a>
        return NULL;
    }

    int i = (*QCount) - 1;
    1536:	e8 81       	ld	r30, Y
    1538:	f9 81       	ldd	r31, Y+1	; 0x01
    153a:	9f 01       	movw	r18, r30
    153c:	21 50       	subi	r18, 0x01	; 1
    153e:	31 09       	sbc	r19, r1
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    1540:	62 f0       	brmi	.+24     	; 0x155a <enqueue+0x34>
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	e6 0f       	add	r30, r22
    1548:	f7 1f       	adc	r31, r23
    154a:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    154c:	32 91       	ld	r19, -Z
    154e:	22 91       	ld	r18, -Z
    1550:	33 83       	std	Z+3, r19	; 0x03
    1552:	22 83       	std	Z+2, r18	; 0x02

    int i = (*QCount) - 1;
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    1554:	ea 17       	cp	r30, r26
    1556:	fb 07       	cpc	r31, r27
    1558:	c9 f7       	brne	.-14     	; 0x154c <enqueue+0x26>
        i--;
        temp = Queue[i];
    }

    //Queue[i+1] = *p; //original code
	Queue[0] = *p;
    155a:	fc 01       	movw	r30, r24
    155c:	80 81       	ld	r24, Z
    155e:	91 81       	ldd	r25, Z+1	; 0x01
    1560:	fb 01       	movw	r30, r22
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24
    (*QCount)++;
    1566:	88 81       	ld	r24, Y
    1568:	99 81       	ldd	r25, Y+1	; 0x01
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	99 83       	std	Y+1, r25	; 0x01
    156e:	88 83       	st	Y, r24
}
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	08 95       	ret

00001576 <dequeue>:


/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    1576:	ac 01       	movw	r20, r24
    1578:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    157a:	8d 91       	ld	r24, X+
    157c:	9c 91       	ld	r25, X
    157e:	11 97       	sbiw	r26, 0x01	; 1

/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
   if(isEmpty(QCount)) {
    1580:	89 2b       	or	r24, r25
    1582:	01 f1       	breq	.+64     	; 0x15c4 <dequeue+0x4e>
	   return NULL;
   }

   volatile PD *result = (Queue[(*QCount)-1]);
    1584:	ed 91       	ld	r30, X+
    1586:	fc 91       	ld	r31, X
    1588:	11 97       	sbiw	r26, 0x01	; 1
    158a:	e1 50       	subi	r30, 0x01	; 1
    158c:	f0 48       	sbci	r31, 0x80	; 128
    158e:	ee 0f       	add	r30, r30
    1590:	ff 1f       	adc	r31, r31
    1592:	e4 0f       	add	r30, r20
    1594:	f5 1f       	adc	r31, r21
    1596:	80 81       	ld	r24, Z
    1598:	91 81       	ldd	r25, Z+1	; 0x01
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
    159a:	2d 91       	ld	r18, X+
    159c:	3c 91       	ld	r19, X
    159e:	11 97       	sbiw	r26, 0x01	; 1
    15a0:	f9 01       	movw	r30, r18
    15a2:	e1 50       	subi	r30, 0x01	; 1
    15a4:	f0 48       	sbci	r31, 0x80	; 128
    15a6:	ee 0f       	add	r30, r30
    15a8:	ff 1f       	adc	r31, r31
    15aa:	e4 0f       	add	r30, r20
    15ac:	f5 1f       	adc	r31, r21
    15ae:	11 82       	std	Z+1, r1	; 0x01
    15b0:	10 82       	st	Z, r1
   (*QCount)--;
    15b2:	2d 91       	ld	r18, X+
    15b4:	3c 91       	ld	r19, X
    15b6:	11 97       	sbiw	r26, 0x01	; 1
    15b8:	21 50       	subi	r18, 0x01	; 1
    15ba:	31 09       	sbc	r19, r1
    15bc:	11 96       	adiw	r26, 0x01	; 1
    15be:	3c 93       	st	X, r19
    15c0:	2e 93       	st	-X, r18

   return result;
    15c2:	08 95       	ret
/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
   if(isEmpty(QCount)) {
	   return NULL;
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
   volatile PD *result = (Queue[(*QCount)-1]);
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
   (*QCount)--;

   return result;
}
    15c8:	08 95       	ret

000015ca <enqueuePeriodic>:

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    15ca:	cf 92       	push	r12
    15cc:	df 92       	push	r13
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    15dc:	ea 01       	movw	r28, r20
    15de:	28 81       	ld	r18, Y
    15e0:	39 81       	ldd	r19, Y+1	; 0x01

   return result;
}

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
	if(isFull(QCount)) {
    15e2:	2f 30       	cpi	r18, 0x0F	; 15
    15e4:	31 05       	cpc	r19, r1
    15e6:	09 f4       	brne	.+2      	; 0x15ea <enqueuePeriodic+0x20>
    15e8:	4a c0       	rjmp	.+148    	; 0x167e <enqueuePeriodic+0xb4>
		return;
	}

	int i = (*QCount) - 1;
    15ea:	28 81       	ld	r18, Y
    15ec:	39 81       	ldd	r19, Y+1	; 0x01
    15ee:	21 50       	subi	r18, 0x01	; 1
    15f0:	31 09       	sbc	r19, r1

	volatile PD *new = *p;
    15f2:	fc 01       	movw	r30, r24
    15f4:	00 81       	ld	r16, Z
    15f6:	11 81       	ldd	r17, Z+1	; 0x01

	volatile PD *temp = Queue[i];
    15f8:	f9 01       	movw	r30, r18
    15fa:	ee 0f       	add	r30, r30
    15fc:	ff 1f       	adc	r31, r31
    15fe:	db 01       	movw	r26, r22
    1600:	ae 0f       	add	r26, r30
    1602:	bf 1f       	adc	r27, r31
    1604:	4d 91       	ld	r20, X+
    1606:	5c 91       	ld	r21, X

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    1608:	33 23       	and	r19, r19
    160a:	3c f1       	brlt	.+78     	; 0x165a <enqueuePeriodic+0x90>
    160c:	d8 01       	movw	r26, r16
    160e:	aa 5e       	subi	r26, 0xEA	; 234
    1610:	be 4f       	sbci	r27, 0xFE	; 254
    1612:	ed 90       	ld	r14, X+
    1614:	fc 90       	ld	r15, X
    1616:	da 01       	movw	r26, r20
    1618:	aa 5e       	subi	r26, 0xEA	; 234
    161a:	be 4f       	sbci	r27, 0xFE	; 254
    161c:	4d 91       	ld	r20, X+
    161e:	5c 91       	ld	r21, X
    1620:	e4 16       	cp	r14, r20
    1622:	f5 06       	cpc	r15, r21
    1624:	d4 f0       	brlt	.+52     	; 0x165a <enqueuePeriodic+0x90>
    1626:	e6 0f       	add	r30, r22
    1628:	f7 1f       	adc	r31, r23
    162a:	0a 5e       	subi	r16, 0xEA	; 234
    162c:	1e 4f       	sbci	r17, 0xFE	; 254
		Queue[i+1] = Queue[i];
    162e:	a0 81       	ld	r26, Z
    1630:	b1 81       	ldd	r27, Z+1	; 0x01
    1632:	b3 83       	std	Z+3, r27	; 0x03
    1634:	a2 83       	std	Z+2, r26	; 0x02
		i--;
    1636:	21 50       	subi	r18, 0x01	; 1
    1638:	31 09       	sbc	r19, r1
		temp = Queue[i];
    163a:	b2 91       	ld	r27, -Z
    163c:	a2 91       	ld	r26, -Z

	volatile PD *new = *p;

	volatile PD *temp = Queue[i];

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    163e:	2f 3f       	cpi	r18, 0xFF	; 255
    1640:	4f ef       	ldi	r20, 0xFF	; 255
    1642:	34 07       	cpc	r19, r20
    1644:	51 f0       	breq	.+20     	; 0x165a <enqueuePeriodic+0x90>
    1646:	e8 01       	movw	r28, r16
    1648:	e8 80       	ld	r14, Y
    164a:	f9 80       	ldd	r15, Y+1	; 0x01
    164c:	aa 5e       	subi	r26, 0xEA	; 234
    164e:	be 4f       	sbci	r27, 0xFE	; 254
    1650:	4d 91       	ld	r20, X+
    1652:	5c 91       	ld	r21, X
    1654:	e4 16       	cp	r14, r20
    1656:	f5 06       	cpc	r15, r21
    1658:	54 f7       	brge	.-44     	; 0x162e <enqueuePeriodic+0x64>
		Queue[i+1] = Queue[i];
		i--;
		temp = Queue[i];
	}

	Queue[i+1] = *p;
    165a:	fc 01       	movw	r30, r24
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	2f 5f       	subi	r18, 0xFF	; 255
    1662:	3f 4f       	sbci	r19, 0xFF	; 255
    1664:	22 0f       	add	r18, r18
    1666:	33 1f       	adc	r19, r19
    1668:	fb 01       	movw	r30, r22
    166a:	e2 0f       	add	r30, r18
    166c:	f3 1f       	adc	r31, r19
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	80 83       	st	Z, r24
	(*QCount)++;
    1672:	e6 01       	movw	r28, r12
    1674:	88 81       	ld	r24, Y
    1676:	99 81       	ldd	r25, Y+1	; 0x01
    1678:	01 96       	adiw	r24, 0x01	; 1
    167a:	99 83       	std	Y+1, r25	; 0x01
    167c:	88 83       	st	Y, r24
}
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	08 95       	ret

00001690 <peek>:

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1690:	fb 01       	movw	r30, r22
    1692:	20 81       	ld	r18, Z
    1694:	31 81       	ldd	r19, Z+1	; 0x01
	Queue[i+1] = *p;
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
    1696:	23 2b       	or	r18, r19
    1698:	61 f0       	breq	.+24     	; 0x16b2 <peek+0x22>
		return NULL;
	}
	volatile PD *result = (Queue[(*QCount)-1]);
    169a:	20 81       	ld	r18, Z
    169c:	31 81       	ldd	r19, Z+1	; 0x01
    169e:	f9 01       	movw	r30, r18
    16a0:	e1 50       	subi	r30, 0x01	; 1
    16a2:	f0 48       	sbci	r31, 0x80	; 128
    16a4:	ee 0f       	add	r30, r30
    16a6:	ff 1f       	adc	r31, r31
    16a8:	e8 0f       	add	r30, r24
    16aa:	f9 1f       	adc	r31, r25
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
	return result;
    16b0:	08 95       	ret
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
		return NULL;
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	90 e0       	ldi	r25, 0x00	; 0
	}
	volatile PD *result = (Queue[(*QCount)-1]);
	return result;
    16b6:	08 95       	ret

000016b8 <__tablejump2__>:
    16b8:	ee 0f       	add	r30, r30
    16ba:	ff 1f       	adc	r31, r31
    16bc:	88 1f       	adc	r24, r24
    16be:	8b bf       	out	0x3b, r24	; 59
    16c0:	07 90       	elpm	r0, Z+
    16c2:	f6 91       	elpm	r31, Z
    16c4:	e0 2d       	mov	r30, r0
    16c6:	19 94       	eijmp

000016c8 <_exit>:
    16c8:	f8 94       	cli

000016ca <__stop_program>:
    16ca:	ff cf       	rjmp	.-2      	; 0x16ca <__stop_program>
