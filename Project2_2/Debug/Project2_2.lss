
Project2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000156a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001526  00800200  00800200  0000156a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000156a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000015e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002516  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011bf  00000000  00000000  00003c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fab  00000000  00000000  00004e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  00005e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d9  00000000  00000000  00006260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000130a  00000000  00000000  00006c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00007f43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7a c0       	rjmp	.+244    	; 0xf6 <__ctors_end>
       2:	00 00       	nop
       4:	99 c0       	rjmp	.+306    	; 0x138 <__bad_interrupt>
       6:	00 00       	nop
       8:	97 c0       	rjmp	.+302    	; 0x138 <__bad_interrupt>
       a:	00 00       	nop
       c:	95 c0       	rjmp	.+298    	; 0x138 <__bad_interrupt>
       e:	00 00       	nop
      10:	93 c0       	rjmp	.+294    	; 0x138 <__bad_interrupt>
      12:	00 00       	nop
      14:	91 c0       	rjmp	.+290    	; 0x138 <__bad_interrupt>
      16:	00 00       	nop
      18:	8f c0       	rjmp	.+286    	; 0x138 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8d c0       	rjmp	.+282    	; 0x138 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8b c0       	rjmp	.+278    	; 0x138 <__bad_interrupt>
      22:	00 00       	nop
      24:	89 c0       	rjmp	.+274    	; 0x138 <__bad_interrupt>
      26:	00 00       	nop
      28:	87 c0       	rjmp	.+270    	; 0x138 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	85 c0       	rjmp	.+266    	; 0x138 <__bad_interrupt>
      2e:	00 00       	nop
      30:	83 c0       	rjmp	.+262    	; 0x138 <__bad_interrupt>
      32:	00 00       	nop
      34:	81 c0       	rjmp	.+258    	; 0x138 <__bad_interrupt>
      36:	00 00       	nop
      38:	7f c0       	rjmp	.+254    	; 0x138 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7d c0       	rjmp	.+250    	; 0x138 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7b c0       	rjmp	.+246    	; 0x138 <__bad_interrupt>
      42:	00 00       	nop
      44:	27 c4       	rjmp	.+2126   	; 0x894 <__vector_17>
      46:	00 00       	nop
      48:	77 c0       	rjmp	.+238    	; 0x138 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	75 c0       	rjmp	.+234    	; 0x138 <__bad_interrupt>
      4e:	00 00       	nop
      50:	73 c0       	rjmp	.+230    	; 0x138 <__bad_interrupt>
      52:	00 00       	nop
      54:	71 c0       	rjmp	.+226    	; 0x138 <__bad_interrupt>
      56:	00 00       	nop
      58:	6f c0       	rjmp	.+222    	; 0x138 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6d c0       	rjmp	.+218    	; 0x138 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6b c0       	rjmp	.+214    	; 0x138 <__bad_interrupt>
      62:	00 00       	nop
      64:	69 c0       	rjmp	.+210    	; 0x138 <__bad_interrupt>
      66:	00 00       	nop
      68:	67 c0       	rjmp	.+206    	; 0x138 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	65 c0       	rjmp	.+202    	; 0x138 <__bad_interrupt>
      6e:	00 00       	nop
      70:	63 c0       	rjmp	.+198    	; 0x138 <__bad_interrupt>
      72:	00 00       	nop
      74:	61 c0       	rjmp	.+194    	; 0x138 <__bad_interrupt>
      76:	00 00       	nop
      78:	5f c0       	rjmp	.+190    	; 0x138 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5d c0       	rjmp	.+186    	; 0x138 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5b c4       	rjmp	.+2230   	; 0x938 <__vector_32>
      82:	00 00       	nop
      84:	59 c0       	rjmp	.+178    	; 0x138 <__bad_interrupt>
      86:	00 00       	nop
      88:	57 c0       	rjmp	.+174    	; 0x138 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	55 c0       	rjmp	.+170    	; 0x138 <__bad_interrupt>
      8e:	00 00       	nop
      90:	53 c0       	rjmp	.+166    	; 0x138 <__bad_interrupt>
      92:	00 00       	nop
      94:	51 c0       	rjmp	.+162    	; 0x138 <__bad_interrupt>
      96:	00 00       	nop
      98:	4f c0       	rjmp	.+158    	; 0x138 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4d c0       	rjmp	.+154    	; 0x138 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4b c0       	rjmp	.+150    	; 0x138 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	49 c0       	rjmp	.+146    	; 0x138 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	47 c0       	rjmp	.+142    	; 0x138 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	45 c0       	rjmp	.+138    	; 0x138 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	43 c0       	rjmp	.+134    	; 0x138 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	41 c0       	rjmp	.+130    	; 0x138 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3f c0       	rjmp	.+126    	; 0x138 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3d c0       	rjmp	.+122    	; 0x138 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3b c0       	rjmp	.+118    	; 0x138 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	39 c0       	rjmp	.+114    	; 0x138 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	37 c0       	rjmp	.+110    	; 0x138 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	35 c0       	rjmp	.+106    	; 0x138 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	33 c0       	rjmp	.+102    	; 0x138 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	31 c0       	rjmp	.+98     	; 0x138 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2f c0       	rjmp	.+94     	; 0x138 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2d c0       	rjmp	.+90     	; 0x138 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2b c0       	rjmp	.+86     	; 0x138 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e5 08       	sbc	r14, r5
      e6:	fd 08       	sbc	r15, r13
      e8:	2d 09       	sbc	r18, r13
      ea:	14 09       	sbc	r17, r4
      ec:	44 09       	sbc	r20, r4
      ee:	7a 09       	sbc	r23, r10
      f0:	74 09       	sbc	r23, r4
      f2:	76 09       	sbc	r23, r6
      f4:	78 09       	sbc	r23, r8

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf ef       	ldi	r28, 0xFF	; 255
      fc:	d1 e2       	ldi	r29, 0x21	; 33
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61
     102:	00 e0       	ldi	r16, 0x00	; 0
     104:	0c bf       	out	0x3c, r16	; 60

00000106 <__do_copy_data>:
     106:	12 e0       	ldi	r17, 0x02	; 2
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b2 e0       	ldi	r27, 0x02	; 2
     10c:	e6 ef       	ldi	r30, 0xF6	; 246
     10e:	f4 e1       	ldi	r31, 0x14	; 20
     110:	00 e0       	ldi	r16, 0x00	; 0
     112:	0b bf       	out	0x3b, r16	; 59
     114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x14>
     116:	07 90       	elpm	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	a0 30       	cpi	r26, 0x00	; 0
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0x10>

00000120 <__do_clear_bss>:
     120:	27 e1       	ldi	r18, 0x17	; 23
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b2 e0       	ldi	r27, 0x02	; 2
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	a6 32       	cpi	r26, 0x26	; 38
     12c:	b2 07       	cpc	r27, r18
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
     130:	0e 94 94 09 	call	0x1328	; 0x1328 <main>
     134:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <_exit>

00000138 <__bad_interrupt>:
     138:	63 cf       	rjmp	.-314    	; 0x0 <__vectors>

0000013a <CSwitch>:
     13a:	0f 92       	push	r0
     13c:	1f 92       	push	r1
     13e:	2f 92       	push	r2
     140:	3f 92       	push	r3
     142:	4f 92       	push	r4
     144:	5f 92       	push	r5
     146:	6f 92       	push	r6
     148:	7f 92       	push	r7
     14a:	8f 92       	push	r8
     14c:	9f 92       	push	r9
     14e:	af 92       	push	r10
     150:	bf 92       	push	r11
     152:	cf 92       	push	r12
     154:	df 92       	push	r13
     156:	ef 92       	push	r14
     158:	ff 92       	push	r15
     15a:	0f 93       	push	r16
     15c:	1f 93       	push	r17
     15e:	2f 93       	push	r18
     160:	3f 93       	push	r19
     162:	4f 93       	push	r20
     164:	5f 93       	push	r21
     166:	6f 93       	push	r22
     168:	7f 93       	push	r23
     16a:	8f 93       	push	r24
     16c:	9f 93       	push	r25
     16e:	af 93       	push	r26
     170:	bf 93       	push	r27
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	ef 93       	push	r30
     178:	ff 93       	push	r31
     17a:	0f b7       	in	r16, 0x3f	; 63
     17c:	0f 93       	push	r16
     17e:	fc b7       	in	r31, 0x3c	; 60
     180:	ff 93       	push	r31
     182:	ed b7       	in	r30, 0x3d	; 61
     184:	fe b7       	in	r31, 0x3e	; 62
     186:	e0 93 04 17 	sts	0x1704, r30	; 0x801704 <KernelSp>
     18a:	f0 93 05 17 	sts	0x1705, r31	; 0x801705 <KernelSp+0x1>
     18e:	e0 91 e2 16 	lds	r30, 0x16E2	; 0x8016e2 <CurrentSp>
     192:	f0 91 e3 16 	lds	r31, 0x16E3	; 0x8016e3 <CurrentSp+0x1>
     196:	ed bf       	out	0x3d, r30	; 61
     198:	fe bf       	out	0x3e, r31	; 62
     19a:	ff 91       	pop	r31
     19c:	fc bf       	out	0x3c, r31	; 60
     19e:	0f 91       	pop	r16
     1a0:	0f bf       	out	0x3f, r16	; 63
     1a2:	ff 91       	pop	r31
     1a4:	ef 91       	pop	r30
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	bf 91       	pop	r27
     1ac:	af 91       	pop	r26
     1ae:	9f 91       	pop	r25
     1b0:	8f 91       	pop	r24
     1b2:	7f 91       	pop	r23
     1b4:	6f 91       	pop	r22
     1b6:	5f 91       	pop	r21
     1b8:	4f 91       	pop	r20
     1ba:	3f 91       	pop	r19
     1bc:	2f 91       	pop	r18
     1be:	1f 91       	pop	r17
     1c0:	0f 91       	pop	r16
     1c2:	ff 90       	pop	r15
     1c4:	ef 90       	pop	r14
     1c6:	df 90       	pop	r13
     1c8:	cf 90       	pop	r12
     1ca:	bf 90       	pop	r11
     1cc:	af 90       	pop	r10
     1ce:	9f 90       	pop	r9
     1d0:	8f 90       	pop	r8
     1d2:	7f 90       	pop	r7
     1d4:	6f 90       	pop	r6
     1d6:	5f 90       	pop	r5
     1d8:	4f 90       	pop	r4
     1da:	3f 90       	pop	r3
     1dc:	2f 90       	pop	r2
     1de:	1f 90       	pop	r1
     1e0:	0f 90       	pop	r0
     1e2:	18 95       	reti

000001e4 <Enter_Kernel>:
     1e4:	0f 92       	push	r0
     1e6:	1f 92       	push	r1
     1e8:	2f 92       	push	r2
     1ea:	3f 92       	push	r3
     1ec:	4f 92       	push	r4
     1ee:	5f 92       	push	r5
     1f0:	6f 92       	push	r6
     1f2:	7f 92       	push	r7
     1f4:	8f 92       	push	r8
     1f6:	9f 92       	push	r9
     1f8:	af 92       	push	r10
     1fa:	bf 92       	push	r11
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	2f 93       	push	r18
     20a:	3f 93       	push	r19
     20c:	4f 93       	push	r20
     20e:	5f 93       	push	r21
     210:	6f 93       	push	r22
     212:	7f 93       	push	r23
     214:	8f 93       	push	r24
     216:	9f 93       	push	r25
     218:	af 93       	push	r26
     21a:	bf 93       	push	r27
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	ef 93       	push	r30
     222:	ff 93       	push	r31
     224:	0f b7       	in	r16, 0x3f	; 63
     226:	0f 93       	push	r16
     228:	fc b7       	in	r31, 0x3c	; 60
     22a:	ff 93       	push	r31
     22c:	ed b7       	in	r30, 0x3d	; 61
     22e:	fe b7       	in	r31, 0x3e	; 62
     230:	e0 93 e2 16 	sts	0x16E2, r30	; 0x8016e2 <CurrentSp>
     234:	f0 93 e3 16 	sts	0x16E3, r31	; 0x8016e3 <CurrentSp+0x1>
     238:	e0 91 04 17 	lds	r30, 0x1704	; 0x801704 <KernelSp>
     23c:	f0 91 05 17 	lds	r31, 0x1705	; 0x801705 <KernelSp+0x1>
     240:	ed bf       	out	0x3d, r30	; 61
     242:	fe bf       	out	0x3e, r31	; 62
     244:	ff 91       	pop	r31
     246:	fc bf       	out	0x3c, r31	; 60
     248:	0f 91       	pop	r16
     24a:	0f bf       	out	0x3f, r16	; 63
     24c:	ff 91       	pop	r31
     24e:	ef 91       	pop	r30
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	bf 91       	pop	r27
     256:	af 91       	pop	r26
     258:	9f 91       	pop	r25
     25a:	8f 91       	pop	r24
     25c:	7f 91       	pop	r23
     25e:	6f 91       	pop	r22
     260:	5f 91       	pop	r21
     262:	4f 91       	pop	r20
     264:	3f 91       	pop	r19
     266:	2f 91       	pop	r18
     268:	1f 91       	pop	r17
     26a:	0f 91       	pop	r16
     26c:	ff 90       	pop	r15
     26e:	ef 90       	pop	r14
     270:	df 90       	pop	r13
     272:	cf 90       	pop	r12
     274:	bf 90       	pop	r11
     276:	af 90       	pop	r10
     278:	9f 90       	pop	r9
     27a:	8f 90       	pop	r8
     27c:	7f 90       	pop	r7
     27e:	6f 90       	pop	r6
     280:	5f 90       	pop	r5
     282:	4f 90       	pop	r4
     284:	3f 90       	pop	r3
     286:	2f 90       	pop	r2
     288:	1f 90       	pop	r1
     28a:	0f 90       	pop	r0
     28c:	08 95       	ret

0000028e <ASDF4>:
{
	for(;;)
	{
		PORTA |= (1<<PA7);
		PORTA &= ~(1<<PA7);
	}
     28e:	6b d3       	rcall	.+1750   	; 0x966 <Chan_Init>
     290:	65 e4       	ldi	r22, 0x45	; 69
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	e9 d5       	rcall	.+3026   	; 0xe6c <Write>
     29a:	16 9a       	sbi	0x02, 6	; 2
     29c:	16 98       	cbi	0x02, 6	; 2
     29e:	fd cf       	rjmp	.-6      	; 0x29a <ASDF4+0xc>

000002a0 <a_main>:
	//Task_Create(ASDF4, PERIODIC, 0, -1, -1, -1);
	//Task_Create(ASDF5, RR, 0, -1, -1, -1);
	//Task_Create_System(ASDF1,0);
	//Task_Create_System(ASDF2,0);
	//Task_Create_System(ASDF3,0);
	Task_Create_RR(ASDF4,0);
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	87 e4       	ldi	r24, 0x47	; 71
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	20 d2       	rcall	.+1088   	; 0x6ea <Task_Create_RR>
    // Kill the initialization task
    Task_Terminate();
     2aa:	56 c0       	rjmp	.+172    	; 0x358 <Task_Terminate>
     2ac:	08 95       	ret

000002ae <idle>:
	if (Cp->priority == PERIODIC) OS_Abort(); // periodic tasks are not allowed to use csp
	Cp->request = RECEIVE;
	Cp->receiverChannel = ch;
	Enter_Kernel();
	return Cp->val;
}
     2ae:	ff cf       	rjmp	.-2      	; 0x2ae <idle>

000002b0 <Dispatch>:
     2b0:	66 e9       	ldi	r22, 0x96	; 150
     2b2:	74 e0       	ldi	r23, 0x04	; 4
     2b4:	82 ec       	ldi	r24, 0xC2	; 194
     2b6:	96 e1       	ldi	r25, 0x16	; 22
     2b8:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <dequeue>
     2bc:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <Cp+0x1>
     2c0:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <Cp>
     2c4:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <PeriodicCount>
     2c8:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <PeriodicCount+0x1>
     2cc:	89 2b       	or	r24, r25
     2ce:	e9 f0       	breq	.+58     	; 0x30a <Dispatch+0x5a>
     2d0:	64 e9       	ldi	r22, 0x94	; 148
     2d2:	74 e0       	ldi	r23, 0x04	; 4
     2d4:	84 ee       	ldi	r24, 0xE4	; 228
     2d6:	96 e1       	ldi	r25, 0x16	; 22
     2d8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <peek>
     2dc:	fc 01       	movw	r30, r24
     2de:	ea 5e       	subi	r30, 0xEA	; 234
     2e0:	fe 4f       	sbci	r31, 0xFE	; 254
     2e2:	80 81       	ld	r24, Z
     2e4:	91 81       	ldd	r25, Z+1	; 0x01
     2e6:	89 2b       	or	r24, r25
     2e8:	81 f4       	brne	.+32     	; 0x30a <Dispatch+0x5a>
     2ea:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     2ee:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     2f2:	89 2b       	or	r24, r25
     2f4:	11 f5       	brne	.+68     	; 0x33a <Dispatch+0x8a>
     2f6:	64 e9       	ldi	r22, 0x94	; 148
     2f8:	74 e0       	ldi	r23, 0x04	; 4
     2fa:	84 ee       	ldi	r24, 0xE4	; 228
     2fc:	96 e1       	ldi	r25, 0x16	; 22
     2fe:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <dequeue>
     302:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <Cp+0x1>
     306:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <Cp>
     30a:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     30e:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     312:	89 2b       	or	r24, r25
     314:	91 f4       	brne	.+36     	; 0x33a <Dispatch+0x8a>
     316:	62 e9       	ldi	r22, 0x92	; 146
     318:	74 e0       	ldi	r23, 0x04	; 4
     31a:	86 e0       	ldi	r24, 0x06	; 6
     31c:	97 e1       	ldi	r25, 0x17	; 23
     31e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <dequeue>
     322:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <Cp+0x1>
     326:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <Cp>
     32a:	89 2b       	or	r24, r25
     32c:	31 f4       	brne	.+12     	; 0x33a <Dispatch+0x8a>
     32e:	82 ea       	ldi	r24, 0xA2	; 162
     330:	94 e0       	ldi	r25, 0x04	; 4
     332:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <Cp+0x1>
     336:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <Cp>
     33a:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     33e:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     342:	82 81       	ldd	r24, Z+2	; 0x02
     344:	93 81       	ldd	r25, Z+3	; 0x03
     346:	90 93 e3 16 	sts	0x16E3, r25	; 0x8016e3 <CurrentSp+0x1>
     34a:	80 93 e2 16 	sts	0x16E2, r24	; 0x8016e2 <CurrentSp>
     34e:	ec 5f       	subi	r30, 0xFC	; 252
     350:	fe 4f       	sbci	r31, 0xFE	; 254
     352:	82 e0       	ldi	r24, 0x02	; 2
     354:	80 83       	st	Z, r24
     356:	08 95       	ret

00000358 <Task_Terminate>:
     358:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <KernelActive>
     35c:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <KernelActive+0x1>
     360:	89 2b       	or	r24, r25
     362:	51 f0       	breq	.+20     	; 0x378 <Task_Terminate+0x20>
     364:	f8 94       	cli
     366:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     36a:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     36e:	e5 5f       	subi	r30, 0xF5	; 245
     370:	fe 4f       	sbci	r31, 0xFE	; 254
     372:	86 e0       	ldi	r24, 0x06	; 6
     374:	80 83       	st	Z, r24
     376:	36 cf       	rjmp	.-404    	; 0x1e4 <Enter_Kernel>
     378:	08 95       	ret

0000037a <Kernel_Create_Task_At>:
     37a:	8f 92       	push	r8
     37c:	9f 92       	push	r9
     37e:	af 92       	push	r10
     380:	bf 92       	push	r11
     382:	cf 92       	push	r12
     384:	df 92       	push	r13
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	1f 92       	push	r1
     394:	1f 92       	push	r1
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	9a 83       	std	Y+2, r25	; 0x02
     39c:	89 83       	std	Y+1, r24	; 0x01
     39e:	5c 01       	movw	r10, r24
     3a0:	a4 e0       	ldi	r26, 0x04	; 4
     3a2:	aa 0e       	add	r10, r26
     3a4:	b1 1c       	adc	r11, r1
     3a6:	81 2c       	mov	r8, r1
     3a8:	99 24       	eor	r9, r9
     3aa:	93 94       	inc	r9
     3ac:	f5 01       	movw	r30, r10
     3ae:	d4 01       	movw	r26, r8
     3b0:	11 92       	st	Z+, r1
     3b2:	11 97       	sbiw	r26, 0x01	; 1
     3b4:	e9 f7       	brne	.-6      	; 0x3b0 <Kernel_Create_Task_At+0x36>
     3b6:	dc 01       	movw	r26, r24
     3b8:	ad 5f       	subi	r26, 0xFD	; 253
     3ba:	be 4f       	sbci	r27, 0xFE	; 254
     3bc:	ec ea       	ldi	r30, 0xAC	; 172
     3be:	f1 e0       	ldi	r31, 0x01	; 1
     3c0:	ec 93       	st	X, r30
     3c2:	11 97       	sbiw	r26, 0x01	; 1
     3c4:	fc 93       	st	X, r31
     3c6:	fc 01       	movw	r30, r24
     3c8:	ef 5f       	subi	r30, 0xFF	; 255
     3ca:	fe 4f       	sbci	r31, 0xFE	; 254
     3cc:	60 83       	st	Z, r22
     3ce:	31 97       	sbiw	r30, 0x01	; 1
     3d0:	70 83       	st	Z, r23
     3d2:	31 97       	sbiw	r30, 0x01	; 1
     3d4:	10 82       	st	Z, r1
     3d6:	b3 97       	sbiw	r30, 0x23	; 35
     3d8:	dc 01       	movw	r26, r24
     3da:	13 96       	adiw	r26, 0x03	; 3
     3dc:	fc 93       	st	X, r31
     3de:	ee 93       	st	-X, r30
     3e0:	12 97       	sbiw	r26, 0x02	; 2
     3e2:	bd 96       	adiw	r30, 0x2d	; 45
     3e4:	71 83       	std	Z+1, r23	; 0x01
     3e6:	60 83       	st	Z, r22
     3e8:	32 96       	adiw	r30, 0x02	; 2
     3ea:	10 82       	st	Z, r1
     3ec:	60 91 9a 04 	lds	r22, 0x049A	; 0x80049a <pCount>
     3f0:	70 91 9b 04 	lds	r23, 0x049B	; 0x80049b <pCount+0x1>
     3f4:	fc 01       	movw	r30, r24
     3f6:	71 83       	std	Z+1, r23	; 0x01
     3f8:	60 83       	st	Z, r22
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	9a 81       	ldd	r25, Y+2	; 0x02
     3fe:	fc 01       	movw	r30, r24
     400:	eb 5f       	subi	r30, 0xFB	; 251
     402:	fe 4f       	sbci	r31, 0xFE	; 254
     404:	51 83       	std	Z+1, r21	; 0x01
     406:	40 83       	st	Z, r20
     408:	32 96       	adiw	r30, 0x02	; 2
     40a:	31 83       	std	Z+1, r19	; 0x01
     40c:	20 83       	st	Z, r18
     40e:	3f 96       	adiw	r30, 0x0f	; 15
     410:	2f ef       	ldi	r18, 0xFF	; 255
     412:	3f ef       	ldi	r19, 0xFF	; 255
     414:	31 83       	std	Z+1, r19	; 0x01
     416:	20 83       	st	Z, r18
     418:	32 96       	adiw	r30, 0x02	; 2
     41a:	11 82       	std	Z+1, r1	; 0x01
     41c:	10 82       	st	Z, r1
     41e:	34 97       	sbiw	r30, 0x04	; 4
     420:	11 83       	std	Z+1, r17	; 0x01
     422:	00 83       	st	Z, r16
     424:	34 97       	sbiw	r30, 0x04	; 4
     426:	d1 82       	std	Z+1, r13	; 0x01
     428:	c0 82       	st	Z, r12
     42a:	32 96       	adiw	r30, 0x02	; 2
     42c:	f1 82       	std	Z+1, r15	; 0x01
     42e:	e0 82       	st	Z, r14
     430:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <Tasks>
     434:	30 91 9d 04 	lds	r19, 0x049D	; 0x80049d <Tasks+0x1>
     438:	2f 5f       	subi	r18, 0xFF	; 255
     43a:	3f 4f       	sbci	r19, 0xFF	; 255
     43c:	30 93 9d 04 	sts	0x049D, r19	; 0x80049d <Tasks+0x1>
     440:	20 93 9c 04 	sts	0x049C, r18	; 0x80049c <Tasks>
     444:	20 91 9a 04 	lds	r18, 0x049A	; 0x80049a <pCount>
     448:	30 91 9b 04 	lds	r19, 0x049B	; 0x80049b <pCount+0x1>
     44c:	2f 5f       	subi	r18, 0xFF	; 255
     44e:	3f 4f       	sbci	r19, 0xFF	; 255
     450:	30 93 9b 04 	sts	0x049B, r19	; 0x80049b <pCount+0x1>
     454:	20 93 9a 04 	sts	0x049A, r18	; 0x80049a <pCount>
     458:	3e 97       	sbiw	r30, 0x0e	; 14
     45a:	21 e0       	ldi	r18, 0x01	; 1
     45c:	20 83       	st	Z, r18
     45e:	43 30       	cpi	r20, 0x03	; 3
     460:	51 05       	cpc	r21, r1
     462:	41 f4       	brne	.+16     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     464:	46 e9       	ldi	r20, 0x96	; 150
     466:	54 e0       	ldi	r21, 0x04	; 4
     468:	62 ec       	ldi	r22, 0xC2	; 194
     46a:	76 e1       	ldi	r23, 0x16	; 22
     46c:	ce 01       	movw	r24, r28
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	6f d7       	rcall	.+3806   	; 0x1350 <enqueue>
     472:	1a c0       	rjmp	.+52     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     474:	42 30       	cpi	r20, 0x02	; 2
     476:	51 05       	cpc	r21, r1
     478:	69 f4       	brne	.+26     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     47a:	fc 01       	movw	r30, r24
     47c:	ea 5e       	subi	r30, 0xEA	; 234
     47e:	fe 4f       	sbci	r31, 0xFE	; 254
     480:	11 83       	std	Z+1, r17	; 0x01
     482:	00 83       	st	Z, r16
     484:	44 e9       	ldi	r20, 0x94	; 148
     486:	54 e0       	ldi	r21, 0x04	; 4
     488:	64 ee       	ldi	r22, 0xE4	; 228
     48a:	76 e1       	ldi	r23, 0x16	; 22
     48c:	ce 01       	movw	r24, r28
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	b1 d7       	rcall	.+3938   	; 0x13f4 <enqueuePeriodic>
     492:	0a c0       	rjmp	.+20     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     494:	41 30       	cpi	r20, 0x01	; 1
     496:	51 05       	cpc	r21, r1
     498:	39 f4       	brne	.+14     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     49a:	42 e9       	ldi	r20, 0x92	; 146
     49c:	54 e0       	ldi	r21, 0x04	; 4
     49e:	66 e0       	ldi	r22, 0x06	; 6
     4a0:	77 e1       	ldi	r23, 0x17	; 23
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	54 d7       	rcall	.+3752   	; 0x1350 <enqueue>
     4a8:	e9 81       	ldd	r30, Y+1	; 0x01
     4aa:	fa 81       	ldd	r31, Y+2	; 0x02
     4ac:	80 81       	ld	r24, Z
     4ae:	91 81       	ldd	r25, Z+1	; 0x01
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	1f 91       	pop	r17
     4ba:	0f 91       	pop	r16
     4bc:	ff 90       	pop	r15
     4be:	ef 90       	pop	r14
     4c0:	df 90       	pop	r13
     4c2:	cf 90       	pop	r12
     4c4:	bf 90       	pop	r11
     4c6:	af 90       	pop	r10
     4c8:	9f 90       	pop	r9
     4ca:	8f 90       	pop	r8
     4cc:	08 95       	ret

000004ce <Kernel_Create_Task>:
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	e9 01       	movw	r28, r18
     4e0:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <Tasks>
     4e4:	30 91 9d 04 	lds	r19, 0x049D	; 0x80049d <Tasks+0x1>
     4e8:	20 31       	cpi	r18, 0x10	; 16
     4ea:	31 05       	cpc	r19, r1
     4ec:	41 f1       	breq	.+80     	; 0x53e <Kernel_Create_Task+0x70>
     4ee:	20 91 a6 05 	lds	r18, 0x05A6	; 0x8005a6 <Process+0x104>
     4f2:	22 23       	and	r18, r18
     4f4:	71 f0       	breq	.+28     	; 0x512 <Kernel_Create_Task+0x44>
     4f6:	a8 ec       	ldi	r26, 0xC8	; 200
     4f8:	b6 e0       	ldi	r27, 0x06	; 6
     4fa:	e1 e0       	ldi	r30, 0x01	; 1
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	3c 91       	ld	r19, X
     500:	33 23       	and	r19, r19
     502:	49 f0       	breq	.+18     	; 0x516 <Kernel_Create_Task+0x48>
     504:	31 96       	adiw	r30, 0x01	; 1
     506:	ae 5d       	subi	r26, 0xDE	; 222
     508:	be 4f       	sbci	r27, 0xFE	; 254
     50a:	e0 31       	cpi	r30, 0x10	; 16
     50c:	f1 05       	cpc	r31, r1
     50e:	b9 f7       	brne	.-18     	; 0x4fe <Kernel_Create_Task+0x30>
     510:	02 c0       	rjmp	.+4      	; 0x516 <Kernel_Create_Task+0x48>
     512:	e0 e0       	ldi	r30, 0x00	; 0
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	67 01       	movw	r12, r14
     518:	78 01       	movw	r14, r16
     51a:	8e 01       	movw	r16, r28
     51c:	9a 01       	movw	r18, r20
     51e:	ab 01       	movw	r20, r22
     520:	bc 01       	movw	r22, r24
     522:	82 e2       	ldi	r24, 0x22	; 34
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	e8 9f       	mul	r30, r24
     528:	d0 01       	movw	r26, r0
     52a:	e9 9f       	mul	r30, r25
     52c:	b0 0d       	add	r27, r0
     52e:	f8 9f       	mul	r31, r24
     530:	b0 0d       	add	r27, r0
     532:	11 24       	eor	r1, r1
     534:	cd 01       	movw	r24, r26
     536:	8e 55       	subi	r24, 0x5E	; 94
     538:	9b 4f       	sbci	r25, 0xFB	; 251
     53a:	1f df       	rcall	.-450    	; 0x37a <Kernel_Create_Task_At>
     53c:	02 c0       	rjmp	.+4      	; 0x542 <Kernel_Create_Task+0x74>
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	df 90       	pop	r13
     550:	cf 90       	pop	r12
     552:	08 95       	ret

00000554 <OS_Init>:
     554:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <Tasks+0x1>
     558:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <Tasks>
     55c:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <KernelActive+0x1>
     560:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <KernelActive>
     564:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <pCount+0x1>
     568:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <pCount>
     56c:	e2 ea       	ldi	r30, 0xA2	; 162
     56e:	f4 e0       	ldi	r31, 0x04	; 4
     570:	22 ec       	ldi	r18, 0xC2	; 194
     572:	36 e1       	ldi	r19, 0x16	; 22
     574:	82 e2       	ldi	r24, 0x22	; 34
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	df 01       	movw	r26, r30
     57a:	ac 01       	movw	r20, r24
     57c:	1d 92       	st	X+, r1
     57e:	41 50       	subi	r20, 0x01	; 1
     580:	50 40       	sbci	r21, 0x00	; 0
     582:	e1 f7       	brne	.-8      	; 0x57c <OS_Init+0x28>
     584:	df 01       	movw	r26, r30
     586:	ac 5f       	subi	r26, 0xFC	; 252
     588:	be 4f       	sbci	r27, 0xFE	; 254
     58a:	1c 92       	st	X, r1
     58c:	11 82       	std	Z+1, r1	; 0x01
     58e:	10 82       	st	Z, r1
     590:	ee 5d       	subi	r30, 0xDE	; 222
     592:	fe 4f       	sbci	r31, 0xFE	; 254
     594:	e2 17       	cp	r30, r18
     596:	f3 07       	cpc	r31, r19
     598:	79 f7       	brne	.-34     	; 0x578 <OS_Init+0x24>
     59a:	a2 e0       	ldi	r26, 0x02	; 2
     59c:	b2 e0       	ldi	r27, 0x02	; 2
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	29 e2       	ldi	r18, 0x29	; 41
     5a4:	fd 01       	movw	r30, r26
     5a6:	32 2f       	mov	r19, r18
     5a8:	11 92       	st	Z+, r1
     5aa:	3a 95       	dec	r19
     5ac:	e9 f7       	brne	.-6      	; 0x5a8 <OS_Init+0x54>
     5ae:	28 9f       	mul	r18, r24
     5b0:	f0 01       	movw	r30, r0
     5b2:	29 9f       	mul	r18, r25
     5b4:	f0 0d       	add	r31, r0
     5b6:	11 24       	eor	r1, r1
     5b8:	ee 5f       	subi	r30, 0xFE	; 254
     5ba:	fd 4f       	sbci	r31, 0xFD	; 253
     5bc:	16 a2       	std	Z+38, r1	; 0x26
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	91 83       	std	Z+1, r25	; 0x01
     5c2:	80 83       	st	Z, r24
     5c4:	99 96       	adiw	r26, 0x29	; 41
     5c6:	80 31       	cpi	r24, 0x10	; 16
     5c8:	91 05       	cpc	r25, r1
     5ca:	61 f7       	brne	.-40     	; 0x5a4 <OS_Init+0x50>
     5cc:	08 95       	ret

000005ce <OS_Abort>:
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	8f d7       	rcall	.+3870   	; 0x14f2 <_exit>

000005d4 <Task_Create>:
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <KernelActive>
     5e2:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <KernelActive+0x1>
     5e6:	ef 2b       	or	r30, r31
     5e8:	09 f4       	brne	.+2      	; 0x5ec <Task_Create+0x18>
     5ea:	5d c0       	rjmp	.+186    	; 0x6a6 <Task_Create+0xd2>
     5ec:	f8 94       	cli
     5ee:	63 30       	cpi	r22, 0x03	; 3
     5f0:	71 05       	cpc	r23, r1
     5f2:	49 f4       	brne	.+18     	; 0x606 <Task_Create+0x32>
     5f4:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     5f8:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     5fc:	e5 5f       	subi	r30, 0xF5	; 245
     5fe:	fe 4f       	sbci	r31, 0xFE	; 254
     600:	a2 e0       	ldi	r26, 0x02	; 2
     602:	a0 83       	st	Z, r26
     604:	28 c0       	rjmp	.+80     	; 0x656 <Task_Create+0x82>
     606:	62 30       	cpi	r22, 0x02	; 2
     608:	71 05       	cpc	r23, r1
     60a:	89 f4       	brne	.+34     	; 0x62e <Task_Create+0x5a>
     60c:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     610:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     614:	df 01       	movw	r26, r30
     616:	a5 5f       	subi	r26, 0xF5	; 245
     618:	be 4f       	sbci	r27, 0xFE	; 254
     61a:	c4 e0       	ldi	r28, 0x04	; 4
     61c:	cc 93       	st	X, r28
     61e:	ea 5e       	subi	r30, 0xEA	; 234
     620:	fe 4f       	sbci	r31, 0xFE	; 254
     622:	d9 01       	movw	r26, r18
     624:	ae 0d       	add	r26, r14
     626:	bf 1d       	adc	r27, r15
     628:	b1 83       	std	Z+1, r27	; 0x01
     62a:	a0 83       	st	Z, r26
     62c:	14 c0       	rjmp	.+40     	; 0x656 <Task_Create+0x82>
     62e:	61 30       	cpi	r22, 0x01	; 1
     630:	71 05       	cpc	r23, r1
     632:	49 f4       	brne	.+18     	; 0x646 <Task_Create+0x72>
     634:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     638:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     63c:	e5 5f       	subi	r30, 0xF5	; 245
     63e:	fe 4f       	sbci	r31, 0xFE	; 254
     640:	a3 e0       	ldi	r26, 0x03	; 3
     642:	a0 83       	st	Z, r26
     644:	08 c0       	rjmp	.+16     	; 0x656 <Task_Create+0x82>
     646:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     64a:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     64e:	e5 5f       	subi	r30, 0xF5	; 245
     650:	fe 4f       	sbci	r31, 0xFE	; 254
     652:	a1 e0       	ldi	r26, 0x01	; 1
     654:	a0 83       	st	Z, r26
     656:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     65a:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     65e:	df 01       	movw	r26, r30
     660:	a7 5f       	subi	r26, 0xF7	; 247
     662:	be 4f       	sbci	r27, 0xFE	; 254
     664:	11 96       	adiw	r26, 0x01	; 1
     666:	9c 93       	st	X, r25
     668:	8e 93       	st	-X, r24
     66a:	14 97       	sbiw	r26, 0x04	; 4
     66c:	11 96       	adiw	r26, 0x01	; 1
     66e:	7c 93       	st	X, r23
     670:	6e 93       	st	-X, r22
     672:	12 96       	adiw	r26, 0x02	; 2
     674:	11 96       	adiw	r26, 0x01	; 1
     676:	5c 93       	st	X, r21
     678:	4e 93       	st	-X, r20
     67a:	1d 96       	adiw	r26, 0x0d	; 13
     67c:	11 96       	adiw	r26, 0x01	; 1
     67e:	3c 93       	st	X, r19
     680:	2e 93       	st	-X, r18
     682:	12 97       	sbiw	r26, 0x02	; 2
     684:	11 96       	adiw	r26, 0x01	; 1
     686:	1c 93       	st	X, r17
     688:	0e 93       	st	-X, r16
     68a:	e0 5f       	subi	r30, 0xF0	; 240
     68c:	fe 4f       	sbci	r31, 0xFE	; 254
     68e:	f1 82       	std	Z+1, r15	; 0x01
     690:	e0 82       	st	Z, r14
     692:	a8 dd       	rcall	.-1200   	; 0x1e4 <Enter_Kernel>
     694:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     698:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     69c:	e4 5f       	subi	r30, 0xF4	; 244
     69e:	fe 4f       	sbci	r31, 0xFE	; 254
     6a0:	80 81       	ld	r24, Z
     6a2:	91 81       	ldd	r25, Z+1	; 0x01
     6a4:	08 c0       	rjmp	.+16     	; 0x6b6 <Task_Create+0xe2>
     6a6:	ee 24       	eor	r14, r14
     6a8:	ea 94       	dec	r14
     6aa:	fe 2c       	mov	r15, r14
     6ac:	0f ef       	ldi	r16, 0xFF	; 255
     6ae:	1f ef       	ldi	r17, 0xFF	; 255
     6b0:	2f ef       	ldi	r18, 0xFF	; 255
     6b2:	3f ef       	ldi	r19, 0xFF	; 255
     6b4:	0c df       	rcall	.-488    	; 0x4ce <Kernel_Create_Task>
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	08 95       	ret

000006c2 <Task_Create_System>:
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	ab 01       	movw	r20, r22
     6cc:	ee 24       	eor	r14, r14
     6ce:	ea 94       	dec	r14
     6d0:	fe 2c       	mov	r15, r14
     6d2:	0f ef       	ldi	r16, 0xFF	; 255
     6d4:	1f ef       	ldi	r17, 0xFF	; 255
     6d6:	2f ef       	ldi	r18, 0xFF	; 255
     6d8:	3f ef       	ldi	r19, 0xFF	; 255
     6da:	63 e0       	ldi	r22, 0x03	; 3
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	7a df       	rcall	.-268    	; 0x5d4 <Task_Create>
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	08 95       	ret

000006ea <Task_Create_RR>:
     6ea:	ef 92       	push	r14
     6ec:	ff 92       	push	r15
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	ab 01       	movw	r20, r22
     6f4:	ee 24       	eor	r14, r14
     6f6:	ea 94       	dec	r14
     6f8:	fe 2c       	mov	r15, r14
     6fa:	0f ef       	ldi	r16, 0xFF	; 255
     6fc:	1f ef       	ldi	r17, 0xFF	; 255
     6fe:	2f ef       	ldi	r18, 0xFF	; 255
     700:	3f ef       	ldi	r19, 0xFF	; 255
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	66 df       	rcall	.-308    	; 0x5d4 <Task_Create>
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	08 95       	ret

00000712 <Task_Create_Idle>:
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <KernelActive>
     71e:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <KernelActive+0x1>
     722:	89 2b       	or	r24, r25
     724:	f1 f0       	breq	.+60     	; 0x762 <Task_Create_Idle+0x50>
     726:	f8 94       	cli
     728:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     72c:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     730:	fc 01       	movw	r30, r24
     732:	e7 5f       	subi	r30, 0xF7	; 247
     734:	fe 4f       	sbci	r31, 0xFE	; 254
     736:	27 e5       	ldi	r18, 0x57	; 87
     738:	31 e0       	ldi	r19, 0x01	; 1
     73a:	31 83       	std	Z+1, r19	; 0x01
     73c:	20 83       	st	Z, r18
     73e:	34 97       	sbiw	r30, 0x04	; 4
     740:	24 e0       	ldi	r18, 0x04	; 4
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	31 83       	std	Z+1, r19	; 0x01
     746:	20 83       	st	Z, r18
     748:	32 96       	adiw	r30, 0x02	; 2
     74a:	11 82       	std	Z+1, r1	; 0x01
     74c:	10 82       	st	Z, r1
     74e:	4a dd       	rcall	.-1388   	; 0x1e4 <Enter_Kernel>
     750:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     754:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     758:	e4 5f       	subi	r30, 0xF4	; 244
     75a:	fe 4f       	sbci	r31, 0xFE	; 254
     75c:	80 81       	ld	r24, Z
     75e:	91 81       	ldd	r25, Z+1	; 0x01
     760:	0e c0       	rjmp	.+28     	; 0x77e <Task_Create_Idle+0x6c>
     762:	ee 24       	eor	r14, r14
     764:	ea 94       	dec	r14
     766:	fe 2c       	mov	r15, r14
     768:	0f ef       	ldi	r16, 0xFF	; 255
     76a:	1f ef       	ldi	r17, 0xFF	; 255
     76c:	2f ef       	ldi	r18, 0xFF	; 255
     76e:	3f ef       	ldi	r19, 0xFF	; 255
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	64 e0       	ldi	r22, 0x04	; 4
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	87 e5       	ldi	r24, 0x57	; 87
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	a8 de       	rcall	.-688    	; 0x4ce <Kernel_Create_Task>
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	08 95       	ret

00000788 <Run_Next>:
     788:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <KernelActive>
     78c:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <KernelActive+0x1>
     790:	89 2b       	or	r24, r25
     792:	09 f4       	brne	.+2      	; 0x796 <Run_Next+0xe>
     794:	49 c0       	rjmp	.+146    	; 0x828 <Run_Next+0xa0>
     796:	f8 94       	cli
     798:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     79c:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     7a0:	fc 01       	movw	r30, r24
     7a2:	eb 5f       	subi	r30, 0xFB	; 251
     7a4:	fe 4f       	sbci	r31, 0xFE	; 254
     7a6:	20 81       	ld	r18, Z
     7a8:	31 81       	ldd	r19, Z+1	; 0x01
     7aa:	23 30       	cpi	r18, 0x03	; 3
     7ac:	31 05       	cpc	r19, r1
     7ae:	19 f4       	brne	.+6      	; 0x7b6 <Run_Next+0x2e>
     7b0:	36 96       	adiw	r30, 0x06	; 6
     7b2:	10 82       	st	Z, r1
     7b4:	38 c0       	rjmp	.+112    	; 0x826 <Run_Next+0x9e>
     7b6:	fc 01       	movw	r30, r24
     7b8:	eb 5f       	subi	r30, 0xFB	; 251
     7ba:	fe 4f       	sbci	r31, 0xFE	; 254
     7bc:	20 81       	ld	r18, Z
     7be:	31 81       	ldd	r19, Z+1	; 0x01
     7c0:	22 30       	cpi	r18, 0x02	; 2
     7c2:	31 05       	cpc	r19, r1
     7c4:	59 f5       	brne	.+86     	; 0x81c <Run_Next+0x94>
     7c6:	73 96       	adiw	r30, 0x13	; 19
     7c8:	40 81       	ld	r20, Z
     7ca:	51 81       	ldd	r21, Z+1	; 0x01
     7cc:	36 97       	sbiw	r30, 0x06	; 6
     7ce:	20 81       	ld	r18, Z
     7d0:	31 81       	ldd	r19, Z+1	; 0x01
     7d2:	42 17       	cp	r20, r18
     7d4:	53 07       	cpc	r21, r19
     7d6:	39 f0       	breq	.+14     	; 0x7e6 <Run_Next+0x5e>
     7d8:	20 91 96 04 	lds	r18, 0x0496	; 0x800496 <SysCount>
     7dc:	30 91 97 04 	lds	r19, 0x0497	; 0x800497 <SysCount+0x1>
     7e0:	12 16       	cp	r1, r18
     7e2:	13 06       	cpc	r1, r19
     7e4:	b4 f4       	brge	.+44     	; 0x812 <Run_Next+0x8a>
     7e6:	fc 01       	movw	r30, r24
     7e8:	e0 5f       	subi	r30, 0xF0	; 240
     7ea:	fe 4f       	sbci	r31, 0xFE	; 254
     7ec:	20 81       	ld	r18, Z
     7ee:	31 81       	ldd	r19, Z+1	; 0x01
     7f0:	38 96       	adiw	r30, 0x08	; 8
     7f2:	40 81       	ld	r20, Z
     7f4:	51 81       	ldd	r21, Z+1	; 0x01
     7f6:	24 1b       	sub	r18, r20
     7f8:	35 0b       	sbc	r19, r21
     7fa:	dc 01       	movw	r26, r24
     7fc:	aa 5e       	subi	r26, 0xEA	; 234
     7fe:	be 4f       	sbci	r27, 0xFE	; 254
     800:	11 96       	adiw	r26, 0x01	; 1
     802:	3c 93       	st	X, r19
     804:	2e 93       	st	-X, r18
     806:	11 82       	std	Z+1, r1	; 0x01
     808:	10 82       	st	Z, r1
     80a:	3d 97       	sbiw	r30, 0x0d	; 13
     80c:	85 e0       	ldi	r24, 0x05	; 5
     80e:	80 83       	st	Z, r24
     810:	0a c0       	rjmp	.+20     	; 0x826 <Run_Next+0x9e>
     812:	fc 01       	movw	r30, r24
     814:	e5 5f       	subi	r30, 0xF5	; 245
     816:	fe 4f       	sbci	r31, 0xFE	; 254
     818:	10 82       	st	Z, r1
     81a:	05 c0       	rjmp	.+10     	; 0x826 <Run_Next+0x9e>
     81c:	fc 01       	movw	r30, r24
     81e:	e5 5f       	subi	r30, 0xF5	; 245
     820:	fe 4f       	sbci	r31, 0xFE	; 254
     822:	85 e0       	ldi	r24, 0x05	; 5
     824:	80 83       	st	Z, r24
     826:	de cc       	rjmp	.-1604   	; 0x1e4 <Enter_Kernel>
     828:	08 95       	ret

0000082a <setup>:
     82a:	f8 94       	cli
     82c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     830:	e1 e8       	ldi	r30, 0x81	; 129
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	10 82       	st	Z, r1
     836:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     83a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     83e:	80 e7       	ldi	r24, 0x70	; 112
     840:	92 e0       	ldi	r25, 0x02	; 2
     842:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     846:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     84a:	80 81       	ld	r24, Z
     84c:	88 60       	ori	r24, 0x08	; 8
     84e:	80 83       	st	Z, r24
     850:	80 81       	ld	r24, Z
     852:	84 60       	ori	r24, 0x04	; 4
     854:	80 83       	st	Z, r24
     856:	ef e6       	ldi	r30, 0x6F	; 111
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	82 60       	ori	r24, 0x02	; 2
     85e:	80 83       	st	Z, r24
     860:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     864:	e1 e9       	ldi	r30, 0x91	; 145
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	10 82       	st	Z, r1
     86a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     86e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     872:	83 e2       	ldi	r24, 0x23	; 35
     874:	94 ef       	ldi	r25, 0xF4	; 244
     876:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     87a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     87e:	80 81       	ld	r24, Z
     880:	88 60       	ori	r24, 0x08	; 8
     882:	80 83       	st	Z, r24
     884:	80 81       	ld	r24, Z
     886:	84 60       	ori	r24, 0x04	; 4
     888:	80 83       	st	Z, r24
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     890:	78 94       	sei
     892:	08 95       	ret

00000894 <__vector_17>:
     894:	1f 92       	push	r1
     896:	0f 92       	push	r0
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	0f 92       	push	r0
     89c:	11 24       	eor	r1, r1
     89e:	0b b6       	in	r0, 0x3b	; 59
     8a0:	0f 92       	push	r0
     8a2:	2f 93       	push	r18
     8a4:	3f 93       	push	r19
     8a6:	4f 93       	push	r20
     8a8:	5f 93       	push	r21
     8aa:	6f 93       	push	r22
     8ac:	7f 93       	push	r23
     8ae:	8f 93       	push	r24
     8b0:	9f 93       	push	r25
     8b2:	af 93       	push	r26
     8b4:	bf 93       	push	r27
     8b6:	ef 93       	push	r30
     8b8:	ff 93       	push	r31
     8ba:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     8be:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     8c2:	fc 01       	movw	r30, r24
     8c4:	eb 5f       	subi	r30, 0xFB	; 251
     8c6:	fe 4f       	sbci	r31, 0xFE	; 254
     8c8:	20 81       	ld	r18, Z
     8ca:	31 81       	ldd	r19, Z+1	; 0x01
     8cc:	22 30       	cpi	r18, 0x02	; 2
     8ce:	31 05       	cpc	r19, r1
     8d0:	31 f4       	brne	.+12     	; 0x8de <__vector_17+0x4a>
     8d2:	73 96       	adiw	r30, 0x13	; 19
     8d4:	80 81       	ld	r24, Z
     8d6:	91 81       	ldd	r25, Z+1	; 0x01
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	91 83       	std	Z+1, r25	; 0x01
     8dc:	80 83       	st	Z, r24
     8de:	a0 91 94 04 	lds	r26, 0x0494	; 0x800494 <PeriodicCount>
     8e2:	b0 91 95 04 	lds	r27, 0x0495	; 0x800495 <PeriodicCount+0x1>
     8e6:	cd 01       	movw	r24, r26
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	92 f0       	brmi	.+36     	; 0x910 <__vector_17+0x7c>
     8ec:	aa 0f       	add	r26, r26
     8ee:	bb 1f       	adc	r27, r27
     8f0:	ac 51       	subi	r26, 0x1C	; 28
     8f2:	b9 4e       	sbci	r27, 0xE9	; 233
     8f4:	24 ee       	ldi	r18, 0xE4	; 228
     8f6:	36 e1       	ldi	r19, 0x16	; 22
     8f8:	fe 91       	ld	r31, -X
     8fa:	ee 91       	ld	r30, -X
     8fc:	ea 5e       	subi	r30, 0xEA	; 234
     8fe:	fe 4f       	sbci	r31, 0xFE	; 254
     900:	80 81       	ld	r24, Z
     902:	91 81       	ldd	r25, Z+1	; 0x01
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	91 83       	std	Z+1, r25	; 0x01
     908:	80 83       	st	Z, r24
     90a:	a2 17       	cp	r26, r18
     90c:	b3 07       	cpc	r27, r19
     90e:	a1 f7       	brne	.-24     	; 0x8f8 <__vector_17+0x64>
     910:	3b df       	rcall	.-394    	; 0x788 <Run_Next>
     912:	ff 91       	pop	r31
     914:	ef 91       	pop	r30
     916:	bf 91       	pop	r27
     918:	af 91       	pop	r26
     91a:	9f 91       	pop	r25
     91c:	8f 91       	pop	r24
     91e:	7f 91       	pop	r23
     920:	6f 91       	pop	r22
     922:	5f 91       	pop	r21
     924:	4f 91       	pop	r20
     926:	3f 91       	pop	r19
     928:	2f 91       	pop	r18
     92a:	0f 90       	pop	r0
     92c:	0b be       	out	0x3b, r0	; 59
     92e:	0f 90       	pop	r0
     930:	0f be       	out	0x3f, r0	; 63
     932:	0f 90       	pop	r0
     934:	1f 90       	pop	r1
     936:	18 95       	reti

00000938 <__vector_32>:
     938:	1f 92       	push	r1
     93a:	0f 92       	push	r0
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	0f 92       	push	r0
     940:	11 24       	eor	r1, r1
     942:	8f 93       	push	r24
     944:	9f 93       	push	r25
     946:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <tickOverflowCount>
     94a:	90 91 99 04 	lds	r25, 0x0499	; 0x800499 <tickOverflowCount+0x1>
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <tickOverflowCount+0x1>
     954:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <tickOverflowCount>
     958:	9f 91       	pop	r25
     95a:	8f 91       	pop	r24
     95c:	0f 90       	pop	r0
     95e:	0f be       	out	0x3f, r0	; 63
     960:	0f 90       	pop	r0
     962:	1f 90       	pop	r1
     964:	18 95       	reti

00000966 <Chan_Init>:
     966:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
     96a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x1>
     96e:	40 97       	sbiw	r24, 0x10	; 16
     970:	b1 f1       	breq	.+108    	; 0x9de <Chan_Init+0x78>
     972:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <ChannelArray+0x26>
     976:	88 23       	and	r24, r24
     978:	71 f0       	breq	.+28     	; 0x996 <Chan_Init+0x30>
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	39 e2       	ldi	r19, 0x29	; 41
     980:	38 9f       	mul	r19, r24
     982:	f0 01       	movw	r30, r0
     984:	39 9f       	mul	r19, r25
     986:	f0 0d       	add	r31, r0
     988:	11 24       	eor	r1, r1
     98a:	ee 5f       	subi	r30, 0xFE	; 254
     98c:	fd 4f       	sbci	r31, 0xFD	; 253
     98e:	26 a1       	ldd	r18, Z+38	; 0x26
     990:	21 11       	cpse	r18, r1
     992:	13 c0       	rjmp	.+38     	; 0x9ba <Chan_Init+0x54>
     994:	02 c0       	rjmp	.+4      	; 0x99a <Chan_Init+0x34>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	29 e2       	ldi	r18, 0x29	; 41
     99c:	28 9f       	mul	r18, r24
     99e:	f0 01       	movw	r30, r0
     9a0:	29 9f       	mul	r18, r25
     9a2:	f0 0d       	add	r31, r0
     9a4:	11 24       	eor	r1, r1
     9a6:	ee 5f       	subi	r30, 0xFE	; 254
     9a8:	fd 4f       	sbci	r31, 0xFD	; 253
     9aa:	22 e0       	ldi	r18, 0x02	; 2
     9ac:	26 a3       	std	Z+38, r18	; 0x26
     9ae:	15 a2       	std	Z+37, r1	; 0x25
     9b0:	14 a2       	std	Z+36, r1	; 0x24
     9b2:	80 31       	cpi	r24, 0x10	; 16
     9b4:	91 05       	cpc	r25, r1
     9b6:	41 f4       	brne	.+16     	; 0x9c8 <Chan_Init+0x62>
     9b8:	15 c0       	rjmp	.+42     	; 0x9e4 <Chan_Init+0x7e>
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	80 31       	cpi	r24, 0x10	; 16
     9be:	91 05       	cpc	r25, r1
     9c0:	f9 f6       	brne	.-66     	; 0x980 <Chan_Init+0x1a>
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	08 95       	ret
     9c8:	29 e2       	ldi	r18, 0x29	; 41
     9ca:	28 9f       	mul	r18, r24
     9cc:	f0 01       	movw	r30, r0
     9ce:	29 9f       	mul	r18, r25
     9d0:	f0 0d       	add	r31, r0
     9d2:	11 24       	eor	r1, r1
     9d4:	ee 5f       	subi	r30, 0xFE	; 254
     9d6:	fd 4f       	sbci	r31, 0xFD	; 253
     9d8:	80 81       	ld	r24, Z
     9da:	91 81       	ldd	r25, Z+1	; 0x01
     9dc:	08 95       	ret
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	08 95       	ret
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	08 95       	ret

000009ea <kernel_send>:
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     9f6:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     9fa:	fc 01       	movw	r30, r24
     9fc:	e4 5e       	subi	r30, 0xE4	; 228
     9fe:	fe 4f       	sbci	r31, 0xFE	; 254
     a00:	20 81       	ld	r18, Z
     a02:	31 81       	ldd	r19, Z+1	; 0x01
     a04:	21 50       	subi	r18, 0x01	; 1
     a06:	31 09       	sbc	r19, r1
     a08:	49 e2       	ldi	r20, 0x29	; 41
     a0a:	42 9f       	mul	r20, r18
     a0c:	f0 01       	movw	r30, r0
     a0e:	43 9f       	mul	r20, r19
     a10:	f0 0d       	add	r31, r0
     a12:	11 24       	eor	r1, r1
     a14:	ee 5f       	subi	r30, 0xFE	; 254
     a16:	fd 4f       	sbci	r31, 0xFD	; 253
     a18:	24 a1       	ldd	r18, Z+36	; 0x24
     a1a:	35 a1       	ldd	r19, Z+37	; 0x25
     a1c:	23 2b       	or	r18, r19
     a1e:	d9 f5       	brne	.+118    	; 0xa96 <kernel_send+0xac>
     a20:	fc 01       	movw	r30, r24
     a22:	e4 5e       	subi	r30, 0xE4	; 228
     a24:	fe 4f       	sbci	r31, 0xFE	; 254
     a26:	20 81       	ld	r18, Z
     a28:	31 81       	ldd	r19, Z+1	; 0x01
     a2a:	21 50       	subi	r18, 0x01	; 1
     a2c:	31 09       	sbc	r19, r1
     a2e:	42 9f       	mul	r20, r18
     a30:	f0 01       	movw	r30, r0
     a32:	43 9f       	mul	r20, r19
     a34:	f0 0d       	add	r31, r0
     a36:	11 24       	eor	r1, r1
     a38:	ee 5f       	subi	r30, 0xFE	; 254
     a3a:	fd 4f       	sbci	r31, 0xFD	; 253
     a3c:	22 81       	ldd	r18, Z+2	; 0x02
     a3e:	33 81       	ldd	r19, Z+3	; 0x03
     a40:	23 2b       	or	r18, r19
     a42:	41 f5       	brne	.+80     	; 0xa94 <kernel_send+0xaa>
     a44:	dc 01       	movw	r26, r24
     a46:	a4 5e       	subi	r26, 0xE4	; 228
     a48:	be 4f       	sbci	r27, 0xFE	; 254
     a4a:	2d 91       	ld	r18, X+
     a4c:	3c 91       	ld	r19, X
     a4e:	11 97       	sbiw	r26, 0x01	; 1
     a50:	21 50       	subi	r18, 0x01	; 1
     a52:	31 09       	sbc	r19, r1
     a54:	42 9f       	mul	r20, r18
     a56:	f0 01       	movw	r30, r0
     a58:	43 9f       	mul	r20, r19
     a5a:	f0 0d       	add	r31, r0
     a5c:	11 24       	eor	r1, r1
     a5e:	ee 5f       	subi	r30, 0xFE	; 254
     a60:	fd 4f       	sbci	r31, 0xFD	; 253
     a62:	93 83       	std	Z+3, r25	; 0x03
     a64:	82 83       	std	Z+2, r24	; 0x02
     a66:	fc 01       	movw	r30, r24
     a68:	ec 5f       	subi	r30, 0xFC	; 252
     a6a:	fe 4f       	sbci	r31, 0xFE	; 254
     a6c:	23 e0       	ldi	r18, 0x03	; 3
     a6e:	20 83       	st	Z, r18
     a70:	2d 91       	ld	r18, X+
     a72:	3c 91       	ld	r19, X
     a74:	21 50       	subi	r18, 0x01	; 1
     a76:	31 09       	sbc	r19, r1
     a78:	7c 96       	adiw	r30, 0x1c	; 28
     a7a:	80 81       	ld	r24, Z
     a7c:	91 81       	ldd	r25, Z+1	; 0x01
     a7e:	42 9f       	mul	r20, r18
     a80:	f0 01       	movw	r30, r0
     a82:	43 9f       	mul	r20, r19
     a84:	f0 0d       	add	r31, r0
     a86:	11 24       	eor	r1, r1
     a88:	ee 5f       	subi	r30, 0xFE	; 254
     a8a:	fd 4f       	sbci	r31, 0xFD	; 253
     a8c:	90 a7       	std	Z+40, r25	; 0x28
     a8e:	87 a3       	std	Z+39, r24	; 0x27
     a90:	0f dc       	rcall	.-2018   	; 0x2b0 <Dispatch>
     a92:	09 c1       	rjmp	.+530    	; 0xca6 <kernel_send+0x2bc>
     a94:	9c dd       	rcall	.-1224   	; 0x5ce <OS_Abort>
     a96:	fc 01       	movw	r30, r24
     a98:	e4 5e       	subi	r30, 0xE4	; 228
     a9a:	fe 4f       	sbci	r31, 0xFE	; 254
     a9c:	20 81       	ld	r18, Z
     a9e:	31 81       	ldd	r19, Z+1	; 0x01
     aa0:	21 50       	subi	r18, 0x01	; 1
     aa2:	31 09       	sbc	r19, r1
     aa4:	49 e2       	ldi	r20, 0x29	; 41
     aa6:	42 9f       	mul	r20, r18
     aa8:	f0 01       	movw	r30, r0
     aaa:	43 9f       	mul	r20, r19
     aac:	f0 0d       	add	r31, r0
     aae:	11 24       	eor	r1, r1
     ab0:	ee 5f       	subi	r30, 0xFE	; 254
     ab2:	fd 4f       	sbci	r31, 0xFD	; 253
     ab4:	22 81       	ldd	r18, Z+2	; 0x02
     ab6:	33 81       	ldd	r19, Z+3	; 0x03
     ab8:	23 2b       	or	r18, r19
     aba:	09 f0       	breq	.+2      	; 0xabe <kernel_send+0xd4>
     abc:	88 dd       	rcall	.-1264   	; 0x5ce <OS_Abort>
     abe:	fc 01       	movw	r30, r24
     ac0:	e4 5e       	subi	r30, 0xE4	; 228
     ac2:	fe 4f       	sbci	r31, 0xFE	; 254
     ac4:	80 81       	ld	r24, Z
     ac6:	91 81       	ldd	r25, Z+1	; 0x01
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	29 e2       	ldi	r18, 0x29	; 41
     acc:	28 9f       	mul	r18, r24
     ace:	f0 01       	movw	r30, r0
     ad0:	29 9f       	mul	r18, r25
     ad2:	f0 0d       	add	r31, r0
     ad4:	11 24       	eor	r1, r1
     ad6:	ee 5f       	subi	r30, 0xFE	; 254
     ad8:	fd 4f       	sbci	r31, 0xFD	; 253
     ada:	c4 a1       	ldd	r28, Z+36	; 0x24
     adc:	d5 a1       	ldd	r29, Z+37	; 0x25
     ade:	21 97       	sbiw	r28, 0x01	; 1
     ae0:	0a f4       	brpl	.+2      	; 0xae4 <kernel_send+0xfa>
     ae2:	ce c0       	rjmp	.+412    	; 0xc80 <kernel_send+0x296>
     ae4:	19 e2       	ldi	r17, 0x29	; 41
     ae6:	01 e0       	ldi	r16, 0x01	; 1
     ae8:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <Cp>
     aec:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <Cp+0x1>
     af0:	c9 01       	movw	r24, r18
     af2:	84 5e       	subi	r24, 0xE4	; 228
     af4:	9e 4f       	sbci	r25, 0xFE	; 254
     af6:	dc 01       	movw	r26, r24
     af8:	4d 91       	ld	r20, X+
     afa:	5c 91       	ld	r21, X
     afc:	41 50       	subi	r20, 0x01	; 1
     afe:	51 09       	sbc	r21, r1
     b00:	fe 01       	movw	r30, r28
     b02:	32 96       	adiw	r30, 0x02	; 2
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	14 9f       	mul	r17, r20
     b0a:	d0 01       	movw	r26, r0
     b0c:	15 9f       	mul	r17, r21
     b0e:	b0 0d       	add	r27, r0
     b10:	11 24       	eor	r1, r1
     b12:	ae 0f       	add	r26, r30
     b14:	bf 1f       	adc	r27, r31
     b16:	ae 5f       	subi	r26, 0xFE	; 254
     b18:	bd 4f       	sbci	r27, 0xFD	; 253
     b1a:	0d 90       	ld	r0, X+
     b1c:	bc 91       	ld	r27, X
     b1e:	a0 2d       	mov	r26, r0
     b20:	ac 5f       	subi	r26, 0xFC	; 252
     b22:	be 4f       	sbci	r27, 0xFE	; 254
     b24:	0c 93       	st	X, r16
     b26:	dc 01       	movw	r26, r24
     b28:	4d 91       	ld	r20, X+
     b2a:	5c 91       	ld	r21, X
     b2c:	41 50       	subi	r20, 0x01	; 1
     b2e:	51 09       	sbc	r21, r1
     b30:	14 9f       	mul	r17, r20
     b32:	d0 01       	movw	r26, r0
     b34:	15 9f       	mul	r17, r21
     b36:	b0 0d       	add	r27, r0
     b38:	11 24       	eor	r1, r1
     b3a:	ae 0f       	add	r26, r30
     b3c:	bf 1f       	adc	r27, r31
     b3e:	ae 5f       	subi	r26, 0xFE	; 254
     b40:	bd 4f       	sbci	r27, 0xFD	; 253
     b42:	6d 91       	ld	r22, X+
     b44:	7c 91       	ld	r23, X
     b46:	a9 01       	movw	r20, r18
     b48:	40 5e       	subi	r20, 0xE0	; 224
     b4a:	5e 4f       	sbci	r21, 0xFE	; 254
     b4c:	da 01       	movw	r26, r20
     b4e:	4d 91       	ld	r20, X+
     b50:	5c 91       	ld	r21, X
     b52:	db 01       	movw	r26, r22
     b54:	a0 5e       	subi	r26, 0xE0	; 224
     b56:	be 4f       	sbci	r27, 0xFE	; 254
     b58:	4d 93       	st	X+, r20
     b5a:	5c 93       	st	X, r21
     b5c:	dc 01       	movw	r26, r24
     b5e:	4d 91       	ld	r20, X+
     b60:	5c 91       	ld	r21, X
     b62:	11 97       	sbiw	r26, 0x01	; 1
     b64:	41 50       	subi	r20, 0x01	; 1
     b66:	51 09       	sbc	r21, r1
     b68:	14 9f       	mul	r17, r20
     b6a:	c0 01       	movw	r24, r0
     b6c:	15 9f       	mul	r17, r21
     b6e:	90 0d       	add	r25, r0
     b70:	11 24       	eor	r1, r1
     b72:	e8 0f       	add	r30, r24
     b74:	f9 1f       	adc	r31, r25
     b76:	ee 5f       	subi	r30, 0xFE	; 254
     b78:	fd 4f       	sbci	r31, 0xFD	; 253
     b7a:	01 90       	ld	r0, Z+
     b7c:	f0 81       	ld	r31, Z
     b7e:	e0 2d       	mov	r30, r0
     b80:	eb 5f       	subi	r30, 0xFB	; 251
     b82:	fe 4f       	sbci	r31, 0xFE	; 254
     b84:	80 81       	ld	r24, Z
     b86:	91 81       	ldd	r25, Z+1	; 0x01
     b88:	03 97       	sbiw	r24, 0x03	; 3
     b8a:	c1 f4       	brne	.+48     	; 0xbbc <kernel_send+0x1d2>
     b8c:	fd 01       	movw	r30, r26
     b8e:	40 81       	ld	r20, Z
     b90:	51 81       	ldd	r21, Z+1	; 0x01
     b92:	ce 01       	movw	r24, r28
     b94:	02 96       	adiw	r24, 0x02	; 2
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	41 50       	subi	r20, 0x01	; 1
     b9c:	51 09       	sbc	r21, r1
     b9e:	14 9f       	mul	r17, r20
     ba0:	90 01       	movw	r18, r0
     ba2:	15 9f       	mul	r17, r21
     ba4:	30 0d       	add	r19, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	82 0f       	add	r24, r18
     baa:	93 1f       	adc	r25, r19
     bac:	46 e9       	ldi	r20, 0x96	; 150
     bae:	54 e0       	ldi	r21, 0x04	; 4
     bb0:	62 ec       	ldi	r22, 0xC2	; 194
     bb2:	76 e1       	ldi	r23, 0x16	; 22
     bb4:	8e 5f       	subi	r24, 0xFE	; 254
     bb6:	9d 4f       	sbci	r25, 0xFD	; 253
     bb8:	cb d3       	rcall	.+1942   	; 0x1350 <enqueue>
     bba:	36 c0       	rjmp	.+108    	; 0xc28 <kernel_send+0x23e>
     bbc:	f9 01       	movw	r30, r18
     bbe:	e4 5e       	subi	r30, 0xE4	; 228
     bc0:	fe 4f       	sbci	r31, 0xFE	; 254
     bc2:	40 81       	ld	r20, Z
     bc4:	51 81       	ldd	r21, Z+1	; 0x01
     bc6:	41 50       	subi	r20, 0x01	; 1
     bc8:	51 09       	sbc	r21, r1
     bca:	fe 01       	movw	r30, r28
     bcc:	32 96       	adiw	r30, 0x02	; 2
     bce:	ee 0f       	add	r30, r30
     bd0:	ff 1f       	adc	r31, r31
     bd2:	14 9f       	mul	r17, r20
     bd4:	c0 01       	movw	r24, r0
     bd6:	15 9f       	mul	r17, r21
     bd8:	90 0d       	add	r25, r0
     bda:	11 24       	eor	r1, r1
     bdc:	e8 0f       	add	r30, r24
     bde:	f9 1f       	adc	r31, r25
     be0:	ee 5f       	subi	r30, 0xFE	; 254
     be2:	fd 4f       	sbci	r31, 0xFD	; 253
     be4:	01 90       	ld	r0, Z+
     be6:	f0 81       	ld	r31, Z
     be8:	e0 2d       	mov	r30, r0
     bea:	eb 5f       	subi	r30, 0xFB	; 251
     bec:	fe 4f       	sbci	r31, 0xFE	; 254
     bee:	80 81       	ld	r24, Z
     bf0:	91 81       	ldd	r25, Z+1	; 0x01
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	c9 f4       	brne	.+50     	; 0xc28 <kernel_send+0x23e>
     bf6:	f9 01       	movw	r30, r18
     bf8:	e4 5e       	subi	r30, 0xE4	; 228
     bfa:	fe 4f       	sbci	r31, 0xFE	; 254
     bfc:	40 81       	ld	r20, Z
     bfe:	51 81       	ldd	r21, Z+1	; 0x01
     c00:	ce 01       	movw	r24, r28
     c02:	02 96       	adiw	r24, 0x02	; 2
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	41 50       	subi	r20, 0x01	; 1
     c0a:	51 09       	sbc	r21, r1
     c0c:	14 9f       	mul	r17, r20
     c0e:	90 01       	movw	r18, r0
     c10:	15 9f       	mul	r17, r21
     c12:	30 0d       	add	r19, r0
     c14:	11 24       	eor	r1, r1
     c16:	82 0f       	add	r24, r18
     c18:	93 1f       	adc	r25, r19
     c1a:	42 e9       	ldi	r20, 0x92	; 146
     c1c:	54 e0       	ldi	r21, 0x04	; 4
     c1e:	66 e0       	ldi	r22, 0x06	; 6
     c20:	77 e1       	ldi	r23, 0x17	; 23
     c22:	8e 5f       	subi	r24, 0xFE	; 254
     c24:	9d 4f       	sbci	r25, 0xFD	; 253
     c26:	94 d3       	rcall	.+1832   	; 0x1350 <enqueue>
     c28:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <Cp>
     c2c:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <Cp+0x1>
     c30:	a4 5e       	subi	r26, 0xE4	; 228
     c32:	be 4f       	sbci	r27, 0xFE	; 254
     c34:	2d 91       	ld	r18, X+
     c36:	3c 91       	ld	r19, X
     c38:	11 97       	sbiw	r26, 0x01	; 1
     c3a:	21 50       	subi	r18, 0x01	; 1
     c3c:	31 09       	sbc	r19, r1
     c3e:	fe 01       	movw	r30, r28
     c40:	32 96       	adiw	r30, 0x02	; 2
     c42:	ee 0f       	add	r30, r30
     c44:	ff 1f       	adc	r31, r31
     c46:	12 9f       	mul	r17, r18
     c48:	c0 01       	movw	r24, r0
     c4a:	13 9f       	mul	r17, r19
     c4c:	90 0d       	add	r25, r0
     c4e:	11 24       	eor	r1, r1
     c50:	e8 0f       	add	r30, r24
     c52:	f9 1f       	adc	r31, r25
     c54:	ee 5f       	subi	r30, 0xFE	; 254
     c56:	fd 4f       	sbci	r31, 0xFD	; 253
     c58:	11 82       	std	Z+1, r1	; 0x01
     c5a:	10 82       	st	Z, r1
     c5c:	8d 91       	ld	r24, X+
     c5e:	9c 91       	ld	r25, X
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	18 9f       	mul	r17, r24
     c64:	f0 01       	movw	r30, r0
     c66:	19 9f       	mul	r17, r25
     c68:	f0 0d       	add	r31, r0
     c6a:	11 24       	eor	r1, r1
     c6c:	ee 5f       	subi	r30, 0xFE	; 254
     c6e:	fd 4f       	sbci	r31, 0xFD	; 253
     c70:	84 a1       	ldd	r24, Z+36	; 0x24
     c72:	95 a1       	ldd	r25, Z+37	; 0x25
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	95 a3       	std	Z+37, r25	; 0x25
     c78:	84 a3       	std	Z+36, r24	; 0x24
     c7a:	21 97       	sbiw	r28, 0x01	; 1
     c7c:	0a f0       	brmi	.+2      	; 0xc80 <kernel_send+0x296>
     c7e:	34 cf       	rjmp	.-408    	; 0xae8 <kernel_send+0xfe>
     c80:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     c84:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     c88:	e4 5e       	subi	r30, 0xE4	; 228
     c8a:	fe 4f       	sbci	r31, 0xFE	; 254
     c8c:	80 81       	ld	r24, Z
     c8e:	91 81       	ldd	r25, Z+1	; 0x01
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	29 e2       	ldi	r18, 0x29	; 41
     c94:	28 9f       	mul	r18, r24
     c96:	f0 01       	movw	r30, r0
     c98:	29 9f       	mul	r18, r25
     c9a:	f0 0d       	add	r31, r0
     c9c:	11 24       	eor	r1, r1
     c9e:	ee 5f       	subi	r30, 0xFE	; 254
     ca0:	fd 4f       	sbci	r31, 0xFD	; 253
     ca2:	10 a6       	std	Z+40, r1	; 0x28
     ca4:	17 a2       	std	Z+39, r1	; 0x27
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	08 95       	ret

00000cb0 <kernel_receive>:

void kernel_receive() {
	if (ChannelArray[Cp->receiverChannel - 1].sender == NULL) { // no sender waiting
     cb0:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     cb4:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     cb8:	fc 01       	movw	r30, r24
     cba:	e2 5e       	subi	r30, 0xE2	; 226
     cbc:	fe 4f       	sbci	r31, 0xFE	; 254
     cbe:	20 81       	ld	r18, Z
     cc0:	31 81       	ldd	r19, Z+1	; 0x01
     cc2:	21 50       	subi	r18, 0x01	; 1
     cc4:	31 09       	sbc	r19, r1
     cc6:	49 e2       	ldi	r20, 0x29	; 41
     cc8:	42 9f       	mul	r20, r18
     cca:	f0 01       	movw	r30, r0
     ccc:	43 9f       	mul	r20, r19
     cce:	f0 0d       	add	r31, r0
     cd0:	11 24       	eor	r1, r1
     cd2:	ee 5f       	subi	r30, 0xFE	; 254
     cd4:	fd 4f       	sbci	r31, 0xFD	; 253
     cd6:	22 81       	ldd	r18, Z+2	; 0x02
     cd8:	33 81       	ldd	r19, Z+3	; 0x03
     cda:	23 2b       	or	r18, r19
     cdc:	09 f5       	brne	.+66     	; 0xd20 <kernel_receive+0x70>
		Cp->state = BLOCKED;
     cde:	fc 01       	movw	r30, r24
     ce0:	ec 5f       	subi	r30, 0xFC	; 252
     ce2:	fe 4f       	sbci	r31, 0xFE	; 254
     ce4:	23 e0       	ldi	r18, 0x03	; 3
     ce6:	20 83       	st	Z, r18
		enqueue(&Cp, &ChannelArray[Cp->receiverChannel - 1].receivers, &ChannelArray[Cp->receiverChannel - 1].numberReceivers);
     ce8:	7a 96       	adiw	r30, 0x1a	; 26
     cea:	20 81       	ld	r18, Z
     cec:	31 81       	ldd	r19, Z+1	; 0x01
     cee:	80 81       	ld	r24, Z
     cf0:	91 81       	ldd	r25, Z+1	; 0x01
     cf2:	21 50       	subi	r18, 0x01	; 1
     cf4:	31 09       	sbc	r19, r1
     cf6:	e9 e2       	ldi	r30, 0x29	; 41
     cf8:	e2 9f       	mul	r30, r18
     cfa:	a0 01       	movw	r20, r0
     cfc:	e3 9f       	mul	r30, r19
     cfe:	50 0d       	add	r21, r0
     d00:	11 24       	eor	r1, r1
     d02:	4a 5d       	subi	r20, 0xDA	; 218
     d04:	5d 4f       	sbci	r21, 0xFD	; 253
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	e8 9f       	mul	r30, r24
     d0a:	b0 01       	movw	r22, r0
     d0c:	e9 9f       	mul	r30, r25
     d0e:	70 0d       	add	r23, r0
     d10:	11 24       	eor	r1, r1
     d12:	6a 5f       	subi	r22, 0xFA	; 250
     d14:	7d 4f       	sbci	r23, 0xFD	; 253
     d16:	80 ea       	ldi	r24, 0xA0	; 160
     d18:	94 e0       	ldi	r25, 0x04	; 4
     d1a:	1a d3       	rcall	.+1588   	; 0x1350 <enqueue>
		Dispatch();
     d1c:	c9 ca       	rjmp	.-2670   	; 0x2b0 <Dispatch>
     d1e:	08 95       	ret
		} else { // sender is waiting
		ChannelArray[Cp->receiverChannel - 1].sender->state = READY;
     d20:	fc 01       	movw	r30, r24
     d22:	e2 5e       	subi	r30, 0xE2	; 226
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	20 81       	ld	r18, Z
     d28:	31 81       	ldd	r19, Z+1	; 0x01
     d2a:	21 50       	subi	r18, 0x01	; 1
     d2c:	31 09       	sbc	r19, r1
     d2e:	49 e2       	ldi	r20, 0x29	; 41
     d30:	42 9f       	mul	r20, r18
     d32:	d0 01       	movw	r26, r0
     d34:	43 9f       	mul	r20, r19
     d36:	b0 0d       	add	r27, r0
     d38:	11 24       	eor	r1, r1
     d3a:	ae 5f       	subi	r26, 0xFE	; 254
     d3c:	bd 4f       	sbci	r27, 0xFD	; 253
     d3e:	12 96       	adiw	r26, 0x02	; 2
     d40:	0d 90       	ld	r0, X+
     d42:	bc 91       	ld	r27, X
     d44:	a0 2d       	mov	r26, r0
     d46:	ac 5f       	subi	r26, 0xFC	; 252
     d48:	be 4f       	sbci	r27, 0xFE	; 254
     d4a:	21 e0       	ldi	r18, 0x01	; 1
     d4c:	2c 93       	st	X, r18
		Cp->val = ChannelArray[Cp->receiverChannel - 1].val;
     d4e:	20 81       	ld	r18, Z
     d50:	31 81       	ldd	r19, Z+1	; 0x01
     d52:	21 50       	subi	r18, 0x01	; 1
     d54:	31 09       	sbc	r19, r1
     d56:	42 9f       	mul	r20, r18
     d58:	d0 01       	movw	r26, r0
     d5a:	43 9f       	mul	r20, r19
     d5c:	b0 0d       	add	r27, r0
     d5e:	11 24       	eor	r1, r1
     d60:	ae 5f       	subi	r26, 0xFE	; 254
     d62:	bd 4f       	sbci	r27, 0xFD	; 253
     d64:	97 96       	adiw	r26, 0x27	; 39
     d66:	2d 91       	ld	r18, X+
     d68:	3c 91       	ld	r19, X
     d6a:	98 97       	sbiw	r26, 0x28	; 40
     d6c:	dc 01       	movw	r26, r24
     d6e:	a0 5e       	subi	r26, 0xE0	; 224
     d70:	be 4f       	sbci	r27, 0xFE	; 254
     d72:	11 96       	adiw	r26, 0x01	; 1
     d74:	3c 93       	st	X, r19
     d76:	2e 93       	st	-X, r18

		if (ChannelArray[Cp->receiverChannel - 1].sender->priority == SYSTEM) {
     d78:	20 81       	ld	r18, Z
     d7a:	31 81       	ldd	r19, Z+1	; 0x01
     d7c:	21 50       	subi	r18, 0x01	; 1
     d7e:	31 09       	sbc	r19, r1
     d80:	42 9f       	mul	r20, r18
     d82:	f0 01       	movw	r30, r0
     d84:	43 9f       	mul	r20, r19
     d86:	f0 0d       	add	r31, r0
     d88:	11 24       	eor	r1, r1
     d8a:	ee 5f       	subi	r30, 0xFE	; 254
     d8c:	fd 4f       	sbci	r31, 0xFD	; 253
     d8e:	02 80       	ldd	r0, Z+2	; 0x02
     d90:	f3 81       	ldd	r31, Z+3	; 0x03
     d92:	e0 2d       	mov	r30, r0
     d94:	eb 5f       	subi	r30, 0xFB	; 251
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
     d98:	20 81       	ld	r18, Z
     d9a:	31 81       	ldd	r19, Z+1	; 0x01
     d9c:	23 30       	cpi	r18, 0x03	; 3
     d9e:	31 05       	cpc	r19, r1
     da0:	a1 f4       	brne	.+40     	; 0xdca <kernel_receive+0x11a>
			enqueue(&ChannelArray[Cp->receiverChannel - 1].sender, &SysQueue, &SysCount);
     da2:	fc 01       	movw	r30, r24
     da4:	e2 5e       	subi	r30, 0xE2	; 226
     da6:	fe 4f       	sbci	r31, 0xFE	; 254
     da8:	20 81       	ld	r18, Z
     daa:	31 81       	ldd	r19, Z+1	; 0x01
     dac:	21 50       	subi	r18, 0x01	; 1
     dae:	31 09       	sbc	r19, r1
     db0:	42 9f       	mul	r20, r18
     db2:	c0 01       	movw	r24, r0
     db4:	43 9f       	mul	r20, r19
     db6:	90 0d       	add	r25, r0
     db8:	11 24       	eor	r1, r1
     dba:	46 e9       	ldi	r20, 0x96	; 150
     dbc:	54 e0       	ldi	r21, 0x04	; 4
     dbe:	62 ec       	ldi	r22, 0xC2	; 194
     dc0:	76 e1       	ldi	r23, 0x16	; 22
     dc2:	8c 5f       	subi	r24, 0xFC	; 252
     dc4:	9d 4f       	sbci	r25, 0xFD	; 253
     dc6:	c4 d2       	rcall	.+1416   	; 0x1350 <enqueue>
     dc8:	2c c0       	rjmp	.+88     	; 0xe22 <kernel_receive+0x172>
			} else if (ChannelArray[Cp->receiverChannel - 1].sender->priority == RR) {
     dca:	fc 01       	movw	r30, r24
     dcc:	e2 5e       	subi	r30, 0xE2	; 226
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	20 81       	ld	r18, Z
     dd2:	31 81       	ldd	r19, Z+1	; 0x01
     dd4:	21 50       	subi	r18, 0x01	; 1
     dd6:	31 09       	sbc	r19, r1
     dd8:	49 e2       	ldi	r20, 0x29	; 41
     dda:	42 9f       	mul	r20, r18
     ddc:	f0 01       	movw	r30, r0
     dde:	43 9f       	mul	r20, r19
     de0:	f0 0d       	add	r31, r0
     de2:	11 24       	eor	r1, r1
     de4:	ee 5f       	subi	r30, 0xFE	; 254
     de6:	fd 4f       	sbci	r31, 0xFD	; 253
     de8:	02 80       	ldd	r0, Z+2	; 0x02
     dea:	f3 81       	ldd	r31, Z+3	; 0x03
     dec:	e0 2d       	mov	r30, r0
     dee:	eb 5f       	subi	r30, 0xFB	; 251
     df0:	fe 4f       	sbci	r31, 0xFE	; 254
     df2:	20 81       	ld	r18, Z
     df4:	31 81       	ldd	r19, Z+1	; 0x01
     df6:	21 30       	cpi	r18, 0x01	; 1
     df8:	31 05       	cpc	r19, r1
     dfa:	99 f4       	brne	.+38     	; 0xe22 <kernel_receive+0x172>
			enqueue(&ChannelArray[Cp->receiverChannel - 1].sender, &RRQueue, &RRCount);
     dfc:	fc 01       	movw	r30, r24
     dfe:	e2 5e       	subi	r30, 0xE2	; 226
     e00:	fe 4f       	sbci	r31, 0xFE	; 254
     e02:	20 81       	ld	r18, Z
     e04:	31 81       	ldd	r19, Z+1	; 0x01
     e06:	21 50       	subi	r18, 0x01	; 1
     e08:	31 09       	sbc	r19, r1
     e0a:	42 9f       	mul	r20, r18
     e0c:	c0 01       	movw	r24, r0
     e0e:	43 9f       	mul	r20, r19
     e10:	90 0d       	add	r25, r0
     e12:	11 24       	eor	r1, r1
     e14:	42 e9       	ldi	r20, 0x92	; 146
     e16:	54 e0       	ldi	r21, 0x04	; 4
     e18:	66 e0       	ldi	r22, 0x06	; 6
     e1a:	77 e1       	ldi	r23, 0x17	; 23
     e1c:	8c 5f       	subi	r24, 0xFC	; 252
     e1e:	9d 4f       	sbci	r25, 0xFD	; 253
     e20:	97 d2       	rcall	.+1326   	; 0x1350 <enqueue>
		}
		ChannelArray[Cp->receiverChannel - 1].sender = NULL;
     e22:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     e26:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     e2a:	fc 01       	movw	r30, r24
     e2c:	e2 5e       	subi	r30, 0xE2	; 226
     e2e:	fe 4f       	sbci	r31, 0xFE	; 254
     e30:	20 81       	ld	r18, Z
     e32:	31 81       	ldd	r19, Z+1	; 0x01
     e34:	21 50       	subi	r18, 0x01	; 1
     e36:	31 09       	sbc	r19, r1
     e38:	49 e2       	ldi	r20, 0x29	; 41
     e3a:	42 9f       	mul	r20, r18
     e3c:	f0 01       	movw	r30, r0
     e3e:	43 9f       	mul	r20, r19
     e40:	f0 0d       	add	r31, r0
     e42:	11 24       	eor	r1, r1
     e44:	ee 5f       	subi	r30, 0xFE	; 254
     e46:	fd 4f       	sbci	r31, 0xFD	; 253
     e48:	13 82       	std	Z+3, r1	; 0x03
     e4a:	12 82       	std	Z+2, r1	; 0x02
		ChannelArray[Cp->senderChannel - 1].val = NULL;
     e4c:	fc 01       	movw	r30, r24
     e4e:	e4 5e       	subi	r30, 0xE4	; 228
     e50:	fe 4f       	sbci	r31, 0xFE	; 254
     e52:	80 81       	ld	r24, Z
     e54:	91 81       	ldd	r25, Z+1	; 0x01
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	48 9f       	mul	r20, r24
     e5a:	f0 01       	movw	r30, r0
     e5c:	49 9f       	mul	r20, r25
     e5e:	f0 0d       	add	r31, r0
     e60:	11 24       	eor	r1, r1
     e62:	ee 5f       	subi	r30, 0xFE	; 254
     e64:	fd 4f       	sbci	r31, 0xFD	; 253
     e66:	10 a6       	std	Z+40, r1	; 0x28
     e68:	17 a2       	std	Z+39, r1	; 0x27
     e6a:	08 95       	ret

00000e6c <Write>:
	}
}

void Write(CHAN ch, int v) {
	if (Cp->priority == PERIODIC) OS_Abort(); // periodic tasks are not allowed to use csp
     e6c:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <Cp>
     e70:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <Cp+0x1>
     e74:	f9 01       	movw	r30, r18
     e76:	eb 5f       	subi	r30, 0xFB	; 251
     e78:	fe 4f       	sbci	r31, 0xFE	; 254
     e7a:	40 81       	ld	r20, Z
     e7c:	51 81       	ldd	r21, Z+1	; 0x01
     e7e:	42 30       	cpi	r20, 0x02	; 2
     e80:	51 05       	cpc	r21, r1
     e82:	09 f4       	brne	.+2      	; 0xe86 <Write+0x1a>
     e84:	a4 db       	rcall	.-2232   	; 0x5ce <OS_Abort>
	Cp->request = ASYNC_SEND;
     e86:	f9 01       	movw	r30, r18
     e88:	e5 5f       	subi	r30, 0xF5	; 245
     e8a:	fe 4f       	sbci	r31, 0xFE	; 254
     e8c:	48 e0       	ldi	r20, 0x08	; 8
     e8e:	40 83       	st	Z, r20
	Cp->senderChannel = ch;
     e90:	71 96       	adiw	r30, 0x11	; 17
     e92:	91 83       	std	Z+1, r25	; 0x01
     e94:	80 83       	st	Z, r24
	Cp->val = v;
     e96:	34 96       	adiw	r30, 0x04	; 4
     e98:	71 83       	std	Z+1, r23	; 0x01
     e9a:	60 83       	st	Z, r22
	Enter_Kernel();
     e9c:	a3 c9       	rjmp	.-3258   	; 0x1e4 <Enter_Kernel>
     e9e:	08 95       	ret

00000ea0 <kernel_async_send>:
}

void kernel_async_send() {
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
	if (ChannelArray[Cp->senderChannel - 1].numberReceivers == 0) { // no receivers waiting
     ea8:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     eac:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     eb0:	fc 01       	movw	r30, r24
     eb2:	e4 5e       	subi	r30, 0xE4	; 228
     eb4:	fe 4f       	sbci	r31, 0xFE	; 254
     eb6:	20 81       	ld	r18, Z
     eb8:	31 81       	ldd	r19, Z+1	; 0x01
     eba:	21 50       	subi	r18, 0x01	; 1
     ebc:	31 09       	sbc	r19, r1
     ebe:	49 e2       	ldi	r20, 0x29	; 41
     ec0:	42 9f       	mul	r20, r18
     ec2:	f0 01       	movw	r30, r0
     ec4:	43 9f       	mul	r20, r19
     ec6:	f0 0d       	add	r31, r0
     ec8:	11 24       	eor	r1, r1
     eca:	ee 5f       	subi	r30, 0xFE	; 254
     ecc:	fd 4f       	sbci	r31, 0xFD	; 253
     ece:	24 a1       	ldd	r18, Z+36	; 0x24
     ed0:	35 a1       	ldd	r19, Z+37	; 0x25
     ed2:	23 2b       	or	r18, r19
     ed4:	21 f5       	brne	.+72     	; 0xf1e <kernel_async_send+0x7e>
		if (ChannelArray[Cp->senderChannel - 1].sender == NULL) ChannelArray[Cp->senderChannel - 1].sender = Cp;
     ed6:	fc 01       	movw	r30, r24
     ed8:	e4 5e       	subi	r30, 0xE4	; 228
     eda:	fe 4f       	sbci	r31, 0xFE	; 254
     edc:	20 81       	ld	r18, Z
     ede:	31 81       	ldd	r19, Z+1	; 0x01
     ee0:	21 50       	subi	r18, 0x01	; 1
     ee2:	31 09       	sbc	r19, r1
     ee4:	42 9f       	mul	r20, r18
     ee6:	f0 01       	movw	r30, r0
     ee8:	43 9f       	mul	r20, r19
     eea:	f0 0d       	add	r31, r0
     eec:	11 24       	eor	r1, r1
     eee:	ee 5f       	subi	r30, 0xFE	; 254
     ef0:	fd 4f       	sbci	r31, 0xFD	; 253
     ef2:	22 81       	ldd	r18, Z+2	; 0x02
     ef4:	33 81       	ldd	r19, Z+3	; 0x03
     ef6:	23 2b       	or	r18, r19
     ef8:	89 f4       	brne	.+34     	; 0xf1c <kernel_async_send+0x7c>
     efa:	fc 01       	movw	r30, r24
     efc:	e4 5e       	subi	r30, 0xE4	; 228
     efe:	fe 4f       	sbci	r31, 0xFE	; 254
     f00:	20 81       	ld	r18, Z
     f02:	31 81       	ldd	r19, Z+1	; 0x01
     f04:	21 50       	subi	r18, 0x01	; 1
     f06:	31 09       	sbc	r19, r1
     f08:	42 9f       	mul	r20, r18
     f0a:	f0 01       	movw	r30, r0
     f0c:	43 9f       	mul	r20, r19
     f0e:	f0 0d       	add	r31, r0
     f10:	11 24       	eor	r1, r1
     f12:	ee 5f       	subi	r30, 0xFE	; 254
     f14:	fd 4f       	sbci	r31, 0xFD	; 253
     f16:	93 83       	std	Z+3, r25	; 0x03
     f18:	82 83       	std	Z+2, r24	; 0x02
     f1a:	09 c1       	rjmp	.+530    	; 0x112e <kernel_async_send+0x28e>
		else OS_Abort(); // cant have more than 1 sender
     f1c:	58 db       	rcall	.-2384   	; 0x5ce <OS_Abort>
		return; // return without blocking
	} else { //receivers are waiting
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(); // cant have more than 1 sender
     f1e:	fc 01       	movw	r30, r24
     f20:	e4 5e       	subi	r30, 0xE4	; 228
     f22:	fe 4f       	sbci	r31, 0xFE	; 254
     f24:	20 81       	ld	r18, Z
     f26:	31 81       	ldd	r19, Z+1	; 0x01
     f28:	21 50       	subi	r18, 0x01	; 1
     f2a:	31 09       	sbc	r19, r1
     f2c:	49 e2       	ldi	r20, 0x29	; 41
     f2e:	42 9f       	mul	r20, r18
     f30:	f0 01       	movw	r30, r0
     f32:	43 9f       	mul	r20, r19
     f34:	f0 0d       	add	r31, r0
     f36:	11 24       	eor	r1, r1
     f38:	ee 5f       	subi	r30, 0xFE	; 254
     f3a:	fd 4f       	sbci	r31, 0xFD	; 253
     f3c:	22 81       	ldd	r18, Z+2	; 0x02
     f3e:	33 81       	ldd	r19, Z+3	; 0x03
     f40:	23 2b       	or	r18, r19
     f42:	09 f0       	breq	.+2      	; 0xf46 <kernel_async_send+0xa6>
     f44:	44 db       	rcall	.-2424   	; 0x5ce <OS_Abort>
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
     f46:	fc 01       	movw	r30, r24
     f48:	e4 5e       	subi	r30, 0xE4	; 228
     f4a:	fe 4f       	sbci	r31, 0xFE	; 254
     f4c:	80 81       	ld	r24, Z
     f4e:	91 81       	ldd	r25, Z+1	; 0x01
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	29 e2       	ldi	r18, 0x29	; 41
     f54:	28 9f       	mul	r18, r24
     f56:	f0 01       	movw	r30, r0
     f58:	29 9f       	mul	r18, r25
     f5a:	f0 0d       	add	r31, r0
     f5c:	11 24       	eor	r1, r1
     f5e:	ee 5f       	subi	r30, 0xFE	; 254
     f60:	fd 4f       	sbci	r31, 0xFD	; 253
     f62:	c4 a1       	ldd	r28, Z+36	; 0x24
     f64:	d5 a1       	ldd	r29, Z+37	; 0x25
     f66:	21 97       	sbiw	r28, 0x01	; 1
     f68:	0a f4       	brpl	.+2      	; 0xf6c <kernel_async_send+0xcc>
     f6a:	ce c0       	rjmp	.+412    	; 0x1108 <kernel_async_send+0x268>
			ChannelArray[Cp->senderChannel - 1].receivers[l]->state = READY;
     f6c:	19 e2       	ldi	r17, 0x29	; 41
     f6e:	01 e0       	ldi	r16, 0x01	; 1
     f70:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <Cp>
     f74:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <Cp+0x1>
     f78:	c9 01       	movw	r24, r18
     f7a:	84 5e       	subi	r24, 0xE4	; 228
     f7c:	9e 4f       	sbci	r25, 0xFE	; 254
     f7e:	dc 01       	movw	r26, r24
     f80:	4d 91       	ld	r20, X+
     f82:	5c 91       	ld	r21, X
     f84:	41 50       	subi	r20, 0x01	; 1
     f86:	51 09       	sbc	r21, r1
     f88:	fe 01       	movw	r30, r28
     f8a:	32 96       	adiw	r30, 0x02	; 2
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	14 9f       	mul	r17, r20
     f92:	d0 01       	movw	r26, r0
     f94:	15 9f       	mul	r17, r21
     f96:	b0 0d       	add	r27, r0
     f98:	11 24       	eor	r1, r1
     f9a:	ae 0f       	add	r26, r30
     f9c:	bf 1f       	adc	r27, r31
     f9e:	ae 5f       	subi	r26, 0xFE	; 254
     fa0:	bd 4f       	sbci	r27, 0xFD	; 253
     fa2:	0d 90       	ld	r0, X+
     fa4:	bc 91       	ld	r27, X
     fa6:	a0 2d       	mov	r26, r0
     fa8:	ac 5f       	subi	r26, 0xFC	; 252
     faa:	be 4f       	sbci	r27, 0xFE	; 254
     fac:	0c 93       	st	X, r16
			ChannelArray[Cp->senderChannel - 1].receivers[l]->val = Cp->val;
     fae:	dc 01       	movw	r26, r24
     fb0:	4d 91       	ld	r20, X+
     fb2:	5c 91       	ld	r21, X
     fb4:	41 50       	subi	r20, 0x01	; 1
     fb6:	51 09       	sbc	r21, r1
     fb8:	14 9f       	mul	r17, r20
     fba:	d0 01       	movw	r26, r0
     fbc:	15 9f       	mul	r17, r21
     fbe:	b0 0d       	add	r27, r0
     fc0:	11 24       	eor	r1, r1
     fc2:	ae 0f       	add	r26, r30
     fc4:	bf 1f       	adc	r27, r31
     fc6:	ae 5f       	subi	r26, 0xFE	; 254
     fc8:	bd 4f       	sbci	r27, 0xFD	; 253
     fca:	6d 91       	ld	r22, X+
     fcc:	7c 91       	ld	r23, X
     fce:	a9 01       	movw	r20, r18
     fd0:	40 5e       	subi	r20, 0xE0	; 224
     fd2:	5e 4f       	sbci	r21, 0xFE	; 254
     fd4:	da 01       	movw	r26, r20
     fd6:	4d 91       	ld	r20, X+
     fd8:	5c 91       	ld	r21, X
     fda:	db 01       	movw	r26, r22
     fdc:	a0 5e       	subi	r26, 0xE0	; 224
     fde:	be 4f       	sbci	r27, 0xFE	; 254
     fe0:	4d 93       	st	X+, r20
     fe2:	5c 93       	st	X, r21

			if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == SYSTEM) {
     fe4:	dc 01       	movw	r26, r24
     fe6:	4d 91       	ld	r20, X+
     fe8:	5c 91       	ld	r21, X
     fea:	11 97       	sbiw	r26, 0x01	; 1
     fec:	41 50       	subi	r20, 0x01	; 1
     fee:	51 09       	sbc	r21, r1
     ff0:	14 9f       	mul	r17, r20
     ff2:	c0 01       	movw	r24, r0
     ff4:	15 9f       	mul	r17, r21
     ff6:	90 0d       	add	r25, r0
     ff8:	11 24       	eor	r1, r1
     ffa:	e8 0f       	add	r30, r24
     ffc:	f9 1f       	adc	r31, r25
     ffe:	ee 5f       	subi	r30, 0xFE	; 254
    1000:	fd 4f       	sbci	r31, 0xFD	; 253
    1002:	01 90       	ld	r0, Z+
    1004:	f0 81       	ld	r31, Z
    1006:	e0 2d       	mov	r30, r0
    1008:	eb 5f       	subi	r30, 0xFB	; 251
    100a:	fe 4f       	sbci	r31, 0xFE	; 254
    100c:	80 81       	ld	r24, Z
    100e:	91 81       	ldd	r25, Z+1	; 0x01
    1010:	03 97       	sbiw	r24, 0x03	; 3
    1012:	c1 f4       	brne	.+48     	; 0x1044 <kernel_async_send+0x1a4>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &SysQueue, &SysCount);
    1014:	fd 01       	movw	r30, r26
    1016:	40 81       	ld	r20, Z
    1018:	51 81       	ldd	r21, Z+1	; 0x01
    101a:	ce 01       	movw	r24, r28
    101c:	02 96       	adiw	r24, 0x02	; 2
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	41 50       	subi	r20, 0x01	; 1
    1024:	51 09       	sbc	r21, r1
    1026:	14 9f       	mul	r17, r20
    1028:	90 01       	movw	r18, r0
    102a:	15 9f       	mul	r17, r21
    102c:	30 0d       	add	r19, r0
    102e:	11 24       	eor	r1, r1
    1030:	82 0f       	add	r24, r18
    1032:	93 1f       	adc	r25, r19
    1034:	46 e9       	ldi	r20, 0x96	; 150
    1036:	54 e0       	ldi	r21, 0x04	; 4
    1038:	62 ec       	ldi	r22, 0xC2	; 194
    103a:	76 e1       	ldi	r23, 0x16	; 22
    103c:	8e 5f       	subi	r24, 0xFE	; 254
    103e:	9d 4f       	sbci	r25, 0xFD	; 253
    1040:	87 d1       	rcall	.+782    	; 0x1350 <enqueue>
    1042:	36 c0       	rjmp	.+108    	; 0x10b0 <kernel_async_send+0x210>
				} else if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == RR) {
    1044:	f9 01       	movw	r30, r18
    1046:	e4 5e       	subi	r30, 0xE4	; 228
    1048:	fe 4f       	sbci	r31, 0xFE	; 254
    104a:	40 81       	ld	r20, Z
    104c:	51 81       	ldd	r21, Z+1	; 0x01
    104e:	41 50       	subi	r20, 0x01	; 1
    1050:	51 09       	sbc	r21, r1
    1052:	fe 01       	movw	r30, r28
    1054:	32 96       	adiw	r30, 0x02	; 2
    1056:	ee 0f       	add	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	14 9f       	mul	r17, r20
    105c:	c0 01       	movw	r24, r0
    105e:	15 9f       	mul	r17, r21
    1060:	90 0d       	add	r25, r0
    1062:	11 24       	eor	r1, r1
    1064:	e8 0f       	add	r30, r24
    1066:	f9 1f       	adc	r31, r25
    1068:	ee 5f       	subi	r30, 0xFE	; 254
    106a:	fd 4f       	sbci	r31, 0xFD	; 253
    106c:	01 90       	ld	r0, Z+
    106e:	f0 81       	ld	r31, Z
    1070:	e0 2d       	mov	r30, r0
    1072:	eb 5f       	subi	r30, 0xFB	; 251
    1074:	fe 4f       	sbci	r31, 0xFE	; 254
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	c9 f4       	brne	.+50     	; 0x10b0 <kernel_async_send+0x210>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
    107e:	f9 01       	movw	r30, r18
    1080:	e4 5e       	subi	r30, 0xE4	; 228
    1082:	fe 4f       	sbci	r31, 0xFE	; 254
    1084:	40 81       	ld	r20, Z
    1086:	51 81       	ldd	r21, Z+1	; 0x01
    1088:	ce 01       	movw	r24, r28
    108a:	02 96       	adiw	r24, 0x02	; 2
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	41 50       	subi	r20, 0x01	; 1
    1092:	51 09       	sbc	r21, r1
    1094:	14 9f       	mul	r17, r20
    1096:	90 01       	movw	r18, r0
    1098:	15 9f       	mul	r17, r21
    109a:	30 0d       	add	r19, r0
    109c:	11 24       	eor	r1, r1
    109e:	82 0f       	add	r24, r18
    10a0:	93 1f       	adc	r25, r19
    10a2:	42 e9       	ldi	r20, 0x92	; 146
    10a4:	54 e0       	ldi	r21, 0x04	; 4
    10a6:	66 e0       	ldi	r22, 0x06	; 6
    10a8:	77 e1       	ldi	r23, 0x17	; 23
    10aa:	8e 5f       	subi	r24, 0xFE	; 254
    10ac:	9d 4f       	sbci	r25, 0xFD	; 253
    10ae:	50 d1       	rcall	.+672    	; 0x1350 <enqueue>
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
    10b0:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <Cp>
    10b4:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <Cp+0x1>
    10b8:	a4 5e       	subi	r26, 0xE4	; 228
    10ba:	be 4f       	sbci	r27, 0xFE	; 254
    10bc:	2d 91       	ld	r18, X+
    10be:	3c 91       	ld	r19, X
    10c0:	11 97       	sbiw	r26, 0x01	; 1
    10c2:	21 50       	subi	r18, 0x01	; 1
    10c4:	31 09       	sbc	r19, r1
    10c6:	fe 01       	movw	r30, r28
    10c8:	32 96       	adiw	r30, 0x02	; 2
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	12 9f       	mul	r17, r18
    10d0:	c0 01       	movw	r24, r0
    10d2:	13 9f       	mul	r17, r19
    10d4:	90 0d       	add	r25, r0
    10d6:	11 24       	eor	r1, r1
    10d8:	e8 0f       	add	r30, r24
    10da:	f9 1f       	adc	r31, r25
    10dc:	ee 5f       	subi	r30, 0xFE	; 254
    10de:	fd 4f       	sbci	r31, 0xFD	; 253
    10e0:	11 82       	std	Z+1, r1	; 0x01
    10e2:	10 82       	st	Z, r1
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
    10e4:	8d 91       	ld	r24, X+
    10e6:	9c 91       	ld	r25, X
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	18 9f       	mul	r17, r24
    10ec:	f0 01       	movw	r30, r0
    10ee:	19 9f       	mul	r17, r25
    10f0:	f0 0d       	add	r31, r0
    10f2:	11 24       	eor	r1, r1
    10f4:	ee 5f       	subi	r30, 0xFE	; 254
    10f6:	fd 4f       	sbci	r31, 0xFD	; 253
    10f8:	84 a1       	ldd	r24, Z+36	; 0x24
    10fa:	95 a1       	ldd	r25, Z+37	; 0x25
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	95 a3       	std	Z+37, r25	; 0x25
    1100:	84 a3       	std	Z+36, r24	; 0x24
		else OS_Abort(); // cant have more than 1 sender
		return; // return without blocking
	} else { //receivers are waiting
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(); // cant have more than 1 sender
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
    1102:	21 97       	sbiw	r28, 0x01	; 1
    1104:	0a f0       	brmi	.+2      	; 0x1108 <kernel_async_send+0x268>
    1106:	34 cf       	rjmp	.-408    	; 0xf70 <kernel_async_send+0xd0>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
		}
		ChannelArray[Cp->senderChannel - 1].val = NULL;
    1108:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
    110c:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
    1110:	e4 5e       	subi	r30, 0xE4	; 228
    1112:	fe 4f       	sbci	r31, 0xFE	; 254
    1114:	80 81       	ld	r24, Z
    1116:	91 81       	ldd	r25, Z+1	; 0x01
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	29 e2       	ldi	r18, 0x29	; 41
    111c:	28 9f       	mul	r18, r24
    111e:	f0 01       	movw	r30, r0
    1120:	29 9f       	mul	r18, r25
    1122:	f0 0d       	add	r31, r0
    1124:	11 24       	eor	r1, r1
    1126:	ee 5f       	subi	r30, 0xFE	; 254
    1128:	fd 4f       	sbci	r31, 0xFD	; 253
    112a:	10 a6       	std	Z+40, r1	; 0x28
    112c:	17 a2       	std	Z+39, r1	; 0x27
	}
}
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	08 95       	ret

00001138 <OS_Start>:
}

/**
  * This function starts the RTOS after creating a_main
  */
void OS_Start() {   
    1138:	df 92       	push	r13
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
	if ( (! KernelActive) && (Tasks > 0)) {
    1146:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <KernelActive>
    114a:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <KernelActive+0x1>
    114e:	89 2b       	or	r24, r25
    1150:	09 f0       	breq	.+2      	; 0x1154 <OS_Start+0x1c>
    1152:	e2 c0       	rjmp	.+452    	; 0x1318 <OS_Start+0x1e0>
    1154:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <Tasks>
    1158:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <Tasks+0x1>
    115c:	89 2b       	or	r24, r25
    115e:	09 f4       	brne	.+2      	; 0x1162 <OS_Start+0x2a>
    1160:	db c0       	rjmp	.+438    	; 0x1318 <OS_Start+0x1e0>
		Disable_Interrupt();
    1162:	f8 94       	cli

		KernelActive = 1;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <KernelActive+0x1>
    116c:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <KernelActive>
  * corresponding kernel function on its behalf.
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */
    1170:	9f d8       	rcall	.-3778   	; 0x2b0 <Dispatch>
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
			break;
		case NEXT:
			Cp->state = READY;
    1172:	dd 24       	eor	r13, r13
    1174:	d3 94       	inc	r13
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */

	while(1) {
		Cp->request = NONE; /* clear its request */
    1176:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
    117a:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
    117e:	df 01       	movw	r26, r30
    1180:	a5 5f       	subi	r26, 0xF5	; 245
    1182:	be 4f       	sbci	r27, 0xFE	; 254
    1184:	1c 92       	st	X, r1

		/* activate this newly selected task */
		CurrentSp = Cp->sp;
    1186:	82 81       	ldd	r24, Z+2	; 0x02
    1188:	93 81       	ldd	r25, Z+3	; 0x03
    118a:	90 93 e3 16 	sts	0x16E3, r25	; 0x8016e3 <CurrentSp+0x1>
    118e:	80 93 e2 16 	sts	0x16E2, r24	; 0x8016e2 <CurrentSp>

		Exit_Kernel();    /* or CSwitch() */
    1192:	0e 94 9d 00 	call	0x13a	; 0x13a <CSwitch>

		/* if this task makes a system call, it will return to here! */

		/* save the Cp's stack pointer */
		Cp->sp = CurrentSp;
    1196:	c0 91 a0 04 	lds	r28, 0x04A0	; 0x8004a0 <Cp>
    119a:	d0 91 a1 04 	lds	r29, 0x04A1	; 0x8004a1 <Cp+0x1>
    119e:	80 91 e2 16 	lds	r24, 0x16E2	; 0x8016e2 <CurrentSp>
    11a2:	90 91 e3 16 	lds	r25, 0x16E3	; 0x8016e3 <CurrentSp+0x1>
    11a6:	9b 83       	std	Y+3, r25	; 0x03
    11a8:	8a 83       	std	Y+2, r24	; 0x02

		switch(Cp->request){
    11aa:	fe 01       	movw	r30, r28
    11ac:	e5 5f       	subi	r30, 0xF5	; 245
    11ae:	fe 4f       	sbci	r31, 0xFE	; 254
    11b0:	e0 81       	ld	r30, Z
    11b2:	8e 2f       	mov	r24, r30
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	fc 01       	movw	r30, r24
    11b8:	31 97       	sbiw	r30, 0x01	; 1
    11ba:	e9 30       	cpi	r30, 0x09	; 9
    11bc:	f1 05       	cpc	r31, r1
    11be:	d8 f6       	brcc	.-74     	; 0x1176 <OS_Start+0x3e>
    11c0:	88 27       	eor	r24, r24
    11c2:	ee 58       	subi	r30, 0x8E	; 142
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	8f 4f       	sbci	r24, 0xFF	; 255
    11c8:	8c c1       	rjmp	.+792    	; 0x14e2 <__tablejump2__>
		case CREATE:
			Cp->response = Kernel_Create_Task( Cp->code, Cp->priority, Cp->arg, -1, -1, -1);
    11ca:	fe 01       	movw	r30, r28
    11cc:	e9 5f       	subi	r30, 0xF9	; 249
    11ce:	fe 4f       	sbci	r31, 0xFE	; 254
    11d0:	40 81       	ld	r20, Z
    11d2:	51 81       	ldd	r21, Z+1	; 0x01
    11d4:	32 97       	sbiw	r30, 0x02	; 2
    11d6:	60 81       	ld	r22, Z
    11d8:	71 81       	ldd	r23, Z+1	; 0x01
    11da:	34 96       	adiw	r30, 0x04	; 4
    11dc:	80 81       	ld	r24, Z
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	ee 24       	eor	r14, r14
    11e2:	ea 94       	dec	r14
    11e4:	fe 2c       	mov	r15, r14
    11e6:	0f ef       	ldi	r16, 0xFF	; 255
    11e8:	1f ef       	ldi	r17, 0xFF	; 255
    11ea:	2f ef       	ldi	r18, 0xFF	; 255
    11ec:	3f ef       	ldi	r19, 0xFF	; 255
    11ee:	6f d9       	rcall	.-3362   	; 0x4ce <Kernel_Create_Task>
    11f0:	c4 5f       	subi	r28, 0xF4	; 244
    11f2:	de 4f       	sbci	r29, 0xFE	; 254
    11f4:	99 83       	std	Y+1, r25	; 0x01
    11f6:	88 83       	st	Y, r24
    11f8:	be cf       	rjmp	.-132    	; 0x1176 <OS_Start+0x3e>
			break;
		case CREATE_SYS:
			Cp->response = Kernel_Create_Task( Cp->code, SYSTEM, Cp->arg, -1, -1, -1);
    11fa:	fe 01       	movw	r30, r28
    11fc:	e9 5f       	subi	r30, 0xF9	; 249
    11fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1200:	40 81       	ld	r20, Z
    1202:	51 81       	ldd	r21, Z+1	; 0x01
    1204:	32 96       	adiw	r30, 0x02	; 2
    1206:	80 81       	ld	r24, Z
    1208:	91 81       	ldd	r25, Z+1	; 0x01
    120a:	ee 24       	eor	r14, r14
    120c:	ea 94       	dec	r14
    120e:	fe 2c       	mov	r15, r14
    1210:	0f ef       	ldi	r16, 0xFF	; 255
    1212:	1f ef       	ldi	r17, 0xFF	; 255
    1214:	2f ef       	ldi	r18, 0xFF	; 255
    1216:	3f ef       	ldi	r19, 0xFF	; 255
    1218:	63 e0       	ldi	r22, 0x03	; 3
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	58 d9       	rcall	.-3408   	; 0x4ce <Kernel_Create_Task>
    121e:	c4 5f       	subi	r28, 0xF4	; 244
    1220:	de 4f       	sbci	r29, 0xFE	; 254
    1222:	99 83       	std	Y+1, r25	; 0x01
    1224:	88 83       	st	Y, r24
    1226:	a7 cf       	rjmp	.-178    	; 0x1176 <OS_Start+0x3e>
			break;
		case CREATE_PERIODIC:
			Cp->response = Kernel_Create_Task( Cp->code, PERIODIC, Cp->arg, Cp->offset, Cp->wcet, Cp->period);
    1228:	fe 01       	movw	r30, r28
    122a:	e0 5f       	subi	r30, 0xF0	; 240
    122c:	fe 4f       	sbci	r31, 0xFE	; 254
    122e:	e0 80       	ld	r14, Z
    1230:	f1 80       	ldd	r15, Z+1	; 0x01
    1232:	32 96       	adiw	r30, 0x02	; 2
    1234:	00 81       	ld	r16, Z
    1236:	11 81       	ldd	r17, Z+1	; 0x01
    1238:	32 96       	adiw	r30, 0x02	; 2
    123a:	20 81       	ld	r18, Z
    123c:	31 81       	ldd	r19, Z+1	; 0x01
    123e:	3d 97       	sbiw	r30, 0x0d	; 13
    1240:	40 81       	ld	r20, Z
    1242:	51 81       	ldd	r21, Z+1	; 0x01
    1244:	32 96       	adiw	r30, 0x02	; 2
    1246:	80 81       	ld	r24, Z
    1248:	91 81       	ldd	r25, Z+1	; 0x01
    124a:	62 e0       	ldi	r22, 0x02	; 2
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	3f d9       	rcall	.-3458   	; 0x4ce <Kernel_Create_Task>
    1250:	c4 5f       	subi	r28, 0xF4	; 244
    1252:	de 4f       	sbci	r29, 0xFE	; 254
    1254:	99 83       	std	Y+1, r25	; 0x01
    1256:	88 83       	st	Y, r24
    1258:	8e cf       	rjmp	.-228    	; 0x1176 <OS_Start+0x3e>
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
    125a:	fe 01       	movw	r30, r28
    125c:	e9 5f       	subi	r30, 0xF9	; 249
    125e:	fe 4f       	sbci	r31, 0xFE	; 254
    1260:	40 81       	ld	r20, Z
    1262:	51 81       	ldd	r21, Z+1	; 0x01
    1264:	32 96       	adiw	r30, 0x02	; 2
    1266:	80 81       	ld	r24, Z
    1268:	91 81       	ldd	r25, Z+1	; 0x01
    126a:	ee 24       	eor	r14, r14
    126c:	ea 94       	dec	r14
    126e:	fe 2c       	mov	r15, r14
    1270:	0f ef       	ldi	r16, 0xFF	; 255
    1272:	1f ef       	ldi	r17, 0xFF	; 255
    1274:	2f ef       	ldi	r18, 0xFF	; 255
    1276:	3f ef       	ldi	r19, 0xFF	; 255
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	28 d9       	rcall	.-3504   	; 0x4ce <Kernel_Create_Task>
    127e:	c4 5f       	subi	r28, 0xF4	; 244
    1280:	de 4f       	sbci	r29, 0xFE	; 254
    1282:	99 83       	std	Y+1, r25	; 0x01
    1284:	88 83       	st	Y, r24
    1286:	77 cf       	rjmp	.-274    	; 0x1176 <OS_Start+0x3e>
			break;
		case NEXT:
			Cp->state = READY;
    1288:	fe 01       	movw	r30, r28
    128a:	ec 5f       	subi	r30, 0xFC	; 252
    128c:	fe 4f       	sbci	r31, 0xFE	; 254
    128e:	d0 82       	st	Z, r13
			if (Cp->priority == SYSTEM) {
    1290:	31 96       	adiw	r30, 0x01	; 1
    1292:	80 81       	ld	r24, Z
    1294:	91 81       	ldd	r25, Z+1	; 0x01
    1296:	03 97       	sbiw	r24, 0x03	; 3
    1298:	41 f4       	brne	.+16     	; 0x12aa <OS_Start+0x172>
				enqueue(&Cp, &SysQueue, &SysCount);
    129a:	46 e9       	ldi	r20, 0x96	; 150
    129c:	54 e0       	ldi	r21, 0x04	; 4
    129e:	62 ec       	ldi	r22, 0xC2	; 194
    12a0:	76 e1       	ldi	r23, 0x16	; 22
    12a2:	80 ea       	ldi	r24, 0xA0	; 160
    12a4:	94 e0       	ldi	r25, 0x04	; 4
    12a6:	54 d0       	rcall	.+168    	; 0x1350 <enqueue>
    12a8:	1c c0       	rjmp	.+56     	; 0x12e2 <OS_Start+0x1aa>
			} else if (Cp->priority == PERIODIC) {
    12aa:	fe 01       	movw	r30, r28
    12ac:	eb 5f       	subi	r30, 0xFB	; 251
    12ae:	fe 4f       	sbci	r31, 0xFE	; 254
    12b0:	80 81       	ld	r24, Z
    12b2:	91 81       	ldd	r25, Z+1	; 0x01
    12b4:	02 97       	sbiw	r24, 0x02	; 2
    12b6:	41 f4       	brne	.+16     	; 0x12c8 <OS_Start+0x190>
				enqueuePeriodic(&Cp, &PeriodicQueue, &PeriodicCount);
    12b8:	44 e9       	ldi	r20, 0x94	; 148
    12ba:	54 e0       	ldi	r21, 0x04	; 4
    12bc:	64 ee       	ldi	r22, 0xE4	; 228
    12be:	76 e1       	ldi	r23, 0x16	; 22
    12c0:	80 ea       	ldi	r24, 0xA0	; 160
    12c2:	94 e0       	ldi	r25, 0x04	; 4
    12c4:	97 d0       	rcall	.+302    	; 0x13f4 <enqueuePeriodic>
    12c6:	0d c0       	rjmp	.+26     	; 0x12e2 <OS_Start+0x1aa>
			} else if (Cp->priority == RR) {
    12c8:	cb 5f       	subi	r28, 0xFB	; 251
    12ca:	de 4f       	sbci	r29, 0xFE	; 254
    12cc:	88 81       	ld	r24, Y
    12ce:	99 81       	ldd	r25, Y+1	; 0x01
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	39 f4       	brne	.+14     	; 0x12e2 <OS_Start+0x1aa>
				enqueue(&Cp, &RRQueue, &RRCount);
    12d4:	42 e9       	ldi	r20, 0x92	; 146
    12d6:	54 e0       	ldi	r21, 0x04	; 4
    12d8:	66 e0       	ldi	r22, 0x06	; 6
    12da:	77 e1       	ldi	r23, 0x17	; 23
    12dc:	80 ea       	ldi	r24, 0xA0	; 160
    12de:	94 e0       	ldi	r25, 0x04	; 4
    12e0:	37 d0       	rcall	.+110    	; 0x1350 <enqueue>
			}
			Dispatch();
    12e2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Dispatch>
    12e6:	47 cf       	rjmp	.-370    	; 0x1176 <OS_Start+0x3e>
			break;
		case NONE:
			break;
		case SEND:
			kernel_send();
    12e8:	80 db       	rcall	.-2304   	; 0x9ea <kernel_send>
    12ea:	45 cf       	rjmp	.-374    	; 0x1176 <OS_Start+0x3e>
			break;
		case ASYNC_SEND:
			kernel_async_send();
    12ec:	d9 dd       	rcall	.-1102   	; 0xea0 <kernel_async_send>
    12ee:	43 cf       	rjmp	.-378    	; 0x1176 <OS_Start+0x3e>
			break;
		case RECEIVE:
			kernel_receive();
    12f0:	df dc       	rcall	.-1602   	; 0xcb0 <kernel_receive>
    12f2:	41 cf       	rjmp	.-382    	; 0x1176 <OS_Start+0x3e>

/**
  *  Terminate a task
  */
static void Kernel_Terminate_Task() {
	Cp->state = DEAD;
    12f4:	fe 01       	movw	r30, r28
    12f6:	ec 5f       	subi	r30, 0xFC	; 252
    12f8:	fe 4f       	sbci	r31, 0xFE	; 254
    12fa:	10 82       	st	Z, r1
	Cp->processID = 0;
    12fc:	19 82       	std	Y+1, r1	; 0x01
    12fe:	18 82       	st	Y, r1
	Tasks--;
    1300:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <Tasks>
    1304:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <Tasks+0x1>
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <Tasks+0x1>
    130e:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <Tasks>
			kernel_receive();
			break;
		case TERMINATE:
			/* deallocate all resources used by this task */
			Kernel_Terminate_Task();
			Dispatch();
    1312:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Dispatch>
    1316:	2f cf       	rjmp	.-418    	; 0x1176 <OS_Start+0x3e>

		KernelActive = 1;
		Next_Kernel_Request();
		/* SHOULD NEVER GET HERE!!! */
	}
}
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	ff 90       	pop	r15
    1322:	ef 90       	pop	r14
    1324:	df 90       	pop	r13
    1326:	08 95       	ret

00001328 <main>:
/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	//pin 25
	DDRA |= (1<<PA3);
    1328:	0b 9a       	sbi	0x01, 3	; 1
	PORTA &= ~(1<<PA3);
    132a:	13 98       	cbi	0x02, 3	; 2

	//pin 26
	DDRA |= (1<<PA4);
    132c:	0c 9a       	sbi	0x01, 4	; 1
	PORTA &= ~(1<<PA4);
    132e:	14 98       	cbi	0x02, 4	; 2

	//pin 27
	DDRA |= (1<<PA5);
    1330:	0d 9a       	sbi	0x01, 5	; 1
	PORTA &= ~(1<<PA5);
    1332:	15 98       	cbi	0x02, 5	; 2

	//pin 28
	DDRA |= (1<<PA6);
    1334:	0e 9a       	sbi	0x01, 6	; 1
	PORTA &= ~(1<<PA6);
    1336:	16 98       	cbi	0x02, 6	; 2

	//pin 29
	DDRA |= (1<<PA7);
    1338:	0f 9a       	sbi	0x01, 7	; 1
	PORTA &= ~(1<<PA7);
    133a:	17 98       	cbi	0x02, 7	; 2

	setup();
    133c:	76 da       	rcall	.-2836   	; 0x82a <setup>
	OS_Init();
    133e:	0a d9       	rcall	.-3564   	; 0x554 <OS_Init>
	Task_Create_Idle();
    1340:	e8 d9       	rcall	.-3120   	; 0x712 <Task_Create_Idle>
	Task_Create_System(a_main, 1);
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	80 e5       	ldi	r24, 0x50	; 80
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	bb d9       	rcall	.-3210   	; 0x6c2 <Task_Create_System>
	OS_Start();
    134c:	f5 ce       	rjmp	.-534    	; 0x1138 <OS_Start>
    134e:	08 95       	ret

00001350 <enqueue>:
}

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1356:	28 81       	ld	r18, Y
    1358:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    135a:	2f 30       	cpi	r18, 0x0F	; 15
    135c:	31 05       	cpc	r19, r1
    135e:	e9 f0       	breq	.+58     	; 0x139a <enqueue+0x4a>
        return NULL;
    }

    int i = (*QCount) - 1;
    1360:	e8 81       	ld	r30, Y
    1362:	f9 81       	ldd	r31, Y+1	; 0x01
    1364:	9f 01       	movw	r18, r30
    1366:	21 50       	subi	r18, 0x01	; 1
    1368:	31 09       	sbc	r19, r1
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    136a:	62 f0       	brmi	.+24     	; 0x1384 <enqueue+0x34>
    136c:	ee 0f       	add	r30, r30
    136e:	ff 1f       	adc	r31, r31
    1370:	e6 0f       	add	r30, r22
    1372:	f7 1f       	adc	r31, r23
    1374:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    1376:	32 91       	ld	r19, -Z
    1378:	22 91       	ld	r18, -Z
    137a:	33 83       	std	Z+3, r19	; 0x03
    137c:	22 83       	std	Z+2, r18	; 0x02

    int i = (*QCount) - 1;
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    137e:	ea 17       	cp	r30, r26
    1380:	fb 07       	cpc	r31, r27
    1382:	c9 f7       	brne	.-14     	; 0x1376 <enqueue+0x26>
        i--;
        temp = Queue[i];
    }

    //Queue[i+1] = *p; //original code
	Queue[0] = *p;
    1384:	fc 01       	movw	r30, r24
    1386:	80 81       	ld	r24, Z
    1388:	91 81       	ldd	r25, Z+1	; 0x01
    138a:	fb 01       	movw	r30, r22
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
    (*QCount)++;
    1390:	88 81       	ld	r24, Y
    1392:	99 81       	ldd	r25, Y+1	; 0x01
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	99 83       	std	Y+1, r25	; 0x01
    1398:	88 83       	st	Y, r24
}
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	08 95       	ret

000013a0 <dequeue>:

/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    13a0:	ac 01       	movw	r20, r24
    13a2:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    13a4:	8d 91       	ld	r24, X+
    13a6:	9c 91       	ld	r25, X
    13a8:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
    13aa:	89 2b       	or	r24, r25
    13ac:	01 f1       	breq	.+64     	; 0x13ee <dequeue+0x4e>
	   return NULL;
   }

   volatile PD *result = (Queue[(*QCount)-1]);
    13ae:	ed 91       	ld	r30, X+
    13b0:	fc 91       	ld	r31, X
    13b2:	11 97       	sbiw	r26, 0x01	; 1
    13b4:	e1 50       	subi	r30, 0x01	; 1
    13b6:	f0 48       	sbci	r31, 0x80	; 128
    13b8:	ee 0f       	add	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	e4 0f       	add	r30, r20
    13be:	f5 1f       	adc	r31, r21
    13c0:	80 81       	ld	r24, Z
    13c2:	91 81       	ldd	r25, Z+1	; 0x01
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
    13c4:	2d 91       	ld	r18, X+
    13c6:	3c 91       	ld	r19, X
    13c8:	11 97       	sbiw	r26, 0x01	; 1
    13ca:	f9 01       	movw	r30, r18
    13cc:	e1 50       	subi	r30, 0x01	; 1
    13ce:	f0 48       	sbci	r31, 0x80	; 128
    13d0:	ee 0f       	add	r30, r30
    13d2:	ff 1f       	adc	r31, r31
    13d4:	e4 0f       	add	r30, r20
    13d6:	f5 1f       	adc	r31, r21
    13d8:	11 82       	std	Z+1, r1	; 0x01
    13da:	10 82       	st	Z, r1
   (*QCount)--;
    13dc:	2d 91       	ld	r18, X+
    13de:	3c 91       	ld	r19, X
    13e0:	11 97       	sbiw	r26, 0x01	; 1
    13e2:	21 50       	subi	r18, 0x01	; 1
    13e4:	31 09       	sbc	r19, r1
    13e6:	11 96       	adiw	r26, 0x01	; 1
    13e8:	3c 93       	st	X, r19
    13ea:	2e 93       	st	-X, r18

   return result;
    13ec:	08 95       	ret
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
	   return NULL;
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	90 e0       	ldi	r25, 0x00	; 0
   volatile PD *result = (Queue[(*QCount)-1]);
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
   (*QCount)--;

   return result;
}
    13f2:	08 95       	ret

000013f4 <enqueuePeriodic>:

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    13f4:	cf 92       	push	r12
    13f6:	df 92       	push	r13
    13f8:	ef 92       	push	r14
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1406:	ea 01       	movw	r28, r20
    1408:	28 81       	ld	r18, Y
    140a:	39 81       	ldd	r19, Y+1	; 0x01

   return result;
}

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
	if(isFull(QCount)) {
    140c:	2f 30       	cpi	r18, 0x0F	; 15
    140e:	31 05       	cpc	r19, r1
    1410:	09 f4       	brne	.+2      	; 0x1414 <enqueuePeriodic+0x20>
    1412:	4a c0       	rjmp	.+148    	; 0x14a8 <enqueuePeriodic+0xb4>
		return;
	}

	int i = (*QCount) - 1;
    1414:	28 81       	ld	r18, Y
    1416:	39 81       	ldd	r19, Y+1	; 0x01
    1418:	21 50       	subi	r18, 0x01	; 1
    141a:	31 09       	sbc	r19, r1

	volatile PD *new = *p;
    141c:	fc 01       	movw	r30, r24
    141e:	00 81       	ld	r16, Z
    1420:	11 81       	ldd	r17, Z+1	; 0x01

	volatile PD *temp = Queue[i];
    1422:	f9 01       	movw	r30, r18
    1424:	ee 0f       	add	r30, r30
    1426:	ff 1f       	adc	r31, r31
    1428:	db 01       	movw	r26, r22
    142a:	ae 0f       	add	r26, r30
    142c:	bf 1f       	adc	r27, r31
    142e:	4d 91       	ld	r20, X+
    1430:	5c 91       	ld	r21, X

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    1432:	33 23       	and	r19, r19
    1434:	3c f1       	brlt	.+78     	; 0x1484 <enqueuePeriodic+0x90>
    1436:	d8 01       	movw	r26, r16
    1438:	aa 5e       	subi	r26, 0xEA	; 234
    143a:	be 4f       	sbci	r27, 0xFE	; 254
    143c:	ed 90       	ld	r14, X+
    143e:	fc 90       	ld	r15, X
    1440:	da 01       	movw	r26, r20
    1442:	aa 5e       	subi	r26, 0xEA	; 234
    1444:	be 4f       	sbci	r27, 0xFE	; 254
    1446:	4d 91       	ld	r20, X+
    1448:	5c 91       	ld	r21, X
    144a:	e4 16       	cp	r14, r20
    144c:	f5 06       	cpc	r15, r21
    144e:	d4 f0       	brlt	.+52     	; 0x1484 <enqueuePeriodic+0x90>
    1450:	e6 0f       	add	r30, r22
    1452:	f7 1f       	adc	r31, r23
    1454:	0a 5e       	subi	r16, 0xEA	; 234
    1456:	1e 4f       	sbci	r17, 0xFE	; 254
		Queue[i+1] = Queue[i];
    1458:	a0 81       	ld	r26, Z
    145a:	b1 81       	ldd	r27, Z+1	; 0x01
    145c:	b3 83       	std	Z+3, r27	; 0x03
    145e:	a2 83       	std	Z+2, r26	; 0x02
		i--;
    1460:	21 50       	subi	r18, 0x01	; 1
    1462:	31 09       	sbc	r19, r1
		temp = Queue[i];
    1464:	b2 91       	ld	r27, -Z
    1466:	a2 91       	ld	r26, -Z

	volatile PD *new = *p;

	volatile PD *temp = Queue[i];

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    1468:	2f 3f       	cpi	r18, 0xFF	; 255
    146a:	4f ef       	ldi	r20, 0xFF	; 255
    146c:	34 07       	cpc	r19, r20
    146e:	51 f0       	breq	.+20     	; 0x1484 <enqueuePeriodic+0x90>
    1470:	e8 01       	movw	r28, r16
    1472:	e8 80       	ld	r14, Y
    1474:	f9 80       	ldd	r15, Y+1	; 0x01
    1476:	aa 5e       	subi	r26, 0xEA	; 234
    1478:	be 4f       	sbci	r27, 0xFE	; 254
    147a:	4d 91       	ld	r20, X+
    147c:	5c 91       	ld	r21, X
    147e:	e4 16       	cp	r14, r20
    1480:	f5 06       	cpc	r15, r21
    1482:	54 f7       	brge	.-44     	; 0x1458 <enqueuePeriodic+0x64>
		Queue[i+1] = Queue[i];
		i--;
		temp = Queue[i];
	}

	Queue[i+1] = *p;
    1484:	fc 01       	movw	r30, r24
    1486:	80 81       	ld	r24, Z
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	2f 5f       	subi	r18, 0xFF	; 255
    148c:	3f 4f       	sbci	r19, 0xFF	; 255
    148e:	22 0f       	add	r18, r18
    1490:	33 1f       	adc	r19, r19
    1492:	fb 01       	movw	r30, r22
    1494:	e2 0f       	add	r30, r18
    1496:	f3 1f       	adc	r31, r19
    1498:	91 83       	std	Z+1, r25	; 0x01
    149a:	80 83       	st	Z, r24
	(*QCount)++;
    149c:	e6 01       	movw	r28, r12
    149e:	88 81       	ld	r24, Y
    14a0:	99 81       	ldd	r25, Y+1	; 0x01
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	99 83       	std	Y+1, r25	; 0x01
    14a6:	88 83       	st	Y, r24
}
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	ff 90       	pop	r15
    14b2:	ef 90       	pop	r14
    14b4:	df 90       	pop	r13
    14b6:	cf 90       	pop	r12
    14b8:	08 95       	ret

000014ba <peek>:

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    14ba:	fb 01       	movw	r30, r22
    14bc:	20 81       	ld	r18, Z
    14be:	31 81       	ldd	r19, Z+1	; 0x01
	Queue[i+1] = *p;
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
    14c0:	23 2b       	or	r18, r19
    14c2:	61 f0       	breq	.+24     	; 0x14dc <peek+0x22>
		return NULL;
	}
	volatile PD *result = (Queue[(*QCount)-1]);
    14c4:	20 81       	ld	r18, Z
    14c6:	31 81       	ldd	r19, Z+1	; 0x01
    14c8:	f9 01       	movw	r30, r18
    14ca:	e1 50       	subi	r30, 0x01	; 1
    14cc:	f0 48       	sbci	r31, 0x80	; 128
    14ce:	ee 0f       	add	r30, r30
    14d0:	ff 1f       	adc	r31, r31
    14d2:	e8 0f       	add	r30, r24
    14d4:	f9 1f       	adc	r31, r25
    14d6:	80 81       	ld	r24, Z
    14d8:	91 81       	ldd	r25, Z+1	; 0x01
	return result;
    14da:	08 95       	ret
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
		return NULL;
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
	}
	volatile PD *result = (Queue[(*QCount)-1]);
	return result;
    14e0:	08 95       	ret

000014e2 <__tablejump2__>:
    14e2:	ee 0f       	add	r30, r30
    14e4:	ff 1f       	adc	r31, r31
    14e6:	88 1f       	adc	r24, r24
    14e8:	8b bf       	out	0x3b, r24	; 59
    14ea:	07 90       	elpm	r0, Z+
    14ec:	f6 91       	elpm	r31, Z
    14ee:	e0 2d       	mov	r30, r0
    14f0:	19 94       	eijmp

000014f2 <_exit>:
    14f2:	f8 94       	cli

000014f4 <__stop_program>:
    14f4:	ff cf       	rjmp	.-2      	; 0x14f4 <__stop_program>
