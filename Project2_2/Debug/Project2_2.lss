
Project2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000122e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001524  00800200  00800200  0000122e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000122e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000012a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024fc  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001189  00000000  00000000  0000392c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ed5  00000000  00000000  00004ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  0000598c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009bb  00000000  00000000  00005dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000126a  00000000  00000000  00006787  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000079f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
       2:	00 00       	nop
       4:	8a c0       	rjmp	.+276    	; 0x11a <__bad_interrupt>
       6:	00 00       	nop
       8:	88 c0       	rjmp	.+272    	; 0x11a <__bad_interrupt>
       a:	00 00       	nop
       c:	86 c0       	rjmp	.+268    	; 0x11a <__bad_interrupt>
       e:	00 00       	nop
      10:	84 c0       	rjmp	.+264    	; 0x11a <__bad_interrupt>
      12:	00 00       	nop
      14:	82 c0       	rjmp	.+260    	; 0x11a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c0       	rjmp	.+256    	; 0x11a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7e c0       	rjmp	.+252    	; 0x11a <__bad_interrupt>
      1e:	00 00       	nop
      20:	7c c0       	rjmp	.+248    	; 0x11a <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c0       	rjmp	.+244    	; 0x11a <__bad_interrupt>
      26:	00 00       	nop
      28:	78 c0       	rjmp	.+240    	; 0x11a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c0       	rjmp	.+236    	; 0x11a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c0       	rjmp	.+232    	; 0x11a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c0       	rjmp	.+228    	; 0x11a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c0       	rjmp	.+224    	; 0x11a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c0       	rjmp	.+220    	; 0x11a <__bad_interrupt>
      3e:	00 00       	nop
      40:	6c c0       	rjmp	.+216    	; 0x11a <__bad_interrupt>
      42:	00 00       	nop
      44:	36 c4       	rjmp	.+2156   	; 0x8b2 <__vector_17>
      46:	00 00       	nop
      48:	68 c0       	rjmp	.+208    	; 0x11a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	66 c0       	rjmp	.+204    	; 0x11a <__bad_interrupt>
      4e:	00 00       	nop
      50:	64 c0       	rjmp	.+200    	; 0x11a <__bad_interrupt>
      52:	00 00       	nop
      54:	62 c0       	rjmp	.+196    	; 0x11a <__bad_interrupt>
      56:	00 00       	nop
      58:	60 c0       	rjmp	.+192    	; 0x11a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5e c0       	rjmp	.+188    	; 0x11a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c0       	rjmp	.+184    	; 0x11a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c0       	rjmp	.+180    	; 0x11a <__bad_interrupt>
      66:	00 00       	nop
      68:	58 c0       	rjmp	.+176    	; 0x11a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	56 c0       	rjmp	.+172    	; 0x11a <__bad_interrupt>
      6e:	00 00       	nop
      70:	54 c0       	rjmp	.+168    	; 0x11a <__bad_interrupt>
      72:	00 00       	nop
      74:	52 c0       	rjmp	.+164    	; 0x11a <__bad_interrupt>
      76:	00 00       	nop
      78:	50 c0       	rjmp	.+160    	; 0x11a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4e c0       	rjmp	.+156    	; 0x11a <__bad_interrupt>
      7e:	00 00       	nop
      80:	6a c4       	rjmp	.+2260   	; 0x956 <__vector_32>
      82:	00 00       	nop
      84:	4a c0       	rjmp	.+148    	; 0x11a <__bad_interrupt>
      86:	00 00       	nop
      88:	48 c0       	rjmp	.+144    	; 0x11a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	46 c0       	rjmp	.+140    	; 0x11a <__bad_interrupt>
      8e:	00 00       	nop
      90:	44 c0       	rjmp	.+136    	; 0x11a <__bad_interrupt>
      92:	00 00       	nop
      94:	42 c0       	rjmp	.+132    	; 0x11a <__bad_interrupt>
      96:	00 00       	nop
      98:	40 c0       	rjmp	.+128    	; 0x11a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3e c0       	rjmp	.+124    	; 0x11a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3c c0       	rjmp	.+120    	; 0x11a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3a c0       	rjmp	.+116    	; 0x11a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	38 c0       	rjmp	.+112    	; 0x11a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	36 c0       	rjmp	.+108    	; 0x11a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	34 c0       	rjmp	.+104    	; 0x11a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	32 c0       	rjmp	.+100    	; 0x11a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	30 c0       	rjmp	.+96     	; 0x11a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2e c0       	rjmp	.+92     	; 0x11a <__bad_interrupt>
      be:	00 00       	nop
      c0:	2c c0       	rjmp	.+88     	; 0x11a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2a c0       	rjmp	.+84     	; 0x11a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	28 c0       	rjmp	.+80     	; 0x11a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	26 c0       	rjmp	.+76     	; 0x11a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	24 c0       	rjmp	.+72     	; 0x11a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	22 c0       	rjmp	.+68     	; 0x11a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	20 c0       	rjmp	.+64     	; 0x11a <__bad_interrupt>
      da:	00 00       	nop
      dc:	1e c0       	rjmp	.+60     	; 0x11a <__bad_interrupt>
      de:	00 00       	nop
      e0:	1c c0       	rjmp	.+56     	; 0x11a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4b 07       	cpc	r20, r27
      e6:	63 07       	cpc	r22, r19
      e8:	93 07       	cpc	r25, r19
      ea:	7a 07       	cpc	r23, r26
      ec:	aa 07       	cpc	r26, r26
      ee:	dd 07       	cpc	r29, r29
      f0:	d9 07       	cpc	r29, r25
      f2:	db 07       	cpc	r29, r27

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d1 e2       	ldi	r29, 0x21	; 33
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0c bf       	out	0x3c, r16	; 60

00000104 <__do_clear_bss>:
     104:	27 e1       	ldi	r18, 0x17	; 23
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b2 e0       	ldi	r27, 0x02	; 2
     10a:	01 c0       	rjmp	.+2      	; 0x10e <.do_clear_bss_start>

0000010c <.do_clear_bss_loop>:
     10c:	1d 92       	st	X+, r1

0000010e <.do_clear_bss_start>:
     10e:	a4 32       	cpi	r26, 0x24	; 36
     110:	b2 07       	cpc	r27, r18
     112:	e1 f7       	brne	.-8      	; 0x10c <.do_clear_bss_loop>
     114:	6b d7       	rcall	.+3798   	; 0xfec <main>
     116:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <_exit>

0000011a <__bad_interrupt>:
     11a:	72 cf       	rjmp	.-284    	; 0x0 <__vectors>

0000011c <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     11c:	0f 92       	push	r0
     11e:	1f 92       	push	r1
     120:	2f 92       	push	r2
     122:	3f 92       	push	r3
     124:	4f 92       	push	r4
     126:	5f 92       	push	r5
     128:	6f 92       	push	r6
     12a:	7f 92       	push	r7
     12c:	8f 92       	push	r8
     12e:	9f 92       	push	r9
     130:	af 92       	push	r10
     132:	bf 92       	push	r11
     134:	cf 92       	push	r12
     136:	df 92       	push	r13
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	2f 93       	push	r18
     142:	3f 93       	push	r19
     144:	4f 93       	push	r20
     146:	5f 93       	push	r21
     148:	6f 93       	push	r22
     14a:	7f 93       	push	r23
     14c:	8f 93       	push	r24
     14e:	9f 93       	push	r25
     150:	af 93       	push	r26
     152:	bf 93       	push	r27
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	ef 93       	push	r30
     15a:	ff 93       	push	r31
     15c:	0f b7       	in	r16, 0x3f	; 63
     15e:	0f 93       	push	r16
     160:	fc b7       	in	r31, 0x3c	; 60
     162:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     164:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     166:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     168:	e0 93 02 17 	sts	0x1702, r30	; 0x801702 <KernelSp>
        sts  KernelSp+1, r31
     16c:	f0 93 03 17 	sts	0x1703, r31	; 0x801703 <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     170:	e0 91 e0 16 	lds	r30, 0x16E0	; 0x8016e0 <CurrentSp>
        lds  r31, CurrentSp+1
     174:	f0 91 e1 16 	lds	r31, 0x16E1	; 0x8016e1 <CurrentSp+0x1>
        out  SPL, r30
     178:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     17a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     17c:	ff 91       	pop	r31
     17e:	fc bf       	out	0x3c, r31	; 60
     180:	0f 91       	pop	r16
     182:	0f bf       	out	0x3f, r16	; 63
     184:	ff 91       	pop	r31
     186:	ef 91       	pop	r30
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	bf 91       	pop	r27
     18e:	af 91       	pop	r26
     190:	9f 91       	pop	r25
     192:	8f 91       	pop	r24
     194:	7f 91       	pop	r23
     196:	6f 91       	pop	r22
     198:	5f 91       	pop	r21
     19a:	4f 91       	pop	r20
     19c:	3f 91       	pop	r19
     19e:	2f 91       	pop	r18
     1a0:	1f 91       	pop	r17
     1a2:	0f 91       	pop	r16
     1a4:	ff 90       	pop	r15
     1a6:	ef 90       	pop	r14
     1a8:	df 90       	pop	r13
     1aa:	cf 90       	pop	r12
     1ac:	bf 90       	pop	r11
     1ae:	af 90       	pop	r10
     1b0:	9f 90       	pop	r9
     1b2:	8f 90       	pop	r8
     1b4:	7f 90       	pop	r7
     1b6:	6f 90       	pop	r6
     1b8:	5f 90       	pop	r5
     1ba:	4f 90       	pop	r4
     1bc:	3f 90       	pop	r3
     1be:	2f 90       	pop	r2
     1c0:	1f 90       	pop	r1
     1c2:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1c4:	18 95       	reti

000001c6 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1c6:	0f 92       	push	r0
     1c8:	1f 92       	push	r1
     1ca:	2f 92       	push	r2
     1cc:	3f 92       	push	r3
     1ce:	4f 92       	push	r4
     1d0:	5f 92       	push	r5
     1d2:	6f 92       	push	r6
     1d4:	7f 92       	push	r7
     1d6:	8f 92       	push	r8
     1d8:	9f 92       	push	r9
     1da:	af 92       	push	r10
     1dc:	bf 92       	push	r11
     1de:	cf 92       	push	r12
     1e0:	df 92       	push	r13
     1e2:	ef 92       	push	r14
     1e4:	ff 92       	push	r15
     1e6:	0f 93       	push	r16
     1e8:	1f 93       	push	r17
     1ea:	2f 93       	push	r18
     1ec:	3f 93       	push	r19
     1ee:	4f 93       	push	r20
     1f0:	5f 93       	push	r21
     1f2:	6f 93       	push	r22
     1f4:	7f 93       	push	r23
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
     1fa:	af 93       	push	r26
     1fc:	bf 93       	push	r27
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	ef 93       	push	r30
     204:	ff 93       	push	r31
     206:	0f b7       	in	r16, 0x3f	; 63
     208:	0f 93       	push	r16
     20a:	fc b7       	in	r31, 0x3c	; 60
     20c:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     20e:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     210:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     212:	e0 93 e0 16 	sts	0x16E0, r30	; 0x8016e0 <CurrentSp>
        sts  CurrentSp+1, r31
     216:	f0 93 e1 16 	sts	0x16E1, r31	; 0x8016e1 <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     21a:	e0 91 02 17 	lds	r30, 0x1702	; 0x801702 <KernelSp>
        lds  r31, KernelSp+1
     21e:	f0 91 03 17 	lds	r31, 0x1703	; 0x801703 <KernelSp+0x1>
        out  SPL, r30
     222:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     224:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     226:	ff 91       	pop	r31
     228:	fc bf       	out	0x3c, r31	; 60
     22a:	0f 91       	pop	r16
     22c:	0f bf       	out	0x3f, r16	; 63
     22e:	ff 91       	pop	r31
     230:	ef 91       	pop	r30
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	bf 91       	pop	r27
     238:	af 91       	pop	r26
     23a:	9f 91       	pop	r25
     23c:	8f 91       	pop	r24
     23e:	7f 91       	pop	r23
     240:	6f 91       	pop	r22
     242:	5f 91       	pop	r21
     244:	4f 91       	pop	r20
     246:	3f 91       	pop	r19
     248:	2f 91       	pop	r18
     24a:	1f 91       	pop	r17
     24c:	0f 91       	pop	r16
     24e:	ff 90       	pop	r15
     250:	ef 90       	pop	r14
     252:	df 90       	pop	r13
     254:	cf 90       	pop	r12
     256:	bf 90       	pop	r11
     258:	af 90       	pop	r10
     25a:	9f 90       	pop	r9
     25c:	8f 90       	pop	r8
     25e:	7f 90       	pop	r7
     260:	6f 90       	pop	r6
     262:	5f 90       	pop	r5
     264:	4f 90       	pop	r4
     266:	3f 90       	pop	r3
     268:	2f 90       	pop	r2
     26a:	1f 90       	pop	r1
     26c:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     26e:	08 95       	ret

00000270 <ASDF1>:
{
	for(;;){
		//pin 28
		PORTA |= (1<<PA6);
		PORTA &= ~(1<<PA6);
	}
     270:	13 9a       	sbi	0x02, 3	; 2
     272:	13 98       	cbi	0x02, 3	; 2
     274:	fd cf       	rjmp	.-6      	; 0x270 <ASDF1>

00000276 <ASDF2>:
     276:	14 9a       	sbi	0x02, 4	; 2
     278:	14 98       	cbi	0x02, 4	; 2
     27a:	fd cf       	rjmp	.-6      	; 0x276 <ASDF2>

0000027c <ASDF3>:
     27c:	15 9a       	sbi	0x02, 5	; 2
     27e:	15 98       	cbi	0x02, 5	; 2
     280:	fd cf       	rjmp	.-6      	; 0x27c <ASDF3>

00000282 <ASDF5>:
     282:	17 9a       	sbi	0x02, 7	; 2
     284:	17 98       	cbi	0x02, 7	; 2
     286:	fd cf       	rjmp	.-6      	; 0x282 <ASDF5>

00000288 <a_main>:
		PORTA &= ~(1<<PA7);
	}
}

void a_main()
{
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	1f 93       	push	r17
	
    // Initialize tasks
	//Task_Create(ASDF, SYSTEM, 0);
    Task_Create(ASDF1, PERIODIC, 0, 0, 2, 10);
     290:	0f 2e       	mov	r0, r31
     292:	fa e0       	ldi	r31, 0x0A	; 10
     294:	ef 2e       	mov	r14, r31
     296:	f1 2c       	mov	r15, r1
     298:	f0 2d       	mov	r31, r0
     29a:	02 e0       	ldi	r16, 0x02	; 2
     29c:	10 e0       	ldi	r17, 0x00	; 0
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	62 e0       	ldi	r22, 0x02	; 2
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	88 e3       	ldi	r24, 0x38	; 56
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	b5 d1       	rcall	.+874    	; 0x61a <Task_Create>
    Task_Create(ASDF2, PERIODIC, 0, 4, 1, 10);
     2b0:	01 e0       	ldi	r16, 0x01	; 1
     2b2:	10 e0       	ldi	r17, 0x00	; 0
     2b4:	24 e0       	ldi	r18, 0x04	; 4
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	40 e0       	ldi	r20, 0x00	; 0
     2ba:	50 e0       	ldi	r21, 0x00	; 0
     2bc:	62 e0       	ldi	r22, 0x02	; 2
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	8b e3       	ldi	r24, 0x3B	; 59
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	aa d1       	rcall	.+852    	; 0x61a <Task_Create>
	Task_Create(ASDF3, PERIODIC, 0, 8, 1, 10);
     2c6:	28 e0       	ldi	r18, 0x08	; 8
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	62 e0       	ldi	r22, 0x02	; 2
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	8e e3       	ldi	r24, 0x3E	; 62
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	a1 d1       	rcall	.+834    	; 0x61a <Task_Create>
	//Task_Create(ASDF4, PERIODIC, 0, -1, -1, -1);
	Task_Create(ASDF5, RR, 0, -1, -1, -1);
     2d8:	ee 24       	eor	r14, r14
     2da:	ea 94       	dec	r14
     2dc:	fe 2c       	mov	r15, r14
     2de:	0f ef       	ldi	r16, 0xFF	; 255
     2e0:	1f ef       	ldi	r17, 0xFF	; 255
     2e2:	2f ef       	ldi	r18, 0xFF	; 255
     2e4:	3f ef       	ldi	r19, 0xFF	; 255
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	61 e0       	ldi	r22, 0x01	; 1
     2ec:	70 e0       	ldi	r23, 0x00	; 0
     2ee:	81 e4       	ldi	r24, 0x41	; 65
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	93 d1       	rcall	.+806    	; 0x61a <Task_Create>

    // Kill the initialization task
    Task_Terminate();
     2f4:	56 d0       	rcall	.+172    	; 0x3a2 <Task_Terminate>
}
     2f6:	1f 91       	pop	r17
     2f8:	0f 91       	pop	r16
     2fa:	ff 90       	pop	r15
     2fc:	ef 90       	pop	r14
     2fe:	08 95       	ret

00000300 <idle>:
	if (Cp->priority == PERIODIC) OS_Abort(); // periodic tasks are not allowed to use csp 
	Cp->request = RECEIVE;
	Cp->receiverChannel = ch;
	Enter_Kernel();
	return Cp->val;
}
     300:	ff cf       	rjmp	.-2      	; 0x300 <idle>

00000302 <Dispatch>:
     302:	64 e9       	ldi	r22, 0x94	; 148
     304:	74 e0       	ldi	r23, 0x04	; 4
     306:	80 ec       	ldi	r24, 0xC0	; 192
     308:	96 e1       	ldi	r25, 0x16	; 22
     30a:	ac d6       	rcall	.+3416   	; 0x1064 <dequeue>
     30c:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <Cp+0x1>
     310:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <Cp>
     314:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <PeriodicCount>
     318:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <PeriodicCount+0x1>
     31c:	89 2b       	or	r24, r25
     31e:	d9 f0       	breq	.+54     	; 0x356 <Dispatch+0x54>
     320:	62 e9       	ldi	r22, 0x92	; 146
     322:	74 e0       	ldi	r23, 0x04	; 4
     324:	82 ee       	ldi	r24, 0xE2	; 226
     326:	96 e1       	ldi	r25, 0x16	; 22
     328:	2a d7       	rcall	.+3668   	; 0x117e <peek>
     32a:	fc 01       	movw	r30, r24
     32c:	ea 5e       	subi	r30, 0xEA	; 234
     32e:	fe 4f       	sbci	r31, 0xFE	; 254
     330:	80 81       	ld	r24, Z
     332:	91 81       	ldd	r25, Z+1	; 0x01
     334:	89 2b       	or	r24, r25
     336:	79 f4       	brne	.+30     	; 0x356 <Dispatch+0x54>
     338:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <Cp>
     33c:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <Cp+0x1>
     340:	89 2b       	or	r24, r25
     342:	01 f5       	brne	.+64     	; 0x384 <Dispatch+0x82>
     344:	62 e9       	ldi	r22, 0x92	; 146
     346:	74 e0       	ldi	r23, 0x04	; 4
     348:	82 ee       	ldi	r24, 0xE2	; 226
     34a:	96 e1       	ldi	r25, 0x16	; 22
     34c:	8b d6       	rcall	.+3350   	; 0x1064 <dequeue>
     34e:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <Cp+0x1>
     352:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <Cp>
     356:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <Cp>
     35a:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <Cp+0x1>
     35e:	89 2b       	or	r24, r25
     360:	89 f4       	brne	.+34     	; 0x384 <Dispatch+0x82>
     362:	60 e9       	ldi	r22, 0x90	; 144
     364:	74 e0       	ldi	r23, 0x04	; 4
     366:	84 e0       	ldi	r24, 0x04	; 4
     368:	97 e1       	ldi	r25, 0x17	; 23
     36a:	7c d6       	rcall	.+3320   	; 0x1064 <dequeue>
     36c:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <Cp+0x1>
     370:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <Cp>
     374:	89 2b       	or	r24, r25
     376:	31 f4       	brne	.+12     	; 0x384 <Dispatch+0x82>
     378:	80 ea       	ldi	r24, 0xA0	; 160
     37a:	94 e0       	ldi	r25, 0x04	; 4
     37c:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <Cp+0x1>
     380:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <Cp>
     384:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <Cp>
     388:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <Cp+0x1>
     38c:	82 81       	ldd	r24, Z+2	; 0x02
     38e:	93 81       	ldd	r25, Z+3	; 0x03
     390:	90 93 e1 16 	sts	0x16E1, r25	; 0x8016e1 <CurrentSp+0x1>
     394:	80 93 e0 16 	sts	0x16E0, r24	; 0x8016e0 <CurrentSp>
     398:	ec 5f       	subi	r30, 0xFC	; 252
     39a:	fe 4f       	sbci	r31, 0xFE	; 254
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	80 83       	st	Z, r24
     3a0:	08 95       	ret

000003a2 <Task_Terminate>:
     3a2:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <KernelActive>
     3a6:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <KernelActive+0x1>
     3aa:	89 2b       	or	r24, r25
     3ac:	51 f0       	breq	.+20     	; 0x3c2 <Task_Terminate+0x20>
     3ae:	f8 94       	cli
     3b0:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <Cp>
     3b4:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <Cp+0x1>
     3b8:	e5 5f       	subi	r30, 0xF5	; 245
     3ba:	fe 4f       	sbci	r31, 0xFE	; 254
     3bc:	86 e0       	ldi	r24, 0x06	; 6
     3be:	80 83       	st	Z, r24
     3c0:	02 cf       	rjmp	.-508    	; 0x1c6 <Enter_Kernel>
     3c2:	08 95       	ret

000003c4 <Kernel_Create_Task_At>:
     3c4:	8f 92       	push	r8
     3c6:	9f 92       	push	r9
     3c8:	af 92       	push	r10
     3ca:	bf 92       	push	r11
     3cc:	cf 92       	push	r12
     3ce:	df 92       	push	r13
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	1f 92       	push	r1
     3de:	1f 92       	push	r1
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	9a 83       	std	Y+2, r25	; 0x02
     3e6:	89 83       	std	Y+1, r24	; 0x01
     3e8:	5c 01       	movw	r10, r24
     3ea:	a4 e0       	ldi	r26, 0x04	; 4
     3ec:	aa 0e       	add	r10, r26
     3ee:	b1 1c       	adc	r11, r1
     3f0:	81 2c       	mov	r8, r1
     3f2:	99 24       	eor	r9, r9
     3f4:	93 94       	inc	r9
     3f6:	f5 01       	movw	r30, r10
     3f8:	d4 01       	movw	r26, r8
     3fa:	11 92       	st	Z+, r1
     3fc:	11 97       	sbiw	r26, 0x01	; 1
     3fe:	e9 f7       	brne	.-6      	; 0x3fa <Kernel_Create_Task_At+0x36>
     400:	dc 01       	movw	r26, r24
     402:	ad 5f       	subi	r26, 0xFD	; 253
     404:	be 4f       	sbci	r27, 0xFE	; 254
     406:	e1 ed       	ldi	r30, 0xD1	; 209
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	ec 93       	st	X, r30
     40c:	11 97       	sbiw	r26, 0x01	; 1
     40e:	fc 93       	st	X, r31
     410:	fc 01       	movw	r30, r24
     412:	ef 5f       	subi	r30, 0xFF	; 255
     414:	fe 4f       	sbci	r31, 0xFE	; 254
     416:	60 83       	st	Z, r22
     418:	31 97       	sbiw	r30, 0x01	; 1
     41a:	70 83       	st	Z, r23
     41c:	31 97       	sbiw	r30, 0x01	; 1
     41e:	10 82       	st	Z, r1
     420:	b3 97       	sbiw	r30, 0x23	; 35
     422:	dc 01       	movw	r26, r24
     424:	13 96       	adiw	r26, 0x03	; 3
     426:	fc 93       	st	X, r31
     428:	ee 93       	st	-X, r30
     42a:	12 97       	sbiw	r26, 0x02	; 2
     42c:	bd 96       	adiw	r30, 0x2d	; 45
     42e:	71 83       	std	Z+1, r23	; 0x01
     430:	60 83       	st	Z, r22
     432:	32 96       	adiw	r30, 0x02	; 2
     434:	10 82       	st	Z, r1
     436:	60 91 98 04 	lds	r22, 0x0498	; 0x800498 <pCount>
     43a:	70 91 99 04 	lds	r23, 0x0499	; 0x800499 <pCount+0x1>
     43e:	fc 01       	movw	r30, r24
     440:	71 83       	std	Z+1, r23	; 0x01
     442:	60 83       	st	Z, r22
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	9a 81       	ldd	r25, Y+2	; 0x02
     448:	fc 01       	movw	r30, r24
     44a:	eb 5f       	subi	r30, 0xFB	; 251
     44c:	fe 4f       	sbci	r31, 0xFE	; 254
     44e:	51 83       	std	Z+1, r21	; 0x01
     450:	40 83       	st	Z, r20
     452:	32 96       	adiw	r30, 0x02	; 2
     454:	31 83       	std	Z+1, r19	; 0x01
     456:	20 83       	st	Z, r18
     458:	3f 96       	adiw	r30, 0x0f	; 15
     45a:	2f ef       	ldi	r18, 0xFF	; 255
     45c:	3f ef       	ldi	r19, 0xFF	; 255
     45e:	31 83       	std	Z+1, r19	; 0x01
     460:	20 83       	st	Z, r18
     462:	32 96       	adiw	r30, 0x02	; 2
     464:	11 82       	std	Z+1, r1	; 0x01
     466:	10 82       	st	Z, r1
     468:	34 97       	sbiw	r30, 0x04	; 4
     46a:	11 83       	std	Z+1, r17	; 0x01
     46c:	00 83       	st	Z, r16
     46e:	34 97       	sbiw	r30, 0x04	; 4
     470:	d1 82       	std	Z+1, r13	; 0x01
     472:	c0 82       	st	Z, r12
     474:	32 96       	adiw	r30, 0x02	; 2
     476:	f1 82       	std	Z+1, r15	; 0x01
     478:	e0 82       	st	Z, r14
     47a:	20 91 9a 04 	lds	r18, 0x049A	; 0x80049a <Tasks>
     47e:	30 91 9b 04 	lds	r19, 0x049B	; 0x80049b <Tasks+0x1>
     482:	2f 5f       	subi	r18, 0xFF	; 255
     484:	3f 4f       	sbci	r19, 0xFF	; 255
     486:	30 93 9b 04 	sts	0x049B, r19	; 0x80049b <Tasks+0x1>
     48a:	20 93 9a 04 	sts	0x049A, r18	; 0x80049a <Tasks>
     48e:	20 91 98 04 	lds	r18, 0x0498	; 0x800498 <pCount>
     492:	30 91 99 04 	lds	r19, 0x0499	; 0x800499 <pCount+0x1>
     496:	2f 5f       	subi	r18, 0xFF	; 255
     498:	3f 4f       	sbci	r19, 0xFF	; 255
     49a:	30 93 99 04 	sts	0x0499, r19	; 0x800499 <pCount+0x1>
     49e:	20 93 98 04 	sts	0x0498, r18	; 0x800498 <pCount>
     4a2:	3e 97       	sbiw	r30, 0x0e	; 14
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	20 83       	st	Z, r18
     4a8:	43 30       	cpi	r20, 0x03	; 3
     4aa:	51 05       	cpc	r21, r1
     4ac:	41 f4       	brne	.+16     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4ae:	44 e9       	ldi	r20, 0x94	; 148
     4b0:	54 e0       	ldi	r21, 0x04	; 4
     4b2:	60 ec       	ldi	r22, 0xC0	; 192
     4b4:	76 e1       	ldi	r23, 0x16	; 22
     4b6:	ce 01       	movw	r24, r28
     4b8:	01 96       	adiw	r24, 0x01	; 1
     4ba:	ac d5       	rcall	.+2904   	; 0x1014 <enqueue>
     4bc:	1a c0       	rjmp	.+52     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4be:	42 30       	cpi	r20, 0x02	; 2
     4c0:	51 05       	cpc	r21, r1
     4c2:	69 f4       	brne	.+26     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4c4:	fc 01       	movw	r30, r24
     4c6:	ea 5e       	subi	r30, 0xEA	; 234
     4c8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ca:	11 83       	std	Z+1, r17	; 0x01
     4cc:	00 83       	st	Z, r16
     4ce:	42 e9       	ldi	r20, 0x92	; 146
     4d0:	54 e0       	ldi	r21, 0x04	; 4
     4d2:	62 ee       	ldi	r22, 0xE2	; 226
     4d4:	76 e1       	ldi	r23, 0x16	; 22
     4d6:	ce 01       	movw	r24, r28
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	ee d5       	rcall	.+3036   	; 0x10b8 <enqueuePeriodic>
     4dc:	0a c0       	rjmp	.+20     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4de:	41 30       	cpi	r20, 0x01	; 1
     4e0:	51 05       	cpc	r21, r1
     4e2:	39 f4       	brne	.+14     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4e4:	40 e9       	ldi	r20, 0x90	; 144
     4e6:	54 e0       	ldi	r21, 0x04	; 4
     4e8:	64 e0       	ldi	r22, 0x04	; 4
     4ea:	77 e1       	ldi	r23, 0x17	; 23
     4ec:	ce 01       	movw	r24, r28
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	91 d5       	rcall	.+2850   	; 0x1014 <enqueue>
     4f2:	e9 81       	ldd	r30, Y+1	; 0x01
     4f4:	fa 81       	ldd	r31, Y+2	; 0x02
     4f6:	80 81       	ld	r24, Z
     4f8:	91 81       	ldd	r25, Z+1	; 0x01
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	df 90       	pop	r13
     50c:	cf 90       	pop	r12
     50e:	bf 90       	pop	r11
     510:	af 90       	pop	r10
     512:	9f 90       	pop	r9
     514:	8f 90       	pop	r8
     516:	08 95       	ret

00000518 <Kernel_Create_Task>:
     518:	cf 92       	push	r12
     51a:	df 92       	push	r13
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	e9 01       	movw	r28, r18
     52a:	20 91 9a 04 	lds	r18, 0x049A	; 0x80049a <Tasks>
     52e:	30 91 9b 04 	lds	r19, 0x049B	; 0x80049b <Tasks+0x1>
     532:	20 31       	cpi	r18, 0x10	; 16
     534:	31 05       	cpc	r19, r1
     536:	41 f1       	breq	.+80     	; 0x588 <Kernel_Create_Task+0x70>
     538:	20 91 a4 05 	lds	r18, 0x05A4	; 0x8005a4 <Process+0x104>
     53c:	22 23       	and	r18, r18
     53e:	71 f0       	breq	.+28     	; 0x55c <Kernel_Create_Task+0x44>
     540:	a6 ec       	ldi	r26, 0xC6	; 198
     542:	b6 e0       	ldi	r27, 0x06	; 6
     544:	e1 e0       	ldi	r30, 0x01	; 1
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	3c 91       	ld	r19, X
     54a:	33 23       	and	r19, r19
     54c:	49 f0       	breq	.+18     	; 0x560 <Kernel_Create_Task+0x48>
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	ae 5d       	subi	r26, 0xDE	; 222
     552:	be 4f       	sbci	r27, 0xFE	; 254
     554:	e0 31       	cpi	r30, 0x10	; 16
     556:	f1 05       	cpc	r31, r1
     558:	b9 f7       	brne	.-18     	; 0x548 <Kernel_Create_Task+0x30>
     55a:	02 c0       	rjmp	.+4      	; 0x560 <Kernel_Create_Task+0x48>
     55c:	e0 e0       	ldi	r30, 0x00	; 0
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	67 01       	movw	r12, r14
     562:	78 01       	movw	r14, r16
     564:	8e 01       	movw	r16, r28
     566:	9a 01       	movw	r18, r20
     568:	ab 01       	movw	r20, r22
     56a:	bc 01       	movw	r22, r24
     56c:	82 e2       	ldi	r24, 0x22	; 34
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	e8 9f       	mul	r30, r24
     572:	d0 01       	movw	r26, r0
     574:	e9 9f       	mul	r30, r25
     576:	b0 0d       	add	r27, r0
     578:	f8 9f       	mul	r31, r24
     57a:	b0 0d       	add	r27, r0
     57c:	11 24       	eor	r1, r1
     57e:	cd 01       	movw	r24, r26
     580:	80 56       	subi	r24, 0x60	; 96
     582:	9b 4f       	sbci	r25, 0xFB	; 251
     584:	1f df       	rcall	.-450    	; 0x3c4 <Kernel_Create_Task_At>
     586:	00 c0       	rjmp	.+0      	; 0x588 <Kernel_Create_Task+0x70>
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	ff 90       	pop	r15
     592:	ef 90       	pop	r14
     594:	df 90       	pop	r13
     596:	cf 90       	pop	r12
     598:	08 95       	ret

0000059a <OS_Init>:
     59a:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <Tasks+0x1>
     59e:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <Tasks>
     5a2:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <KernelActive+0x1>
     5a6:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <KernelActive>
     5aa:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <pCount+0x1>
     5ae:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <pCount>
     5b2:	e0 ea       	ldi	r30, 0xA0	; 160
     5b4:	f4 e0       	ldi	r31, 0x04	; 4
     5b6:	20 ec       	ldi	r18, 0xC0	; 192
     5b8:	36 e1       	ldi	r19, 0x16	; 22
     5ba:	82 e2       	ldi	r24, 0x22	; 34
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	df 01       	movw	r26, r30
     5c0:	ac 01       	movw	r20, r24
     5c2:	1d 92       	st	X+, r1
     5c4:	41 50       	subi	r20, 0x01	; 1
     5c6:	50 40       	sbci	r21, 0x00	; 0
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <OS_Init+0x28>
     5ca:	df 01       	movw	r26, r30
     5cc:	ac 5f       	subi	r26, 0xFC	; 252
     5ce:	be 4f       	sbci	r27, 0xFE	; 254
     5d0:	1c 92       	st	X, r1
     5d2:	11 82       	std	Z+1, r1	; 0x01
     5d4:	10 82       	st	Z, r1
     5d6:	ee 5d       	subi	r30, 0xDE	; 222
     5d8:	fe 4f       	sbci	r31, 0xFE	; 254
     5da:	e2 17       	cp	r30, r18
     5dc:	f3 07       	cpc	r31, r19
     5de:	79 f7       	brne	.-34     	; 0x5be <OS_Init+0x24>
     5e0:	a0 e0       	ldi	r26, 0x00	; 0
     5e2:	b2 e0       	ldi	r27, 0x02	; 2
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	29 e2       	ldi	r18, 0x29	; 41
     5ea:	fd 01       	movw	r30, r26
     5ec:	32 2f       	mov	r19, r18
     5ee:	11 92       	st	Z+, r1
     5f0:	3a 95       	dec	r19
     5f2:	e9 f7       	brne	.-6      	; 0x5ee <OS_Init+0x54>
     5f4:	28 9f       	mul	r18, r24
     5f6:	f0 01       	movw	r30, r0
     5f8:	29 9f       	mul	r18, r25
     5fa:	f0 0d       	add	r31, r0
     5fc:	11 24       	eor	r1, r1
     5fe:	e0 50       	subi	r30, 0x00	; 0
     600:	fe 4f       	sbci	r31, 0xFE	; 254
     602:	16 a2       	std	Z+38, r1	; 0x26
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	91 83       	std	Z+1, r25	; 0x01
     608:	80 83       	st	Z, r24
     60a:	99 96       	adiw	r26, 0x29	; 41
     60c:	80 31       	cpi	r24, 0x10	; 16
     60e:	91 05       	cpc	r25, r1
     610:	61 f7       	brne	.-40     	; 0x5ea <OS_Init+0x50>
     612:	08 95       	ret

00000614 <OS_Abort>:
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	ce d5       	rcall	.+2972   	; 0x11b6 <_exit>

0000061a <Task_Create>:
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <KernelActive>
     628:	f0 91 9d 04 	lds	r31, 0x049D	; 0x80049d <KernelActive+0x1>
     62c:	ef 2b       	or	r30, r31
     62e:	09 f4       	brne	.+2      	; 0x632 <Task_Create+0x18>
     630:	5d c0       	rjmp	.+186    	; 0x6ec <Task_Create+0xd2>
     632:	f8 94       	cli
     634:	63 30       	cpi	r22, 0x03	; 3
     636:	71 05       	cpc	r23, r1
     638:	49 f4       	brne	.+18     	; 0x64c <Task_Create+0x32>
     63a:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <Cp>
     63e:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <Cp+0x1>
     642:	e5 5f       	subi	r30, 0xF5	; 245
     644:	fe 4f       	sbci	r31, 0xFE	; 254
     646:	a2 e0       	ldi	r26, 0x02	; 2
     648:	a0 83       	st	Z, r26
     64a:	28 c0       	rjmp	.+80     	; 0x69c <Task_Create+0x82>
     64c:	62 30       	cpi	r22, 0x02	; 2
     64e:	71 05       	cpc	r23, r1
     650:	89 f4       	brne	.+34     	; 0x674 <Task_Create+0x5a>
     652:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <Cp>
     656:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <Cp+0x1>
     65a:	df 01       	movw	r26, r30
     65c:	a5 5f       	subi	r26, 0xF5	; 245
     65e:	be 4f       	sbci	r27, 0xFE	; 254
     660:	c4 e0       	ldi	r28, 0x04	; 4
     662:	cc 93       	st	X, r28
     664:	ea 5e       	subi	r30, 0xEA	; 234
     666:	fe 4f       	sbci	r31, 0xFE	; 254
     668:	d9 01       	movw	r26, r18
     66a:	ae 0d       	add	r26, r14
     66c:	bf 1d       	adc	r27, r15
     66e:	b1 83       	std	Z+1, r27	; 0x01
     670:	a0 83       	st	Z, r26
     672:	14 c0       	rjmp	.+40     	; 0x69c <Task_Create+0x82>
     674:	61 30       	cpi	r22, 0x01	; 1
     676:	71 05       	cpc	r23, r1
     678:	49 f4       	brne	.+18     	; 0x68c <Task_Create+0x72>
     67a:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <Cp>
     67e:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <Cp+0x1>
     682:	e5 5f       	subi	r30, 0xF5	; 245
     684:	fe 4f       	sbci	r31, 0xFE	; 254
     686:	a3 e0       	ldi	r26, 0x03	; 3
     688:	a0 83       	st	Z, r26
     68a:	08 c0       	rjmp	.+16     	; 0x69c <Task_Create+0x82>
     68c:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <Cp>
     690:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <Cp+0x1>
     694:	e5 5f       	subi	r30, 0xF5	; 245
     696:	fe 4f       	sbci	r31, 0xFE	; 254
     698:	a1 e0       	ldi	r26, 0x01	; 1
     69a:	a0 83       	st	Z, r26
     69c:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <Cp>
     6a0:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <Cp+0x1>
     6a4:	df 01       	movw	r26, r30
     6a6:	a7 5f       	subi	r26, 0xF7	; 247
     6a8:	be 4f       	sbci	r27, 0xFE	; 254
     6aa:	11 96       	adiw	r26, 0x01	; 1
     6ac:	9c 93       	st	X, r25
     6ae:	8e 93       	st	-X, r24
     6b0:	14 97       	sbiw	r26, 0x04	; 4
     6b2:	11 96       	adiw	r26, 0x01	; 1
     6b4:	7c 93       	st	X, r23
     6b6:	6e 93       	st	-X, r22
     6b8:	12 96       	adiw	r26, 0x02	; 2
     6ba:	11 96       	adiw	r26, 0x01	; 1
     6bc:	5c 93       	st	X, r21
     6be:	4e 93       	st	-X, r20
     6c0:	1d 96       	adiw	r26, 0x0d	; 13
     6c2:	11 96       	adiw	r26, 0x01	; 1
     6c4:	3c 93       	st	X, r19
     6c6:	2e 93       	st	-X, r18
     6c8:	12 97       	sbiw	r26, 0x02	; 2
     6ca:	11 96       	adiw	r26, 0x01	; 1
     6cc:	1c 93       	st	X, r17
     6ce:	0e 93       	st	-X, r16
     6d0:	e0 5f       	subi	r30, 0xF0	; 240
     6d2:	fe 4f       	sbci	r31, 0xFE	; 254
     6d4:	f1 82       	std	Z+1, r15	; 0x01
     6d6:	e0 82       	st	Z, r14
     6d8:	76 dd       	rcall	.-1300   	; 0x1c6 <Enter_Kernel>
     6da:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <Cp>
     6de:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <Cp+0x1>
     6e2:	e4 5f       	subi	r30, 0xF4	; 244
     6e4:	fe 4f       	sbci	r31, 0xFE	; 254
     6e6:	80 81       	ld	r24, Z
     6e8:	91 81       	ldd	r25, Z+1	; 0x01
     6ea:	08 c0       	rjmp	.+16     	; 0x6fc <Task_Create+0xe2>
     6ec:	ee 24       	eor	r14, r14
     6ee:	ea 94       	dec	r14
     6f0:	fe 2c       	mov	r15, r14
     6f2:	0f ef       	ldi	r16, 0xFF	; 255
     6f4:	1f ef       	ldi	r17, 0xFF	; 255
     6f6:	2f ef       	ldi	r18, 0xFF	; 255
     6f8:	3f ef       	ldi	r19, 0xFF	; 255
     6fa:	0e df       	rcall	.-484    	; 0x518 <Kernel_Create_Task>
     6fc:	cf 91       	pop	r28
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	ff 90       	pop	r15
     704:	ef 90       	pop	r14
     706:	08 95       	ret

00000708 <Task_Create_System>:
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	ab 01       	movw	r20, r22
     712:	ee 24       	eor	r14, r14
     714:	ea 94       	dec	r14
     716:	fe 2c       	mov	r15, r14
     718:	0f ef       	ldi	r16, 0xFF	; 255
     71a:	1f ef       	ldi	r17, 0xFF	; 255
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	3f ef       	ldi	r19, 0xFF	; 255
     720:	63 e0       	ldi	r22, 0x03	; 3
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	7a df       	rcall	.-268    	; 0x61a <Task_Create>
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	ff 90       	pop	r15
     72c:	ef 90       	pop	r14
     72e:	08 95       	ret

00000730 <Task_Create_Idle>:
     730:	ef 92       	push	r14
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <KernelActive>
     73c:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <KernelActive+0x1>
     740:	89 2b       	or	r24, r25
     742:	f1 f0       	breq	.+60     	; 0x780 <Task_Create_Idle+0x50>
     744:	f8 94       	cli
     746:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <Cp>
     74a:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <Cp+0x1>
     74e:	fc 01       	movw	r30, r24
     750:	e7 5f       	subi	r30, 0xF7	; 247
     752:	fe 4f       	sbci	r31, 0xFE	; 254
     754:	20 e8       	ldi	r18, 0x80	; 128
     756:	31 e0       	ldi	r19, 0x01	; 1
     758:	31 83       	std	Z+1, r19	; 0x01
     75a:	20 83       	st	Z, r18
     75c:	34 97       	sbiw	r30, 0x04	; 4
     75e:	24 e0       	ldi	r18, 0x04	; 4
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	31 83       	std	Z+1, r19	; 0x01
     764:	20 83       	st	Z, r18
     766:	32 96       	adiw	r30, 0x02	; 2
     768:	11 82       	std	Z+1, r1	; 0x01
     76a:	10 82       	st	Z, r1
     76c:	2c dd       	rcall	.-1448   	; 0x1c6 <Enter_Kernel>
     76e:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <Cp>
     772:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <Cp+0x1>
     776:	e4 5f       	subi	r30, 0xF4	; 244
     778:	fe 4f       	sbci	r31, 0xFE	; 254
     77a:	80 81       	ld	r24, Z
     77c:	91 81       	ldd	r25, Z+1	; 0x01
     77e:	0e c0       	rjmp	.+28     	; 0x79c <Task_Create_Idle+0x6c>
     780:	ee 24       	eor	r14, r14
     782:	ea 94       	dec	r14
     784:	fe 2c       	mov	r15, r14
     786:	0f ef       	ldi	r16, 0xFF	; 255
     788:	1f ef       	ldi	r17, 0xFF	; 255
     78a:	2f ef       	ldi	r18, 0xFF	; 255
     78c:	3f ef       	ldi	r19, 0xFF	; 255
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	64 e0       	ldi	r22, 0x04	; 4
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	be de       	rcall	.-644    	; 0x518 <Kernel_Create_Task>
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	08 95       	ret

000007a6 <Run_Next>:
     7a6:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <KernelActive>
     7aa:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <KernelActive+0x1>
     7ae:	89 2b       	or	r24, r25
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <Run_Next+0xe>
     7b2:	49 c0       	rjmp	.+146    	; 0x846 <Run_Next+0xa0>
     7b4:	f8 94       	cli
     7b6:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <Cp>
     7ba:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <Cp+0x1>
     7be:	fc 01       	movw	r30, r24
     7c0:	eb 5f       	subi	r30, 0xFB	; 251
     7c2:	fe 4f       	sbci	r31, 0xFE	; 254
     7c4:	20 81       	ld	r18, Z
     7c6:	31 81       	ldd	r19, Z+1	; 0x01
     7c8:	23 30       	cpi	r18, 0x03	; 3
     7ca:	31 05       	cpc	r19, r1
     7cc:	19 f4       	brne	.+6      	; 0x7d4 <Run_Next+0x2e>
     7ce:	36 96       	adiw	r30, 0x06	; 6
     7d0:	10 82       	st	Z, r1
     7d2:	38 c0       	rjmp	.+112    	; 0x844 <Run_Next+0x9e>
     7d4:	fc 01       	movw	r30, r24
     7d6:	eb 5f       	subi	r30, 0xFB	; 251
     7d8:	fe 4f       	sbci	r31, 0xFE	; 254
     7da:	20 81       	ld	r18, Z
     7dc:	31 81       	ldd	r19, Z+1	; 0x01
     7de:	22 30       	cpi	r18, 0x02	; 2
     7e0:	31 05       	cpc	r19, r1
     7e2:	59 f5       	brne	.+86     	; 0x83a <Run_Next+0x94>
     7e4:	73 96       	adiw	r30, 0x13	; 19
     7e6:	40 81       	ld	r20, Z
     7e8:	51 81       	ldd	r21, Z+1	; 0x01
     7ea:	36 97       	sbiw	r30, 0x06	; 6
     7ec:	20 81       	ld	r18, Z
     7ee:	31 81       	ldd	r19, Z+1	; 0x01
     7f0:	42 17       	cp	r20, r18
     7f2:	53 07       	cpc	r21, r19
     7f4:	39 f0       	breq	.+14     	; 0x804 <Run_Next+0x5e>
     7f6:	20 91 94 04 	lds	r18, 0x0494	; 0x800494 <SysCount>
     7fa:	30 91 95 04 	lds	r19, 0x0495	; 0x800495 <SysCount+0x1>
     7fe:	12 16       	cp	r1, r18
     800:	13 06       	cpc	r1, r19
     802:	b4 f4       	brge	.+44     	; 0x830 <Run_Next+0x8a>
     804:	fc 01       	movw	r30, r24
     806:	e0 5f       	subi	r30, 0xF0	; 240
     808:	fe 4f       	sbci	r31, 0xFE	; 254
     80a:	20 81       	ld	r18, Z
     80c:	31 81       	ldd	r19, Z+1	; 0x01
     80e:	38 96       	adiw	r30, 0x08	; 8
     810:	40 81       	ld	r20, Z
     812:	51 81       	ldd	r21, Z+1	; 0x01
     814:	24 1b       	sub	r18, r20
     816:	35 0b       	sbc	r19, r21
     818:	dc 01       	movw	r26, r24
     81a:	aa 5e       	subi	r26, 0xEA	; 234
     81c:	be 4f       	sbci	r27, 0xFE	; 254
     81e:	11 96       	adiw	r26, 0x01	; 1
     820:	3c 93       	st	X, r19
     822:	2e 93       	st	-X, r18
     824:	11 82       	std	Z+1, r1	; 0x01
     826:	10 82       	st	Z, r1
     828:	3d 97       	sbiw	r30, 0x0d	; 13
     82a:	85 e0       	ldi	r24, 0x05	; 5
     82c:	80 83       	st	Z, r24
     82e:	0a c0       	rjmp	.+20     	; 0x844 <Run_Next+0x9e>
     830:	fc 01       	movw	r30, r24
     832:	e5 5f       	subi	r30, 0xF5	; 245
     834:	fe 4f       	sbci	r31, 0xFE	; 254
     836:	10 82       	st	Z, r1
     838:	05 c0       	rjmp	.+10     	; 0x844 <Run_Next+0x9e>
     83a:	fc 01       	movw	r30, r24
     83c:	e5 5f       	subi	r30, 0xF5	; 245
     83e:	fe 4f       	sbci	r31, 0xFE	; 254
     840:	85 e0       	ldi	r24, 0x05	; 5
     842:	80 83       	st	Z, r24
     844:	c0 cc       	rjmp	.-1664   	; 0x1c6 <Enter_Kernel>
     846:	08 95       	ret

00000848 <setup>:
     848:	f8 94       	cli
     84a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     84e:	e1 e8       	ldi	r30, 0x81	; 129
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	10 82       	st	Z, r1
     854:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     858:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     85c:	80 e7       	ldi	r24, 0x70	; 112
     85e:	92 e0       	ldi	r25, 0x02	; 2
     860:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     864:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     868:	80 81       	ld	r24, Z
     86a:	88 60       	ori	r24, 0x08	; 8
     86c:	80 83       	st	Z, r24
     86e:	80 81       	ld	r24, Z
     870:	84 60       	ori	r24, 0x04	; 4
     872:	80 83       	st	Z, r24
     874:	ef e6       	ldi	r30, 0x6F	; 111
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	80 81       	ld	r24, Z
     87a:	82 60       	ori	r24, 0x02	; 2
     87c:	80 83       	st	Z, r24
     87e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     882:	e1 e9       	ldi	r30, 0x91	; 145
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	10 82       	st	Z, r1
     888:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     88c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     890:	83 e2       	ldi	r24, 0x23	; 35
     892:	94 ef       	ldi	r25, 0xF4	; 244
     894:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     898:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     89c:	80 81       	ld	r24, Z
     89e:	88 60       	ori	r24, 0x08	; 8
     8a0:	80 83       	st	Z, r24
     8a2:	80 81       	ld	r24, Z
     8a4:	84 60       	ori	r24, 0x04	; 4
     8a6:	80 83       	st	Z, r24
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     8ae:	78 94       	sei
     8b0:	08 95       	ret

000008b2 <__vector_17>:
     8b2:	1f 92       	push	r1
     8b4:	0f 92       	push	r0
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
     8bc:	0b b6       	in	r0, 0x3b	; 59
     8be:	0f 92       	push	r0
     8c0:	2f 93       	push	r18
     8c2:	3f 93       	push	r19
     8c4:	4f 93       	push	r20
     8c6:	5f 93       	push	r21
     8c8:	6f 93       	push	r22
     8ca:	7f 93       	push	r23
     8cc:	8f 93       	push	r24
     8ce:	9f 93       	push	r25
     8d0:	af 93       	push	r26
     8d2:	bf 93       	push	r27
     8d4:	ef 93       	push	r30
     8d6:	ff 93       	push	r31
     8d8:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <Cp>
     8dc:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <Cp+0x1>
     8e0:	fc 01       	movw	r30, r24
     8e2:	eb 5f       	subi	r30, 0xFB	; 251
     8e4:	fe 4f       	sbci	r31, 0xFE	; 254
     8e6:	20 81       	ld	r18, Z
     8e8:	31 81       	ldd	r19, Z+1	; 0x01
     8ea:	22 30       	cpi	r18, 0x02	; 2
     8ec:	31 05       	cpc	r19, r1
     8ee:	31 f4       	brne	.+12     	; 0x8fc <__vector_17+0x4a>
     8f0:	73 96       	adiw	r30, 0x13	; 19
     8f2:	80 81       	ld	r24, Z
     8f4:	91 81       	ldd	r25, Z+1	; 0x01
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	91 83       	std	Z+1, r25	; 0x01
     8fa:	80 83       	st	Z, r24
     8fc:	a0 91 92 04 	lds	r26, 0x0492	; 0x800492 <PeriodicCount>
     900:	b0 91 93 04 	lds	r27, 0x0493	; 0x800493 <PeriodicCount+0x1>
     904:	cd 01       	movw	r24, r26
     906:	01 97       	sbiw	r24, 0x01	; 1
     908:	92 f0       	brmi	.+36     	; 0x92e <__vector_17+0x7c>
     90a:	aa 0f       	add	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	ae 51       	subi	r26, 0x1E	; 30
     910:	b9 4e       	sbci	r27, 0xE9	; 233
     912:	22 ee       	ldi	r18, 0xE2	; 226
     914:	36 e1       	ldi	r19, 0x16	; 22
     916:	fe 91       	ld	r31, -X
     918:	ee 91       	ld	r30, -X
     91a:	ea 5e       	subi	r30, 0xEA	; 234
     91c:	fe 4f       	sbci	r31, 0xFE	; 254
     91e:	80 81       	ld	r24, Z
     920:	91 81       	ldd	r25, Z+1	; 0x01
     922:	01 97       	sbiw	r24, 0x01	; 1
     924:	91 83       	std	Z+1, r25	; 0x01
     926:	80 83       	st	Z, r24
     928:	a2 17       	cp	r26, r18
     92a:	b3 07       	cpc	r27, r19
     92c:	a1 f7       	brne	.-24     	; 0x916 <__vector_17+0x64>
     92e:	3b df       	rcall	.-394    	; 0x7a6 <Run_Next>
     930:	ff 91       	pop	r31
     932:	ef 91       	pop	r30
     934:	bf 91       	pop	r27
     936:	af 91       	pop	r26
     938:	9f 91       	pop	r25
     93a:	8f 91       	pop	r24
     93c:	7f 91       	pop	r23
     93e:	6f 91       	pop	r22
     940:	5f 91       	pop	r21
     942:	4f 91       	pop	r20
     944:	3f 91       	pop	r19
     946:	2f 91       	pop	r18
     948:	0f 90       	pop	r0
     94a:	0b be       	out	0x3b, r0	; 59
     94c:	0f 90       	pop	r0
     94e:	0f be       	out	0x3f, r0	; 63
     950:	0f 90       	pop	r0
     952:	1f 90       	pop	r1
     954:	18 95       	reti

00000956 <__vector_32>:
     956:	1f 92       	push	r1
     958:	0f 92       	push	r0
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	0f 92       	push	r0
     95e:	11 24       	eor	r1, r1
     960:	8f 93       	push	r24
     962:	9f 93       	push	r25
     964:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <tickOverflowCount>
     968:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <tickOverflowCount+0x1>
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <tickOverflowCount+0x1>
     972:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <tickOverflowCount>
     976:	9f 91       	pop	r25
     978:	8f 91       	pop	r24
     97a:	0f 90       	pop	r0
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	0f 90       	pop	r0
     980:	1f 90       	pop	r1
     982:	18 95       	reti

00000984 <kernel_send>:
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <Cp>
     990:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <Cp+0x1>
     994:	fc 01       	movw	r30, r24
     996:	e4 5e       	subi	r30, 0xE4	; 228
     998:	fe 4f       	sbci	r31, 0xFE	; 254
     99a:	20 81       	ld	r18, Z
     99c:	31 81       	ldd	r19, Z+1	; 0x01
     99e:	21 50       	subi	r18, 0x01	; 1
     9a0:	31 09       	sbc	r19, r1
     9a2:	49 e2       	ldi	r20, 0x29	; 41
     9a4:	42 9f       	mul	r20, r18
     9a6:	f0 01       	movw	r30, r0
     9a8:	43 9f       	mul	r20, r19
     9aa:	f0 0d       	add	r31, r0
     9ac:	11 24       	eor	r1, r1
     9ae:	e0 50       	subi	r30, 0x00	; 0
     9b0:	fe 4f       	sbci	r31, 0xFE	; 254
     9b2:	24 a1       	ldd	r18, Z+36	; 0x24
     9b4:	35 a1       	ldd	r19, Z+37	; 0x25
     9b6:	23 2b       	or	r18, r19
     9b8:	d9 f5       	brne	.+118    	; 0xa30 <kernel_send+0xac>
     9ba:	fc 01       	movw	r30, r24
     9bc:	e4 5e       	subi	r30, 0xE4	; 228
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	20 81       	ld	r18, Z
     9c2:	31 81       	ldd	r19, Z+1	; 0x01
     9c4:	21 50       	subi	r18, 0x01	; 1
     9c6:	31 09       	sbc	r19, r1
     9c8:	42 9f       	mul	r20, r18
     9ca:	f0 01       	movw	r30, r0
     9cc:	43 9f       	mul	r20, r19
     9ce:	f0 0d       	add	r31, r0
     9d0:	11 24       	eor	r1, r1
     9d2:	e0 50       	subi	r30, 0x00	; 0
     9d4:	fe 4f       	sbci	r31, 0xFE	; 254
     9d6:	22 81       	ldd	r18, Z+2	; 0x02
     9d8:	33 81       	ldd	r19, Z+3	; 0x03
     9da:	23 2b       	or	r18, r19
     9dc:	41 f5       	brne	.+80     	; 0xa2e <kernel_send+0xaa>
     9de:	dc 01       	movw	r26, r24
     9e0:	a4 5e       	subi	r26, 0xE4	; 228
     9e2:	be 4f       	sbci	r27, 0xFE	; 254
     9e4:	2d 91       	ld	r18, X+
     9e6:	3c 91       	ld	r19, X
     9e8:	11 97       	sbiw	r26, 0x01	; 1
     9ea:	21 50       	subi	r18, 0x01	; 1
     9ec:	31 09       	sbc	r19, r1
     9ee:	42 9f       	mul	r20, r18
     9f0:	f0 01       	movw	r30, r0
     9f2:	43 9f       	mul	r20, r19
     9f4:	f0 0d       	add	r31, r0
     9f6:	11 24       	eor	r1, r1
     9f8:	e0 50       	subi	r30, 0x00	; 0
     9fa:	fe 4f       	sbci	r31, 0xFE	; 254
     9fc:	93 83       	std	Z+3, r25	; 0x03
     9fe:	82 83       	std	Z+2, r24	; 0x02
     a00:	fc 01       	movw	r30, r24
     a02:	ec 5f       	subi	r30, 0xFC	; 252
     a04:	fe 4f       	sbci	r31, 0xFE	; 254
     a06:	23 e0       	ldi	r18, 0x03	; 3
     a08:	20 83       	st	Z, r18
     a0a:	2d 91       	ld	r18, X+
     a0c:	3c 91       	ld	r19, X
     a0e:	21 50       	subi	r18, 0x01	; 1
     a10:	31 09       	sbc	r19, r1
     a12:	7c 96       	adiw	r30, 0x1c	; 28
     a14:	80 81       	ld	r24, Z
     a16:	91 81       	ldd	r25, Z+1	; 0x01
     a18:	42 9f       	mul	r20, r18
     a1a:	f0 01       	movw	r30, r0
     a1c:	43 9f       	mul	r20, r19
     a1e:	f0 0d       	add	r31, r0
     a20:	11 24       	eor	r1, r1
     a22:	e0 50       	subi	r30, 0x00	; 0
     a24:	fe 4f       	sbci	r31, 0xFE	; 254
     a26:	90 a7       	std	Z+40, r25	; 0x28
     a28:	87 a3       	std	Z+39, r24	; 0x27
     a2a:	6b dc       	rcall	.-1834   	; 0x302 <Dispatch>
     a2c:	09 c1       	rjmp	.+530    	; 0xc40 <kernel_send+0x2bc>
     a2e:	f2 dd       	rcall	.-1052   	; 0x614 <OS_Abort>
     a30:	fc 01       	movw	r30, r24
     a32:	e4 5e       	subi	r30, 0xE4	; 228
     a34:	fe 4f       	sbci	r31, 0xFE	; 254
     a36:	20 81       	ld	r18, Z
     a38:	31 81       	ldd	r19, Z+1	; 0x01
     a3a:	21 50       	subi	r18, 0x01	; 1
     a3c:	31 09       	sbc	r19, r1
     a3e:	49 e2       	ldi	r20, 0x29	; 41
     a40:	42 9f       	mul	r20, r18
     a42:	f0 01       	movw	r30, r0
     a44:	43 9f       	mul	r20, r19
     a46:	f0 0d       	add	r31, r0
     a48:	11 24       	eor	r1, r1
     a4a:	e0 50       	subi	r30, 0x00	; 0
     a4c:	fe 4f       	sbci	r31, 0xFE	; 254
     a4e:	22 81       	ldd	r18, Z+2	; 0x02
     a50:	33 81       	ldd	r19, Z+3	; 0x03
     a52:	23 2b       	or	r18, r19
     a54:	09 f0       	breq	.+2      	; 0xa58 <kernel_send+0xd4>
     a56:	de dd       	rcall	.-1092   	; 0x614 <OS_Abort>
     a58:	fc 01       	movw	r30, r24
     a5a:	e4 5e       	subi	r30, 0xE4	; 228
     a5c:	fe 4f       	sbci	r31, 0xFE	; 254
     a5e:	80 81       	ld	r24, Z
     a60:	91 81       	ldd	r25, Z+1	; 0x01
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	29 e2       	ldi	r18, 0x29	; 41
     a66:	28 9f       	mul	r18, r24
     a68:	f0 01       	movw	r30, r0
     a6a:	29 9f       	mul	r18, r25
     a6c:	f0 0d       	add	r31, r0
     a6e:	11 24       	eor	r1, r1
     a70:	e0 50       	subi	r30, 0x00	; 0
     a72:	fe 4f       	sbci	r31, 0xFE	; 254
     a74:	c4 a1       	ldd	r28, Z+36	; 0x24
     a76:	d5 a1       	ldd	r29, Z+37	; 0x25
     a78:	21 97       	sbiw	r28, 0x01	; 1
     a7a:	0a f4       	brpl	.+2      	; 0xa7e <kernel_send+0xfa>
     a7c:	ce c0       	rjmp	.+412    	; 0xc1a <kernel_send+0x296>
     a7e:	19 e2       	ldi	r17, 0x29	; 41
     a80:	01 e0       	ldi	r16, 0x01	; 1
     a82:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <Cp>
     a86:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <Cp+0x1>
     a8a:	c9 01       	movw	r24, r18
     a8c:	84 5e       	subi	r24, 0xE4	; 228
     a8e:	9e 4f       	sbci	r25, 0xFE	; 254
     a90:	dc 01       	movw	r26, r24
     a92:	4d 91       	ld	r20, X+
     a94:	5c 91       	ld	r21, X
     a96:	41 50       	subi	r20, 0x01	; 1
     a98:	51 09       	sbc	r21, r1
     a9a:	fe 01       	movw	r30, r28
     a9c:	32 96       	adiw	r30, 0x02	; 2
     a9e:	ee 0f       	add	r30, r30
     aa0:	ff 1f       	adc	r31, r31
     aa2:	14 9f       	mul	r17, r20
     aa4:	d0 01       	movw	r26, r0
     aa6:	15 9f       	mul	r17, r21
     aa8:	b0 0d       	add	r27, r0
     aaa:	11 24       	eor	r1, r1
     aac:	ae 0f       	add	r26, r30
     aae:	bf 1f       	adc	r27, r31
     ab0:	a0 50       	subi	r26, 0x00	; 0
     ab2:	be 4f       	sbci	r27, 0xFE	; 254
     ab4:	0d 90       	ld	r0, X+
     ab6:	bc 91       	ld	r27, X
     ab8:	a0 2d       	mov	r26, r0
     aba:	ac 5f       	subi	r26, 0xFC	; 252
     abc:	be 4f       	sbci	r27, 0xFE	; 254
     abe:	0c 93       	st	X, r16
     ac0:	dc 01       	movw	r26, r24
     ac2:	4d 91       	ld	r20, X+
     ac4:	5c 91       	ld	r21, X
     ac6:	41 50       	subi	r20, 0x01	; 1
     ac8:	51 09       	sbc	r21, r1
     aca:	14 9f       	mul	r17, r20
     acc:	d0 01       	movw	r26, r0
     ace:	15 9f       	mul	r17, r21
     ad0:	b0 0d       	add	r27, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	ae 0f       	add	r26, r30
     ad6:	bf 1f       	adc	r27, r31
     ad8:	a0 50       	subi	r26, 0x00	; 0
     ada:	be 4f       	sbci	r27, 0xFE	; 254
     adc:	6d 91       	ld	r22, X+
     ade:	7c 91       	ld	r23, X
     ae0:	a9 01       	movw	r20, r18
     ae2:	40 5e       	subi	r20, 0xE0	; 224
     ae4:	5e 4f       	sbci	r21, 0xFE	; 254
     ae6:	da 01       	movw	r26, r20
     ae8:	4d 91       	ld	r20, X+
     aea:	5c 91       	ld	r21, X
     aec:	db 01       	movw	r26, r22
     aee:	a0 5e       	subi	r26, 0xE0	; 224
     af0:	be 4f       	sbci	r27, 0xFE	; 254
     af2:	4d 93       	st	X+, r20
     af4:	5c 93       	st	X, r21
     af6:	dc 01       	movw	r26, r24
     af8:	4d 91       	ld	r20, X+
     afa:	5c 91       	ld	r21, X
     afc:	11 97       	sbiw	r26, 0x01	; 1
     afe:	41 50       	subi	r20, 0x01	; 1
     b00:	51 09       	sbc	r21, r1
     b02:	14 9f       	mul	r17, r20
     b04:	c0 01       	movw	r24, r0
     b06:	15 9f       	mul	r17, r21
     b08:	90 0d       	add	r25, r0
     b0a:	11 24       	eor	r1, r1
     b0c:	e8 0f       	add	r30, r24
     b0e:	f9 1f       	adc	r31, r25
     b10:	e0 50       	subi	r30, 0x00	; 0
     b12:	fe 4f       	sbci	r31, 0xFE	; 254
     b14:	01 90       	ld	r0, Z+
     b16:	f0 81       	ld	r31, Z
     b18:	e0 2d       	mov	r30, r0
     b1a:	eb 5f       	subi	r30, 0xFB	; 251
     b1c:	fe 4f       	sbci	r31, 0xFE	; 254
     b1e:	80 81       	ld	r24, Z
     b20:	91 81       	ldd	r25, Z+1	; 0x01
     b22:	03 97       	sbiw	r24, 0x03	; 3
     b24:	c1 f4       	brne	.+48     	; 0xb56 <kernel_send+0x1d2>
     b26:	fd 01       	movw	r30, r26
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	ce 01       	movw	r24, r28
     b2e:	02 96       	adiw	r24, 0x02	; 2
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	41 50       	subi	r20, 0x01	; 1
     b36:	51 09       	sbc	r21, r1
     b38:	14 9f       	mul	r17, r20
     b3a:	90 01       	movw	r18, r0
     b3c:	15 9f       	mul	r17, r21
     b3e:	30 0d       	add	r19, r0
     b40:	11 24       	eor	r1, r1
     b42:	82 0f       	add	r24, r18
     b44:	93 1f       	adc	r25, r19
     b46:	44 e9       	ldi	r20, 0x94	; 148
     b48:	54 e0       	ldi	r21, 0x04	; 4
     b4a:	60 ec       	ldi	r22, 0xC0	; 192
     b4c:	76 e1       	ldi	r23, 0x16	; 22
     b4e:	80 50       	subi	r24, 0x00	; 0
     b50:	9e 4f       	sbci	r25, 0xFE	; 254
     b52:	60 d2       	rcall	.+1216   	; 0x1014 <enqueue>
     b54:	36 c0       	rjmp	.+108    	; 0xbc2 <kernel_send+0x23e>
     b56:	f9 01       	movw	r30, r18
     b58:	e4 5e       	subi	r30, 0xE4	; 228
     b5a:	fe 4f       	sbci	r31, 0xFE	; 254
     b5c:	40 81       	ld	r20, Z
     b5e:	51 81       	ldd	r21, Z+1	; 0x01
     b60:	41 50       	subi	r20, 0x01	; 1
     b62:	51 09       	sbc	r21, r1
     b64:	fe 01       	movw	r30, r28
     b66:	32 96       	adiw	r30, 0x02	; 2
     b68:	ee 0f       	add	r30, r30
     b6a:	ff 1f       	adc	r31, r31
     b6c:	14 9f       	mul	r17, r20
     b6e:	c0 01       	movw	r24, r0
     b70:	15 9f       	mul	r17, r21
     b72:	90 0d       	add	r25, r0
     b74:	11 24       	eor	r1, r1
     b76:	e8 0f       	add	r30, r24
     b78:	f9 1f       	adc	r31, r25
     b7a:	e0 50       	subi	r30, 0x00	; 0
     b7c:	fe 4f       	sbci	r31, 0xFE	; 254
     b7e:	01 90       	ld	r0, Z+
     b80:	f0 81       	ld	r31, Z
     b82:	e0 2d       	mov	r30, r0
     b84:	eb 5f       	subi	r30, 0xFB	; 251
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	91 81       	ldd	r25, Z+1	; 0x01
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	c9 f4       	brne	.+50     	; 0xbc2 <kernel_send+0x23e>
     b90:	f9 01       	movw	r30, r18
     b92:	e4 5e       	subi	r30, 0xE4	; 228
     b94:	fe 4f       	sbci	r31, 0xFE	; 254
     b96:	40 81       	ld	r20, Z
     b98:	51 81       	ldd	r21, Z+1	; 0x01
     b9a:	ce 01       	movw	r24, r28
     b9c:	02 96       	adiw	r24, 0x02	; 2
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	41 50       	subi	r20, 0x01	; 1
     ba4:	51 09       	sbc	r21, r1
     ba6:	14 9f       	mul	r17, r20
     ba8:	90 01       	movw	r18, r0
     baa:	15 9f       	mul	r17, r21
     bac:	30 0d       	add	r19, r0
     bae:	11 24       	eor	r1, r1
     bb0:	82 0f       	add	r24, r18
     bb2:	93 1f       	adc	r25, r19
     bb4:	40 e9       	ldi	r20, 0x90	; 144
     bb6:	54 e0       	ldi	r21, 0x04	; 4
     bb8:	64 e0       	ldi	r22, 0x04	; 4
     bba:	77 e1       	ldi	r23, 0x17	; 23
     bbc:	80 50       	subi	r24, 0x00	; 0
     bbe:	9e 4f       	sbci	r25, 0xFE	; 254
     bc0:	29 d2       	rcall	.+1106   	; 0x1014 <enqueue>
     bc2:	a0 91 9e 04 	lds	r26, 0x049E	; 0x80049e <Cp>
     bc6:	b0 91 9f 04 	lds	r27, 0x049F	; 0x80049f <Cp+0x1>
     bca:	a4 5e       	subi	r26, 0xE4	; 228
     bcc:	be 4f       	sbci	r27, 0xFE	; 254
     bce:	2d 91       	ld	r18, X+
     bd0:	3c 91       	ld	r19, X
     bd2:	11 97       	sbiw	r26, 0x01	; 1
     bd4:	21 50       	subi	r18, 0x01	; 1
     bd6:	31 09       	sbc	r19, r1
     bd8:	fe 01       	movw	r30, r28
     bda:	32 96       	adiw	r30, 0x02	; 2
     bdc:	ee 0f       	add	r30, r30
     bde:	ff 1f       	adc	r31, r31
     be0:	12 9f       	mul	r17, r18
     be2:	c0 01       	movw	r24, r0
     be4:	13 9f       	mul	r17, r19
     be6:	90 0d       	add	r25, r0
     be8:	11 24       	eor	r1, r1
     bea:	e8 0f       	add	r30, r24
     bec:	f9 1f       	adc	r31, r25
     bee:	e0 50       	subi	r30, 0x00	; 0
     bf0:	fe 4f       	sbci	r31, 0xFE	; 254
     bf2:	11 82       	std	Z+1, r1	; 0x01
     bf4:	10 82       	st	Z, r1
     bf6:	8d 91       	ld	r24, X+
     bf8:	9c 91       	ld	r25, X
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	18 9f       	mul	r17, r24
     bfe:	f0 01       	movw	r30, r0
     c00:	19 9f       	mul	r17, r25
     c02:	f0 0d       	add	r31, r0
     c04:	11 24       	eor	r1, r1
     c06:	e0 50       	subi	r30, 0x00	; 0
     c08:	fe 4f       	sbci	r31, 0xFE	; 254
     c0a:	84 a1       	ldd	r24, Z+36	; 0x24
     c0c:	95 a1       	ldd	r25, Z+37	; 0x25
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	95 a3       	std	Z+37, r25	; 0x25
     c12:	84 a3       	std	Z+36, r24	; 0x24
     c14:	21 97       	sbiw	r28, 0x01	; 1
     c16:	0a f0       	brmi	.+2      	; 0xc1a <kernel_send+0x296>
     c18:	34 cf       	rjmp	.-408    	; 0xa82 <kernel_send+0xfe>
     c1a:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <Cp>
     c1e:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <Cp+0x1>
     c22:	e4 5e       	subi	r30, 0xE4	; 228
     c24:	fe 4f       	sbci	r31, 0xFE	; 254
     c26:	80 81       	ld	r24, Z
     c28:	91 81       	ldd	r25, Z+1	; 0x01
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	29 e2       	ldi	r18, 0x29	; 41
     c2e:	28 9f       	mul	r18, r24
     c30:	f0 01       	movw	r30, r0
     c32:	29 9f       	mul	r18, r25
     c34:	f0 0d       	add	r31, r0
     c36:	11 24       	eor	r1, r1
     c38:	e0 50       	subi	r30, 0x00	; 0
     c3a:	fe 4f       	sbci	r31, 0xFE	; 254
     c3c:	10 a6       	std	Z+40, r1	; 0x28
     c3e:	17 a2       	std	Z+39, r1	; 0x27
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	08 95       	ret

00000c4a <kernel_receive>:

void kernel_receive() {
	if (ChannelArray[Cp->receiverChannel - 1].sender == NULL) { // no sender waiting
     c4a:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <Cp>
     c4e:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <Cp+0x1>
     c52:	fc 01       	movw	r30, r24
     c54:	e2 5e       	subi	r30, 0xE2	; 226
     c56:	fe 4f       	sbci	r31, 0xFE	; 254
     c58:	20 81       	ld	r18, Z
     c5a:	31 81       	ldd	r19, Z+1	; 0x01
     c5c:	21 50       	subi	r18, 0x01	; 1
     c5e:	31 09       	sbc	r19, r1
     c60:	49 e2       	ldi	r20, 0x29	; 41
     c62:	42 9f       	mul	r20, r18
     c64:	f0 01       	movw	r30, r0
     c66:	43 9f       	mul	r20, r19
     c68:	f0 0d       	add	r31, r0
     c6a:	11 24       	eor	r1, r1
     c6c:	e0 50       	subi	r30, 0x00	; 0
     c6e:	fe 4f       	sbci	r31, 0xFE	; 254
     c70:	22 81       	ldd	r18, Z+2	; 0x02
     c72:	33 81       	ldd	r19, Z+3	; 0x03
     c74:	23 2b       	or	r18, r19
     c76:	09 f5       	brne	.+66     	; 0xcba <kernel_receive+0x70>
		Cp->state = BLOCKED;
     c78:	fc 01       	movw	r30, r24
     c7a:	ec 5f       	subi	r30, 0xFC	; 252
     c7c:	fe 4f       	sbci	r31, 0xFE	; 254
     c7e:	23 e0       	ldi	r18, 0x03	; 3
     c80:	20 83       	st	Z, r18
		enqueue(&Cp, &ChannelArray[Cp->receiverChannel - 1].receivers, &ChannelArray[Cp->receiverChannel - 1].numberReceivers);
     c82:	7a 96       	adiw	r30, 0x1a	; 26
     c84:	20 81       	ld	r18, Z
     c86:	31 81       	ldd	r19, Z+1	; 0x01
     c88:	80 81       	ld	r24, Z
     c8a:	91 81       	ldd	r25, Z+1	; 0x01
     c8c:	21 50       	subi	r18, 0x01	; 1
     c8e:	31 09       	sbc	r19, r1
     c90:	e9 e2       	ldi	r30, 0x29	; 41
     c92:	e2 9f       	mul	r30, r18
     c94:	a0 01       	movw	r20, r0
     c96:	e3 9f       	mul	r30, r19
     c98:	50 0d       	add	r21, r0
     c9a:	11 24       	eor	r1, r1
     c9c:	4c 5d       	subi	r20, 0xDC	; 220
     c9e:	5d 4f       	sbci	r21, 0xFD	; 253
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	e8 9f       	mul	r30, r24
     ca4:	b0 01       	movw	r22, r0
     ca6:	e9 9f       	mul	r30, r25
     ca8:	70 0d       	add	r23, r0
     caa:	11 24       	eor	r1, r1
     cac:	6c 5f       	subi	r22, 0xFC	; 252
     cae:	7d 4f       	sbci	r23, 0xFD	; 253
     cb0:	8e e9       	ldi	r24, 0x9E	; 158
     cb2:	94 e0       	ldi	r25, 0x04	; 4
     cb4:	af d1       	rcall	.+862    	; 0x1014 <enqueue>
		Dispatch();
     cb6:	25 cb       	rjmp	.-2486   	; 0x302 <Dispatch>
     cb8:	08 95       	ret
	} else { // sender is waiting
		ChannelArray[Cp->receiverChannel - 1].sender->state = READY;
     cba:	fc 01       	movw	r30, r24
     cbc:	e2 5e       	subi	r30, 0xE2	; 226
     cbe:	fe 4f       	sbci	r31, 0xFE	; 254
     cc0:	20 81       	ld	r18, Z
     cc2:	31 81       	ldd	r19, Z+1	; 0x01
     cc4:	21 50       	subi	r18, 0x01	; 1
     cc6:	31 09       	sbc	r19, r1
     cc8:	49 e2       	ldi	r20, 0x29	; 41
     cca:	42 9f       	mul	r20, r18
     ccc:	d0 01       	movw	r26, r0
     cce:	43 9f       	mul	r20, r19
     cd0:	b0 0d       	add	r27, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	a0 50       	subi	r26, 0x00	; 0
     cd6:	be 4f       	sbci	r27, 0xFE	; 254
     cd8:	12 96       	adiw	r26, 0x02	; 2
     cda:	0d 90       	ld	r0, X+
     cdc:	bc 91       	ld	r27, X
     cde:	a0 2d       	mov	r26, r0
     ce0:	ac 5f       	subi	r26, 0xFC	; 252
     ce2:	be 4f       	sbci	r27, 0xFE	; 254
     ce4:	21 e0       	ldi	r18, 0x01	; 1
     ce6:	2c 93       	st	X, r18
		Cp->val = ChannelArray[Cp->receiverChannel - 1].val;
     ce8:	20 81       	ld	r18, Z
     cea:	31 81       	ldd	r19, Z+1	; 0x01
     cec:	21 50       	subi	r18, 0x01	; 1
     cee:	31 09       	sbc	r19, r1
     cf0:	42 9f       	mul	r20, r18
     cf2:	d0 01       	movw	r26, r0
     cf4:	43 9f       	mul	r20, r19
     cf6:	b0 0d       	add	r27, r0
     cf8:	11 24       	eor	r1, r1
     cfa:	a0 50       	subi	r26, 0x00	; 0
     cfc:	be 4f       	sbci	r27, 0xFE	; 254
     cfe:	97 96       	adiw	r26, 0x27	; 39
     d00:	2d 91       	ld	r18, X+
     d02:	3c 91       	ld	r19, X
     d04:	98 97       	sbiw	r26, 0x28	; 40
     d06:	dc 01       	movw	r26, r24
     d08:	a0 5e       	subi	r26, 0xE0	; 224
     d0a:	be 4f       	sbci	r27, 0xFE	; 254
     d0c:	11 96       	adiw	r26, 0x01	; 1
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18

		if (ChannelArray[Cp->receiverChannel - 1].sender->priority == SYSTEM) {
     d12:	20 81       	ld	r18, Z
     d14:	31 81       	ldd	r19, Z+1	; 0x01
     d16:	21 50       	subi	r18, 0x01	; 1
     d18:	31 09       	sbc	r19, r1
     d1a:	42 9f       	mul	r20, r18
     d1c:	f0 01       	movw	r30, r0
     d1e:	43 9f       	mul	r20, r19
     d20:	f0 0d       	add	r31, r0
     d22:	11 24       	eor	r1, r1
     d24:	e0 50       	subi	r30, 0x00	; 0
     d26:	fe 4f       	sbci	r31, 0xFE	; 254
     d28:	02 80       	ldd	r0, Z+2	; 0x02
     d2a:	f3 81       	ldd	r31, Z+3	; 0x03
     d2c:	e0 2d       	mov	r30, r0
     d2e:	eb 5f       	subi	r30, 0xFB	; 251
     d30:	fe 4f       	sbci	r31, 0xFE	; 254
     d32:	20 81       	ld	r18, Z
     d34:	31 81       	ldd	r19, Z+1	; 0x01
     d36:	23 30       	cpi	r18, 0x03	; 3
     d38:	31 05       	cpc	r19, r1
     d3a:	a1 f4       	brne	.+40     	; 0xd64 <kernel_receive+0x11a>
			enqueue(&ChannelArray[Cp->receiverChannel - 1].sender, &SysQueue, &SysCount);
     d3c:	fc 01       	movw	r30, r24
     d3e:	e2 5e       	subi	r30, 0xE2	; 226
     d40:	fe 4f       	sbci	r31, 0xFE	; 254
     d42:	20 81       	ld	r18, Z
     d44:	31 81       	ldd	r19, Z+1	; 0x01
     d46:	21 50       	subi	r18, 0x01	; 1
     d48:	31 09       	sbc	r19, r1
     d4a:	42 9f       	mul	r20, r18
     d4c:	c0 01       	movw	r24, r0
     d4e:	43 9f       	mul	r20, r19
     d50:	90 0d       	add	r25, r0
     d52:	11 24       	eor	r1, r1
     d54:	44 e9       	ldi	r20, 0x94	; 148
     d56:	54 e0       	ldi	r21, 0x04	; 4
     d58:	60 ec       	ldi	r22, 0xC0	; 192
     d5a:	76 e1       	ldi	r23, 0x16	; 22
     d5c:	8e 5f       	subi	r24, 0xFE	; 254
     d5e:	9d 4f       	sbci	r25, 0xFD	; 253
     d60:	59 d1       	rcall	.+690    	; 0x1014 <enqueue>
     d62:	2c c0       	rjmp	.+88     	; 0xdbc <kernel_receive+0x172>
		} else if (ChannelArray[Cp->receiverChannel - 1].sender->priority == RR) {
     d64:	fc 01       	movw	r30, r24
     d66:	e2 5e       	subi	r30, 0xE2	; 226
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
     d6a:	20 81       	ld	r18, Z
     d6c:	31 81       	ldd	r19, Z+1	; 0x01
     d6e:	21 50       	subi	r18, 0x01	; 1
     d70:	31 09       	sbc	r19, r1
     d72:	49 e2       	ldi	r20, 0x29	; 41
     d74:	42 9f       	mul	r20, r18
     d76:	f0 01       	movw	r30, r0
     d78:	43 9f       	mul	r20, r19
     d7a:	f0 0d       	add	r31, r0
     d7c:	11 24       	eor	r1, r1
     d7e:	e0 50       	subi	r30, 0x00	; 0
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	02 80       	ldd	r0, Z+2	; 0x02
     d84:	f3 81       	ldd	r31, Z+3	; 0x03
     d86:	e0 2d       	mov	r30, r0
     d88:	eb 5f       	subi	r30, 0xFB	; 251
     d8a:	fe 4f       	sbci	r31, 0xFE	; 254
     d8c:	20 81       	ld	r18, Z
     d8e:	31 81       	ldd	r19, Z+1	; 0x01
     d90:	21 30       	cpi	r18, 0x01	; 1
     d92:	31 05       	cpc	r19, r1
     d94:	99 f4       	brne	.+38     	; 0xdbc <kernel_receive+0x172>
			enqueue(&ChannelArray[Cp->receiverChannel - 1].sender, &RRQueue, &RRCount);
     d96:	fc 01       	movw	r30, r24
     d98:	e2 5e       	subi	r30, 0xE2	; 226
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	20 81       	ld	r18, Z
     d9e:	31 81       	ldd	r19, Z+1	; 0x01
     da0:	21 50       	subi	r18, 0x01	; 1
     da2:	31 09       	sbc	r19, r1
     da4:	42 9f       	mul	r20, r18
     da6:	c0 01       	movw	r24, r0
     da8:	43 9f       	mul	r20, r19
     daa:	90 0d       	add	r25, r0
     dac:	11 24       	eor	r1, r1
     dae:	40 e9       	ldi	r20, 0x90	; 144
     db0:	54 e0       	ldi	r21, 0x04	; 4
     db2:	64 e0       	ldi	r22, 0x04	; 4
     db4:	77 e1       	ldi	r23, 0x17	; 23
     db6:	8e 5f       	subi	r24, 0xFE	; 254
     db8:	9d 4f       	sbci	r25, 0xFD	; 253
     dba:	2c d1       	rcall	.+600    	; 0x1014 <enqueue>
		}
		ChannelArray[Cp->receiverChannel - 1].sender = NULL;
     dbc:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <Cp>
     dc0:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <Cp+0x1>
     dc4:	fc 01       	movw	r30, r24
     dc6:	e2 5e       	subi	r30, 0xE2	; 226
     dc8:	fe 4f       	sbci	r31, 0xFE	; 254
     dca:	20 81       	ld	r18, Z
     dcc:	31 81       	ldd	r19, Z+1	; 0x01
     dce:	21 50       	subi	r18, 0x01	; 1
     dd0:	31 09       	sbc	r19, r1
     dd2:	49 e2       	ldi	r20, 0x29	; 41
     dd4:	42 9f       	mul	r20, r18
     dd6:	f0 01       	movw	r30, r0
     dd8:	43 9f       	mul	r20, r19
     dda:	f0 0d       	add	r31, r0
     ddc:	11 24       	eor	r1, r1
     dde:	e0 50       	subi	r30, 0x00	; 0
     de0:	fe 4f       	sbci	r31, 0xFE	; 254
     de2:	13 82       	std	Z+3, r1	; 0x03
     de4:	12 82       	std	Z+2, r1	; 0x02
		ChannelArray[Cp->senderChannel - 1].val = NULL;
     de6:	fc 01       	movw	r30, r24
     de8:	e4 5e       	subi	r30, 0xE4	; 228
     dea:	fe 4f       	sbci	r31, 0xFE	; 254
     dec:	80 81       	ld	r24, Z
     dee:	91 81       	ldd	r25, Z+1	; 0x01
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	48 9f       	mul	r20, r24
     df4:	f0 01       	movw	r30, r0
     df6:	49 9f       	mul	r20, r25
     df8:	f0 0d       	add	r31, r0
     dfa:	11 24       	eor	r1, r1
     dfc:	e0 50       	subi	r30, 0x00	; 0
     dfe:	fe 4f       	sbci	r31, 0xFE	; 254
     e00:	10 a6       	std	Z+40, r1	; 0x28
     e02:	17 a2       	std	Z+39, r1	; 0x27
     e04:	08 95       	ret

00000e06 <OS_Start>:
}

/**
  * This function starts the RTOS after creating a_main
  */
void OS_Start() {   
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
	if ( (! KernelActive) && (Tasks > 0)) {
     e14:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <KernelActive>
     e18:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <KernelActive+0x1>
     e1c:	89 2b       	or	r24, r25
     e1e:	09 f0       	breq	.+2      	; 0xe22 <OS_Start+0x1c>
     e20:	dd c0       	rjmp	.+442    	; 0xfdc <OS_Start+0x1d6>
     e22:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <Tasks>
     e26:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <Tasks+0x1>
     e2a:	89 2b       	or	r24, r25
     e2c:	09 f4       	brne	.+2      	; 0xe30 <OS_Start+0x2a>
     e2e:	d6 c0       	rjmp	.+428    	; 0xfdc <OS_Start+0x1d6>
		Disable_Interrupt();
     e30:	f8 94       	cli

		KernelActive = 1;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <KernelActive+0x1>
     e3a:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <KernelActive>
  * corresponding kernel function on its behalf.
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */
     e3e:	61 da       	rcall	.-2878   	; 0x302 <Dispatch>
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
			break;
		case NEXT:
			Cp->state = READY;
     e40:	dd 24       	eor	r13, r13
     e42:	d3 94       	inc	r13
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */

	while(1) {
		Cp->request = NONE; /* clear its request */
     e44:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <Cp>
     e48:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <Cp+0x1>
     e4c:	df 01       	movw	r26, r30
     e4e:	a5 5f       	subi	r26, 0xF5	; 245
     e50:	be 4f       	sbci	r27, 0xFE	; 254
     e52:	1c 92       	st	X, r1

		/* activate this newly selected task */
		CurrentSp = Cp->sp;
     e54:	82 81       	ldd	r24, Z+2	; 0x02
     e56:	93 81       	ldd	r25, Z+3	; 0x03
     e58:	90 93 e1 16 	sts	0x16E1, r25	; 0x8016e1 <CurrentSp+0x1>
     e5c:	80 93 e0 16 	sts	0x16E0, r24	; 0x8016e0 <CurrentSp>

		Exit_Kernel();    /* or CSwitch() */
     e60:	5d d9       	rcall	.-3398   	; 0x11c <CSwitch>

		/* if this task makes a system call, it will return to here! */

		/* save the Cp's stack pointer */
		Cp->sp = CurrentSp;
     e62:	c0 91 9e 04 	lds	r28, 0x049E	; 0x80049e <Cp>
     e66:	d0 91 9f 04 	lds	r29, 0x049F	; 0x80049f <Cp+0x1>
     e6a:	80 91 e0 16 	lds	r24, 0x16E0	; 0x8016e0 <CurrentSp>
     e6e:	90 91 e1 16 	lds	r25, 0x16E1	; 0x8016e1 <CurrentSp+0x1>
     e72:	9b 83       	std	Y+3, r25	; 0x03
     e74:	8a 83       	std	Y+2, r24	; 0x02

		switch(Cp->request){
     e76:	fe 01       	movw	r30, r28
     e78:	e5 5f       	subi	r30, 0xF5	; 245
     e7a:	fe 4f       	sbci	r31, 0xFE	; 254
     e7c:	e0 81       	ld	r30, Z
     e7e:	8e 2f       	mov	r24, r30
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	fc 01       	movw	r30, r24
     e84:	31 97       	sbiw	r30, 0x01	; 1
     e86:	e8 30       	cpi	r30, 0x08	; 8
     e88:	f1 05       	cpc	r31, r1
     e8a:	e0 f6       	brcc	.-72     	; 0xe44 <OS_Start+0x3e>
     e8c:	88 27       	eor	r24, r24
     e8e:	ee 58       	subi	r30, 0x8E	; 142
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	8f 4f       	sbci	r24, 0xFF	; 255
     e94:	88 c1       	rjmp	.+784    	; 0x11a6 <__tablejump2__>
		case CREATE:
			Cp->response = Kernel_Create_Task( Cp->code, Cp->priority, Cp->arg, -1, -1, -1);
     e96:	fe 01       	movw	r30, r28
     e98:	e9 5f       	subi	r30, 0xF9	; 249
     e9a:	fe 4f       	sbci	r31, 0xFE	; 254
     e9c:	40 81       	ld	r20, Z
     e9e:	51 81       	ldd	r21, Z+1	; 0x01
     ea0:	32 97       	sbiw	r30, 0x02	; 2
     ea2:	60 81       	ld	r22, Z
     ea4:	71 81       	ldd	r23, Z+1	; 0x01
     ea6:	34 96       	adiw	r30, 0x04	; 4
     ea8:	80 81       	ld	r24, Z
     eaa:	91 81       	ldd	r25, Z+1	; 0x01
     eac:	ee 24       	eor	r14, r14
     eae:	ea 94       	dec	r14
     eb0:	fe 2c       	mov	r15, r14
     eb2:	0f ef       	ldi	r16, 0xFF	; 255
     eb4:	1f ef       	ldi	r17, 0xFF	; 255
     eb6:	2f ef       	ldi	r18, 0xFF	; 255
     eb8:	3f ef       	ldi	r19, 0xFF	; 255
     eba:	2e db       	rcall	.-2468   	; 0x518 <Kernel_Create_Task>
     ebc:	c4 5f       	subi	r28, 0xF4	; 244
     ebe:	de 4f       	sbci	r29, 0xFE	; 254
     ec0:	99 83       	std	Y+1, r25	; 0x01
     ec2:	88 83       	st	Y, r24
     ec4:	bf cf       	rjmp	.-130    	; 0xe44 <OS_Start+0x3e>
			break;
		case CREATE_SYS:
			Cp->response = Kernel_Create_Task( Cp->code, SYSTEM, Cp->arg, -1, -1, -1);
     ec6:	fe 01       	movw	r30, r28
     ec8:	e9 5f       	subi	r30, 0xF9	; 249
     eca:	fe 4f       	sbci	r31, 0xFE	; 254
     ecc:	40 81       	ld	r20, Z
     ece:	51 81       	ldd	r21, Z+1	; 0x01
     ed0:	32 96       	adiw	r30, 0x02	; 2
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	ee 24       	eor	r14, r14
     ed8:	ea 94       	dec	r14
     eda:	fe 2c       	mov	r15, r14
     edc:	0f ef       	ldi	r16, 0xFF	; 255
     ede:	1f ef       	ldi	r17, 0xFF	; 255
     ee0:	2f ef       	ldi	r18, 0xFF	; 255
     ee2:	3f ef       	ldi	r19, 0xFF	; 255
     ee4:	63 e0       	ldi	r22, 0x03	; 3
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	17 db       	rcall	.-2514   	; 0x518 <Kernel_Create_Task>
     eea:	c4 5f       	subi	r28, 0xF4	; 244
     eec:	de 4f       	sbci	r29, 0xFE	; 254
     eee:	99 83       	std	Y+1, r25	; 0x01
     ef0:	88 83       	st	Y, r24
     ef2:	a8 cf       	rjmp	.-176    	; 0xe44 <OS_Start+0x3e>
			break;
		case CREATE_PERIODIC:
			Cp->response = Kernel_Create_Task( Cp->code, PERIODIC, Cp->arg, Cp->offset, Cp->wcet, Cp->period);
     ef4:	fe 01       	movw	r30, r28
     ef6:	e0 5f       	subi	r30, 0xF0	; 240
     ef8:	fe 4f       	sbci	r31, 0xFE	; 254
     efa:	e0 80       	ld	r14, Z
     efc:	f1 80       	ldd	r15, Z+1	; 0x01
     efe:	32 96       	adiw	r30, 0x02	; 2
     f00:	00 81       	ld	r16, Z
     f02:	11 81       	ldd	r17, Z+1	; 0x01
     f04:	32 96       	adiw	r30, 0x02	; 2
     f06:	20 81       	ld	r18, Z
     f08:	31 81       	ldd	r19, Z+1	; 0x01
     f0a:	3d 97       	sbiw	r30, 0x0d	; 13
     f0c:	40 81       	ld	r20, Z
     f0e:	51 81       	ldd	r21, Z+1	; 0x01
     f10:	32 96       	adiw	r30, 0x02	; 2
     f12:	80 81       	ld	r24, Z
     f14:	91 81       	ldd	r25, Z+1	; 0x01
     f16:	62 e0       	ldi	r22, 0x02	; 2
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	fe da       	rcall	.-2564   	; 0x518 <Kernel_Create_Task>
     f1c:	c4 5f       	subi	r28, 0xF4	; 244
     f1e:	de 4f       	sbci	r29, 0xFE	; 254
     f20:	99 83       	std	Y+1, r25	; 0x01
     f22:	88 83       	st	Y, r24
     f24:	8f cf       	rjmp	.-226    	; 0xe44 <OS_Start+0x3e>
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
     f26:	fe 01       	movw	r30, r28
     f28:	e9 5f       	subi	r30, 0xF9	; 249
     f2a:	fe 4f       	sbci	r31, 0xFE	; 254
     f2c:	40 81       	ld	r20, Z
     f2e:	51 81       	ldd	r21, Z+1	; 0x01
     f30:	32 96       	adiw	r30, 0x02	; 2
     f32:	80 81       	ld	r24, Z
     f34:	91 81       	ldd	r25, Z+1	; 0x01
     f36:	ee 24       	eor	r14, r14
     f38:	ea 94       	dec	r14
     f3a:	fe 2c       	mov	r15, r14
     f3c:	0f ef       	ldi	r16, 0xFF	; 255
     f3e:	1f ef       	ldi	r17, 0xFF	; 255
     f40:	2f ef       	ldi	r18, 0xFF	; 255
     f42:	3f ef       	ldi	r19, 0xFF	; 255
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	e7 da       	rcall	.-2610   	; 0x518 <Kernel_Create_Task>
     f4a:	c4 5f       	subi	r28, 0xF4	; 244
     f4c:	de 4f       	sbci	r29, 0xFE	; 254
     f4e:	99 83       	std	Y+1, r25	; 0x01
     f50:	88 83       	st	Y, r24
     f52:	78 cf       	rjmp	.-272    	; 0xe44 <OS_Start+0x3e>
			break;
		case NEXT:
			Cp->state = READY;
     f54:	fe 01       	movw	r30, r28
     f56:	ec 5f       	subi	r30, 0xFC	; 252
     f58:	fe 4f       	sbci	r31, 0xFE	; 254
     f5a:	d0 82       	st	Z, r13
			if (Cp->priority == SYSTEM) {
     f5c:	31 96       	adiw	r30, 0x01	; 1
     f5e:	80 81       	ld	r24, Z
     f60:	91 81       	ldd	r25, Z+1	; 0x01
     f62:	03 97       	sbiw	r24, 0x03	; 3
     f64:	41 f4       	brne	.+16     	; 0xf76 <OS_Start+0x170>
				enqueue(&Cp, &SysQueue, &SysCount);
     f66:	44 e9       	ldi	r20, 0x94	; 148
     f68:	54 e0       	ldi	r21, 0x04	; 4
     f6a:	60 ec       	ldi	r22, 0xC0	; 192
     f6c:	76 e1       	ldi	r23, 0x16	; 22
     f6e:	8e e9       	ldi	r24, 0x9E	; 158
     f70:	94 e0       	ldi	r25, 0x04	; 4
     f72:	50 d0       	rcall	.+160    	; 0x1014 <enqueue>
     f74:	1c c0       	rjmp	.+56     	; 0xfae <OS_Start+0x1a8>
			} else if (Cp->priority == PERIODIC) {
     f76:	fe 01       	movw	r30, r28
     f78:	eb 5f       	subi	r30, 0xFB	; 251
     f7a:	fe 4f       	sbci	r31, 0xFE	; 254
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	02 97       	sbiw	r24, 0x02	; 2
     f82:	41 f4       	brne	.+16     	; 0xf94 <OS_Start+0x18e>
				enqueuePeriodic(&Cp, &PeriodicQueue, &PeriodicCount);
     f84:	42 e9       	ldi	r20, 0x92	; 146
     f86:	54 e0       	ldi	r21, 0x04	; 4
     f88:	62 ee       	ldi	r22, 0xE2	; 226
     f8a:	76 e1       	ldi	r23, 0x16	; 22
     f8c:	8e e9       	ldi	r24, 0x9E	; 158
     f8e:	94 e0       	ldi	r25, 0x04	; 4
     f90:	93 d0       	rcall	.+294    	; 0x10b8 <enqueuePeriodic>
     f92:	0d c0       	rjmp	.+26     	; 0xfae <OS_Start+0x1a8>
			} else if (Cp->priority == RR) {
     f94:	cb 5f       	subi	r28, 0xFB	; 251
     f96:	de 4f       	sbci	r29, 0xFE	; 254
     f98:	88 81       	ld	r24, Y
     f9a:	99 81       	ldd	r25, Y+1	; 0x01
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	39 f4       	brne	.+14     	; 0xfae <OS_Start+0x1a8>
				enqueue(&Cp, &RRQueue, &RRCount);
     fa0:	40 e9       	ldi	r20, 0x90	; 144
     fa2:	54 e0       	ldi	r21, 0x04	; 4
     fa4:	64 e0       	ldi	r22, 0x04	; 4
     fa6:	77 e1       	ldi	r23, 0x17	; 23
     fa8:	8e e9       	ldi	r24, 0x9E	; 158
     faa:	94 e0       	ldi	r25, 0x04	; 4
     fac:	33 d0       	rcall	.+102    	; 0x1014 <enqueue>
			}
			Dispatch();
     fae:	a9 d9       	rcall	.-3246   	; 0x302 <Dispatch>
     fb0:	49 cf       	rjmp	.-366    	; 0xe44 <OS_Start+0x3e>
			break;
		case NONE:
			break;
		case SEND:
			kernel_send();
     fb2:	e8 dc       	rcall	.-1584   	; 0x984 <kernel_send>
     fb4:	47 cf       	rjmp	.-370    	; 0xe44 <OS_Start+0x3e>
			break;
		case RECEIVE:
			kernel_receive();
     fb6:	49 de       	rcall	.-878    	; 0xc4a <kernel_receive>
     fb8:	45 cf       	rjmp	.-374    	; 0xe44 <OS_Start+0x3e>

/**
  *  Terminate a task
  */
static void Kernel_Terminate_Task() {
	Cp->state = DEAD;
     fba:	fe 01       	movw	r30, r28
     fbc:	ec 5f       	subi	r30, 0xFC	; 252
     fbe:	fe 4f       	sbci	r31, 0xFE	; 254
     fc0:	10 82       	st	Z, r1
	Cp->processID = 0;
     fc2:	19 82       	std	Y+1, r1	; 0x01
     fc4:	18 82       	st	Y, r1
	Tasks--;
     fc6:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <Tasks>
     fca:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <Tasks+0x1>
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <Tasks+0x1>
     fd4:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <Tasks>
			kernel_receive();
			break;
		case TERMINATE:
			/* deallocate all resources used by this task */
			Kernel_Terminate_Task();
			Dispatch();
     fd8:	94 d9       	rcall	.-3288   	; 0x302 <Dispatch>
     fda:	34 cf       	rjmp	.-408    	; 0xe44 <OS_Start+0x3e>

		KernelActive = 1;
		Next_Kernel_Request();
		/* SHOULD NEVER GET HERE!!! */
	}
}
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	ff 90       	pop	r15
     fe6:	ef 90       	pop	r14
     fe8:	df 90       	pop	r13
     fea:	08 95       	ret

00000fec <main>:
/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	//pin 25
	DDRA |= (1<<PA3);
     fec:	0b 9a       	sbi	0x01, 3	; 1
	PORTA &= ~(1<<PA3);
     fee:	13 98       	cbi	0x02, 3	; 2

	//pin 26
	DDRA |= (1<<PA4);
     ff0:	0c 9a       	sbi	0x01, 4	; 1
	PORTA &= ~(1<<PA4);
     ff2:	14 98       	cbi	0x02, 4	; 2

	//pin 27
	DDRA |= (1<<PA5);
     ff4:	0d 9a       	sbi	0x01, 5	; 1
	PORTA &= ~(1<<PA5);
     ff6:	15 98       	cbi	0x02, 5	; 2

	//pin 28
	DDRA |= (1<<PA6);
     ff8:	0e 9a       	sbi	0x01, 6	; 1
	PORTA &= ~(1<<PA6);
     ffa:	16 98       	cbi	0x02, 6	; 2

	//pin 29
	DDRA |= (1<<PA7);
     ffc:	0f 9a       	sbi	0x01, 7	; 1
	PORTA &= ~(1<<PA7);
     ffe:	17 98       	cbi	0x02, 7	; 2

	setup();
    1000:	23 dc       	rcall	.-1978   	; 0x848 <setup>
	OS_Init();
    1002:	cb da       	rcall	.-2666   	; 0x59a <OS_Init>
	Task_Create_Idle();
    1004:	95 db       	rcall	.-2262   	; 0x730 <Task_Create_Idle>
	Task_Create_System(a_main, 1);
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	84 e4       	ldi	r24, 0x44	; 68
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	7c db       	rcall	.-2312   	; 0x708 <Task_Create_System>
	OS_Start();
    1010:	fa ce       	rjmp	.-524    	; 0xe06 <OS_Start>
    1012:	08 95       	ret

00001014 <enqueue>:
}

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    101a:	28 81       	ld	r18, Y
    101c:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    101e:	2f 30       	cpi	r18, 0x0F	; 15
    1020:	31 05       	cpc	r19, r1
    1022:	e9 f0       	breq	.+58     	; 0x105e <enqueue+0x4a>
        return NULL;
    }

    int i = (*QCount) - 1;
    1024:	e8 81       	ld	r30, Y
    1026:	f9 81       	ldd	r31, Y+1	; 0x01
    1028:	9f 01       	movw	r18, r30
    102a:	21 50       	subi	r18, 0x01	; 1
    102c:	31 09       	sbc	r19, r1
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    102e:	62 f0       	brmi	.+24     	; 0x1048 <enqueue+0x34>
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	e6 0f       	add	r30, r22
    1036:	f7 1f       	adc	r31, r23
    1038:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    103a:	32 91       	ld	r19, -Z
    103c:	22 91       	ld	r18, -Z
    103e:	33 83       	std	Z+3, r19	; 0x03
    1040:	22 83       	std	Z+2, r18	; 0x02

    int i = (*QCount) - 1;
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    1042:	ea 17       	cp	r30, r26
    1044:	fb 07       	cpc	r31, r27
    1046:	c9 f7       	brne	.-14     	; 0x103a <enqueue+0x26>
        i--;
        temp = Queue[i];
    }

    //Queue[i+1] = *p; //original code
	Queue[0] = *p;
    1048:	fc 01       	movw	r30, r24
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	fb 01       	movw	r30, r22
    1050:	91 83       	std	Z+1, r25	; 0x01
    1052:	80 83       	st	Z, r24
    (*QCount)++;
    1054:	88 81       	ld	r24, Y
    1056:	99 81       	ldd	r25, Y+1	; 0x01
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	99 83       	std	Y+1, r25	; 0x01
    105c:	88 83       	st	Y, r24
}
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <dequeue>:

/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    1064:	ac 01       	movw	r20, r24
    1066:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1068:	8d 91       	ld	r24, X+
    106a:	9c 91       	ld	r25, X
    106c:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
    106e:	89 2b       	or	r24, r25
    1070:	01 f1       	breq	.+64     	; 0x10b2 <dequeue+0x4e>
	   return NULL;
   }

   volatile PD *result = (Queue[(*QCount)-1]);
    1072:	ed 91       	ld	r30, X+
    1074:	fc 91       	ld	r31, X
    1076:	11 97       	sbiw	r26, 0x01	; 1
    1078:	e1 50       	subi	r30, 0x01	; 1
    107a:	f0 48       	sbci	r31, 0x80	; 128
    107c:	ee 0f       	add	r30, r30
    107e:	ff 1f       	adc	r31, r31
    1080:	e4 0f       	add	r30, r20
    1082:	f5 1f       	adc	r31, r21
    1084:	80 81       	ld	r24, Z
    1086:	91 81       	ldd	r25, Z+1	; 0x01
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
    1088:	2d 91       	ld	r18, X+
    108a:	3c 91       	ld	r19, X
    108c:	11 97       	sbiw	r26, 0x01	; 1
    108e:	f9 01       	movw	r30, r18
    1090:	e1 50       	subi	r30, 0x01	; 1
    1092:	f0 48       	sbci	r31, 0x80	; 128
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	e4 0f       	add	r30, r20
    109a:	f5 1f       	adc	r31, r21
    109c:	11 82       	std	Z+1, r1	; 0x01
    109e:	10 82       	st	Z, r1
   (*QCount)--;
    10a0:	2d 91       	ld	r18, X+
    10a2:	3c 91       	ld	r19, X
    10a4:	11 97       	sbiw	r26, 0x01	; 1
    10a6:	21 50       	subi	r18, 0x01	; 1
    10a8:	31 09       	sbc	r19, r1
    10aa:	11 96       	adiw	r26, 0x01	; 1
    10ac:	3c 93       	st	X, r19
    10ae:	2e 93       	st	-X, r18

   return result;
    10b0:	08 95       	ret
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
	   return NULL;
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
   volatile PD *result = (Queue[(*QCount)-1]);
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
   (*QCount)--;

   return result;
}
    10b6:	08 95       	ret

000010b8 <enqueuePeriodic>:

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    10ca:	ea 01       	movw	r28, r20
    10cc:	28 81       	ld	r18, Y
    10ce:	39 81       	ldd	r19, Y+1	; 0x01

   return result;
}

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
	if(isFull(QCount)) {
    10d0:	2f 30       	cpi	r18, 0x0F	; 15
    10d2:	31 05       	cpc	r19, r1
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <enqueuePeriodic+0x20>
    10d6:	4a c0       	rjmp	.+148    	; 0x116c <enqueuePeriodic+0xb4>
		return;
	}

	int i = (*QCount) - 1;
    10d8:	28 81       	ld	r18, Y
    10da:	39 81       	ldd	r19, Y+1	; 0x01
    10dc:	21 50       	subi	r18, 0x01	; 1
    10de:	31 09       	sbc	r19, r1

	volatile PD *new = *p;
    10e0:	fc 01       	movw	r30, r24
    10e2:	00 81       	ld	r16, Z
    10e4:	11 81       	ldd	r17, Z+1	; 0x01

	volatile PD *temp = Queue[i];
    10e6:	f9 01       	movw	r30, r18
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	db 01       	movw	r26, r22
    10ee:	ae 0f       	add	r26, r30
    10f0:	bf 1f       	adc	r27, r31
    10f2:	4d 91       	ld	r20, X+
    10f4:	5c 91       	ld	r21, X

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    10f6:	33 23       	and	r19, r19
    10f8:	3c f1       	brlt	.+78     	; 0x1148 <enqueuePeriodic+0x90>
    10fa:	d8 01       	movw	r26, r16
    10fc:	aa 5e       	subi	r26, 0xEA	; 234
    10fe:	be 4f       	sbci	r27, 0xFE	; 254
    1100:	ed 90       	ld	r14, X+
    1102:	fc 90       	ld	r15, X
    1104:	da 01       	movw	r26, r20
    1106:	aa 5e       	subi	r26, 0xEA	; 234
    1108:	be 4f       	sbci	r27, 0xFE	; 254
    110a:	4d 91       	ld	r20, X+
    110c:	5c 91       	ld	r21, X
    110e:	e4 16       	cp	r14, r20
    1110:	f5 06       	cpc	r15, r21
    1112:	d4 f0       	brlt	.+52     	; 0x1148 <enqueuePeriodic+0x90>
    1114:	e6 0f       	add	r30, r22
    1116:	f7 1f       	adc	r31, r23
    1118:	0a 5e       	subi	r16, 0xEA	; 234
    111a:	1e 4f       	sbci	r17, 0xFE	; 254
		Queue[i+1] = Queue[i];
    111c:	a0 81       	ld	r26, Z
    111e:	b1 81       	ldd	r27, Z+1	; 0x01
    1120:	b3 83       	std	Z+3, r27	; 0x03
    1122:	a2 83       	std	Z+2, r26	; 0x02
		i--;
    1124:	21 50       	subi	r18, 0x01	; 1
    1126:	31 09       	sbc	r19, r1
		temp = Queue[i];
    1128:	b2 91       	ld	r27, -Z
    112a:	a2 91       	ld	r26, -Z

	volatile PD *new = *p;

	volatile PD *temp = Queue[i];

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    112c:	2f 3f       	cpi	r18, 0xFF	; 255
    112e:	4f ef       	ldi	r20, 0xFF	; 255
    1130:	34 07       	cpc	r19, r20
    1132:	51 f0       	breq	.+20     	; 0x1148 <enqueuePeriodic+0x90>
    1134:	e8 01       	movw	r28, r16
    1136:	e8 80       	ld	r14, Y
    1138:	f9 80       	ldd	r15, Y+1	; 0x01
    113a:	aa 5e       	subi	r26, 0xEA	; 234
    113c:	be 4f       	sbci	r27, 0xFE	; 254
    113e:	4d 91       	ld	r20, X+
    1140:	5c 91       	ld	r21, X
    1142:	e4 16       	cp	r14, r20
    1144:	f5 06       	cpc	r15, r21
    1146:	54 f7       	brge	.-44     	; 0x111c <enqueuePeriodic+0x64>
		Queue[i+1] = Queue[i];
		i--;
		temp = Queue[i];
	}

	Queue[i+1] = *p;
    1148:	fc 01       	movw	r30, r24
    114a:	80 81       	ld	r24, Z
    114c:	91 81       	ldd	r25, Z+1	; 0x01
    114e:	2f 5f       	subi	r18, 0xFF	; 255
    1150:	3f 4f       	sbci	r19, 0xFF	; 255
    1152:	22 0f       	add	r18, r18
    1154:	33 1f       	adc	r19, r19
    1156:	fb 01       	movw	r30, r22
    1158:	e2 0f       	add	r30, r18
    115a:	f3 1f       	adc	r31, r19
    115c:	91 83       	std	Z+1, r25	; 0x01
    115e:	80 83       	st	Z, r24
	(*QCount)++;
    1160:	e6 01       	movw	r28, r12
    1162:	88 81       	ld	r24, Y
    1164:	99 81       	ldd	r25, Y+1	; 0x01
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	99 83       	std	Y+1, r25	; 0x01
    116a:	88 83       	st	Y, r24
}
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	df 90       	pop	r13
    117a:	cf 90       	pop	r12
    117c:	08 95       	ret

0000117e <peek>:

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    117e:	fb 01       	movw	r30, r22
    1180:	20 81       	ld	r18, Z
    1182:	31 81       	ldd	r19, Z+1	; 0x01
	Queue[i+1] = *p;
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
    1184:	23 2b       	or	r18, r19
    1186:	61 f0       	breq	.+24     	; 0x11a0 <peek+0x22>
		return NULL;
	}
	volatile PD *result = (Queue[(*QCount)-1]);
    1188:	20 81       	ld	r18, Z
    118a:	31 81       	ldd	r19, Z+1	; 0x01
    118c:	f9 01       	movw	r30, r18
    118e:	e1 50       	subi	r30, 0x01	; 1
    1190:	f0 48       	sbci	r31, 0x80	; 128
    1192:	ee 0f       	add	r30, r30
    1194:	ff 1f       	adc	r31, r31
    1196:	e8 0f       	add	r30, r24
    1198:	f9 1f       	adc	r31, r25
    119a:	80 81       	ld	r24, Z
    119c:	91 81       	ldd	r25, Z+1	; 0x01
	return result;
    119e:	08 95       	ret
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
		return NULL;
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
	}
	volatile PD *result = (Queue[(*QCount)-1]);
	return result;
    11a4:	08 95       	ret

000011a6 <__tablejump2__>:
    11a6:	ee 0f       	add	r30, r30
    11a8:	ff 1f       	adc	r31, r31
    11aa:	88 1f       	adc	r24, r24
    11ac:	8b bf       	out	0x3b, r24	; 59
    11ae:	07 90       	elpm	r0, Z+
    11b0:	f6 91       	elpm	r31, Z
    11b2:	e0 2d       	mov	r30, r0
    11b4:	19 94       	eijmp

000011b6 <_exit>:
    11b6:	f8 94       	cli

000011b8 <__stop_program>:
    11b8:	ff cf       	rjmp	.-2      	; 0x11b8 <__stop_program>
