
Project2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000942  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001254  00800200  00800200  00000942  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000009b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bae  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010ec  00000000  00000000  00002686  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a40  00000000  00000000  00003772  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  000041b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d9  00000000  00000000  00004408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c9  00000000  00000000  00004ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000054aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	78 c0       	rjmp	.+240    	; 0xf2 <__ctors_end>
   2:	00 00       	nop
   4:	88 c0       	rjmp	.+272    	; 0x116 <__bad_interrupt>
   6:	00 00       	nop
   8:	86 c0       	rjmp	.+268    	; 0x116 <__bad_interrupt>
   a:	00 00       	nop
   c:	84 c0       	rjmp	.+264    	; 0x116 <__bad_interrupt>
   e:	00 00       	nop
  10:	82 c0       	rjmp	.+260    	; 0x116 <__bad_interrupt>
  12:	00 00       	nop
  14:	80 c0       	rjmp	.+256    	; 0x116 <__bad_interrupt>
  16:	00 00       	nop
  18:	7e c0       	rjmp	.+252    	; 0x116 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
  22:	00 00       	nop
  24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
  26:	00 00       	nop
  28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	74 c0       	rjmp	.+232    	; 0x116 <__bad_interrupt>
  2e:	00 00       	nop
  30:	72 c0       	rjmp	.+228    	; 0x116 <__bad_interrupt>
  32:	00 00       	nop
  34:	70 c0       	rjmp	.+224    	; 0x116 <__bad_interrupt>
  36:	00 00       	nop
  38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6c c0       	rjmp	.+216    	; 0x116 <__bad_interrupt>
  3e:	00 00       	nop
  40:	6a c0       	rjmp	.+212    	; 0x116 <__bad_interrupt>
  42:	00 00       	nop
  44:	9d c3       	rjmp	.+1850   	; 0x780 <__vector_17>
  46:	00 00       	nop
  48:	66 c0       	rjmp	.+204    	; 0x116 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	64 c0       	rjmp	.+200    	; 0x116 <__bad_interrupt>
  4e:	00 00       	nop
  50:	62 c0       	rjmp	.+196    	; 0x116 <__bad_interrupt>
  52:	00 00       	nop
  54:	60 c0       	rjmp	.+192    	; 0x116 <__bad_interrupt>
  56:	00 00       	nop
  58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5c c0       	rjmp	.+184    	; 0x116 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
  62:	00 00       	nop
  64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
  66:	00 00       	nop
  68:	56 c0       	rjmp	.+172    	; 0x116 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	54 c0       	rjmp	.+168    	; 0x116 <__bad_interrupt>
  6e:	00 00       	nop
  70:	52 c0       	rjmp	.+164    	; 0x116 <__bad_interrupt>
  72:	00 00       	nop
  74:	50 c0       	rjmp	.+160    	; 0x116 <__bad_interrupt>
  76:	00 00       	nop
  78:	4e c0       	rjmp	.+156    	; 0x116 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4c c0       	rjmp	.+152    	; 0x116 <__bad_interrupt>
  7e:	00 00       	nop
  80:	a6 c3       	rjmp	.+1868   	; 0x7ce <__vector_32>
  82:	00 00       	nop
  84:	48 c0       	rjmp	.+144    	; 0x116 <__bad_interrupt>
  86:	00 00       	nop
  88:	46 c0       	rjmp	.+140    	; 0x116 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	44 c0       	rjmp	.+136    	; 0x116 <__bad_interrupt>
  8e:	00 00       	nop
  90:	42 c0       	rjmp	.+132    	; 0x116 <__bad_interrupt>
  92:	00 00       	nop
  94:	40 c0       	rjmp	.+128    	; 0x116 <__bad_interrupt>
  96:	00 00       	nop
  98:	3e c0       	rjmp	.+124    	; 0x116 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3c c0       	rjmp	.+120    	; 0x116 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3a c0       	rjmp	.+116    	; 0x116 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	38 c0       	rjmp	.+112    	; 0x116 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	36 c0       	rjmp	.+108    	; 0x116 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	34 c0       	rjmp	.+104    	; 0x116 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	32 c0       	rjmp	.+100    	; 0x116 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	30 c0       	rjmp	.+96     	; 0x116 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2e c0       	rjmp	.+92     	; 0x116 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2c c0       	rjmp	.+88     	; 0x116 <__bad_interrupt>
  be:	00 00       	nop
  c0:	2a c0       	rjmp	.+84     	; 0x116 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	28 c0       	rjmp	.+80     	; 0x116 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	26 c0       	rjmp	.+76     	; 0x116 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	24 c0       	rjmp	.+72     	; 0x116 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	22 c0       	rjmp	.+68     	; 0x116 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	20 c0       	rjmp	.+64     	; 0x116 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1e c0       	rjmp	.+60     	; 0x116 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1c c0       	rjmp	.+56     	; 0x116 <__bad_interrupt>
  de:	00 00       	nop
  e0:	1a c0       	rjmp	.+52     	; 0x116 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	f2 02       	muls	r31, r18
  e6:	b1 02       	muls	r27, r17
  e8:	c2 02       	muls	r28, r18
  ea:	e2 02       	muls	r30, r18
  ec:	d2 02       	muls	r29, r18
  ee:	f2 02       	muls	r31, r18
  f0:	1f 03       	fmul	r17, r23

000000f2 <__ctors_end>:
  f2:	11 24       	eor	r1, r1
  f4:	1f be       	out	0x3f, r1	; 63
  f6:	cf ef       	ldi	r28, 0xFF	; 255
  f8:	d1 e2       	ldi	r29, 0x21	; 33
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	cd bf       	out	0x3d, r28	; 61
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0c bf       	out	0x3c, r16	; 60

00000102 <__do_clear_bss>:
 102:	24 e1       	ldi	r18, 0x14	; 20
 104:	a0 e0       	ldi	r26, 0x00	; 0
 106:	b2 e0       	ldi	r27, 0x02	; 2
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	a4 35       	cpi	r26, 0x54	; 84
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	74 d3       	rcall	.+1768   	; 0x7fc <main>
 114:	da c3       	rjmp	.+1972   	; 0x8ca <_exit>

00000116 <__bad_interrupt>:
 116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 118:	0f 92       	push	r0
 11a:	1f 92       	push	r1
 11c:	2f 92       	push	r2
 11e:	3f 92       	push	r3
 120:	4f 92       	push	r4
 122:	5f 92       	push	r5
 124:	6f 92       	push	r6
 126:	7f 92       	push	r7
 128:	8f 92       	push	r8
 12a:	9f 92       	push	r9
 12c:	af 92       	push	r10
 12e:	bf 92       	push	r11
 130:	cf 92       	push	r12
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	4f 93       	push	r20
 142:	5f 93       	push	r21
 144:	6f 93       	push	r22
 146:	7f 93       	push	r23
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	af 93       	push	r26
 14e:	bf 93       	push	r27
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
 158:	0f b7       	in	r16, 0x3f	; 63
 15a:	0f 93       	push	r16
 15c:	fc b7       	in	r31, 0x3c	; 60
 15e:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
 160:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 162:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
 164:	e0 93 32 14 	sts	0x1432, r30	; 0x801432 <KernelSp>
        sts  KernelSp+1, r31
 168:	f0 93 33 14 	sts	0x1433, r31	; 0x801433 <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
 16c:	e0 91 f0 13 	lds	r30, 0x13F0	; 0x8013f0 <CurrentSp>
        lds  r31, CurrentSp+1
 170:	f0 91 f1 13 	lds	r31, 0x13F1	; 0x8013f1 <CurrentSp+0x1>
        out  SPL, r30
 174:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 176:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
 178:	ff 91       	pop	r31
 17a:	fc bf       	out	0x3c, r31	; 60
 17c:	0f 91       	pop	r16
 17e:	0f bf       	out	0x3f, r16	; 63
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	df 90       	pop	r13
 1a6:	cf 90       	pop	r12
 1a8:	bf 90       	pop	r11
 1aa:	af 90       	pop	r10
 1ac:	9f 90       	pop	r9
 1ae:	8f 90       	pop	r8
 1b0:	7f 90       	pop	r7
 1b2:	6f 90       	pop	r6
 1b4:	5f 90       	pop	r5
 1b6:	4f 90       	pop	r4
 1b8:	3f 90       	pop	r3
 1ba:	2f 90       	pop	r2
 1bc:	1f 90       	pop	r1
 1be:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
 1c0:	18 95       	reti

000001c2 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
 1c2:	0f 92       	push	r0
 1c4:	1f 92       	push	r1
 1c6:	2f 92       	push	r2
 1c8:	3f 92       	push	r3
 1ca:	4f 92       	push	r4
 1cc:	5f 92       	push	r5
 1ce:	6f 92       	push	r6
 1d0:	7f 92       	push	r7
 1d2:	8f 92       	push	r8
 1d4:	9f 92       	push	r9
 1d6:	af 92       	push	r10
 1d8:	bf 92       	push	r11
 1da:	cf 92       	push	r12
 1dc:	df 92       	push	r13
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	2f 93       	push	r18
 1e8:	3f 93       	push	r19
 1ea:	4f 93       	push	r20
 1ec:	5f 93       	push	r21
 1ee:	6f 93       	push	r22
 1f0:	7f 93       	push	r23
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
 1f6:	af 93       	push	r26
 1f8:	bf 93       	push	r27
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
 202:	0f b7       	in	r16, 0x3f	; 63
 204:	0f 93       	push	r16
 206:	fc b7       	in	r31, 0x3c	; 60
 208:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
 20a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 20c:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
 20e:	e0 93 f0 13 	sts	0x13F0, r30	; 0x8013f0 <CurrentSp>
        sts  CurrentSp+1, r31
 212:	f0 93 f1 13 	sts	0x13F1, r31	; 0x8013f1 <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
 216:	e0 91 32 14 	lds	r30, 0x1432	; 0x801432 <KernelSp>
        lds  r31, KernelSp+1
 21a:	f0 91 33 14 	lds	r31, 0x1433	; 0x801433 <KernelSp+0x1>
        out  SPL, r30
 21e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 220:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
 222:	ff 91       	pop	r31
 224:	fc bf       	out	0x3c, r31	; 60
 226:	0f 91       	pop	r16
 228:	0f bf       	out	0x3f, r16	; 63
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	bf 91       	pop	r27
 234:	af 91       	pop	r26
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	7f 91       	pop	r23
 23c:	6f 91       	pop	r22
 23e:	5f 91       	pop	r21
 240:	4f 91       	pop	r20
 242:	3f 91       	pop	r19
 244:	2f 91       	pop	r18
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	df 90       	pop	r13
 250:	cf 90       	pop	r12
 252:	bf 90       	pop	r11
 254:	af 90       	pop	r10
 256:	9f 90       	pop	r9
 258:	8f 90       	pop	r8
 25a:	7f 90       	pop	r7
 25c:	6f 90       	pop	r6
 25e:	5f 90       	pop	r5
 260:	4f 90       	pop	r4
 262:	3f 90       	pop	r3
 264:	2f 90       	pop	r2
 266:	1f 90       	pop	r1
 268:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
 26a:	08 95       	ret

0000026c <Task_WriteBluetooth>:
	Task_Terminate();
}


void Idle() {
    for(;;) {}
 26c:	0b 9a       	sbi	0x01, 3	; 1
 26e:	13 98       	cbi	0x02, 3	; 2
 270:	fd cf       	rjmp	.-6      	; 0x26c <Task_WriteBluetooth>

00000272 <Task_ReadJoystick>:
 272:	0b 9a       	sbi	0x01, 3	; 1
 274:	13 9a       	sbi	0x02, 3	; 2
 276:	fd cf       	rjmp	.-6      	; 0x272 <Task_ReadJoystick>

00000278 <a_main>:
void a_main()
{
	
    // Initialize tasks
	//Task_Create(ASDF, SYSTEM, 0);
    Task_Create(Task_ReadJoystick, RR, 0);
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	89 e3       	ldi	r24, 0x39	; 57
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	f1 d1       	rcall	.+994    	; 0x668 <Task_Create>
    Task_Create(Task_WriteBluetooth, RR, 0);
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	86 e3       	ldi	r24, 0x36	; 54
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	ea d1       	rcall	.+980    	; 0x668 <Task_Create>

    //Task_Create(Idle, 10, 0);

    // Kill the initialization task
    Task_Terminate();
 294:	01 c0       	rjmp	.+2      	; 0x298 <Task_Terminate>
 296:	08 95       	ret

00000298 <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
 298:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <KernelActive>
 29c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <KernelActive+0x1>
 2a0:	89 2b       	or	r24, r25
 2a2:	51 f0       	breq	.+20     	; 0x2b8 <Task_Terminate+0x20>
 2a4:	f8 94       	cli
 2a6:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 2aa:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 2ae:	e5 5f       	subi	r30, 0xF5	; 245
 2b0:	fe 4f       	sbci	r31, 0xFE	; 254
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	80 83       	st	Z, r24
 2b6:	85 cf       	rjmp	.-246    	; 0x1c2 <Enter_Kernel>
 2b8:	08 95       	ret

000002ba <Kernel_Create_Task_At>:
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	1f 92       	push	r1
 2c8:	1f 92       	push	r1
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	9a 83       	std	Y+2, r25	; 0x02
 2d0:	89 83       	std	Y+1, r24	; 0x01
 2d2:	7c 01       	movw	r14, r24
 2d4:	04 e0       	ldi	r16, 0x04	; 4
 2d6:	e0 0e       	add	r14, r16
 2d8:	f1 1c       	adc	r15, r1
 2da:	a0 e0       	ldi	r26, 0x00	; 0
 2dc:	b1 e0       	ldi	r27, 0x01	; 1
 2de:	f7 01       	movw	r30, r14
 2e0:	8d 01       	movw	r16, r26
 2e2:	11 92       	st	Z+, r1
 2e4:	01 50       	subi	r16, 0x01	; 1
 2e6:	10 40       	sbci	r17, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <Kernel_Create_Task_At+0x28>
 2ea:	dc 01       	movw	r26, r24
 2ec:	ad 5f       	subi	r26, 0xFD	; 253
 2ee:	be 4f       	sbci	r27, 0xFE	; 254
 2f0:	ec e4       	ldi	r30, 0x4C	; 76
 2f2:	f1 e0       	ldi	r31, 0x01	; 1
 2f4:	ec 93       	st	X, r30
 2f6:	11 97       	sbiw	r26, 0x01	; 1
 2f8:	fc 93       	st	X, r31
 2fa:	fc 01       	movw	r30, r24
 2fc:	ef 5f       	subi	r30, 0xFF	; 255
 2fe:	fe 4f       	sbci	r31, 0xFE	; 254
 300:	60 83       	st	Z, r22
 302:	31 97       	sbiw	r30, 0x01	; 1
 304:	70 83       	st	Z, r23
 306:	31 97       	sbiw	r30, 0x01	; 1
 308:	10 82       	st	Z, r1
 30a:	b3 97       	sbiw	r30, 0x23	; 35
 30c:	dc 01       	movw	r26, r24
 30e:	13 96       	adiw	r26, 0x03	; 3
 310:	fc 93       	st	X, r31
 312:	ee 93       	st	-X, r30
 314:	12 97       	sbiw	r26, 0x02	; 2
 316:	bd 96       	adiw	r30, 0x2d	; 45
 318:	71 83       	std	Z+1, r23	; 0x01
 31a:	60 83       	st	Z, r22
 31c:	32 96       	adiw	r30, 0x02	; 2
 31e:	10 82       	st	Z, r1
 320:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <pCount>
 324:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <pCount+0x1>
 328:	fc 01       	movw	r30, r24
 32a:	71 83       	std	Z+1, r23	; 0x01
 32c:	60 83       	st	Z, r22
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	9a 81       	ldd	r25, Y+2	; 0x02
 332:	fc 01       	movw	r30, r24
 334:	eb 5f       	subi	r30, 0xFB	; 251
 336:	fe 4f       	sbci	r31, 0xFE	; 254
 338:	51 83       	std	Z+1, r21	; 0x01
 33a:	40 83       	st	Z, r20
 33c:	32 96       	adiw	r30, 0x02	; 2
 33e:	31 83       	std	Z+1, r19	; 0x01
 340:	20 83       	st	Z, r18
 342:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Tasks>
 346:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Tasks+0x1>
 34a:	2f 5f       	subi	r18, 0xFF	; 255
 34c:	3f 4f       	sbci	r19, 0xFF	; 255
 34e:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <Tasks+0x1>
 352:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <Tasks>
 356:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <pCount>
 35a:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <pCount+0x1>
 35e:	2f 5f       	subi	r18, 0xFF	; 255
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 362:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <pCount+0x1>
 366:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <pCount>
 36a:	33 97       	sbiw	r30, 0x03	; 3
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	80 83       	st	Z, r24
 370:	43 30       	cpi	r20, 0x03	; 3
 372:	51 05       	cpc	r21, r1
 374:	41 f4       	brne	.+16     	; 0x386 <Kernel_Create_Task_At+0xcc>
 376:	42 e0       	ldi	r20, 0x02	; 2
 378:	52 e0       	ldi	r21, 0x02	; 2
 37a:	60 eb       	ldi	r22, 0xB0	; 176
 37c:	73 e1       	ldi	r23, 0x13	; 19
 37e:	ce 01       	movw	r24, r28
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	4d d2       	rcall	.+1178   	; 0x81e <enqueue>
 384:	15 c0       	rjmp	.+42     	; 0x3b0 <Kernel_Create_Task_At+0xf6>
 386:	42 30       	cpi	r20, 0x02	; 2
 388:	51 05       	cpc	r21, r1
 38a:	91 f0       	breq	.+36     	; 0x3b0 <Kernel_Create_Task_At+0xf6>
 38c:	41 30       	cpi	r20, 0x01	; 1
 38e:	51 05       	cpc	r21, r1
 390:	41 f4       	brne	.+16     	; 0x3a2 <Kernel_Create_Task_At+0xe8>
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	52 e0       	ldi	r21, 0x02	; 2
 396:	64 e3       	ldi	r22, 0x34	; 52
 398:	74 e1       	ldi	r23, 0x14	; 20
 39a:	ce 01       	movw	r24, r28
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	3f d2       	rcall	.+1150   	; 0x81e <enqueue>
 3a0:	07 c0       	rjmp	.+14     	; 0x3b0 <Kernel_Create_Task_At+0xf6>
 3a2:	44 e0       	ldi	r20, 0x04	; 4
 3a4:	52 e0       	ldi	r21, 0x02	; 2
 3a6:	60 ed       	ldi	r22, 0xD0	; 208
 3a8:	73 e1       	ldi	r23, 0x13	; 19
 3aa:	ce 01       	movw	r24, r28
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	37 d2       	rcall	.+1134   	; 0x81e <enqueue>
 3b0:	e9 81       	ldd	r30, Y+1	; 0x01
 3b2:	fa 81       	ldd	r31, Y+2	; 0x02
 3b4:	80 81       	ld	r24, Z
 3b6:	91 81       	ldd	r25, Z+1	; 0x01
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	ff 90       	pop	r15
 3c6:	ef 90       	pop	r14
 3c8:	08 95       	ret

000003ca <Kernel_Create_Task>:
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	ec 01       	movw	r28, r24
 3d0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Tasks>
 3d4:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Tasks+0x1>
 3d8:	40 97       	sbiw	r24, 0x10	; 16
 3da:	21 f1       	breq	.+72     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3dc:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <Process+0x104>
 3e0:	88 23       	and	r24, r24
 3e2:	71 f0       	breq	.+28     	; 0x400 <__LOCK_REGION_LENGTH__>
 3e4:	ae e2       	ldi	r26, 0x2E	; 46
 3e6:	b4 e0       	ldi	r27, 0x04	; 4
 3e8:	e1 e0       	ldi	r30, 0x01	; 1
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	9c 91       	ld	r25, X
 3ee:	99 23       	and	r25, r25
 3f0:	49 f0       	breq	.+18     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f2:	31 96       	adiw	r30, 0x01	; 1
 3f4:	a6 5e       	subi	r26, 0xE6	; 230
 3f6:	be 4f       	sbci	r27, 0xFE	; 254
 3f8:	e0 31       	cpi	r30, 0x10	; 16
 3fa:	f1 05       	cpc	r31, r1
 3fc:	b9 f7       	brne	.-18     	; 0x3ec <Kernel_Create_Task+0x22>
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	e0 e0       	ldi	r30, 0x00	; 0
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	9a 01       	movw	r18, r20
 406:	ab 01       	movw	r20, r22
 408:	be 01       	movw	r22, r28
 40a:	aa e1       	ldi	r26, 0x1A	; 26
 40c:	b1 e0       	ldi	r27, 0x01	; 1
 40e:	ea 9f       	mul	r30, r26
 410:	c0 01       	movw	r24, r0
 412:	eb 9f       	mul	r30, r27
 414:	90 0d       	add	r25, r0
 416:	fa 9f       	mul	r31, r26
 418:	90 0d       	add	r25, r0
 41a:	11 24       	eor	r1, r1
 41c:	80 5f       	subi	r24, 0xF0	; 240
 41e:	9d 4f       	sbci	r25, 0xFD	; 253
 420:	4c df       	rcall	.-360    	; 0x2ba <Kernel_Create_Task_At>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <OS_Init>:
 42a:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <Tasks+0x1>
 42e:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <Tasks>
 432:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <KernelActive+0x1>
 436:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <KernelActive>
 43a:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <pCount+0x1>
 43e:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <pCount>
 442:	e0 e1       	ldi	r30, 0x10	; 16
 444:	f2 e0       	ldi	r31, 0x02	; 2
 446:	20 eb       	ldi	r18, 0xB0	; 176
 448:	33 e1       	ldi	r19, 0x13	; 19
 44a:	8a e1       	ldi	r24, 0x1A	; 26
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	df 01       	movw	r26, r30
 450:	ac 01       	movw	r20, r24
 452:	1d 92       	st	X+, r1
 454:	41 50       	subi	r20, 0x01	; 1
 456:	50 40       	sbci	r21, 0x00	; 0
 458:	e1 f7       	brne	.-8      	; 0x452 <OS_Init+0x28>
 45a:	df 01       	movw	r26, r30
 45c:	ac 5f       	subi	r26, 0xFC	; 252
 45e:	be 4f       	sbci	r27, 0xFE	; 254
 460:	1c 92       	st	X, r1
 462:	11 82       	std	Z+1, r1	; 0x01
 464:	10 82       	st	Z, r1
 466:	e6 5e       	subi	r30, 0xE6	; 230
 468:	fe 4f       	sbci	r31, 0xFE	; 254
 46a:	e2 17       	cp	r30, r18
 46c:	f3 07       	cpc	r31, r19
 46e:	79 f7       	brne	.-34     	; 0x44e <OS_Init+0x24>
 470:	08 95       	ret

00000472 <OS_Abort>:
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	29 d2       	rcall	.+1106   	; 0x8ca <_exit>

00000478 <Dispatch>:
 478:	62 e0       	ldi	r22, 0x02	; 2
 47a:	72 e0       	ldi	r23, 0x02	; 2
 47c:	80 eb       	ldi	r24, 0xB0	; 176
 47e:	93 e1       	ldi	r25, 0x13	; 19
 480:	fe d1       	rcall	.+1020   	; 0x87e <dequeue>
 482:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Cp+0x1>
 486:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Cp>
 48a:	89 2b       	or	r24, r25
 48c:	49 f4       	brne	.+18     	; 0x4a0 <Dispatch+0x28>
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	72 e0       	ldi	r23, 0x02	; 2
 492:	84 e3       	ldi	r24, 0x34	; 52
 494:	94 e1       	ldi	r25, 0x14	; 20
 496:	f3 d1       	rcall	.+998    	; 0x87e <dequeue>
 498:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Cp+0x1>
 49c:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Cp>
 4a0:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Cp>
 4a4:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Cp+0x1>
 4a8:	89 2b       	or	r24, r25
 4aa:	49 f4       	brne	.+18     	; 0x4be <Dispatch+0x46>
 4ac:	64 e0       	ldi	r22, 0x04	; 4
 4ae:	72 e0       	ldi	r23, 0x02	; 2
 4b0:	80 ed       	ldi	r24, 0xD0	; 208
 4b2:	93 e1       	ldi	r25, 0x13	; 19
 4b4:	e4 d1       	rcall	.+968    	; 0x87e <dequeue>
 4b6:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Cp+0x1>
 4ba:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Cp>
 4be:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 4c2:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 4c6:	30 97       	sbiw	r30, 0x00	; 0
 4c8:	09 f4       	brne	.+2      	; 0x4cc <Dispatch+0x54>
 4ca:	d3 df       	rcall	.-90     	; 0x472 <OS_Abort>
 4cc:	82 81       	ldd	r24, Z+2	; 0x02
 4ce:	93 81       	ldd	r25, Z+3	; 0x03
 4d0:	90 93 f1 13 	sts	0x13F1, r25	; 0x8013f1 <CurrentSp+0x1>
 4d4:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <CurrentSp>
 4d8:	ec 5f       	subi	r30, 0xFC	; 252
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	80 83       	st	Z, r24
 4e0:	08 95       	ret

000004e2 <OS_Start>:
 4e2:	1f 93       	push	r17
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <KernelActive>
 4ec:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <KernelActive+0x1>
 4f0:	89 2b       	or	r24, r25
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <OS_Start+0x14>
 4f4:	b5 c0       	rjmp	.+362    	; 0x660 <OS_Start+0x17e>
 4f6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Tasks>
 4fa:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Tasks+0x1>
 4fe:	89 2b       	or	r24, r25
 500:	09 f4       	brne	.+2      	; 0x504 <OS_Start+0x22>
 502:	ae c0       	rjmp	.+348    	; 0x660 <OS_Start+0x17e>
 504:	f8 94       	cli
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <KernelActive+0x1>
 50e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <KernelActive>
 512:	b2 df       	rcall	.-156    	; 0x478 <Dispatch>
 514:	11 e0       	ldi	r17, 0x01	; 1
 516:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 51a:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 51e:	df 01       	movw	r26, r30
 520:	a5 5f       	subi	r26, 0xF5	; 245
 522:	be 4f       	sbci	r27, 0xFE	; 254
 524:	1c 92       	st	X, r1
 526:	82 81       	ldd	r24, Z+2	; 0x02
 528:	93 81       	ldd	r25, Z+3	; 0x03
 52a:	90 93 f1 13 	sts	0x13F1, r25	; 0x8013f1 <CurrentSp+0x1>
 52e:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <CurrentSp>
 532:	f2 dd       	rcall	.-1052   	; 0x118 <CSwitch>
 534:	c0 91 0e 02 	lds	r28, 0x020E	; 0x80020e <Cp>
 538:	d0 91 0f 02 	lds	r29, 0x020F	; 0x80020f <Cp+0x1>
 53c:	80 91 f0 13 	lds	r24, 0x13F0	; 0x8013f0 <CurrentSp>
 540:	90 91 f1 13 	lds	r25, 0x13F1	; 0x8013f1 <CurrentSp+0x1>
 544:	9b 83       	std	Y+3, r25	; 0x03
 546:	8a 83       	std	Y+2, r24	; 0x02
 548:	fe 01       	movw	r30, r28
 54a:	e5 5f       	subi	r30, 0xF5	; 245
 54c:	fe 4f       	sbci	r31, 0xFE	; 254
 54e:	e0 81       	ld	r30, Z
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	e7 30       	cpi	r30, 0x07	; 7
 554:	f1 05       	cpc	r31, r1
 556:	f8 f6       	brcc	.-66     	; 0x516 <OS_Start+0x34>
 558:	88 27       	eor	r24, r24
 55a:	ee 58       	subi	r30, 0x8E	; 142
 55c:	ff 4f       	sbci	r31, 0xFF	; 255
 55e:	8f 4f       	sbci	r24, 0xFF	; 255
 560:	ac c1       	rjmp	.+856    	; 0x8ba <__tablejump2__>
 562:	fe 01       	movw	r30, r28
 564:	e9 5f       	subi	r30, 0xF9	; 249
 566:	fe 4f       	sbci	r31, 0xFE	; 254
 568:	40 81       	ld	r20, Z
 56a:	51 81       	ldd	r21, Z+1	; 0x01
 56c:	32 97       	sbiw	r30, 0x02	; 2
 56e:	60 81       	ld	r22, Z
 570:	71 81       	ldd	r23, Z+1	; 0x01
 572:	34 96       	adiw	r30, 0x04	; 4
 574:	80 81       	ld	r24, Z
 576:	91 81       	ldd	r25, Z+1	; 0x01
 578:	28 df       	rcall	.-432    	; 0x3ca <Kernel_Create_Task>
 57a:	c4 5f       	subi	r28, 0xF4	; 244
 57c:	de 4f       	sbci	r29, 0xFE	; 254
 57e:	99 83       	std	Y+1, r25	; 0x01
 580:	88 83       	st	Y, r24
 582:	c9 cf       	rjmp	.-110    	; 0x516 <OS_Start+0x34>
 584:	fe 01       	movw	r30, r28
 586:	e9 5f       	subi	r30, 0xF9	; 249
 588:	fe 4f       	sbci	r31, 0xFE	; 254
 58a:	40 81       	ld	r20, Z
 58c:	51 81       	ldd	r21, Z+1	; 0x01
 58e:	32 96       	adiw	r30, 0x02	; 2
 590:	80 81       	ld	r24, Z
 592:	91 81       	ldd	r25, Z+1	; 0x01
 594:	63 e0       	ldi	r22, 0x03	; 3
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	18 df       	rcall	.-464    	; 0x3ca <Kernel_Create_Task>
 59a:	c4 5f       	subi	r28, 0xF4	; 244
 59c:	de 4f       	sbci	r29, 0xFE	; 254
 59e:	99 83       	std	Y+1, r25	; 0x01
 5a0:	88 83       	st	Y, r24
 5a2:	b9 cf       	rjmp	.-142    	; 0x516 <OS_Start+0x34>
 5a4:	fe 01       	movw	r30, r28
 5a6:	e9 5f       	subi	r30, 0xF9	; 249
 5a8:	fe 4f       	sbci	r31, 0xFE	; 254
 5aa:	40 81       	ld	r20, Z
 5ac:	51 81       	ldd	r21, Z+1	; 0x01
 5ae:	32 96       	adiw	r30, 0x02	; 2
 5b0:	80 81       	ld	r24, Z
 5b2:	91 81       	ldd	r25, Z+1	; 0x01
 5b4:	62 e0       	ldi	r22, 0x02	; 2
 5b6:	70 e0       	ldi	r23, 0x00	; 0
 5b8:	08 df       	rcall	.-496    	; 0x3ca <Kernel_Create_Task>
 5ba:	c4 5f       	subi	r28, 0xF4	; 244
 5bc:	de 4f       	sbci	r29, 0xFE	; 254
 5be:	99 83       	std	Y+1, r25	; 0x01
 5c0:	88 83       	st	Y, r24
 5c2:	a9 cf       	rjmp	.-174    	; 0x516 <OS_Start+0x34>
 5c4:	fe 01       	movw	r30, r28
 5c6:	e9 5f       	subi	r30, 0xF9	; 249
 5c8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ca:	40 81       	ld	r20, Z
 5cc:	51 81       	ldd	r21, Z+1	; 0x01
 5ce:	32 96       	adiw	r30, 0x02	; 2
 5d0:	80 81       	ld	r24, Z
 5d2:	91 81       	ldd	r25, Z+1	; 0x01
 5d4:	61 e0       	ldi	r22, 0x01	; 1
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	f8 de       	rcall	.-528    	; 0x3ca <Kernel_Create_Task>
 5da:	c4 5f       	subi	r28, 0xF4	; 244
 5dc:	de 4f       	sbci	r29, 0xFE	; 254
 5de:	99 83       	std	Y+1, r25	; 0x01
 5e0:	88 83       	st	Y, r24
 5e2:	99 cf       	rjmp	.-206    	; 0x516 <OS_Start+0x34>
 5e4:	fe 01       	movw	r30, r28
 5e6:	ec 5f       	subi	r30, 0xFC	; 252
 5e8:	fe 4f       	sbci	r31, 0xFE	; 254
 5ea:	10 83       	st	Z, r17
 5ec:	31 96       	adiw	r30, 0x01	; 1
 5ee:	80 81       	ld	r24, Z
 5f0:	91 81       	ldd	r25, Z+1	; 0x01
 5f2:	03 97       	sbiw	r24, 0x03	; 3
 5f4:	41 f4       	brne	.+16     	; 0x606 <OS_Start+0x124>
 5f6:	42 e0       	ldi	r20, 0x02	; 2
 5f8:	52 e0       	ldi	r21, 0x02	; 2
 5fa:	60 eb       	ldi	r22, 0xB0	; 176
 5fc:	73 e1       	ldi	r23, 0x13	; 19
 5fe:	8e e0       	ldi	r24, 0x0E	; 14
 600:	92 e0       	ldi	r25, 0x02	; 2
 602:	0d d1       	rcall	.+538    	; 0x81e <enqueue>
 604:	1a c0       	rjmp	.+52     	; 0x63a <OS_Start+0x158>
 606:	fe 01       	movw	r30, r28
 608:	eb 5f       	subi	r30, 0xFB	; 251
 60a:	fe 4f       	sbci	r31, 0xFE	; 254
 60c:	80 81       	ld	r24, Z
 60e:	91 81       	ldd	r25, Z+1	; 0x01
 610:	02 97       	sbiw	r24, 0x02	; 2
 612:	99 f0       	breq	.+38     	; 0x63a <OS_Start+0x158>
 614:	80 81       	ld	r24, Z
 616:	91 81       	ldd	r25, Z+1	; 0x01
 618:	01 97       	sbiw	r24, 0x01	; 1
 61a:	41 f4       	brne	.+16     	; 0x62c <OS_Start+0x14a>
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	52 e0       	ldi	r21, 0x02	; 2
 620:	64 e3       	ldi	r22, 0x34	; 52
 622:	74 e1       	ldi	r23, 0x14	; 20
 624:	8e e0       	ldi	r24, 0x0E	; 14
 626:	92 e0       	ldi	r25, 0x02	; 2
 628:	fa d0       	rcall	.+500    	; 0x81e <enqueue>
 62a:	07 c0       	rjmp	.+14     	; 0x63a <OS_Start+0x158>
 62c:	44 e0       	ldi	r20, 0x04	; 4
 62e:	52 e0       	ldi	r21, 0x02	; 2
 630:	60 ed       	ldi	r22, 0xD0	; 208
 632:	73 e1       	ldi	r23, 0x13	; 19
 634:	8e e0       	ldi	r24, 0x0E	; 14
 636:	92 e0       	ldi	r25, 0x02	; 2
 638:	f2 d0       	rcall	.+484    	; 0x81e <enqueue>
 63a:	1e df       	rcall	.-452    	; 0x478 <Dispatch>
 63c:	6c cf       	rjmp	.-296    	; 0x516 <OS_Start+0x34>
 63e:	fe 01       	movw	r30, r28
 640:	ec 5f       	subi	r30, 0xFC	; 252
 642:	fe 4f       	sbci	r31, 0xFE	; 254
 644:	10 82       	st	Z, r1
 646:	19 82       	std	Y+1, r1	; 0x01
 648:	18 82       	st	Y, r1
 64a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Tasks>
 64e:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Tasks+0x1>
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <Tasks+0x1>
 658:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Tasks>
 65c:	0d df       	rcall	.-486    	; 0x478 <Dispatch>
 65e:	5b cf       	rjmp	.-330    	; 0x516 <OS_Start+0x34>
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	08 95       	ret

00000668 <Task_Create>:
 668:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <KernelActive>
 66c:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <KernelActive+0x1>
 670:	23 2b       	or	r18, r19
 672:	09 f4       	brne	.+2      	; 0x676 <Task_Create+0xe>
 674:	3d c0       	rjmp	.+122    	; 0x6f0 <Task_Create+0x88>
 676:	f8 94       	cli
 678:	63 30       	cpi	r22, 0x03	; 3
 67a:	71 05       	cpc	r23, r1
 67c:	49 f4       	brne	.+18     	; 0x690 <Task_Create+0x28>
 67e:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 682:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 686:	e5 5f       	subi	r30, 0xF5	; 245
 688:	fe 4f       	sbci	r31, 0xFE	; 254
 68a:	22 e0       	ldi	r18, 0x02	; 2
 68c:	20 83       	st	Z, r18
 68e:	17 c0       	rjmp	.+46     	; 0x6be <Task_Create+0x56>
 690:	62 30       	cpi	r22, 0x02	; 2
 692:	71 05       	cpc	r23, r1
 694:	a1 f0       	breq	.+40     	; 0x6be <Task_Create+0x56>
 696:	61 30       	cpi	r22, 0x01	; 1
 698:	71 05       	cpc	r23, r1
 69a:	49 f4       	brne	.+18     	; 0x6ae <Task_Create+0x46>
 69c:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 6a0:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 6a4:	e5 5f       	subi	r30, 0xF5	; 245
 6a6:	fe 4f       	sbci	r31, 0xFE	; 254
 6a8:	23 e0       	ldi	r18, 0x03	; 3
 6aa:	20 83       	st	Z, r18
 6ac:	08 c0       	rjmp	.+16     	; 0x6be <Task_Create+0x56>
 6ae:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 6b2:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 6b6:	e5 5f       	subi	r30, 0xF5	; 245
 6b8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ba:	21 e0       	ldi	r18, 0x01	; 1
 6bc:	20 83       	st	Z, r18
 6be:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <Cp>
 6c2:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <Cp+0x1>
 6c6:	f9 01       	movw	r30, r18
 6c8:	e7 5f       	subi	r30, 0xF7	; 247
 6ca:	fe 4f       	sbci	r31, 0xFE	; 254
 6cc:	91 83       	std	Z+1, r25	; 0x01
 6ce:	80 83       	st	Z, r24
 6d0:	34 97       	sbiw	r30, 0x04	; 4
 6d2:	71 83       	std	Z+1, r23	; 0x01
 6d4:	60 83       	st	Z, r22
 6d6:	32 96       	adiw	r30, 0x02	; 2
 6d8:	51 83       	std	Z+1, r21	; 0x01
 6da:	40 83       	st	Z, r20
 6dc:	72 dd       	rcall	.-1308   	; 0x1c2 <Enter_Kernel>
 6de:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 6e2:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 6e6:	e4 5f       	subi	r30, 0xF4	; 244
 6e8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ea:	80 81       	ld	r24, Z
 6ec:	91 81       	ldd	r25, Z+1	; 0x01
 6ee:	08 95       	ret
 6f0:	6c ce       	rjmp	.-808    	; 0x3ca <Kernel_Create_Task>
 6f2:	08 95       	ret

000006f4 <Task_Next>:
 6f4:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <KernelActive>
 6f8:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <KernelActive+0x1>
 6fc:	89 2b       	or	r24, r25
 6fe:	51 f0       	breq	.+20     	; 0x714 <Task_Next+0x20>
 700:	f8 94       	cli
 702:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 706:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 70a:	e5 5f       	subi	r30, 0xF5	; 245
 70c:	fe 4f       	sbci	r31, 0xFE	; 254
 70e:	85 e0       	ldi	r24, 0x05	; 5
 710:	80 83       	st	Z, r24
 712:	57 cd       	rjmp	.-1362   	; 0x1c2 <Enter_Kernel>
 714:	08 95       	ret

00000716 <setup>:
  */
void setup() {


	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
 716:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
 718:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
 71c:	e1 e8       	ldi	r30, 0x81	; 129
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
 722:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 726:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
 72a:	80 e7       	ldi	r24, 0x70	; 112
 72c:	92 e0       	ldi	r25, 0x02	; 2
 72e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 732:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
 736:	80 81       	ld	r24, Z
 738:	88 60       	ori	r24, 0x08	; 8
 73a:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
 73c:	80 81       	ld	r24, Z
 73e:	84 60       	ori	r24, 0x04	; 4
 740:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
 742:	ef e6       	ldi	r30, 0x6F	; 111
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	80 81       	ld	r24, Z
 748:	82 60       	ori	r24, 0x02	; 2
 74a:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
 74c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
 750:	e1 e9       	ldi	r30, 0x91	; 145
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
 756:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 75a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
 75e:	83 e2       	ldi	r24, 0x23	; 35
 760:	94 ef       	ldi	r25, 0xF4	; 244
 762:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 766:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
 76a:	80 81       	ld	r24, Z
 76c:	88 60       	ori	r24, 0x08	; 8
 76e:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
 770:	80 81       	ld	r24, Z
 772:	84 60       	ori	r24, 0x04	; 4
 774:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
 776:	82 e0       	ldi	r24, 0x02	; 2
 778:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>

	Enable_Interrupt();
 77c:	78 94       	sei
 77e:	08 95       	ret

00000780 <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) { 
 780:	1f 92       	push	r1
 782:	0f 92       	push	r0
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	0f 92       	push	r0
 788:	11 24       	eor	r1, r1
 78a:	0b b6       	in	r0, 0x3b	; 59
 78c:	0f 92       	push	r0
 78e:	2f 93       	push	r18
 790:	3f 93       	push	r19
 792:	4f 93       	push	r20
 794:	5f 93       	push	r21
 796:	6f 93       	push	r22
 798:	7f 93       	push	r23
 79a:	8f 93       	push	r24
 79c:	9f 93       	push	r25
 79e:	af 93       	push	r26
 7a0:	bf 93       	push	r27
 7a2:	ef 93       	push	r30
 7a4:	ff 93       	push	r31
	Task_Next();
 7a6:	a6 df       	rcall	.-180    	; 0x6f4 <Task_Next>
}
 7a8:	ff 91       	pop	r31
 7aa:	ef 91       	pop	r30
 7ac:	bf 91       	pop	r27
 7ae:	af 91       	pop	r26
 7b0:	9f 91       	pop	r25
 7b2:	8f 91       	pop	r24
 7b4:	7f 91       	pop	r23
 7b6:	6f 91       	pop	r22
 7b8:	5f 91       	pop	r21
 7ba:	4f 91       	pop	r20
 7bc:	3f 91       	pop	r19
 7be:	2f 91       	pop	r18
 7c0:	0f 90       	pop	r0
 7c2:	0b be       	out	0x3b, r0	; 59
 7c4:	0f 90       	pop	r0
 7c6:	0f be       	out	0x3f, r0	; 63
 7c8:	0f 90       	pop	r0
 7ca:	1f 90       	pop	r1
 7cc:	18 95       	reti

000007ce <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) { // PERIOD: 1 s
 7ce:	1f 92       	push	r1
 7d0:	0f 92       	push	r0
 7d2:	0f b6       	in	r0, 0x3f	; 63
 7d4:	0f 92       	push	r0
 7d6:	11 24       	eor	r1, r1
 7d8:	8f 93       	push	r24
 7da:	9f 93       	push	r25
	tickOverflowCount += 1;
 7dc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <tickOverflowCount>
 7e0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <tickOverflowCount+0x1>
 7e4:	01 96       	adiw	r24, 0x01	; 1
 7e6:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <tickOverflowCount+0x1>
 7ea:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <tickOverflowCount>
}
 7ee:	9f 91       	pop	r25
 7f0:	8f 91       	pop	r24
 7f2:	0f 90       	pop	r0
 7f4:	0f be       	out	0x3f, r0	; 63
 7f6:	0f 90       	pop	r0
 7f8:	1f 90       	pop	r1
 7fa:	18 95       	reti

000007fc <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
DDRA |= (1<<PA4);
 7fc:	0c 9a       	sbi	0x01, 4	; 1
PORTA &= ~(1<<PA4);
 7fe:	14 98       	cbi	0x02, 4	; 2

DDRA |= (1<<PA5);
 800:	0d 9a       	sbi	0x01, 5	; 1
PORTA &= ~(1<<PA5);
 802:	15 98       	cbi	0x02, 5	; 2

DDRA |= (1<<PA3);
 804:	0b 9a       	sbi	0x01, 3	; 1
PORTA &= ~(1<<PA3);
 806:	13 98       	cbi	0x02, 3	; 2
	setup();
 808:	86 df       	rcall	.-244    	; 0x716 <setup>

	OS_Init();
 80a:	0f de       	rcall	.-994    	; 0x42a <OS_Init>
	Task_Create(a_main, SYSTEM, 1);
 80c:	41 e0       	ldi	r20, 0x01	; 1
 80e:	50 e0       	ldi	r21, 0x00	; 0
 810:	63 e0       	ldi	r22, 0x03	; 3
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	8c e3       	ldi	r24, 0x3C	; 60
 816:	91 e0       	ldi	r25, 0x01	; 1
 818:	27 df       	rcall	.-434    	; 0x668 <Task_Create>
	OS_Start();
 81a:	63 ce       	rjmp	.-826    	; 0x4e2 <OS_Start>
 81c:	08 95       	ret

0000081e <enqueue>:
}

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
 81e:	cf 93       	push	r28
 820:	df 93       	push	r29
 822:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
 824:	28 81       	ld	r18, Y
 826:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
 828:	2f 30       	cpi	r18, 0x0F	; 15
 82a:	31 05       	cpc	r19, r1
 82c:	29 f1       	breq	.+74     	; 0x878 <enqueue+0x5a>
        return NULL;
    }

    int i = (*QCount) - 1;
 82e:	e8 81       	ld	r30, Y
 830:	f9 81       	ldd	r31, Y+1	; 0x01
 832:	9f 01       	movw	r18, r30
 834:	21 50       	subi	r18, 0x01	; 1
 836:	31 09       	sbc	r19, r1
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
 838:	72 f0       	brmi	.+28     	; 0x856 <enqueue+0x38>
 83a:	ee 0f       	add	r30, r30
 83c:	ff 1f       	adc	r31, r31
 83e:	e6 0f       	add	r30, r22
 840:	f7 1f       	adc	r31, r23
 842:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
 844:	32 91       	ld	r19, -Z
 846:	22 91       	ld	r18, -Z
 848:	33 83       	std	Z+3, r19	; 0x03
 84a:	22 83       	std	Z+2, r18	; 0x02

    int i = (*QCount) - 1;
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
 84c:	ea 17       	cp	r30, r26
 84e:	fb 07       	cpc	r31, r27
 850:	c9 f7       	brne	.-14     	; 0x844 <enqueue+0x26>
        Queue[i+1] = Queue[i];
        i--;
 852:	2f ef       	ldi	r18, 0xFF	; 255
 854:	3f ef       	ldi	r19, 0xFF	; 255
        temp = Queue[i];
    }

    Queue[i+1] = *p;
 856:	fc 01       	movw	r30, r24
 858:	80 81       	ld	r24, Z
 85a:	91 81       	ldd	r25, Z+1	; 0x01
 85c:	2f 5f       	subi	r18, 0xFF	; 255
 85e:	3f 4f       	sbci	r19, 0xFF	; 255
 860:	22 0f       	add	r18, r18
 862:	33 1f       	adc	r19, r19
 864:	fb 01       	movw	r30, r22
 866:	e2 0f       	add	r30, r18
 868:	f3 1f       	adc	r31, r19
 86a:	91 83       	std	Z+1, r25	; 0x01
 86c:	80 83       	st	Z, r24
    (*QCount)++;
 86e:	88 81       	ld	r24, Y
 870:	99 81       	ldd	r25, Y+1	; 0x01
 872:	01 96       	adiw	r24, 0x01	; 1
 874:	99 83       	std	Y+1, r25	; 0x01
 876:	88 83       	st	Y, r24
}
 878:	df 91       	pop	r29
 87a:	cf 91       	pop	r28
 87c:	08 95       	ret

0000087e <dequeue>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
 87e:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
 880:	2d 91       	ld	r18, X+
 882:	3c 91       	ld	r19, X
 884:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
 886:	23 2b       	or	r18, r19
 888:	a9 f0       	breq	.+42     	; 0x8b4 <dequeue+0x36>
	   return NULL;
   }

   volatile PD *result = (Queue[(*QCount)-1]);
 88a:	2d 91       	ld	r18, X+
 88c:	3c 91       	ld	r19, X
 88e:	11 97       	sbiw	r26, 0x01	; 1
 890:	f9 01       	movw	r30, r18
 892:	e1 50       	subi	r30, 0x01	; 1
 894:	f0 48       	sbci	r31, 0x80	; 128
 896:	ee 0f       	add	r30, r30
 898:	ff 1f       	adc	r31, r31
 89a:	e8 0f       	add	r30, r24
 89c:	f9 1f       	adc	r31, r25
 89e:	80 81       	ld	r24, Z
 8a0:	91 81       	ldd	r25, Z+1	; 0x01
   (*QCount)--;
 8a2:	2d 91       	ld	r18, X+
 8a4:	3c 91       	ld	r19, X
 8a6:	11 97       	sbiw	r26, 0x01	; 1
 8a8:	21 50       	subi	r18, 0x01	; 1
 8aa:	31 09       	sbc	r19, r1
 8ac:	11 96       	adiw	r26, 0x01	; 1
 8ae:	3c 93       	st	X, r19
 8b0:	2e 93       	st	-X, r18

   return result;
 8b2:	08 95       	ret
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
	   return NULL;
 8b4:	80 e0       	ldi	r24, 0x00	; 0
 8b6:	90 e0       	ldi	r25, 0x00	; 0

   volatile PD *result = (Queue[(*QCount)-1]);
   (*QCount)--;

   return result;
}
 8b8:	08 95       	ret

000008ba <__tablejump2__>:
 8ba:	ee 0f       	add	r30, r30
 8bc:	ff 1f       	adc	r31, r31
 8be:	88 1f       	adc	r24, r24
 8c0:	8b bf       	out	0x3b, r24	; 59
 8c2:	07 90       	elpm	r0, Z+
 8c4:	f6 91       	elpm	r31, Z
 8c6:	e0 2d       	mov	r30, r0
 8c8:	19 94       	eijmp

000008ca <_exit>:
 8ca:	f8 94       	cli

000008cc <__stop_program>:
 8cc:	ff cf       	rjmp	.-2      	; 0x8cc <__stop_program>
