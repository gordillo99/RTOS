
Project2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a6c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000125c  00800200  00800200  00000ae0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000b50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e77  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000113c  00000000  00000000  00002b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba3  00000000  00000000  00003c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  000047e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000912  00000000  00000000  00004ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b91  00000000  00000000  000053c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005f53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	78 c0       	rjmp	.+240    	; 0xf2 <__ctors_end>
   2:	00 00       	nop
   4:	88 c0       	rjmp	.+272    	; 0x116 <__bad_interrupt>
   6:	00 00       	nop
   8:	86 c0       	rjmp	.+268    	; 0x116 <__bad_interrupt>
   a:	00 00       	nop
   c:	84 c0       	rjmp	.+264    	; 0x116 <__bad_interrupt>
   e:	00 00       	nop
  10:	82 c0       	rjmp	.+260    	; 0x116 <__bad_interrupt>
  12:	00 00       	nop
  14:	80 c0       	rjmp	.+256    	; 0x116 <__bad_interrupt>
  16:	00 00       	nop
  18:	7e c0       	rjmp	.+252    	; 0x116 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
  22:	00 00       	nop
  24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
  26:	00 00       	nop
  28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	74 c0       	rjmp	.+232    	; 0x116 <__bad_interrupt>
  2e:	00 00       	nop
  30:	72 c0       	rjmp	.+228    	; 0x116 <__bad_interrupt>
  32:	00 00       	nop
  34:	70 c0       	rjmp	.+224    	; 0x116 <__bad_interrupt>
  36:	00 00       	nop
  38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6c c0       	rjmp	.+216    	; 0x116 <__bad_interrupt>
  3e:	00 00       	nop
  40:	6a c0       	rjmp	.+212    	; 0x116 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c4       	rjmp	.+2160   	; 0x8b6 <__vector_17>
  46:	00 00       	nop
  48:	66 c0       	rjmp	.+204    	; 0x116 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	64 c0       	rjmp	.+200    	; 0x116 <__bad_interrupt>
  4e:	00 00       	nop
  50:	62 c0       	rjmp	.+196    	; 0x116 <__bad_interrupt>
  52:	00 00       	nop
  54:	60 c0       	rjmp	.+192    	; 0x116 <__bad_interrupt>
  56:	00 00       	nop
  58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5c c0       	rjmp	.+184    	; 0x116 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
  62:	00 00       	nop
  64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
  66:	00 00       	nop
  68:	56 c0       	rjmp	.+172    	; 0x116 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	54 c0       	rjmp	.+168    	; 0x116 <__bad_interrupt>
  6e:	00 00       	nop
  70:	52 c0       	rjmp	.+164    	; 0x116 <__bad_interrupt>
  72:	00 00       	nop
  74:	50 c0       	rjmp	.+160    	; 0x116 <__bad_interrupt>
  76:	00 00       	nop
  78:	4e c0       	rjmp	.+156    	; 0x116 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4c c0       	rjmp	.+152    	; 0x116 <__bad_interrupt>
  7e:	00 00       	nop
  80:	75 c4       	rjmp	.+2282   	; 0x96c <__vector_32>
  82:	00 00       	nop
  84:	48 c0       	rjmp	.+144    	; 0x116 <__bad_interrupt>
  86:	00 00       	nop
  88:	46 c0       	rjmp	.+140    	; 0x116 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	44 c0       	rjmp	.+136    	; 0x116 <__bad_interrupt>
  8e:	00 00       	nop
  90:	42 c0       	rjmp	.+132    	; 0x116 <__bad_interrupt>
  92:	00 00       	nop
  94:	40 c0       	rjmp	.+128    	; 0x116 <__bad_interrupt>
  96:	00 00       	nop
  98:	3e c0       	rjmp	.+124    	; 0x116 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3c c0       	rjmp	.+120    	; 0x116 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3a c0       	rjmp	.+116    	; 0x116 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	38 c0       	rjmp	.+112    	; 0x116 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	36 c0       	rjmp	.+108    	; 0x116 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	34 c0       	rjmp	.+104    	; 0x116 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	32 c0       	rjmp	.+100    	; 0x116 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	30 c0       	rjmp	.+96     	; 0x116 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2e c0       	rjmp	.+92     	; 0x116 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2c c0       	rjmp	.+88     	; 0x116 <__bad_interrupt>
  be:	00 00       	nop
  c0:	2a c0       	rjmp	.+84     	; 0x116 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	28 c0       	rjmp	.+80     	; 0x116 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	26 c0       	rjmp	.+76     	; 0x116 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	24 c0       	rjmp	.+72     	; 0x116 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	22 c0       	rjmp	.+68     	; 0x116 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	20 c0       	rjmp	.+64     	; 0x116 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1e c0       	rjmp	.+60     	; 0x116 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1c c0       	rjmp	.+56     	; 0x116 <__bad_interrupt>
  de:	00 00       	nop
  e0:	1a c0       	rjmp	.+52     	; 0x116 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	6b 03       	fmul	r22, r19
  e6:	1e 03       	fmul	r17, r22
  e8:	2f 03       	fmul	r18, r23
  ea:	4f 03       	fmul	r20, r23
  ec:	3f 03       	fmul	r19, r23
  ee:	5f 03       	fmul	r21, r23
  f0:	98 03       	fmulsu	r17, r16

000000f2 <__ctors_end>:
  f2:	11 24       	eor	r1, r1
  f4:	1f be       	out	0x3f, r1	; 63
  f6:	cf ef       	ldi	r28, 0xFF	; 255
  f8:	d1 e2       	ldi	r29, 0x21	; 33
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	cd bf       	out	0x3d, r28	; 61
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0c bf       	out	0x3c, r16	; 60

00000102 <__do_clear_bss>:
 102:	24 e1       	ldi	r18, 0x14	; 20
 104:	a0 e0       	ldi	r26, 0x00	; 0
 106:	b2 e0       	ldi	r27, 0x02	; 2
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	ac 35       	cpi	r26, 0x5C	; 92
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	43 d4       	rcall	.+2182   	; 0x99a <main>
 114:	a9 c4       	rjmp	.+2386   	; 0xa68 <_exit>

00000116 <__bad_interrupt>:
 116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 118:	0f 92       	push	r0
 11a:	1f 92       	push	r1
 11c:	2f 92       	push	r2
 11e:	3f 92       	push	r3
 120:	4f 92       	push	r4
 122:	5f 92       	push	r5
 124:	6f 92       	push	r6
 126:	7f 92       	push	r7
 128:	8f 92       	push	r8
 12a:	9f 92       	push	r9
 12c:	af 92       	push	r10
 12e:	bf 92       	push	r11
 130:	cf 92       	push	r12
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	4f 93       	push	r20
 142:	5f 93       	push	r21
 144:	6f 93       	push	r22
 146:	7f 93       	push	r23
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	af 93       	push	r26
 14e:	bf 93       	push	r27
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
 158:	0f b7       	in	r16, 0x3f	; 63
 15a:	0f 93       	push	r16
 15c:	fc b7       	in	r31, 0x3c	; 60
 15e:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
 160:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 162:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
 164:	e0 93 3a 14 	sts	0x143A, r30	; 0x80143a <KernelSp>
        sts  KernelSp+1, r31
 168:	f0 93 3b 14 	sts	0x143B, r31	; 0x80143b <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
 16c:	e0 91 f8 13 	lds	r30, 0x13F8	; 0x8013f8 <CurrentSp>
        lds  r31, CurrentSp+1
 170:	f0 91 f9 13 	lds	r31, 0x13F9	; 0x8013f9 <CurrentSp+0x1>
        out  SPL, r30
 174:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 176:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
 178:	ff 91       	pop	r31
 17a:	fc bf       	out	0x3c, r31	; 60
 17c:	0f 91       	pop	r16
 17e:	0f bf       	out	0x3f, r16	; 63
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	df 90       	pop	r13
 1a6:	cf 90       	pop	r12
 1a8:	bf 90       	pop	r11
 1aa:	af 90       	pop	r10
 1ac:	9f 90       	pop	r9
 1ae:	8f 90       	pop	r8
 1b0:	7f 90       	pop	r7
 1b2:	6f 90       	pop	r6
 1b4:	5f 90       	pop	r5
 1b6:	4f 90       	pop	r4
 1b8:	3f 90       	pop	r3
 1ba:	2f 90       	pop	r2
 1bc:	1f 90       	pop	r1
 1be:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
 1c0:	18 95       	reti

000001c2 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
 1c2:	0f 92       	push	r0
 1c4:	1f 92       	push	r1
 1c6:	2f 92       	push	r2
 1c8:	3f 92       	push	r3
 1ca:	4f 92       	push	r4
 1cc:	5f 92       	push	r5
 1ce:	6f 92       	push	r6
 1d0:	7f 92       	push	r7
 1d2:	8f 92       	push	r8
 1d4:	9f 92       	push	r9
 1d6:	af 92       	push	r10
 1d8:	bf 92       	push	r11
 1da:	cf 92       	push	r12
 1dc:	df 92       	push	r13
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	2f 93       	push	r18
 1e8:	3f 93       	push	r19
 1ea:	4f 93       	push	r20
 1ec:	5f 93       	push	r21
 1ee:	6f 93       	push	r22
 1f0:	7f 93       	push	r23
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
 1f6:	af 93       	push	r26
 1f8:	bf 93       	push	r27
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
 202:	0f b7       	in	r16, 0x3f	; 63
 204:	0f 93       	push	r16
 206:	fc b7       	in	r31, 0x3c	; 60
 208:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
 20a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 20c:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
 20e:	e0 93 f8 13 	sts	0x13F8, r30	; 0x8013f8 <CurrentSp>
        sts  CurrentSp+1, r31
 212:	f0 93 f9 13 	sts	0x13F9, r31	; 0x8013f9 <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
 216:	e0 91 3a 14 	lds	r30, 0x143A	; 0x80143a <KernelSp>
        lds  r31, KernelSp+1
 21a:	f0 91 3b 14 	lds	r31, 0x143B	; 0x80143b <KernelSp+0x1>
        out  SPL, r30
 21e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 220:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
 222:	ff 91       	pop	r31
 224:	fc bf       	out	0x3c, r31	; 60
 226:	0f 91       	pop	r16
 228:	0f bf       	out	0x3f, r16	; 63
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	bf 91       	pop	r27
 234:	af 91       	pop	r26
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	7f 91       	pop	r23
 23c:	6f 91       	pop	r22
 23e:	5f 91       	pop	r21
 240:	4f 91       	pop	r20
 242:	3f 91       	pop	r19
 244:	2f 91       	pop	r18
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	df 90       	pop	r13
 250:	cf 90       	pop	r12
 252:	bf 90       	pop	r11
 254:	af 90       	pop	r10
 256:	9f 90       	pop	r9
 258:	8f 90       	pop	r8
 25a:	7f 90       	pop	r7
 25c:	6f 90       	pop	r6
 25e:	5f 90       	pop	r5
 260:	4f 90       	pop	r4
 262:	3f 90       	pop	r3
 264:	2f 90       	pop	r2
 266:	1f 90       	pop	r1
 268:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
 26a:	08 95       	ret

0000026c <Task_WriteBluetooth>:
	Task_Terminate();
}


void Idle() {
    for(;;) {}
 26c:	25 9a       	sbi	0x04, 5	; 4
 26e:	2d 9a       	sbi	0x05, 5	; 5
 270:	dc d2       	rcall	.+1464   	; 0x82a <Task_Next>
 272:	fd cf       	rjmp	.-6      	; 0x26e <Task_WriteBluetooth+0x2>

00000274 <Task_ReadJoystick>:
 274:	25 9a       	sbi	0x04, 5	; 4
 276:	15 b8       	out	0x05, r1	; 5
 278:	d8 d2       	rcall	.+1456   	; 0x82a <Task_Next>
 27a:	fd cf       	rjmp	.-6      	; 0x276 <Task_ReadJoystick+0x2>

0000027c <a_main>:
}

void a_main()
{
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
	
    // Initialize tasks
	//Task_Create(ASDF, SYSTEM, 0);
    Task_Create_Period(Task_ReadJoystick, 0, 100, 10, 2);
 280:	02 e0       	ldi	r16, 0x02	; 2
 282:	10 e0       	ldi	r17, 0x00	; 0
 284:	2a e0       	ldi	r18, 0x0A	; 10
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	44 e6       	ldi	r20, 0x64	; 100
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	8a e3       	ldi	r24, 0x3A	; 58
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	b1 d2       	rcall	.+1378   	; 0x7f8 <Task_Create_Period>
    Task_Create_Period(Task_WriteBluetooth, 0, 100, 10, 50);
 296:	02 e3       	ldi	r16, 0x32	; 50
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	2a e0       	ldi	r18, 0x0A	; 10
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	44 e6       	ldi	r20, 0x64	; 100
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	86 e3       	ldi	r24, 0x36	; 54
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	a6 d2       	rcall	.+1356   	; 0x7f8 <Task_Create_Period>
	
    //Task_Create(Idle, 10, 0);

    // Kill the initialization task
    Task_Terminate();
 2ac:	03 d0       	rcall	.+6      	; 0x2b4 <Task_Terminate>
}
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	08 95       	ret

000002b4 <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
 2b4:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <KernelActive>
 2b8:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <KernelActive+0x1>
 2bc:	89 2b       	or	r24, r25
 2be:	51 f0       	breq	.+20     	; 0x2d4 <Task_Terminate+0x20>
 2c0:	f8 94       	cli
 2c2:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 2c6:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 2ca:	e5 5f       	subi	r30, 0xF5	; 245
 2cc:	fe 4f       	sbci	r31, 0xFE	; 254
 2ce:	86 e0       	ldi	r24, 0x06	; 6
 2d0:	80 83       	st	Z, r24
 2d2:	77 cf       	rjmp	.-274    	; 0x1c2 <Enter_Kernel>
 2d4:	08 95       	ret

000002d6 <Kernel_Create_Task_At>:
 2d6:	ef 92       	push	r14
 2d8:	ff 92       	push	r15
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	1f 92       	push	r1
 2e4:	1f 92       	push	r1
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	9a 83       	std	Y+2, r25	; 0x02
 2ec:	89 83       	std	Y+1, r24	; 0x01
 2ee:	7c 01       	movw	r14, r24
 2f0:	04 e0       	ldi	r16, 0x04	; 4
 2f2:	e0 0e       	add	r14, r16
 2f4:	f1 1c       	adc	r15, r1
 2f6:	a0 e0       	ldi	r26, 0x00	; 0
 2f8:	b1 e0       	ldi	r27, 0x01	; 1
 2fa:	f7 01       	movw	r30, r14
 2fc:	8d 01       	movw	r16, r26
 2fe:	11 92       	st	Z+, r1
 300:	01 50       	subi	r16, 0x01	; 1
 302:	10 40       	sbci	r17, 0x00	; 0
 304:	e1 f7       	brne	.-8      	; 0x2fe <Kernel_Create_Task_At+0x28>
 306:	dc 01       	movw	r26, r24
 308:	ad 5f       	subi	r26, 0xFD	; 253
 30a:	be 4f       	sbci	r27, 0xFE	; 254
 30c:	ea e5       	ldi	r30, 0x5A	; 90
 30e:	f1 e0       	ldi	r31, 0x01	; 1
 310:	ec 93       	st	X, r30
 312:	11 97       	sbiw	r26, 0x01	; 1
 314:	fc 93       	st	X, r31
 316:	fc 01       	movw	r30, r24
 318:	ef 5f       	subi	r30, 0xFF	; 255
 31a:	fe 4f       	sbci	r31, 0xFE	; 254
 31c:	60 83       	st	Z, r22
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	70 83       	st	Z, r23
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	10 82       	st	Z, r1
 326:	b3 97       	sbiw	r30, 0x23	; 35
 328:	dc 01       	movw	r26, r24
 32a:	13 96       	adiw	r26, 0x03	; 3
 32c:	fc 93       	st	X, r31
 32e:	ee 93       	st	-X, r30
 330:	12 97       	sbiw	r26, 0x02	; 2
 332:	bd 96       	adiw	r30, 0x2d	; 45
 334:	71 83       	std	Z+1, r23	; 0x01
 336:	60 83       	st	Z, r22
 338:	32 96       	adiw	r30, 0x02	; 2
 33a:	10 82       	st	Z, r1
 33c:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <pCount>
 340:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <pCount+0x1>
 344:	fc 01       	movw	r30, r24
 346:	71 83       	std	Z+1, r23	; 0x01
 348:	60 83       	st	Z, r22
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	9a 81       	ldd	r25, Y+2	; 0x02
 34e:	fc 01       	movw	r30, r24
 350:	eb 5f       	subi	r30, 0xFB	; 251
 352:	fe 4f       	sbci	r31, 0xFE	; 254
 354:	51 83       	std	Z+1, r21	; 0x01
 356:	40 83       	st	Z, r20
 358:	32 96       	adiw	r30, 0x02	; 2
 35a:	31 83       	std	Z+1, r19	; 0x01
 35c:	20 83       	st	Z, r18
 35e:	42 30       	cpi	r20, 0x02	; 2
 360:	51 05       	cpc	r21, r1
 362:	09 f0       	breq	.+2      	; 0x366 <Kernel_Create_Task_At+0x90>
 364:	6a c0       	rjmp	.+212    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 366:	20 91 d4 13 	lds	r18, 0x13D4	; 0x8013d4 <temp_wcet>
 36a:	30 91 d5 13 	lds	r19, 0x13D5	; 0x8013d5 <temp_wcet+0x1>
 36e:	3d 96       	adiw	r30, 0x0d	; 13
 370:	31 83       	std	Z+1, r19	; 0x01
 372:	20 83       	st	Z, r18
 374:	20 91 d2 13 	lds	r18, 0x13D2	; 0x8013d2 <temp_offset>
 378:	30 91 d3 13 	lds	r19, 0x13D3	; 0x8013d3 <temp_offset+0x1>
 37c:	32 96       	adiw	r30, 0x02	; 2
 37e:	31 83       	std	Z+1, r19	; 0x01
 380:	20 83       	st	Z, r18
 382:	20 91 f6 13 	lds	r18, 0x13F6	; 0x8013f6 <temp_period>
 386:	30 91 f7 13 	lds	r19, 0x13F7	; 0x8013f7 <temp_period+0x1>
 38a:	dc 01       	movw	r26, r24
 38c:	ae 5e       	subi	r26, 0xEE	; 238
 38e:	be 4f       	sbci	r27, 0xFE	; 254
 390:	11 96       	adiw	r26, 0x01	; 1
 392:	3c 93       	st	X, r19
 394:	2e 93       	st	-X, r18
 396:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <Tasks>
 39a:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <Tasks+0x1>
 39e:	2f 5f       	subi	r18, 0xFF	; 255
 3a0:	3f 4f       	sbci	r19, 0xFF	; 255
 3a2:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <Tasks+0x1>
 3a6:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <Tasks>
 3aa:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <pCount>
 3ae:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <pCount+0x1>
 3b2:	2f 5f       	subi	r18, 0xFF	; 255
 3b4:	3f 4f       	sbci	r19, 0xFF	; 255
 3b6:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <pCount+0x1>
 3ba:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <pCount>
 3be:	1e 97       	sbiw	r26, 0x0e	; 14
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	8c 93       	st	X, r24
 3c4:	80 81       	ld	r24, Z
 3c6:	91 81       	ldd	r25, Z+1	; 0x01
 3c8:	89 2b       	or	r24, r25
 3ca:	59 f5       	brne	.+86     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3cc:	08 c0       	rjmp	.+16     	; 0x3de <Kernel_Create_Task_At+0x108>
 3ce:	44 e0       	ldi	r20, 0x04	; 4
 3d0:	52 e0       	ldi	r21, 0x02	; 2
 3d2:	62 eb       	ldi	r22, 0xB2	; 178
 3d4:	73 e1       	ldi	r23, 0x13	; 19
 3d6:	ce 01       	movw	r24, r28
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	f0 d2       	rcall	.+1504   	; 0x9bc <enqueue>
 3dc:	29 c0       	rjmp	.+82     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3de:	42 e0       	ldi	r20, 0x02	; 2
 3e0:	52 e0       	ldi	r21, 0x02	; 2
 3e2:	6a e1       	ldi	r22, 0x1A	; 26
 3e4:	74 e1       	ldi	r23, 0x14	; 20
 3e6:	ce 01       	movw	r24, r28
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	e8 d2       	rcall	.+1488   	; 0x9bc <enqueue>
 3ec:	e9 81       	ldd	r30, Y+1	; 0x01
 3ee:	fa 81       	ldd	r31, Y+2	; 0x02
 3f0:	df 01       	movw	r26, r30
 3f2:	ae 5e       	subi	r26, 0xEE	; 238
 3f4:	be 4f       	sbci	r27, 0xFE	; 254
 3f6:	8d 91       	ld	r24, X+
 3f8:	9c 91       	ld	r25, X
 3fa:	ea 5e       	subi	r30, 0xEA	; 234
 3fc:	fe 4f       	sbci	r31, 0xFE	; 254
 3fe:	20 81       	ld	r18, Z
 400:	31 81       	ldd	r19, Z+1	; 0x01
 402:	82 0f       	add	r24, r18
 404:	93 1f       	adc	r25, r19
 406:	91 83       	std	Z+1, r25	; 0x01
 408:	80 83       	st	Z, r24
 40a:	12 c0       	rjmp	.+36     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 40c:	41 30       	cpi	r20, 0x01	; 1
 40e:	51 05       	cpc	r21, r1
 410:	41 f4       	brne	.+16     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	52 e0       	ldi	r21, 0x02	; 2
 416:	6c e3       	ldi	r22, 0x3C	; 60
 418:	74 e1       	ldi	r23, 0x14	; 20
 41a:	ce 01       	movw	r24, r28
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	ce d2       	rcall	.+1436   	; 0x9bc <enqueue>
 420:	07 c0       	rjmp	.+14     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 422:	46 e0       	ldi	r20, 0x06	; 6
 424:	52 e0       	ldi	r21, 0x02	; 2
 426:	66 ed       	ldi	r22, 0xD6	; 214
 428:	73 e1       	ldi	r23, 0x13	; 19
 42a:	ce 01       	movw	r24, r28
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	c6 d2       	rcall	.+1420   	; 0x9bc <enqueue>
 430:	e9 81       	ldd	r30, Y+1	; 0x01
 432:	fa 81       	ldd	r31, Y+2	; 0x02
 434:	80 81       	ld	r24, Z
 436:	91 81       	ldd	r25, Z+1	; 0x01
 438:	1d c0       	rjmp	.+58     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 43a:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <Tasks>
 43e:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <Tasks+0x1>
 442:	2f 5f       	subi	r18, 0xFF	; 255
 444:	3f 4f       	sbci	r19, 0xFF	; 255
 446:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <Tasks+0x1>
 44a:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <Tasks>
 44e:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <pCount>
 452:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <pCount+0x1>
 456:	2f 5f       	subi	r18, 0xFF	; 255
 458:	3f 4f       	sbci	r19, 0xFF	; 255
 45a:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <pCount+0x1>
 45e:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <pCount>
 462:	fc 01       	movw	r30, r24
 464:	ec 5f       	subi	r30, 0xFC	; 252
 466:	fe 4f       	sbci	r31, 0xFE	; 254
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	80 83       	st	Z, r24
 46c:	43 30       	cpi	r20, 0x03	; 3
 46e:	51 05       	cpc	r21, r1
 470:	69 f6       	brne	.-102    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 472:	ad cf       	rjmp	.-166    	; 0x3ce <Kernel_Create_Task_At+0xf8>
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	ff 90       	pop	r15
 482:	ef 90       	pop	r14
 484:	08 95       	ret

00000486 <Kernel_Create_Task>:
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	ec 01       	movw	r28, r24
 48c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Tasks>
 490:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <Tasks+0x1>
 494:	40 97       	sbiw	r24, 0x10	; 16
 496:	21 f1       	breq	.+72     	; 0x4e0 <Kernel_Create_Task+0x5a>
 498:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <Process+0x104>
 49c:	88 23       	and	r24, r24
 49e:	71 f0       	breq	.+28     	; 0x4bc <Kernel_Create_Task+0x36>
 4a0:	a0 e3       	ldi	r26, 0x30	; 48
 4a2:	b4 e0       	ldi	r27, 0x04	; 4
 4a4:	e1 e0       	ldi	r30, 0x01	; 1
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	9c 91       	ld	r25, X
 4aa:	99 23       	and	r25, r25
 4ac:	49 f0       	breq	.+18     	; 0x4c0 <Kernel_Create_Task+0x3a>
 4ae:	31 96       	adiw	r30, 0x01	; 1
 4b0:	a6 5e       	subi	r26, 0xE6	; 230
 4b2:	be 4f       	sbci	r27, 0xFE	; 254
 4b4:	e0 31       	cpi	r30, 0x10	; 16
 4b6:	f1 05       	cpc	r31, r1
 4b8:	b9 f7       	brne	.-18     	; 0x4a8 <Kernel_Create_Task+0x22>
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <Kernel_Create_Task+0x3a>
 4bc:	e0 e0       	ldi	r30, 0x00	; 0
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	9a 01       	movw	r18, r20
 4c2:	ab 01       	movw	r20, r22
 4c4:	be 01       	movw	r22, r28
 4c6:	aa e1       	ldi	r26, 0x1A	; 26
 4c8:	b1 e0       	ldi	r27, 0x01	; 1
 4ca:	ea 9f       	mul	r30, r26
 4cc:	c0 01       	movw	r24, r0
 4ce:	eb 9f       	mul	r30, r27
 4d0:	90 0d       	add	r25, r0
 4d2:	fa 9f       	mul	r31, r26
 4d4:	90 0d       	add	r25, r0
 4d6:	11 24       	eor	r1, r1
 4d8:	8e 5e       	subi	r24, 0xEE	; 238
 4da:	9d 4f       	sbci	r25, 0xFD	; 253
 4dc:	fc de       	rcall	.-520    	; 0x2d6 <Kernel_Create_Task_At>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <Kernel_Create_Task+0x5a>
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <OS_Init>:
 4e6:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <Tasks+0x1>
 4ea:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <Tasks>
 4ee:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <KernelActive+0x1>
 4f2:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <KernelActive>
 4f6:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <pCount+0x1>
 4fa:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <pCount>
 4fe:	e2 e1       	ldi	r30, 0x12	; 18
 500:	f2 e0       	ldi	r31, 0x02	; 2
 502:	22 eb       	ldi	r18, 0xB2	; 178
 504:	33 e1       	ldi	r19, 0x13	; 19
 506:	8a e1       	ldi	r24, 0x1A	; 26
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	df 01       	movw	r26, r30
 50c:	ac 01       	movw	r20, r24
 50e:	1d 92       	st	X+, r1
 510:	41 50       	subi	r20, 0x01	; 1
 512:	50 40       	sbci	r21, 0x00	; 0
 514:	e1 f7       	brne	.-8      	; 0x50e <OS_Init+0x28>
 516:	df 01       	movw	r26, r30
 518:	ac 5f       	subi	r26, 0xFC	; 252
 51a:	be 4f       	sbci	r27, 0xFE	; 254
 51c:	1c 92       	st	X, r1
 51e:	11 82       	std	Z+1, r1	; 0x01
 520:	10 82       	st	Z, r1
 522:	e6 5e       	subi	r30, 0xE6	; 230
 524:	fe 4f       	sbci	r31, 0xFE	; 254
 526:	e2 17       	cp	r30, r18
 528:	f3 07       	cpc	r31, r19
 52a:	79 f7       	brne	.-34     	; 0x50a <OS_Init+0x24>
 52c:	08 95       	ret

0000052e <OS_Abort>:
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	9a d2       	rcall	.+1332   	; 0xa68 <_exit>

00000534 <Dispatch>:
 534:	64 e0       	ldi	r22, 0x04	; 4
 536:	72 e0       	ldi	r23, 0x02	; 2
 538:	82 eb       	ldi	r24, 0xB2	; 178
 53a:	93 e1       	ldi	r25, 0x13	; 19
 53c:	6f d2       	rcall	.+1246   	; 0xa1c <dequeue>
 53e:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <Cp+0x1>
 542:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <Cp>
 546:	89 2b       	or	r24, r25
 548:	49 f4       	brne	.+18     	; 0x55c <Dispatch+0x28>
 54a:	62 e0       	ldi	r22, 0x02	; 2
 54c:	72 e0       	ldi	r23, 0x02	; 2
 54e:	8a e1       	ldi	r24, 0x1A	; 26
 550:	94 e1       	ldi	r25, 0x14	; 20
 552:	64 d2       	rcall	.+1224   	; 0xa1c <dequeue>
 554:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <Cp+0x1>
 558:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <Cp>
 55c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <Cp>
 560:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <Cp+0x1>
 564:	89 2b       	or	r24, r25
 566:	49 f4       	brne	.+18     	; 0x57a <Dispatch+0x46>
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	72 e0       	ldi	r23, 0x02	; 2
 56c:	8c e3       	ldi	r24, 0x3C	; 60
 56e:	94 e1       	ldi	r25, 0x14	; 20
 570:	55 d2       	rcall	.+1194   	; 0xa1c <dequeue>
 572:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <Cp+0x1>
 576:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <Cp>
 57a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <Cp>
 57e:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <Cp+0x1>
 582:	89 2b       	or	r24, r25
 584:	49 f4       	brne	.+18     	; 0x598 <Dispatch+0x64>
 586:	66 e0       	ldi	r22, 0x06	; 6
 588:	72 e0       	ldi	r23, 0x02	; 2
 58a:	86 ed       	ldi	r24, 0xD6	; 214
 58c:	93 e1       	ldi	r25, 0x13	; 19
 58e:	46 d2       	rcall	.+1164   	; 0xa1c <dequeue>
 590:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <Cp+0x1>
 594:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <Cp>
 598:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 59c:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 5a0:	30 97       	sbiw	r30, 0x00	; 0
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <Dispatch+0x72>
 5a4:	c4 df       	rcall	.-120    	; 0x52e <OS_Abort>
 5a6:	82 81       	ldd	r24, Z+2	; 0x02
 5a8:	93 81       	ldd	r25, Z+3	; 0x03
 5aa:	90 93 f9 13 	sts	0x13F9, r25	; 0x8013f9 <CurrentSp+0x1>
 5ae:	80 93 f8 13 	sts	0x13F8, r24	; 0x8013f8 <CurrentSp>
 5b2:	ec 5f       	subi	r30, 0xFC	; 252
 5b4:	fe 4f       	sbci	r31, 0xFE	; 254
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	80 83       	st	Z, r24
 5ba:	08 95       	ret

000005bc <OS_Start>:
 5bc:	1f 93       	push	r17
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <KernelActive>
 5c6:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <KernelActive+0x1>
 5ca:	89 2b       	or	r24, r25
 5cc:	09 f0       	breq	.+2      	; 0x5d0 <OS_Start+0x14>
 5ce:	c1 c0       	rjmp	.+386    	; 0x752 <OS_Start+0x196>
 5d0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Tasks>
 5d4:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <Tasks+0x1>
 5d8:	89 2b       	or	r24, r25
 5da:	09 f4       	brne	.+2      	; 0x5de <OS_Start+0x22>
 5dc:	ba c0       	rjmp	.+372    	; 0x752 <OS_Start+0x196>
 5de:	f8 94       	cli
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <KernelActive+0x1>
 5e8:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <KernelActive>
 5ec:	a3 df       	rcall	.-186    	; 0x534 <Dispatch>
 5ee:	11 e0       	ldi	r17, 0x01	; 1
 5f0:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 5f4:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 5f8:	df 01       	movw	r26, r30
 5fa:	a5 5f       	subi	r26, 0xF5	; 245
 5fc:	be 4f       	sbci	r27, 0xFE	; 254
 5fe:	1c 92       	st	X, r1
 600:	82 81       	ldd	r24, Z+2	; 0x02
 602:	93 81       	ldd	r25, Z+3	; 0x03
 604:	90 93 f9 13 	sts	0x13F9, r25	; 0x8013f9 <CurrentSp+0x1>
 608:	80 93 f8 13 	sts	0x13F8, r24	; 0x8013f8 <CurrentSp>
 60c:	85 dd       	rcall	.-1270   	; 0x118 <CSwitch>
 60e:	c0 91 10 02 	lds	r28, 0x0210	; 0x800210 <Cp>
 612:	d0 91 11 02 	lds	r29, 0x0211	; 0x800211 <Cp+0x1>
 616:	80 91 f8 13 	lds	r24, 0x13F8	; 0x8013f8 <CurrentSp>
 61a:	90 91 f9 13 	lds	r25, 0x13F9	; 0x8013f9 <CurrentSp+0x1>
 61e:	9b 83       	std	Y+3, r25	; 0x03
 620:	8a 83       	std	Y+2, r24	; 0x02
 622:	fe 01       	movw	r30, r28
 624:	e5 5f       	subi	r30, 0xF5	; 245
 626:	fe 4f       	sbci	r31, 0xFE	; 254
 628:	e0 81       	ld	r30, Z
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	e7 30       	cpi	r30, 0x07	; 7
 62e:	f1 05       	cpc	r31, r1
 630:	f8 f6       	brcc	.-66     	; 0x5f0 <OS_Start+0x34>
 632:	88 27       	eor	r24, r24
 634:	ee 58       	subi	r30, 0x8E	; 142
 636:	ff 4f       	sbci	r31, 0xFF	; 255
 638:	8f 4f       	sbci	r24, 0xFF	; 255
 63a:	0e c2       	rjmp	.+1052   	; 0xa58 <__tablejump2__>
 63c:	fe 01       	movw	r30, r28
 63e:	e9 5f       	subi	r30, 0xF9	; 249
 640:	fe 4f       	sbci	r31, 0xFE	; 254
 642:	40 81       	ld	r20, Z
 644:	51 81       	ldd	r21, Z+1	; 0x01
 646:	32 97       	sbiw	r30, 0x02	; 2
 648:	60 81       	ld	r22, Z
 64a:	71 81       	ldd	r23, Z+1	; 0x01
 64c:	34 96       	adiw	r30, 0x04	; 4
 64e:	80 81       	ld	r24, Z
 650:	91 81       	ldd	r25, Z+1	; 0x01
 652:	19 df       	rcall	.-462    	; 0x486 <Kernel_Create_Task>
 654:	c4 5f       	subi	r28, 0xF4	; 244
 656:	de 4f       	sbci	r29, 0xFE	; 254
 658:	99 83       	std	Y+1, r25	; 0x01
 65a:	88 83       	st	Y, r24
 65c:	c9 cf       	rjmp	.-110    	; 0x5f0 <OS_Start+0x34>
 65e:	fe 01       	movw	r30, r28
 660:	e9 5f       	subi	r30, 0xF9	; 249
 662:	fe 4f       	sbci	r31, 0xFE	; 254
 664:	40 81       	ld	r20, Z
 666:	51 81       	ldd	r21, Z+1	; 0x01
 668:	32 96       	adiw	r30, 0x02	; 2
 66a:	80 81       	ld	r24, Z
 66c:	91 81       	ldd	r25, Z+1	; 0x01
 66e:	63 e0       	ldi	r22, 0x03	; 3
 670:	70 e0       	ldi	r23, 0x00	; 0
 672:	09 df       	rcall	.-494    	; 0x486 <Kernel_Create_Task>
 674:	c4 5f       	subi	r28, 0xF4	; 244
 676:	de 4f       	sbci	r29, 0xFE	; 254
 678:	99 83       	std	Y+1, r25	; 0x01
 67a:	88 83       	st	Y, r24
 67c:	b9 cf       	rjmp	.-142    	; 0x5f0 <OS_Start+0x34>
 67e:	fe 01       	movw	r30, r28
 680:	e9 5f       	subi	r30, 0xF9	; 249
 682:	fe 4f       	sbci	r31, 0xFE	; 254
 684:	40 81       	ld	r20, Z
 686:	51 81       	ldd	r21, Z+1	; 0x01
 688:	32 96       	adiw	r30, 0x02	; 2
 68a:	80 81       	ld	r24, Z
 68c:	91 81       	ldd	r25, Z+1	; 0x01
 68e:	62 e0       	ldi	r22, 0x02	; 2
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	f9 de       	rcall	.-526    	; 0x486 <Kernel_Create_Task>
 694:	c4 5f       	subi	r28, 0xF4	; 244
 696:	de 4f       	sbci	r29, 0xFE	; 254
 698:	99 83       	std	Y+1, r25	; 0x01
 69a:	88 83       	st	Y, r24
 69c:	a9 cf       	rjmp	.-174    	; 0x5f0 <OS_Start+0x34>
 69e:	fe 01       	movw	r30, r28
 6a0:	e9 5f       	subi	r30, 0xF9	; 249
 6a2:	fe 4f       	sbci	r31, 0xFE	; 254
 6a4:	40 81       	ld	r20, Z
 6a6:	51 81       	ldd	r21, Z+1	; 0x01
 6a8:	32 96       	adiw	r30, 0x02	; 2
 6aa:	80 81       	ld	r24, Z
 6ac:	91 81       	ldd	r25, Z+1	; 0x01
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	e9 de       	rcall	.-558    	; 0x486 <Kernel_Create_Task>
 6b4:	c4 5f       	subi	r28, 0xF4	; 244
 6b6:	de 4f       	sbci	r29, 0xFE	; 254
 6b8:	99 83       	std	Y+1, r25	; 0x01
 6ba:	88 83       	st	Y, r24
 6bc:	99 cf       	rjmp	.-206    	; 0x5f0 <OS_Start+0x34>
 6be:	fe 01       	movw	r30, r28
 6c0:	eb 5f       	subi	r30, 0xFB	; 251
 6c2:	fe 4f       	sbci	r31, 0xFE	; 254
 6c4:	80 81       	ld	r24, Z
 6c6:	91 81       	ldd	r25, Z+1	; 0x01
 6c8:	02 97       	sbiw	r24, 0x02	; 2
 6ca:	19 f4       	brne	.+6      	; 0x6d2 <OS_Start+0x116>
 6cc:	cc 5f       	subi	r28, 0xFC	; 252
 6ce:	de 4f       	sbci	r29, 0xFE	; 254
 6d0:	18 83       	st	Y, r17
 6d2:	30 df       	rcall	.-416    	; 0x534 <Dispatch>
 6d4:	8d cf       	rjmp	.-230    	; 0x5f0 <OS_Start+0x34>
 6d6:	fe 01       	movw	r30, r28
 6d8:	ec 5f       	subi	r30, 0xFC	; 252
 6da:	fe 4f       	sbci	r31, 0xFE	; 254
 6dc:	10 83       	st	Z, r17
 6de:	31 96       	adiw	r30, 0x01	; 1
 6e0:	80 81       	ld	r24, Z
 6e2:	91 81       	ldd	r25, Z+1	; 0x01
 6e4:	03 97       	sbiw	r24, 0x03	; 3
 6e6:	41 f4       	brne	.+16     	; 0x6f8 <OS_Start+0x13c>
 6e8:	44 e0       	ldi	r20, 0x04	; 4
 6ea:	52 e0       	ldi	r21, 0x02	; 2
 6ec:	62 eb       	ldi	r22, 0xB2	; 178
 6ee:	73 e1       	ldi	r23, 0x13	; 19
 6f0:	80 e1       	ldi	r24, 0x10	; 16
 6f2:	92 e0       	ldi	r25, 0x02	; 2
 6f4:	63 d1       	rcall	.+710    	; 0x9bc <enqueue>
 6f6:	1a c0       	rjmp	.+52     	; 0x72c <OS_Start+0x170>
 6f8:	fe 01       	movw	r30, r28
 6fa:	eb 5f       	subi	r30, 0xFB	; 251
 6fc:	fe 4f       	sbci	r31, 0xFE	; 254
 6fe:	80 81       	ld	r24, Z
 700:	91 81       	ldd	r25, Z+1	; 0x01
 702:	02 97       	sbiw	r24, 0x02	; 2
 704:	99 f0       	breq	.+38     	; 0x72c <OS_Start+0x170>
 706:	80 81       	ld	r24, Z
 708:	91 81       	ldd	r25, Z+1	; 0x01
 70a:	01 97       	sbiw	r24, 0x01	; 1
 70c:	41 f4       	brne	.+16     	; 0x71e <OS_Start+0x162>
 70e:	40 e0       	ldi	r20, 0x00	; 0
 710:	52 e0       	ldi	r21, 0x02	; 2
 712:	6c e3       	ldi	r22, 0x3C	; 60
 714:	74 e1       	ldi	r23, 0x14	; 20
 716:	80 e1       	ldi	r24, 0x10	; 16
 718:	92 e0       	ldi	r25, 0x02	; 2
 71a:	50 d1       	rcall	.+672    	; 0x9bc <enqueue>
 71c:	07 c0       	rjmp	.+14     	; 0x72c <OS_Start+0x170>
 71e:	46 e0       	ldi	r20, 0x06	; 6
 720:	52 e0       	ldi	r21, 0x02	; 2
 722:	66 ed       	ldi	r22, 0xD6	; 214
 724:	73 e1       	ldi	r23, 0x13	; 19
 726:	80 e1       	ldi	r24, 0x10	; 16
 728:	92 e0       	ldi	r25, 0x02	; 2
 72a:	48 d1       	rcall	.+656    	; 0x9bc <enqueue>
 72c:	03 df       	rcall	.-506    	; 0x534 <Dispatch>
 72e:	60 cf       	rjmp	.-320    	; 0x5f0 <OS_Start+0x34>
 730:	fe 01       	movw	r30, r28
 732:	ec 5f       	subi	r30, 0xFC	; 252
 734:	fe 4f       	sbci	r31, 0xFE	; 254
 736:	10 82       	st	Z, r1
 738:	19 82       	std	Y+1, r1	; 0x01
 73a:	18 82       	st	Y, r1
 73c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Tasks>
 740:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <Tasks+0x1>
 744:	01 97       	sbiw	r24, 0x01	; 1
 746:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <Tasks+0x1>
 74a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <Tasks>
 74e:	f2 de       	rcall	.-540    	; 0x534 <Dispatch>
 750:	4f cf       	rjmp	.-354    	; 0x5f0 <OS_Start+0x34>
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	1f 91       	pop	r17
 758:	08 95       	ret

0000075a <Task_Create>:
 75a:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <KernelActive>
 75e:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <KernelActive+0x1>
 762:	23 2b       	or	r18, r19
 764:	09 f4       	brne	.+2      	; 0x768 <Task_Create+0xe>
 766:	46 c0       	rjmp	.+140    	; 0x7f4 <Task_Create+0x9a>
 768:	f8 94       	cli
 76a:	63 30       	cpi	r22, 0x03	; 3
 76c:	71 05       	cpc	r23, r1
 76e:	49 f4       	brne	.+18     	; 0x782 <Task_Create+0x28>
 770:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 774:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 778:	e5 5f       	subi	r30, 0xF5	; 245
 77a:	fe 4f       	sbci	r31, 0xFE	; 254
 77c:	22 e0       	ldi	r18, 0x02	; 2
 77e:	20 83       	st	Z, r18
 780:	20 c0       	rjmp	.+64     	; 0x7c2 <Task_Create+0x68>
 782:	62 30       	cpi	r22, 0x02	; 2
 784:	71 05       	cpc	r23, r1
 786:	49 f4       	brne	.+18     	; 0x79a <Task_Create+0x40>
 788:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 78c:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 790:	e5 5f       	subi	r30, 0xF5	; 245
 792:	fe 4f       	sbci	r31, 0xFE	; 254
 794:	24 e0       	ldi	r18, 0x04	; 4
 796:	20 83       	st	Z, r18
 798:	14 c0       	rjmp	.+40     	; 0x7c2 <Task_Create+0x68>
 79a:	61 30       	cpi	r22, 0x01	; 1
 79c:	71 05       	cpc	r23, r1
 79e:	49 f4       	brne	.+18     	; 0x7b2 <Task_Create+0x58>
 7a0:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 7a4:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 7a8:	e5 5f       	subi	r30, 0xF5	; 245
 7aa:	fe 4f       	sbci	r31, 0xFE	; 254
 7ac:	23 e0       	ldi	r18, 0x03	; 3
 7ae:	20 83       	st	Z, r18
 7b0:	08 c0       	rjmp	.+16     	; 0x7c2 <Task_Create+0x68>
 7b2:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 7b6:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 7ba:	e5 5f       	subi	r30, 0xF5	; 245
 7bc:	fe 4f       	sbci	r31, 0xFE	; 254
 7be:	21 e0       	ldi	r18, 0x01	; 1
 7c0:	20 83       	st	Z, r18
 7c2:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <Cp>
 7c6:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <Cp+0x1>
 7ca:	f9 01       	movw	r30, r18
 7cc:	e7 5f       	subi	r30, 0xF7	; 247
 7ce:	fe 4f       	sbci	r31, 0xFE	; 254
 7d0:	91 83       	std	Z+1, r25	; 0x01
 7d2:	80 83       	st	Z, r24
 7d4:	34 97       	sbiw	r30, 0x04	; 4
 7d6:	71 83       	std	Z+1, r23	; 0x01
 7d8:	60 83       	st	Z, r22
 7da:	32 96       	adiw	r30, 0x02	; 2
 7dc:	51 83       	std	Z+1, r21	; 0x01
 7de:	40 83       	st	Z, r20
 7e0:	f0 dc       	rcall	.-1568   	; 0x1c2 <Enter_Kernel>
 7e2:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 7e6:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 7ea:	e4 5f       	subi	r30, 0xF4	; 244
 7ec:	fe 4f       	sbci	r31, 0xFE	; 254
 7ee:	80 81       	ld	r24, Z
 7f0:	91 81       	ldd	r25, Z+1	; 0x01
 7f2:	08 95       	ret
 7f4:	48 ce       	rjmp	.-880    	; 0x486 <Kernel_Create_Task>
 7f6:	08 95       	ret

000007f8 <Task_Create_Period>:
 7f8:	0f 93       	push	r16
 7fa:	1f 93       	push	r17
 7fc:	24 17       	cp	r18, r20
 7fe:	35 07       	cpc	r19, r21
 800:	08 f0       	brcs	.+2      	; 0x804 <Task_Create_Period+0xc>
 802:	95 de       	rcall	.-726    	; 0x52e <OS_Abort>
 804:	50 93 f7 13 	sts	0x13F7, r21	; 0x8013f7 <temp_period+0x1>
 808:	40 93 f6 13 	sts	0x13F6, r20	; 0x8013f6 <temp_period>
 80c:	30 93 d5 13 	sts	0x13D5, r19	; 0x8013d5 <temp_wcet+0x1>
 810:	20 93 d4 13 	sts	0x13D4, r18	; 0x8013d4 <temp_wcet>
 814:	10 93 d3 13 	sts	0x13D3, r17	; 0x8013d3 <temp_offset+0x1>
 818:	00 93 d2 13 	sts	0x13D2, r16	; 0x8013d2 <temp_offset>
 81c:	ab 01       	movw	r20, r22
 81e:	62 e0       	ldi	r22, 0x02	; 2
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	9b df       	rcall	.-202    	; 0x75a <Task_Create>
 824:	1f 91       	pop	r17
 826:	0f 91       	pop	r16
 828:	08 95       	ret

0000082a <Task_Next>:
 82a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <KernelActive>
 82e:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <KernelActive+0x1>
 832:	89 2b       	or	r24, r25
 834:	51 f0       	breq	.+20     	; 0x84a <Task_Next+0x20>
 836:	f8 94       	cli
 838:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 83c:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 840:	e5 5f       	subi	r30, 0xF5	; 245
 842:	fe 4f       	sbci	r31, 0xFE	; 254
 844:	85 e0       	ldi	r24, 0x05	; 5
 846:	80 83       	st	Z, r24
 848:	bc cc       	rjmp	.-1672   	; 0x1c2 <Enter_Kernel>
 84a:	08 95       	ret

0000084c <setup>:
  */
void setup() {


	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
 84c:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
 84e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
 852:	e1 e8       	ldi	r30, 0x81	; 129
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
 858:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 85c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
 860:	80 e7       	ldi	r24, 0x70	; 112
 862:	92 e0       	ldi	r25, 0x02	; 2
 864:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 868:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
 86c:	80 81       	ld	r24, Z
 86e:	88 60       	ori	r24, 0x08	; 8
 870:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
 872:	80 81       	ld	r24, Z
 874:	84 60       	ori	r24, 0x04	; 4
 876:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
 878:	ef e6       	ldi	r30, 0x6F	; 111
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	80 81       	ld	r24, Z
 87e:	82 60       	ori	r24, 0x02	; 2
 880:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
 882:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
 886:	e1 e9       	ldi	r30, 0x91	; 145
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
 88c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 890:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
 894:	83 e2       	ldi	r24, 0x23	; 35
 896:	94 ef       	ldi	r25, 0xF4	; 244
 898:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 89c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
 8a0:	80 81       	ld	r24, Z
 8a2:	88 60       	ori	r24, 0x08	; 8
 8a4:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
 8a6:	80 81       	ld	r24, Z
 8a8:	84 60       	ori	r24, 0x04	; 4
 8aa:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
 8ac:	82 e0       	ldi	r24, 0x02	; 2
 8ae:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>

	Enable_Interrupt();
 8b2:	78 94       	sei
 8b4:	08 95       	ret

000008b6 <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) { 
 8b6:	1f 92       	push	r1
 8b8:	0f 92       	push	r0
 8ba:	0f b6       	in	r0, 0x3f	; 63
 8bc:	0f 92       	push	r0
 8be:	11 24       	eor	r1, r1
 8c0:	0b b6       	in	r0, 0x3b	; 59
 8c2:	0f 92       	push	r0
 8c4:	ef 92       	push	r14
 8c6:	ff 92       	push	r15
 8c8:	0f 93       	push	r16
 8ca:	1f 93       	push	r17
 8cc:	2f 93       	push	r18
 8ce:	3f 93       	push	r19
 8d0:	4f 93       	push	r20
 8d2:	5f 93       	push	r21
 8d4:	6f 93       	push	r22
 8d6:	7f 93       	push	r23
 8d8:	8f 93       	push	r24
 8da:	9f 93       	push	r25
 8dc:	af 93       	push	r26
 8de:	bf 93       	push	r27
 8e0:	cf 93       	push	r28
 8e2:	df 93       	push	r29
 8e4:	ef 93       	push	r30
 8e6:	ff 93       	push	r31
 8e8:	c7 e1       	ldi	r28, 0x17	; 23
 8ea:	d3 e0       	ldi	r29, 0x03	; 3
 8ec:	0f 2e       	mov	r0, r31
 8ee:	f7 eb       	ldi	r31, 0xB7	; 183
 8f0:	ef 2e       	mov	r14, r31
 8f2:	f4 e1       	ldi	r31, 0x14	; 20
 8f4:	ff 2e       	mov	r15, r31
 8f6:	f0 2d       	mov	r31, r0
	int x;
	for(x = 0; x < MAXTHREAD; x++){
		if(Process[x].priority == PERIODIC){
 8f8:	88 81       	ld	r24, Y
 8fa:	99 81       	ldd	r25, Y+1	; 0x01
 8fc:	02 97       	sbiw	r24, 0x02	; 2
 8fe:	b9 f4       	brne	.+46     	; 0x92e <__vector_17+0x78>
			Process[x].offset -= 1;
 900:	89 89       	ldd	r24, Y+17	; 0x11
 902:	9a 89       	ldd	r25, Y+18	; 0x12
 904:	01 97       	sbiw	r24, 0x01	; 1
 906:	9a 8b       	std	Y+18, r25	; 0x12
 908:	89 8b       	std	Y+17, r24	; 0x11
			if(Process[x].offset == 0){
 90a:	89 2b       	or	r24, r25
 90c:	81 f4       	brne	.+32     	; 0x92e <__vector_17+0x78>
				enqueue(&(Process[x]), &PeriodicQueue, &PerioicCount);
 90e:	42 e0       	ldi	r20, 0x02	; 2
 910:	52 e0       	ldi	r21, 0x02	; 2
 912:	6a e1       	ldi	r22, 0x1A	; 26
 914:	74 e1       	ldi	r23, 0x14	; 20
 916:	ce 01       	movw	r24, r28
 918:	85 50       	subi	r24, 0x05	; 5
 91a:	91 40       	sbci	r25, 0x01	; 1
 91c:	4f d0       	rcall	.+158    	; 0x9bc <enqueue>
				Process[x].offset += Process[x].period;
 91e:	29 89       	ldd	r18, Y+17	; 0x11
 920:	3a 89       	ldd	r19, Y+18	; 0x12
 922:	8d 85       	ldd	r24, Y+13	; 0x0d
 924:	9e 85       	ldd	r25, Y+14	; 0x0e
 926:	82 0f       	add	r24, r18
 928:	93 1f       	adc	r25, r19
 92a:	9a 8b       	std	Y+18, r25	; 0x12
 92c:	89 8b       	std	Y+17, r24	; 0x11
 92e:	c6 5e       	subi	r28, 0xE6	; 230
 930:	de 4f       	sbci	r29, 0xFE	; 254
/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) { 
	int x;
	for(x = 0; x < MAXTHREAD; x++){
 932:	ce 15       	cp	r28, r14
 934:	df 05       	cpc	r29, r15
 936:	01 f7       	brne	.-64     	; 0x8f8 <__vector_17+0x42>
	}
	//if(PerioicCount){
	//	Disable_Interrupt();
	//	OS_Abort();
	//}
	Task_Next();
 938:	78 df       	rcall	.-272    	; 0x82a <Task_Next>
}
 93a:	ff 91       	pop	r31
 93c:	ef 91       	pop	r30
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	bf 91       	pop	r27
 944:	af 91       	pop	r26
 946:	9f 91       	pop	r25
 948:	8f 91       	pop	r24
 94a:	7f 91       	pop	r23
 94c:	6f 91       	pop	r22
 94e:	5f 91       	pop	r21
 950:	4f 91       	pop	r20
 952:	3f 91       	pop	r19
 954:	2f 91       	pop	r18
 956:	1f 91       	pop	r17
 958:	0f 91       	pop	r16
 95a:	ff 90       	pop	r15
 95c:	ef 90       	pop	r14
 95e:	0f 90       	pop	r0
 960:	0b be       	out	0x3b, r0	; 59
 962:	0f 90       	pop	r0
 964:	0f be       	out	0x3f, r0	; 63
 966:	0f 90       	pop	r0
 968:	1f 90       	pop	r1
 96a:	18 95       	reti

0000096c <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) { // PERIOD: 1 s
 96c:	1f 92       	push	r1
 96e:	0f 92       	push	r0
 970:	0f b6       	in	r0, 0x3f	; 63
 972:	0f 92       	push	r0
 974:	11 24       	eor	r1, r1
 976:	8f 93       	push	r24
 978:	9f 93       	push	r25
	tickOverflowCount += 1;
 97a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <tickOverflowCount>
 97e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <tickOverflowCount+0x1>
 982:	01 96       	adiw	r24, 0x01	; 1
 984:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <tickOverflowCount+0x1>
 988:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <tickOverflowCount>
}
 98c:	9f 91       	pop	r25
 98e:	8f 91       	pop	r24
 990:	0f 90       	pop	r0
 992:	0f be       	out	0x3f, r0	; 63
 994:	0f 90       	pop	r0
 996:	1f 90       	pop	r1
 998:	18 95       	reti

0000099a <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
DDRA |= (1<<PA4);
 99a:	0c 9a       	sbi	0x01, 4	; 1
PORTA &= ~(1<<PA4);
 99c:	14 98       	cbi	0x02, 4	; 2

DDRA |= (1<<PA5);
 99e:	0d 9a       	sbi	0x01, 5	; 1
PORTA &= ~(1<<PA5);
 9a0:	15 98       	cbi	0x02, 5	; 2

DDRA |= (1<<PA3);
 9a2:	0b 9a       	sbi	0x01, 3	; 1
PORTA &= ~(1<<PA3);
 9a4:	13 98       	cbi	0x02, 3	; 2
	setup();
 9a6:	52 df       	rcall	.-348    	; 0x84c <setup>

	OS_Init();
 9a8:	9e dd       	rcall	.-1220   	; 0x4e6 <OS_Init>
	Task_Create(a_main, SYSTEM, 1);
 9aa:	41 e0       	ldi	r20, 0x01	; 1
 9ac:	50 e0       	ldi	r21, 0x00	; 0
 9ae:	63 e0       	ldi	r22, 0x03	; 3
 9b0:	70 e0       	ldi	r23, 0x00	; 0
 9b2:	8e e3       	ldi	r24, 0x3E	; 62
 9b4:	91 e0       	ldi	r25, 0x01	; 1
 9b6:	d1 de       	rcall	.-606    	; 0x75a <Task_Create>
	OS_Start();
 9b8:	01 ce       	rjmp	.-1022   	; 0x5bc <OS_Start>
 9ba:	08 95       	ret

000009bc <enqueue>:
}

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
 9bc:	cf 93       	push	r28
 9be:	df 93       	push	r29
 9c0:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
 9c2:	28 81       	ld	r18, Y
 9c4:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
 9c6:	2f 30       	cpi	r18, 0x0F	; 15
 9c8:	31 05       	cpc	r19, r1
 9ca:	29 f1       	breq	.+74     	; 0xa16 <enqueue+0x5a>
        return NULL;
    }

    int i = (*QCount) - 1;
 9cc:	e8 81       	ld	r30, Y
 9ce:	f9 81       	ldd	r31, Y+1	; 0x01
 9d0:	9f 01       	movw	r18, r30
 9d2:	21 50       	subi	r18, 0x01	; 1
 9d4:	31 09       	sbc	r19, r1
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
 9d6:	72 f0       	brmi	.+28     	; 0x9f4 <enqueue+0x38>
 9d8:	ee 0f       	add	r30, r30
 9da:	ff 1f       	adc	r31, r31
 9dc:	e6 0f       	add	r30, r22
 9de:	f7 1f       	adc	r31, r23
 9e0:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
 9e2:	32 91       	ld	r19, -Z
 9e4:	22 91       	ld	r18, -Z
 9e6:	33 83       	std	Z+3, r19	; 0x03
 9e8:	22 83       	std	Z+2, r18	; 0x02

    int i = (*QCount) - 1;
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
 9ea:	ea 17       	cp	r30, r26
 9ec:	fb 07       	cpc	r31, r27
 9ee:	c9 f7       	brne	.-14     	; 0x9e2 <enqueue+0x26>
        Queue[i+1] = Queue[i];
        i--;
 9f0:	2f ef       	ldi	r18, 0xFF	; 255
 9f2:	3f ef       	ldi	r19, 0xFF	; 255
        temp = Queue[i];
    }

    Queue[i+1] = *p;
 9f4:	fc 01       	movw	r30, r24
 9f6:	80 81       	ld	r24, Z
 9f8:	91 81       	ldd	r25, Z+1	; 0x01
 9fa:	2f 5f       	subi	r18, 0xFF	; 255
 9fc:	3f 4f       	sbci	r19, 0xFF	; 255
 9fe:	22 0f       	add	r18, r18
 a00:	33 1f       	adc	r19, r19
 a02:	fb 01       	movw	r30, r22
 a04:	e2 0f       	add	r30, r18
 a06:	f3 1f       	adc	r31, r19
 a08:	91 83       	std	Z+1, r25	; 0x01
 a0a:	80 83       	st	Z, r24
    (*QCount)++;
 a0c:	88 81       	ld	r24, Y
 a0e:	99 81       	ldd	r25, Y+1	; 0x01
 a10:	01 96       	adiw	r24, 0x01	; 1
 a12:	99 83       	std	Y+1, r25	; 0x01
 a14:	88 83       	st	Y, r24
}
 a16:	df 91       	pop	r29
 a18:	cf 91       	pop	r28
 a1a:	08 95       	ret

00000a1c <dequeue>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
 a1c:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
 a1e:	2d 91       	ld	r18, X+
 a20:	3c 91       	ld	r19, X
 a22:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
 a24:	23 2b       	or	r18, r19
 a26:	a9 f0       	breq	.+42     	; 0xa52 <dequeue+0x36>
	   return NULL;
   }

   volatile PD *result = (Queue[(*QCount)-1]);
 a28:	2d 91       	ld	r18, X+
 a2a:	3c 91       	ld	r19, X
 a2c:	11 97       	sbiw	r26, 0x01	; 1
 a2e:	f9 01       	movw	r30, r18
 a30:	e1 50       	subi	r30, 0x01	; 1
 a32:	f0 48       	sbci	r31, 0x80	; 128
 a34:	ee 0f       	add	r30, r30
 a36:	ff 1f       	adc	r31, r31
 a38:	e8 0f       	add	r30, r24
 a3a:	f9 1f       	adc	r31, r25
 a3c:	80 81       	ld	r24, Z
 a3e:	91 81       	ldd	r25, Z+1	; 0x01
   (*QCount)--;
 a40:	2d 91       	ld	r18, X+
 a42:	3c 91       	ld	r19, X
 a44:	11 97       	sbiw	r26, 0x01	; 1
 a46:	21 50       	subi	r18, 0x01	; 1
 a48:	31 09       	sbc	r19, r1
 a4a:	11 96       	adiw	r26, 0x01	; 1
 a4c:	3c 93       	st	X, r19
 a4e:	2e 93       	st	-X, r18

   return result;
 a50:	08 95       	ret
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
	   return NULL;
 a52:	80 e0       	ldi	r24, 0x00	; 0
 a54:	90 e0       	ldi	r25, 0x00	; 0

   volatile PD *result = (Queue[(*QCount)-1]);
   (*QCount)--;

   return result;
}
 a56:	08 95       	ret

00000a58 <__tablejump2__>:
 a58:	ee 0f       	add	r30, r30
 a5a:	ff 1f       	adc	r31, r31
 a5c:	88 1f       	adc	r24, r24
 a5e:	8b bf       	out	0x3b, r24	; 59
 a60:	07 90       	elpm	r0, Z+
 a62:	f6 91       	elpm	r31, Z
 a64:	e0 2d       	mov	r30, r0
 a66:	19 94       	eijmp

00000a68 <_exit>:
 a68:	f8 94       	cli

00000a6a <__stop_program>:
 a6a:	ff cf       	rjmp	.-2      	; 0xa6a <__stop_program>
