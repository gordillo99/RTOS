
Project2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00001766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001528  00800200  00800200  00001766  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001766  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000017d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028d4  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001245  00000000  00000000  0000425c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010eb  00000000  00000000  000054a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d0  00000000  00000000  0000658c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a2a  00000000  00000000  00006a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015b0  00000000  00000000  00007486  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00008a36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
       2:	00 00       	nop
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	00 00       	nop
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
       e:	00 00       	nop
      10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
      12:	00 00       	nop
      14:	92 c0       	rjmp	.+292    	; 0x13a <__bad_interrupt>
      16:	00 00       	nop
      18:	90 c0       	rjmp	.+288    	; 0x13a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	09 c5       	rjmp	.+2578   	; 0xa58 <__vector_17>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	6a c0       	rjmp	.+212    	; 0x13a <__bad_interrupt>
      66:	00 00       	nop
      68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
      6e:	00 00       	nop
      70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
      72:	00 00       	nop
      74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
      76:	00 00       	nop
      78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
      7e:	00 00       	nop
      80:	4c c5       	rjmp	.+2712   	; 0xb1a <__vector_32>
      82:	00 00       	nop
      84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
      86:	00 00       	nop
      88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
      8e:	00 00       	nop
      90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
      92:	00 00       	nop
      94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
      96:	00 00       	nop
      98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	48 c0       	rjmp	.+144    	; 0x13a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	46 c0       	rjmp	.+140    	; 0x13a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	44 c0       	rjmp	.+136    	; 0x13a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	42 c0       	rjmp	.+132    	; 0x13a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	40 c0       	rjmp	.+128    	; 0x13a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c0       	rjmp	.+124    	; 0x13a <__bad_interrupt>
      be:	00 00       	nop
      c0:	3c c0       	rjmp	.+120    	; 0x13a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3a c0       	rjmp	.+116    	; 0x13a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	38 c0       	rjmp	.+112    	; 0x13a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	36 c0       	rjmp	.+108    	; 0x13a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	34 c0       	rjmp	.+104    	; 0x13a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	32 c0       	rjmp	.+100    	; 0x13a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	30 c0       	rjmp	.+96     	; 0x13a <__bad_interrupt>
      da:	00 00       	nop
      dc:	2e c0       	rjmp	.+92     	; 0x13a <__bad_interrupt>
      de:	00 00       	nop
      e0:	2c c0       	rjmp	.+88     	; 0x13a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e1 09       	sbc	r30, r1
      e6:	f9 09       	sbc	r31, r9
      e8:	29 0a       	sbc	r2, r25
      ea:	10 0a       	sbc	r1, r16
      ec:	40 0a       	sbc	r4, r16
      ee:	77 0a       	sbc	r7, r23
      f0:	71 0a       	sbc	r7, r17
      f2:	73 0a       	sbc	r7, r19
      f4:	75 0a       	sbc	r7, r21
      f6:	6f 0a       	sbc	r6, r31

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d1 e2       	ldi	r29, 0x21	; 33
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
     108:	12 e0       	ldi	r17, 0x02	; 2
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	e2 ef       	ldi	r30, 0xF2	; 242
     110:	f6 e1       	ldi	r31, 0x16	; 22
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	a0 30       	cpi	r26, 0x00	; 0
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	27 e1       	ldi	r18, 0x17	; 23
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	a8 32       	cpi	r26, 0x28	; 40
     12e:	b2 07       	cpc	r27, r18
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 90 0a 	call	0x1520	; 0x1520 <main>
     136:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     13c:	0f 92       	push	r0
     13e:	1f 92       	push	r1
     140:	2f 92       	push	r2
     142:	3f 92       	push	r3
     144:	4f 92       	push	r4
     146:	5f 92       	push	r5
     148:	6f 92       	push	r6
     14a:	7f 92       	push	r7
     14c:	8f 92       	push	r8
     14e:	9f 92       	push	r9
     150:	af 92       	push	r10
     152:	bf 92       	push	r11
     154:	cf 92       	push	r12
     156:	df 92       	push	r13
     158:	ef 92       	push	r14
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	2f 93       	push	r18
     162:	3f 93       	push	r19
     164:	4f 93       	push	r20
     166:	5f 93       	push	r21
     168:	6f 93       	push	r22
     16a:	7f 93       	push	r23
     16c:	8f 93       	push	r24
     16e:	9f 93       	push	r25
     170:	af 93       	push	r26
     172:	bf 93       	push	r27
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	ef 93       	push	r30
     17a:	ff 93       	push	r31
     17c:	0f b7       	in	r16, 0x3f	; 63
     17e:	0f 93       	push	r16
     180:	fc b7       	in	r31, 0x3c	; 60
     182:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     184:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     186:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     188:	e0 93 06 17 	sts	0x1706, r30	; 0x801706 <KernelSp>
        sts  KernelSp+1, r31
     18c:	f0 93 07 17 	sts	0x1707, r31	; 0x801707 <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     190:	e0 91 e4 16 	lds	r30, 0x16E4	; 0x8016e4 <CurrentSp>
        lds  r31, CurrentSp+1
     194:	f0 91 e5 16 	lds	r31, 0x16E5	; 0x8016e5 <CurrentSp+0x1>
        out  SPL, r30
     198:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     19a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     19c:	ff 91       	pop	r31
     19e:	fc bf       	out	0x3c, r31	; 60
     1a0:	0f 91       	pop	r16
     1a2:	0f bf       	out	0x3f, r16	; 63
     1a4:	ff 91       	pop	r31
     1a6:	ef 91       	pop	r30
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	bf 91       	pop	r27
     1ae:	af 91       	pop	r26
     1b0:	9f 91       	pop	r25
     1b2:	8f 91       	pop	r24
     1b4:	7f 91       	pop	r23
     1b6:	6f 91       	pop	r22
     1b8:	5f 91       	pop	r21
     1ba:	4f 91       	pop	r20
     1bc:	3f 91       	pop	r19
     1be:	2f 91       	pop	r18
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	cf 90       	pop	r12
     1cc:	bf 90       	pop	r11
     1ce:	af 90       	pop	r10
     1d0:	9f 90       	pop	r9
     1d2:	8f 90       	pop	r8
     1d4:	7f 90       	pop	r7
     1d6:	6f 90       	pop	r6
     1d8:	5f 90       	pop	r5
     1da:	4f 90       	pop	r4
     1dc:	3f 90       	pop	r3
     1de:	2f 90       	pop	r2
     1e0:	1f 90       	pop	r1
     1e2:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1e4:	18 95       	reti

000001e6 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1e6:	0f 92       	push	r0
     1e8:	1f 92       	push	r1
     1ea:	2f 92       	push	r2
     1ec:	3f 92       	push	r3
     1ee:	4f 92       	push	r4
     1f0:	5f 92       	push	r5
     1f2:	6f 92       	push	r6
     1f4:	7f 92       	push	r7
     1f6:	8f 92       	push	r8
     1f8:	9f 92       	push	r9
     1fa:	af 92       	push	r10
     1fc:	bf 92       	push	r11
     1fe:	cf 92       	push	r12
     200:	df 92       	push	r13
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
     20a:	2f 93       	push	r18
     20c:	3f 93       	push	r19
     20e:	4f 93       	push	r20
     210:	5f 93       	push	r21
     212:	6f 93       	push	r22
     214:	7f 93       	push	r23
     216:	8f 93       	push	r24
     218:	9f 93       	push	r25
     21a:	af 93       	push	r26
     21c:	bf 93       	push	r27
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	ef 93       	push	r30
     224:	ff 93       	push	r31
     226:	0f b7       	in	r16, 0x3f	; 63
     228:	0f 93       	push	r16
     22a:	fc b7       	in	r31, 0x3c	; 60
     22c:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     22e:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     230:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     232:	e0 93 e4 16 	sts	0x16E4, r30	; 0x8016e4 <CurrentSp>
        sts  CurrentSp+1, r31
     236:	f0 93 e5 16 	sts	0x16E5, r31	; 0x8016e5 <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     23a:	e0 91 06 17 	lds	r30, 0x1706	; 0x801706 <KernelSp>
        lds  r31, KernelSp+1
     23e:	f0 91 07 17 	lds	r31, 0x1707	; 0x801707 <KernelSp+0x1>
        out  SPL, r30
     242:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     244:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     246:	ff 91       	pop	r31
     248:	fc bf       	out	0x3c, r31	; 60
     24a:	0f 91       	pop	r16
     24c:	0f bf       	out	0x3f, r16	; 63
     24e:	ff 91       	pop	r31
     250:	ef 91       	pop	r30
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	bf 91       	pop	r27
     258:	af 91       	pop	r26
     25a:	9f 91       	pop	r25
     25c:	8f 91       	pop	r24
     25e:	7f 91       	pop	r23
     260:	6f 91       	pop	r22
     262:	5f 91       	pop	r21
     264:	4f 91       	pop	r20
     266:	3f 91       	pop	r19
     268:	2f 91       	pop	r18
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	ff 90       	pop	r15
     270:	ef 90       	pop	r14
     272:	df 90       	pop	r13
     274:	cf 90       	pop	r12
     276:	bf 90       	pop	r11
     278:	af 90       	pop	r10
     27a:	9f 90       	pop	r9
     27c:	8f 90       	pop	r8
     27e:	7f 90       	pop	r7
     280:	6f 90       	pop	r6
     282:	5f 90       	pop	r5
     284:	4f 90       	pop	r4
     286:	3f 90       	pop	r3
     288:	2f 90       	pop	r2
     28a:	1f 90       	pop	r1
     28c:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     28e:	08 95       	ret

00000290 <ASDF4>:

void ASDF4()
{
	for(;;){
		//pin 28
		PORTA |= (1<<PA6);
     290:	16 9a       	sbi	0x02, 6	; 2
		PORTA &= ~(1<<PA6);
     292:	16 98       	cbi	0x02, 6	; 2
	}
     294:	fd cf       	rjmp	.-6      	; 0x290 <ASDF4>

00000296 <ASDF1>:
/***** Core System Tasks *****/
void ASDF1()
{
	for (;;) {
		//pin 25
		PORTA |= (1<<PA3);
     296:	13 9a       	sbi	0x02, 3	; 2
		PORTA &= ~(1<<PA3);
     298:	13 98       	cbi	0x02, 3	; 2
		Task_Next();
     29a:	36 d3       	rcall	.+1644   	; 0x908 <Task_Next>
	}
     29c:	fc cf       	rjmp	.-8      	; 0x296 <ASDF1>

0000029e <ASDF2>:

void ASDF2()
{
	for (;;) {
		//pin 26
		PORTA |= (1<<PA4);
     29e:	14 9a       	sbi	0x02, 4	; 2
		PORTA &= ~(1<<PA4);
     2a0:	14 98       	cbi	0x02, 4	; 2
		Task_Next();
     2a2:	32 d3       	rcall	.+1636   	; 0x908 <Task_Next>
	}
     2a4:	fc cf       	rjmp	.-8      	; 0x29e <ASDF2>

000002a6 <ASDF3>:

void ASDF3()
{
	for (;;) {
		//pin 27
		PORTA |= (1<<PA5);
     2a6:	15 9a       	sbi	0x02, 5	; 2
		PORTA &= ~(1<<PA5);
     2a8:	15 98       	cbi	0x02, 5	; 2
		Task_Next();
     2aa:	2e d3       	rcall	.+1628   	; 0x908 <Task_Next>
	}
     2ac:	fc cf       	rjmp	.-8      	; 0x2a6 <ASDF3>

000002ae <ASDF5>:
	}
}

void ASDF5()
{
	Chan_Init();
     2ae:	4c d4       	rcall	.+2200   	; 0xb48 <Chan_Init>
	int x = 0;
	for(;;x++)
	{
		//pin 29
		PORTA |= (1<<PA7);
     2b0:	17 9a       	sbi	0x02, 7	; 2
		PORTA &= ~(1<<PA7);
     2b2:	17 98       	cbi	0x02, 7	; 2
}

void ASDF5()
{
	Chan_Init();
	int x = 0;
     2b4:	c0 e0       	ldi	r28, 0x00	; 0
     2b6:	d0 e0       	ldi	r29, 0x00	; 0
     2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <ASDF5+0x16>
	{
		//pin 29
		PORTA |= (1<<PA7);
		PORTA &= ~(1<<PA7);
		if (x == 1000) {
			Send(1, 69);
     2ba:	65 e4       	ldi	r22, 0x45	; 69
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	84 d4       	rcall	.+2312   	; 0xbcc <Send>

void ASDF5()
{
	Chan_Init();
	int x = 0;
	for(;;x++)
     2c4:	21 96       	adiw	r28, 0x01	; 1
	{
		//pin 29
		PORTA |= (1<<PA7);
     2c6:	17 9a       	sbi	0x02, 7	; 2
		PORTA &= ~(1<<PA7);
     2c8:	17 98       	cbi	0x02, 7	; 2
		if (x == 1000) {
     2ca:	c8 3e       	cpi	r28, 0xE8	; 232
     2cc:	83 e0       	ldi	r24, 0x03	; 3
     2ce:	d8 07       	cpc	r29, r24
     2d0:	c9 f7       	brne	.-14     	; 0x2c4 <ASDF5+0x16>
     2d2:	f3 cf       	rjmp	.-26     	; 0x2ba <ASDF5+0xc>

000002d4 <a_main>:
		}
	}
}

void a_main()
{
     2d4:	0f 93       	push	r16
     2d6:	1f 93       	push	r17
	
    // Initialize tasks
	Task_Create_Period(ASDF1,1, 10, 9, 0);
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	10 e0       	ldi	r17, 0x00	; 0
     2dc:	29 e0       	ldi	r18, 0x09	; 9
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	4a e0       	ldi	r20, 0x0A	; 10
     2e2:	50 e0       	ldi	r21, 0x00	; 0
     2e4:	61 e0       	ldi	r22, 0x01	; 1
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	8b e4       	ldi	r24, 0x4B	; 75
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	bb d2       	rcall	.+1398   	; 0x864 <Task_Create_Period>
	Task_Create_Period(ASDF2,2, 10, 9 ,1);
     2ee:	01 e0       	ldi	r16, 0x01	; 1
     2f0:	10 e0       	ldi	r17, 0x00	; 0
     2f2:	29 e0       	ldi	r18, 0x09	; 9
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	4a e0       	ldi	r20, 0x0A	; 10
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	62 e0       	ldi	r22, 0x02	; 2
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	8f e4       	ldi	r24, 0x4F	; 79
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	b0 d2       	rcall	.+1376   	; 0x864 <Task_Create_Period>
	Task_Create_Period(ASDF3,2, 10, 9 ,2);
     304:	02 e0       	ldi	r16, 0x02	; 2
     306:	10 e0       	ldi	r17, 0x00	; 0
     308:	29 e0       	ldi	r18, 0x09	; 9
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	4a e0       	ldi	r20, 0x0A	; 10
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	62 e0       	ldi	r22, 0x02	; 2
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	83 e5       	ldi	r24, 0x53	; 83
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	a5 d2       	rcall	.+1354   	; 0x864 <Task_Create_Period>
	Task_Create_RR(ASDF4,5);
     31a:	65 e0       	ldi	r22, 0x05	; 5
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	88 e4       	ldi	r24, 0x48	; 72
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	8c d2       	rcall	.+1304   	; 0x83c <Task_Create_RR>
	Task_Create_System(ASDF5,6);
     324:	66 e0       	ldi	r22, 0x06	; 6
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	87 e5       	ldi	r24, 0x57	; 87
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	73 d2       	rcall	.+1254   	; 0x814 <Task_Create_System>
	Task_Create_System(ASDF3,3);
     32e:	63 e0       	ldi	r22, 0x03	; 3
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	83 e5       	ldi	r24, 0x53	; 83
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	6e d2       	rcall	.+1244   	; 0x814 <Task_Create_System>
	Task_Create_RR(ASDF4,4);
     338:	64 e0       	ldi	r22, 0x04	; 4
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	88 e4       	ldi	r24, 0x48	; 72
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	7d d2       	rcall	.+1274   	; 0x83c <Task_Create_RR>

    // Kill the initialization task
    Task_Terminate();
     342:	04 d0       	rcall	.+8      	; 0x34c <Task_Terminate>
}
     344:	1f 91       	pop	r17
     346:	0f 91       	pop	r16
     348:	08 95       	ret

0000034a <idle>:
void Write(CHAN ch, int v) {
	if (Cp->priority == PERIODIC) OS_Abort(5); // periodic tasks are not allowed to use csp
	Cp->request = ASYNC_SEND;
	Cp->senderChannel = ch;
	Cp->val = v;
	Enter_Kernel();
     34a:	ff cf       	rjmp	.-2      	; 0x34a <idle>

0000034c <Task_Terminate>:
     34c:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <KernelActive>
     350:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <KernelActive+0x1>
     354:	89 2b       	or	r24, r25
     356:	51 f0       	breq	.+20     	; 0x36c <Task_Terminate+0x20>
     358:	f8 94       	cli
     35a:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     35e:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     362:	e5 5f       	subi	r30, 0xF5	; 245
     364:	fe 4f       	sbci	r31, 0xFE	; 254
     366:	86 e0       	ldi	r24, 0x06	; 6
     368:	80 83       	st	Z, r24
     36a:	3d cf       	rjmp	.-390    	; 0x1e6 <Enter_Kernel>
     36c:	08 95       	ret

0000036e <Kernel_Create_Task_At>:
     36e:	8f 92       	push	r8
     370:	9f 92       	push	r9
     372:	af 92       	push	r10
     374:	bf 92       	push	r11
     376:	cf 92       	push	r12
     378:	df 92       	push	r13
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	1f 92       	push	r1
     388:	1f 92       	push	r1
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	9a 83       	std	Y+2, r25	; 0x02
     390:	89 83       	std	Y+1, r24	; 0x01
     392:	5c 01       	movw	r10, r24
     394:	a4 e0       	ldi	r26, 0x04	; 4
     396:	aa 0e       	add	r10, r26
     398:	b1 1c       	adc	r11, r1
     39a:	81 2c       	mov	r8, r1
     39c:	99 24       	eor	r9, r9
     39e:	93 94       	inc	r9
     3a0:	f5 01       	movw	r30, r10
     3a2:	d4 01       	movw	r26, r8
     3a4:	11 92       	st	Z+, r1
     3a6:	11 97       	sbiw	r26, 0x01	; 1
     3a8:	e9 f7       	brne	.-6      	; 0x3a4 <Kernel_Create_Task_At+0x36>
     3aa:	dc 01       	movw	r26, r24
     3ac:	ad 5f       	subi	r26, 0xFD	; 253
     3ae:	be 4f       	sbci	r27, 0xFE	; 254
     3b0:	e6 ea       	ldi	r30, 0xA6	; 166
     3b2:	f1 e0       	ldi	r31, 0x01	; 1
     3b4:	ec 93       	st	X, r30
     3b6:	11 97       	sbiw	r26, 0x01	; 1
     3b8:	fc 93       	st	X, r31
     3ba:	fc 01       	movw	r30, r24
     3bc:	ef 5f       	subi	r30, 0xFF	; 255
     3be:	fe 4f       	sbci	r31, 0xFE	; 254
     3c0:	10 82       	st	Z, r1
     3c2:	31 97       	sbiw	r30, 0x01	; 1
     3c4:	60 83       	st	Z, r22
     3c6:	31 97       	sbiw	r30, 0x01	; 1
     3c8:	70 83       	st	Z, r23
     3ca:	31 97       	sbiw	r30, 0x01	; 1
     3cc:	10 82       	st	Z, r1
     3ce:	b3 97       	sbiw	r30, 0x23	; 35
     3d0:	dc 01       	movw	r26, r24
     3d2:	13 96       	adiw	r26, 0x03	; 3
     3d4:	fc 93       	st	X, r31
     3d6:	ee 93       	st	-X, r30
     3d8:	12 97       	sbiw	r26, 0x02	; 2
     3da:	be 96       	adiw	r30, 0x2e	; 46
     3dc:	71 83       	std	Z+1, r23	; 0x01
     3de:	60 83       	st	Z, r22
     3e0:	32 96       	adiw	r30, 0x02	; 2
     3e2:	10 82       	st	Z, r1
     3e4:	60 91 9a 04 	lds	r22, 0x049A	; 0x80049a <pCount>
     3e8:	70 91 9b 04 	lds	r23, 0x049B	; 0x80049b <pCount+0x1>
     3ec:	fc 01       	movw	r30, r24
     3ee:	71 83       	std	Z+1, r23	; 0x01
     3f0:	60 83       	st	Z, r22
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	9a 81       	ldd	r25, Y+2	; 0x02
     3f6:	fc 01       	movw	r30, r24
     3f8:	eb 5f       	subi	r30, 0xFB	; 251
     3fa:	fe 4f       	sbci	r31, 0xFE	; 254
     3fc:	51 83       	std	Z+1, r21	; 0x01
     3fe:	40 83       	st	Z, r20
     400:	32 96       	adiw	r30, 0x02	; 2
     402:	31 83       	std	Z+1, r19	; 0x01
     404:	20 83       	st	Z, r18
     406:	3f 96       	adiw	r30, 0x0f	; 15
     408:	2f ef       	ldi	r18, 0xFF	; 255
     40a:	3f ef       	ldi	r19, 0xFF	; 255
     40c:	31 83       	std	Z+1, r19	; 0x01
     40e:	20 83       	st	Z, r18
     410:	32 96       	adiw	r30, 0x02	; 2
     412:	11 82       	std	Z+1, r1	; 0x01
     414:	10 82       	st	Z, r1
     416:	34 97       	sbiw	r30, 0x04	; 4
     418:	11 83       	std	Z+1, r17	; 0x01
     41a:	00 83       	st	Z, r16
     41c:	34 97       	sbiw	r30, 0x04	; 4
     41e:	d1 82       	std	Z+1, r13	; 0x01
     420:	c0 82       	st	Z, r12
     422:	32 96       	adiw	r30, 0x02	; 2
     424:	f1 82       	std	Z+1, r15	; 0x01
     426:	e0 82       	st	Z, r14
     428:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <Tasks>
     42c:	30 91 9d 04 	lds	r19, 0x049D	; 0x80049d <Tasks+0x1>
     430:	2f 5f       	subi	r18, 0xFF	; 255
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	30 93 9d 04 	sts	0x049D, r19	; 0x80049d <Tasks+0x1>
     438:	20 93 9c 04 	sts	0x049C, r18	; 0x80049c <Tasks>
     43c:	20 91 9a 04 	lds	r18, 0x049A	; 0x80049a <pCount>
     440:	30 91 9b 04 	lds	r19, 0x049B	; 0x80049b <pCount+0x1>
     444:	2f 5f       	subi	r18, 0xFF	; 255
     446:	3f 4f       	sbci	r19, 0xFF	; 255
     448:	30 93 9b 04 	sts	0x049B, r19	; 0x80049b <pCount+0x1>
     44c:	20 93 9a 04 	sts	0x049A, r18	; 0x80049a <pCount>
     450:	3e 97       	sbiw	r30, 0x0e	; 14
     452:	21 e0       	ldi	r18, 0x01	; 1
     454:	20 83       	st	Z, r18
     456:	43 30       	cpi	r20, 0x03	; 3
     458:	51 05       	cpc	r21, r1
     45a:	49 f4       	brne	.+18     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     45c:	46 e9       	ldi	r20, 0x96	; 150
     45e:	54 e0       	ldi	r21, 0x04	; 4
     460:	62 ec       	ldi	r22, 0xC2	; 194
     462:	76 e1       	ldi	r23, 0x16	; 22
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	0e 94 a6 0a 	call	0x154c	; 0x154c <enqueue>
     46c:	1c c0       	rjmp	.+56     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     46e:	42 30       	cpi	r20, 0x02	; 2
     470:	51 05       	cpc	r21, r1
     472:	71 f4       	brne	.+28     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     474:	fc 01       	movw	r30, r24
     476:	ea 5e       	subi	r30, 0xEA	; 234
     478:	fe 4f       	sbci	r31, 0xFE	; 254
     47a:	11 83       	std	Z+1, r17	; 0x01
     47c:	00 83       	st	Z, r16
     47e:	44 e9       	ldi	r20, 0x94	; 148
     480:	54 e0       	ldi	r21, 0x04	; 4
     482:	66 ee       	ldi	r22, 0xE6	; 230
     484:	76 e1       	ldi	r23, 0x16	; 22
     486:	ce 01       	movw	r24, r28
     488:	01 96       	adiw	r24, 0x01	; 1
     48a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <enqueuePeriodic>
     48e:	0b c0       	rjmp	.+22     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     490:	41 30       	cpi	r20, 0x01	; 1
     492:	51 05       	cpc	r21, r1
     494:	41 f4       	brne	.+16     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     496:	42 e9       	ldi	r20, 0x92	; 146
     498:	54 e0       	ldi	r21, 0x04	; 4
     49a:	68 e0       	ldi	r22, 0x08	; 8
     49c:	77 e1       	ldi	r23, 0x17	; 23
     49e:	ce 01       	movw	r24, r28
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	0e 94 a6 0a 	call	0x154c	; 0x154c <enqueue>
     4a6:	e9 81       	ldd	r30, Y+1	; 0x01
     4a8:	fa 81       	ldd	r31, Y+2	; 0x02
     4aa:	80 81       	ld	r24, Z
     4ac:	91 81       	ldd	r25, Z+1	; 0x01
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	df 90       	pop	r13
     4c0:	cf 90       	pop	r12
     4c2:	bf 90       	pop	r11
     4c4:	af 90       	pop	r10
     4c6:	9f 90       	pop	r9
     4c8:	8f 90       	pop	r8
     4ca:	08 95       	ret

000004cc <Kernel_Create_Task>:
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	e9 01       	movw	r28, r18
     4de:	20 91 9c 04 	lds	r18, 0x049C	; 0x80049c <Tasks>
     4e2:	30 91 9d 04 	lds	r19, 0x049D	; 0x80049d <Tasks+0x1>
     4e6:	20 31       	cpi	r18, 0x10	; 16
     4e8:	31 05       	cpc	r19, r1
     4ea:	41 f1       	breq	.+80     	; 0x53c <Kernel_Create_Task+0x70>
     4ec:	20 91 a6 05 	lds	r18, 0x05A6	; 0x8005a6 <Process+0x104>
     4f0:	22 23       	and	r18, r18
     4f2:	71 f0       	breq	.+28     	; 0x510 <Kernel_Create_Task+0x44>
     4f4:	a8 ec       	ldi	r26, 0xC8	; 200
     4f6:	b6 e0       	ldi	r27, 0x06	; 6
     4f8:	e1 e0       	ldi	r30, 0x01	; 1
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	3c 91       	ld	r19, X
     4fe:	33 23       	and	r19, r19
     500:	49 f0       	breq	.+18     	; 0x514 <Kernel_Create_Task+0x48>
     502:	31 96       	adiw	r30, 0x01	; 1
     504:	ae 5d       	subi	r26, 0xDE	; 222
     506:	be 4f       	sbci	r27, 0xFE	; 254
     508:	e0 31       	cpi	r30, 0x10	; 16
     50a:	f1 05       	cpc	r31, r1
     50c:	b9 f7       	brne	.-18     	; 0x4fc <Kernel_Create_Task+0x30>
     50e:	02 c0       	rjmp	.+4      	; 0x514 <Kernel_Create_Task+0x48>
     510:	e0 e0       	ldi	r30, 0x00	; 0
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	67 01       	movw	r12, r14
     516:	78 01       	movw	r14, r16
     518:	8e 01       	movw	r16, r28
     51a:	9a 01       	movw	r18, r20
     51c:	ab 01       	movw	r20, r22
     51e:	bc 01       	movw	r22, r24
     520:	82 e2       	ldi	r24, 0x22	; 34
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	e8 9f       	mul	r30, r24
     526:	d0 01       	movw	r26, r0
     528:	e9 9f       	mul	r30, r25
     52a:	b0 0d       	add	r27, r0
     52c:	f8 9f       	mul	r31, r24
     52e:	b0 0d       	add	r27, r0
     530:	11 24       	eor	r1, r1
     532:	cd 01       	movw	r24, r26
     534:	8e 55       	subi	r24, 0x5E	; 94
     536:	9b 4f       	sbci	r25, 0xFB	; 251
     538:	1a df       	rcall	.-460    	; 0x36e <Kernel_Create_Task_At>
     53a:	02 c0       	rjmp	.+4      	; 0x540 <Kernel_Create_Task+0x74>
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	ff 90       	pop	r15
     54a:	ef 90       	pop	r14
     54c:	df 90       	pop	r13
     54e:	cf 90       	pop	r12
     550:	08 95       	ret

00000552 <OS_Init>:
     552:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <Tasks+0x1>
     556:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <Tasks>
     55a:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <KernelActive+0x1>
     55e:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <KernelActive>
     562:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <pCount+0x1>
     566:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <pCount>
     56a:	e2 ea       	ldi	r30, 0xA2	; 162
     56c:	f4 e0       	ldi	r31, 0x04	; 4
     56e:	22 ec       	ldi	r18, 0xC2	; 194
     570:	36 e1       	ldi	r19, 0x16	; 22
     572:	82 e2       	ldi	r24, 0x22	; 34
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	df 01       	movw	r26, r30
     578:	ac 01       	movw	r20, r24
     57a:	1d 92       	st	X+, r1
     57c:	41 50       	subi	r20, 0x01	; 1
     57e:	50 40       	sbci	r21, 0x00	; 0
     580:	e1 f7       	brne	.-8      	; 0x57a <OS_Init+0x28>
     582:	df 01       	movw	r26, r30
     584:	ac 5f       	subi	r26, 0xFC	; 252
     586:	be 4f       	sbci	r27, 0xFE	; 254
     588:	1c 92       	st	X, r1
     58a:	11 82       	std	Z+1, r1	; 0x01
     58c:	10 82       	st	Z, r1
     58e:	ee 5d       	subi	r30, 0xDE	; 222
     590:	fe 4f       	sbci	r31, 0xFE	; 254
     592:	e2 17       	cp	r30, r18
     594:	f3 07       	cpc	r31, r19
     596:	79 f7       	brne	.-34     	; 0x576 <OS_Init+0x24>
     598:	a2 e0       	ldi	r26, 0x02	; 2
     59a:	b2 e0       	ldi	r27, 0x02	; 2
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	29 e2       	ldi	r18, 0x29	; 41
     5a2:	fd 01       	movw	r30, r26
     5a4:	32 2f       	mov	r19, r18
     5a6:	11 92       	st	Z+, r1
     5a8:	3a 95       	dec	r19
     5aa:	e9 f7       	brne	.-6      	; 0x5a6 <OS_Init+0x54>
     5ac:	28 9f       	mul	r18, r24
     5ae:	f0 01       	movw	r30, r0
     5b0:	29 9f       	mul	r18, r25
     5b2:	f0 0d       	add	r31, r0
     5b4:	11 24       	eor	r1, r1
     5b6:	ee 5f       	subi	r30, 0xFE	; 254
     5b8:	fd 4f       	sbci	r31, 0xFD	; 253
     5ba:	16 a2       	std	Z+38, r1	; 0x26
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	91 83       	std	Z+1, r25	; 0x01
     5c0:	80 83       	st	Z, r24
     5c2:	99 96       	adiw	r26, 0x29	; 41
     5c4:	80 31       	cpi	r24, 0x10	; 16
     5c6:	91 05       	cpc	r25, r1
     5c8:	61 f7       	brne	.-40     	; 0x5a2 <OS_Init+0x50>
     5ca:	08 95       	ret

000005cc <OS_Abort>:
     5cc:	47 9a       	sbi	0x08, 7	; 8
     5ce:	47 98       	cbi	0x08, 7	; 8
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_exit>

000005d8 <CheckTimingViolation>:
     5d8:	a0 91 94 04 	lds	r26, 0x0494	; 0x800494 <PeriodicCount>
     5dc:	b0 91 95 04 	lds	r27, 0x0495	; 0x800495 <PeriodicCount+0x1>
     5e0:	cd 01       	movw	r24, r26
     5e2:	01 97       	sbiw	r24, 0x01	; 1
     5e4:	da f0       	brmi	.+54     	; 0x61c <CheckTimingViolation+0x44>
     5e6:	aa 0f       	add	r26, r26
     5e8:	bb 1f       	adc	r27, r27
     5ea:	aa 51       	subi	r26, 0x1A	; 26
     5ec:	b9 4e       	sbci	r27, 0xE9	; 233
     5ee:	46 ee       	ldi	r20, 0xE6	; 230
     5f0:	56 e1       	ldi	r21, 0x16	; 22
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	fe 91       	ld	r31, -X
     5f8:	ee 91       	ld	r30, -X
     5fa:	ea 5e       	subi	r30, 0xEA	; 234
     5fc:	fe 4f       	sbci	r31, 0xFE	; 254
     5fe:	80 81       	ld	r24, Z
     600:	91 81       	ldd	r25, Z+1	; 0x01
     602:	89 2b       	or	r24, r25
     604:	11 f4       	brne	.+4      	; 0x60a <CheckTimingViolation+0x32>
     606:	2f 5f       	subi	r18, 0xFF	; 255
     608:	3f 4f       	sbci	r19, 0xFF	; 255
     60a:	a4 17       	cp	r26, r20
     60c:	b5 07       	cpc	r27, r21
     60e:	99 f7       	brne	.-26     	; 0x5f6 <CheckTimingViolation+0x1e>
     610:	22 30       	cpi	r18, 0x02	; 2
     612:	31 05       	cpc	r19, r1
     614:	1c f0       	brlt	.+6      	; 0x61c <CheckTimingViolation+0x44>
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	d8 cf       	rjmp	.-80     	; 0x5cc <OS_Abort>
     61c:	08 95       	ret

0000061e <Dispatch>:
     61e:	dc df       	rcall	.-72     	; 0x5d8 <CheckTimingViolation>
     620:	66 e9       	ldi	r22, 0x96	; 150
     622:	74 e0       	ldi	r23, 0x04	; 4
     624:	82 ec       	ldi	r24, 0xC2	; 194
     626:	96 e1       	ldi	r25, 0x16	; 22
     628:	b9 d7       	rcall	.+3954   	; 0x159c <dequeue>
     62a:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <Cp+0x1>
     62e:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <Cp>
     632:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <PeriodicCount>
     636:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <PeriodicCount+0x1>
     63a:	89 2b       	or	r24, r25
     63c:	e1 f0       	breq	.+56     	; 0x676 <Dispatch+0x58>
     63e:	64 e9       	ldi	r22, 0x94	; 148
     640:	74 e0       	ldi	r23, 0x04	; 4
     642:	86 ee       	ldi	r24, 0xE6	; 230
     644:	96 e1       	ldi	r25, 0x16	; 22
     646:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <peek>
     64a:	fc 01       	movw	r30, r24
     64c:	ea 5e       	subi	r30, 0xEA	; 234
     64e:	fe 4f       	sbci	r31, 0xFE	; 254
     650:	80 81       	ld	r24, Z
     652:	91 81       	ldd	r25, Z+1	; 0x01
     654:	89 2b       	or	r24, r25
     656:	79 f4       	brne	.+30     	; 0x676 <Dispatch+0x58>
     658:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     65c:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     660:	89 2b       	or	r24, r25
     662:	01 f5       	brne	.+64     	; 0x6a4 <Dispatch+0x86>
     664:	64 e9       	ldi	r22, 0x94	; 148
     666:	74 e0       	ldi	r23, 0x04	; 4
     668:	86 ee       	ldi	r24, 0xE6	; 230
     66a:	96 e1       	ldi	r25, 0x16	; 22
     66c:	97 d7       	rcall	.+3886   	; 0x159c <dequeue>
     66e:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <Cp+0x1>
     672:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <Cp>
     676:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     67a:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     67e:	89 2b       	or	r24, r25
     680:	89 f4       	brne	.+34     	; 0x6a4 <Dispatch+0x86>
     682:	62 e9       	ldi	r22, 0x92	; 146
     684:	74 e0       	ldi	r23, 0x04	; 4
     686:	88 e0       	ldi	r24, 0x08	; 8
     688:	97 e1       	ldi	r25, 0x17	; 23
     68a:	88 d7       	rcall	.+3856   	; 0x159c <dequeue>
     68c:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <Cp+0x1>
     690:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <Cp>
     694:	89 2b       	or	r24, r25
     696:	31 f4       	brne	.+12     	; 0x6a4 <Dispatch+0x86>
     698:	82 ea       	ldi	r24, 0xA2	; 162
     69a:	94 e0       	ldi	r25, 0x04	; 4
     69c:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <Cp+0x1>
     6a0:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <Cp>
     6a4:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     6a8:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     6ac:	82 81       	ldd	r24, Z+2	; 0x02
     6ae:	93 81       	ldd	r25, Z+3	; 0x03
     6b0:	90 93 e5 16 	sts	0x16E5, r25	; 0x8016e5 <CurrentSp+0x1>
     6b4:	80 93 e4 16 	sts	0x16E4, r24	; 0x8016e4 <CurrentSp>
     6b8:	ec 5f       	subi	r30, 0xFC	; 252
     6ba:	fe 4f       	sbci	r31, 0xFE	; 254
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	80 83       	st	Z, r24
     6c0:	08 95       	ret

000006c2 <Task_Create>:
     6c2:	4f 92       	push	r4
     6c4:	5f 92       	push	r5
     6c6:	6f 92       	push	r6
     6c8:	7f 92       	push	r7
     6ca:	8f 92       	push	r8
     6cc:	9f 92       	push	r9
     6ce:	af 92       	push	r10
     6d0:	bf 92       	push	r11
     6d2:	cf 92       	push	r12
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	e0 91 9e 04 	lds	r30, 0x049E	; 0x80049e <KernelActive>
     6e6:	f0 91 9f 04 	lds	r31, 0x049F	; 0x80049f <KernelActive+0x1>
     6ea:	ef 2b       	or	r30, r31
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <Task_Create+0x2e>
     6ee:	79 c0       	rjmp	.+242    	; 0x7e2 <Task_Create+0x120>
     6f0:	f8 94       	cli
     6f2:	63 30       	cpi	r22, 0x03	; 3
     6f4:	71 05       	cpc	r23, r1
     6f6:	49 f4       	brne	.+18     	; 0x70a <Task_Create+0x48>
     6f8:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     6fc:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     700:	e5 5f       	subi	r30, 0xF5	; 245
     702:	fe 4f       	sbci	r31, 0xFE	; 254
     704:	a2 e0       	ldi	r26, 0x02	; 2
     706:	a0 83       	st	Z, r26
     708:	23 c0       	rjmp	.+70     	; 0x750 <Task_Create+0x8e>
     70a:	62 30       	cpi	r22, 0x02	; 2
     70c:	71 05       	cpc	r23, r1
     70e:	89 f4       	brne	.+34     	; 0x732 <Task_Create+0x70>
     710:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     714:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     718:	df 01       	movw	r26, r30
     71a:	a5 5f       	subi	r26, 0xF5	; 245
     71c:	be 4f       	sbci	r27, 0xFE	; 254
     71e:	c4 e0       	ldi	r28, 0x04	; 4
     720:	cc 93       	st	X, r28
     722:	ea 5e       	subi	r30, 0xEA	; 234
     724:	fe 4f       	sbci	r31, 0xFE	; 254
     726:	d9 01       	movw	r26, r18
     728:	ae 0d       	add	r26, r14
     72a:	bf 1d       	adc	r27, r15
     72c:	b1 83       	std	Z+1, r27	; 0x01
     72e:	a0 83       	st	Z, r26
     730:	0f c0       	rjmp	.+30     	; 0x750 <Task_Create+0x8e>
     732:	61 30       	cpi	r22, 0x01	; 1
     734:	71 05       	cpc	r23, r1
     736:	49 f4       	brne	.+18     	; 0x74a <Task_Create+0x88>
     738:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     73c:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     740:	e5 5f       	subi	r30, 0xF5	; 245
     742:	fe 4f       	sbci	r31, 0xFE	; 254
     744:	a3 e0       	ldi	r26, 0x03	; 3
     746:	a0 83       	st	Z, r26
     748:	03 c0       	rjmp	.+6      	; 0x750 <Task_Create+0x8e>
     74a:	82 e0       	ldi	r24, 0x02	; 2
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	3e df       	rcall	.-388    	; 0x5cc <OS_Abort>
     750:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     754:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     758:	df 01       	movw	r26, r30
     75a:	a7 5f       	subi	r26, 0xF7	; 247
     75c:	be 4f       	sbci	r27, 0xFE	; 254
     75e:	11 96       	adiw	r26, 0x01	; 1
     760:	9c 93       	st	X, r25
     762:	8e 93       	st	-X, r24
     764:	14 97       	sbiw	r26, 0x04	; 4
     766:	8d 90       	ld	r8, X+
     768:	9c 90       	ld	r9, X
     76a:	11 97       	sbiw	r26, 0x01	; 1
     76c:	11 96       	adiw	r26, 0x01	; 1
     76e:	7c 93       	st	X, r23
     770:	6e 93       	st	-X, r22
     772:	12 96       	adiw	r26, 0x02	; 2
     774:	6d 90       	ld	r6, X+
     776:	7c 90       	ld	r7, X
     778:	11 97       	sbiw	r26, 0x01	; 1
     77a:	11 96       	adiw	r26, 0x01	; 1
     77c:	5c 93       	st	X, r21
     77e:	4e 93       	st	-X, r20
     780:	cf 01       	movw	r24, r30
     782:	8c 5e       	subi	r24, 0xEC	; 236
     784:	9e 4f       	sbci	r25, 0xFE	; 254
     786:	dc 01       	movw	r26, r24
     788:	ad 90       	ld	r10, X+
     78a:	bc 90       	ld	r11, X
     78c:	11 97       	sbiw	r26, 0x01	; 1
     78e:	12 97       	sbiw	r26, 0x02	; 2
     790:	cd 90       	ld	r12, X+
     792:	dc 90       	ld	r13, X
     794:	11 97       	sbiw	r26, 0x01	; 1
     796:	e0 5f       	subi	r30, 0xF0	; 240
     798:	fe 4f       	sbci	r31, 0xFE	; 254
     79a:	40 80       	ld	r4, Z
     79c:	51 80       	ldd	r5, Z+1	; 0x01
     79e:	ec 01       	movw	r28, r24
     7a0:	39 83       	std	Y+1, r19	; 0x01
     7a2:	28 83       	st	Y, r18
     7a4:	11 96       	adiw	r26, 0x01	; 1
     7a6:	1c 93       	st	X, r17
     7a8:	0e 93       	st	-X, r16
     7aa:	f1 82       	std	Z+1, r15	; 0x01
     7ac:	e0 82       	st	Z, r14
     7ae:	1b dd       	rcall	.-1482   	; 0x1e6 <Enter_Kernel>
     7b0:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <Cp>
     7b4:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <Cp+0x1>
     7b8:	f9 01       	movw	r30, r18
     7ba:	e4 5f       	subi	r30, 0xF4	; 244
     7bc:	fe 4f       	sbci	r31, 0xFE	; 254
     7be:	80 81       	ld	r24, Z
     7c0:	91 81       	ldd	r25, Z+1	; 0x01
     7c2:	37 97       	sbiw	r30, 0x07	; 7
     7c4:	91 82       	std	Z+1, r9	; 0x01
     7c6:	80 82       	st	Z, r8
     7c8:	3f 96       	adiw	r30, 0x0f	; 15
     7ca:	b1 82       	std	Z+1, r11	; 0x01
     7cc:	a0 82       	st	Z, r10
     7ce:	32 97       	sbiw	r30, 0x02	; 2
     7d0:	d1 82       	std	Z+1, r13	; 0x01
     7d2:	c0 82       	st	Z, r12
     7d4:	32 97       	sbiw	r30, 0x02	; 2
     7d6:	51 82       	std	Z+1, r5	; 0x01
     7d8:	40 82       	st	Z, r4
     7da:	39 97       	sbiw	r30, 0x09	; 9
     7dc:	71 82       	std	Z+1, r7	; 0x01
     7de:	60 82       	st	Z, r6
     7e0:	08 c0       	rjmp	.+16     	; 0x7f2 <Task_Create+0x130>
     7e2:	ee 24       	eor	r14, r14
     7e4:	ea 94       	dec	r14
     7e6:	fe 2c       	mov	r15, r14
     7e8:	0f ef       	ldi	r16, 0xFF	; 255
     7ea:	1f ef       	ldi	r17, 0xFF	; 255
     7ec:	2f ef       	ldi	r18, 0xFF	; 255
     7ee:	3f ef       	ldi	r19, 0xFF	; 255
     7f0:	6d de       	rcall	.-806    	; 0x4cc <Kernel_Create_Task>
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	bf 90       	pop	r11
     804:	af 90       	pop	r10
     806:	9f 90       	pop	r9
     808:	8f 90       	pop	r8
     80a:	7f 90       	pop	r7
     80c:	6f 90       	pop	r6
     80e:	5f 90       	pop	r5
     810:	4f 90       	pop	r4
     812:	08 95       	ret

00000814 <Task_Create_System>:
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	ab 01       	movw	r20, r22
     81e:	ee 24       	eor	r14, r14
     820:	ea 94       	dec	r14
     822:	fe 2c       	mov	r15, r14
     824:	0f ef       	ldi	r16, 0xFF	; 255
     826:	1f ef       	ldi	r17, 0xFF	; 255
     828:	2f ef       	ldi	r18, 0xFF	; 255
     82a:	3f ef       	ldi	r19, 0xFF	; 255
     82c:	63 e0       	ldi	r22, 0x03	; 3
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	48 df       	rcall	.-368    	; 0x6c2 <Task_Create>
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	ff 90       	pop	r15
     838:	ef 90       	pop	r14
     83a:	08 95       	ret

0000083c <Task_Create_RR>:
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	ab 01       	movw	r20, r22
     846:	ee 24       	eor	r14, r14
     848:	ea 94       	dec	r14
     84a:	fe 2c       	mov	r15, r14
     84c:	0f ef       	ldi	r16, 0xFF	; 255
     84e:	1f ef       	ldi	r17, 0xFF	; 255
     850:	2f ef       	ldi	r18, 0xFF	; 255
     852:	3f ef       	ldi	r19, 0xFF	; 255
     854:	61 e0       	ldi	r22, 0x01	; 1
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	34 df       	rcall	.-408    	; 0x6c2 <Task_Create>
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	08 95       	ret

00000864 <Task_Create_Period>:
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	7a 01       	movw	r14, r20
     86e:	a8 01       	movw	r20, r16
     870:	2e 15       	cp	r18, r14
     872:	3f 05       	cpc	r19, r15
     874:	18 f0       	brcs	.+6      	; 0x87c <Task_Create_Period+0x18>
     876:	83 e0       	ldi	r24, 0x03	; 3
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	a8 de       	rcall	.-688    	; 0x5cc <OS_Abort>
     87c:	89 01       	movw	r16, r18
     87e:	9a 01       	movw	r18, r20
     880:	ab 01       	movw	r20, r22
     882:	62 e0       	ldi	r22, 0x02	; 2
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	1d df       	rcall	.-454    	; 0x6c2 <Task_Create>
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	08 95       	ret

00000892 <Task_Create_Idle>:
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <KernelActive>
     89e:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <KernelActive+0x1>
     8a2:	89 2b       	or	r24, r25
     8a4:	f1 f0       	breq	.+60     	; 0x8e2 <Task_Create_Idle+0x50>
     8a6:	f8 94       	cli
     8a8:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     8ac:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     8b0:	fc 01       	movw	r30, r24
     8b2:	e7 5f       	subi	r30, 0xF7	; 247
     8b4:	fe 4f       	sbci	r31, 0xFE	; 254
     8b6:	25 ea       	ldi	r18, 0xA5	; 165
     8b8:	31 e0       	ldi	r19, 0x01	; 1
     8ba:	31 83       	std	Z+1, r19	; 0x01
     8bc:	20 83       	st	Z, r18
     8be:	34 97       	sbiw	r30, 0x04	; 4
     8c0:	24 e0       	ldi	r18, 0x04	; 4
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	31 83       	std	Z+1, r19	; 0x01
     8c6:	20 83       	st	Z, r18
     8c8:	32 96       	adiw	r30, 0x02	; 2
     8ca:	11 82       	std	Z+1, r1	; 0x01
     8cc:	10 82       	st	Z, r1
     8ce:	8b dc       	rcall	.-1770   	; 0x1e6 <Enter_Kernel>
     8d0:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     8d4:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     8d8:	e4 5f       	subi	r30, 0xF4	; 244
     8da:	fe 4f       	sbci	r31, 0xFE	; 254
     8dc:	80 81       	ld	r24, Z
     8de:	91 81       	ldd	r25, Z+1	; 0x01
     8e0:	0e c0       	rjmp	.+28     	; 0x8fe <Task_Create_Idle+0x6c>
     8e2:	ee 24       	eor	r14, r14
     8e4:	ea 94       	dec	r14
     8e6:	fe 2c       	mov	r15, r14
     8e8:	0f ef       	ldi	r16, 0xFF	; 255
     8ea:	1f ef       	ldi	r17, 0xFF	; 255
     8ec:	2f ef       	ldi	r18, 0xFF	; 255
     8ee:	3f ef       	ldi	r19, 0xFF	; 255
     8f0:	40 e0       	ldi	r20, 0x00	; 0
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	64 e0       	ldi	r22, 0x04	; 4
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	85 ea       	ldi	r24, 0xA5	; 165
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	e7 dd       	rcall	.-1074   	; 0x4cc <Kernel_Create_Task>
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	08 95       	ret

00000908 <Task_Next>:
     908:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <KernelActive>
     90c:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <KernelActive+0x1>
     910:	89 2b       	or	r24, r25
     912:	19 f1       	breq	.+70     	; 0x95a <Task_Next+0x52>
     914:	f8 94       	cli
     916:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     91a:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     91e:	fc 01       	movw	r30, r24
     920:	eb 5f       	subi	r30, 0xFB	; 251
     922:	fe 4f       	sbci	r31, 0xFE	; 254
     924:	20 81       	ld	r18, Z
     926:	31 81       	ldd	r19, Z+1	; 0x01
     928:	22 30       	cpi	r18, 0x02	; 2
     92a:	31 05       	cpc	r19, r1
     92c:	81 f4       	brne	.+32     	; 0x94e <Task_Next+0x46>
     92e:	3b 96       	adiw	r30, 0x0b	; 11
     930:	20 81       	ld	r18, Z
     932:	31 81       	ldd	r19, Z+1	; 0x01
     934:	38 96       	adiw	r30, 0x08	; 8
     936:	40 81       	ld	r20, Z
     938:	51 81       	ldd	r21, Z+1	; 0x01
     93a:	24 1b       	sub	r18, r20
     93c:	35 0b       	sbc	r19, r21
     93e:	dc 01       	movw	r26, r24
     940:	aa 5e       	subi	r26, 0xEA	; 234
     942:	be 4f       	sbci	r27, 0xFE	; 254
     944:	11 96       	adiw	r26, 0x01	; 1
     946:	3c 93       	st	X, r19
     948:	2e 93       	st	-X, r18
     94a:	11 82       	std	Z+1, r1	; 0x01
     94c:	10 82       	st	Z, r1
     94e:	fc 01       	movw	r30, r24
     950:	e5 5f       	subi	r30, 0xF5	; 245
     952:	fe 4f       	sbci	r31, 0xFE	; 254
     954:	85 e0       	ldi	r24, 0x05	; 5
     956:	80 83       	st	Z, r24
     958:	46 cc       	rjmp	.-1908   	; 0x1e6 <Enter_Kernel>
     95a:	08 95       	ret

0000095c <Run_Next>:
     95c:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <KernelActive>
     960:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <KernelActive+0x1>
     964:	89 2b       	or	r24, r25
     966:	09 f4       	brne	.+2      	; 0x96a <Run_Next+0xe>
     968:	41 c0       	rjmp	.+130    	; 0x9ec <Run_Next+0x90>
     96a:	f8 94       	cli
     96c:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     970:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     974:	fc 01       	movw	r30, r24
     976:	eb 5f       	subi	r30, 0xFB	; 251
     978:	fe 4f       	sbci	r31, 0xFE	; 254
     97a:	20 81       	ld	r18, Z
     97c:	31 81       	ldd	r19, Z+1	; 0x01
     97e:	23 30       	cpi	r18, 0x03	; 3
     980:	31 05       	cpc	r19, r1
     982:	21 f4       	brne	.+8      	; 0x98c <Run_Next+0x30>
     984:	36 96       	adiw	r30, 0x06	; 6
     986:	8a e0       	ldi	r24, 0x0A	; 10
     988:	80 83       	st	Z, r24
     98a:	2f c0       	rjmp	.+94     	; 0x9ea <Run_Next+0x8e>
     98c:	fc 01       	movw	r30, r24
     98e:	eb 5f       	subi	r30, 0xFB	; 251
     990:	fe 4f       	sbci	r31, 0xFE	; 254
     992:	20 81       	ld	r18, Z
     994:	31 81       	ldd	r19, Z+1	; 0x01
     996:	22 30       	cpi	r18, 0x02	; 2
     998:	31 05       	cpc	r19, r1
     99a:	11 f5       	brne	.+68     	; 0x9e0 <Run_Next+0x84>
     99c:	73 96       	adiw	r30, 0x13	; 19
     99e:	40 81       	ld	r20, Z
     9a0:	51 81       	ldd	r21, Z+1	; 0x01
     9a2:	36 97       	sbiw	r30, 0x06	; 6
     9a4:	20 81       	ld	r18, Z
     9a6:	31 81       	ldd	r19, Z+1	; 0x01
     9a8:	42 17       	cp	r20, r18
     9aa:	53 07       	cpc	r21, r19
     9ac:	18 f0       	brcs	.+6      	; 0x9b4 <Run_Next+0x58>
     9ae:	84 e0       	ldi	r24, 0x04	; 4
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0c de       	rcall	.-1000   	; 0x5cc <OS_Abort>
     9b4:	20 91 96 04 	lds	r18, 0x0496	; 0x800496 <SysCount>
     9b8:	30 91 97 04 	lds	r19, 0x0497	; 0x800497 <SysCount+0x1>
     9bc:	12 16       	cp	r1, r18
     9be:	13 06       	cpc	r1, r19
     9c0:	4c f4       	brge	.+18     	; 0x9d4 <Run_Next+0x78>
     9c2:	fc 01       	movw	r30, r24
     9c4:	ea 5e       	subi	r30, 0xEA	; 234
     9c6:	fe 4f       	sbci	r31, 0xFE	; 254
     9c8:	11 82       	std	Z+1, r1	; 0x01
     9ca:	10 82       	st	Z, r1
     9cc:	3b 97       	sbiw	r30, 0x0b	; 11
     9ce:	85 e0       	ldi	r24, 0x05	; 5
     9d0:	80 83       	st	Z, r24
     9d2:	0b c0       	rjmp	.+22     	; 0x9ea <Run_Next+0x8e>
     9d4:	fc 01       	movw	r30, r24
     9d6:	e5 5f       	subi	r30, 0xF5	; 245
     9d8:	fe 4f       	sbci	r31, 0xFE	; 254
     9da:	8a e0       	ldi	r24, 0x0A	; 10
     9dc:	80 83       	st	Z, r24
     9de:	05 c0       	rjmp	.+10     	; 0x9ea <Run_Next+0x8e>
     9e0:	fc 01       	movw	r30, r24
     9e2:	e5 5f       	subi	r30, 0xF5	; 245
     9e4:	fe 4f       	sbci	r31, 0xFE	; 254
     9e6:	85 e0       	ldi	r24, 0x05	; 5
     9e8:	80 83       	st	Z, r24
     9ea:	fd cb       	rjmp	.-2054   	; 0x1e6 <Enter_Kernel>
     9ec:	08 95       	ret

000009ee <setup>:
     9ee:	f8 94       	cli
     9f0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     9f4:	e1 e8       	ldi	r30, 0x81	; 129
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	10 82       	st	Z, r1
     9fa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     9fe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     a02:	80 e7       	ldi	r24, 0x70	; 112
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     a0a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     a0e:	80 81       	ld	r24, Z
     a10:	88 60       	ori	r24, 0x08	; 8
     a12:	80 83       	st	Z, r24
     a14:	80 81       	ld	r24, Z
     a16:	84 60       	ori	r24, 0x04	; 4
     a18:	80 83       	st	Z, r24
     a1a:	ef e6       	ldi	r30, 0x6F	; 111
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	82 60       	ori	r24, 0x02	; 2
     a22:	80 83       	st	Z, r24
     a24:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     a28:	e1 e9       	ldi	r30, 0x91	; 145
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	10 82       	st	Z, r1
     a2e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     a32:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     a36:	83 e2       	ldi	r24, 0x23	; 35
     a38:	94 ef       	ldi	r25, 0xF4	; 244
     a3a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     a3e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     a42:	80 81       	ld	r24, Z
     a44:	88 60       	ori	r24, 0x08	; 8
     a46:	80 83       	st	Z, r24
     a48:	80 81       	ld	r24, Z
     a4a:	84 60       	ori	r24, 0x04	; 4
     a4c:	80 83       	st	Z, r24
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     a54:	78 94       	sei
     a56:	08 95       	ret

00000a58 <__vector_17>:
     a58:	1f 92       	push	r1
     a5a:	0f 92       	push	r0
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	0f 92       	push	r0
     a60:	11 24       	eor	r1, r1
     a62:	0b b6       	in	r0, 0x3b	; 59
     a64:	0f 92       	push	r0
     a66:	2f 93       	push	r18
     a68:	3f 93       	push	r19
     a6a:	4f 93       	push	r20
     a6c:	5f 93       	push	r21
     a6e:	6f 93       	push	r22
     a70:	7f 93       	push	r23
     a72:	8f 93       	push	r24
     a74:	9f 93       	push	r25
     a76:	af 93       	push	r26
     a78:	bf 93       	push	r27
     a7a:	ef 93       	push	r30
     a7c:	ff 93       	push	r31
     a7e:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     a82:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     a86:	fc 01       	movw	r30, r24
     a88:	eb 5f       	subi	r30, 0xFB	; 251
     a8a:	fe 4f       	sbci	r31, 0xFE	; 254
     a8c:	20 81       	ld	r18, Z
     a8e:	31 81       	ldd	r19, Z+1	; 0x01
     a90:	22 30       	cpi	r18, 0x02	; 2
     a92:	31 05       	cpc	r19, r1
     a94:	31 f4       	brne	.+12     	; 0xaa2 <__vector_17+0x4a>
     a96:	73 96       	adiw	r30, 0x13	; 19
     a98:	80 81       	ld	r24, Z
     a9a:	91 81       	ldd	r25, Z+1	; 0x01
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	91 83       	std	Z+1, r25	; 0x01
     aa0:	80 83       	st	Z, r24
     aa2:	80 91 e2 16 	lds	r24, 0x16E2	; 0x8016e2 <time_since_system_start>
     aa6:	90 91 e3 16 	lds	r25, 0x16E3	; 0x8016e3 <time_since_system_start+0x1>
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	90 93 e3 16 	sts	0x16E3, r25	; 0x8016e3 <time_since_system_start+0x1>
     ab0:	80 93 e2 16 	sts	0x16E2, r24	; 0x8016e2 <time_since_system_start>
     ab4:	a0 91 94 04 	lds	r26, 0x0494	; 0x800494 <PeriodicCount>
     ab8:	b0 91 95 04 	lds	r27, 0x0495	; 0x800495 <PeriodicCount+0x1>
     abc:	cd 01       	movw	r24, r26
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	c2 f0       	brmi	.+48     	; 0xaf2 <__vector_17+0x9a>
     ac2:	aa 0f       	add	r26, r26
     ac4:	bb 1f       	adc	r27, r27
     ac6:	aa 51       	subi	r26, 0x1A	; 26
     ac8:	b9 4e       	sbci	r27, 0xE9	; 233
     aca:	46 ee       	ldi	r20, 0xE6	; 230
     acc:	56 e1       	ldi	r21, 0x16	; 22
     ace:	9e 91       	ld	r25, -X
     ad0:	8e 91       	ld	r24, -X
     ad2:	fc 01       	movw	r30, r24
     ad4:	ea 5e       	subi	r30, 0xEA	; 234
     ad6:	fe 4f       	sbci	r31, 0xFE	; 254
     ad8:	20 81       	ld	r18, Z
     ada:	31 81       	ldd	r19, Z+1	; 0x01
     adc:	12 16       	cp	r1, r18
     ade:	13 06       	cpc	r1, r19
     ae0:	2c f4       	brge	.+10     	; 0xaec <__vector_17+0x94>
     ae2:	80 81       	ld	r24, Z
     ae4:	91 81       	ldd	r25, Z+1	; 0x01
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	91 83       	std	Z+1, r25	; 0x01
     aea:	80 83       	st	Z, r24
     aec:	a4 17       	cp	r26, r20
     aee:	b5 07       	cpc	r27, r21
     af0:	71 f7       	brne	.-36     	; 0xace <__vector_17+0x76>
     af2:	34 df       	rcall	.-408    	; 0x95c <Run_Next>
     af4:	ff 91       	pop	r31
     af6:	ef 91       	pop	r30
     af8:	bf 91       	pop	r27
     afa:	af 91       	pop	r26
     afc:	9f 91       	pop	r25
     afe:	8f 91       	pop	r24
     b00:	7f 91       	pop	r23
     b02:	6f 91       	pop	r22
     b04:	5f 91       	pop	r21
     b06:	4f 91       	pop	r20
     b08:	3f 91       	pop	r19
     b0a:	2f 91       	pop	r18
     b0c:	0f 90       	pop	r0
     b0e:	0b be       	out	0x3b, r0	; 59
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <__vector_32>:
     b1a:	1f 92       	push	r1
     b1c:	0f 92       	push	r0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	8f 93       	push	r24
     b26:	9f 93       	push	r25
     b28:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <tickOverflowCount>
     b2c:	90 91 99 04 	lds	r25, 0x0499	; 0x800499 <tickOverflowCount+0x1>
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	90 93 99 04 	sts	0x0499, r25	; 0x800499 <tickOverflowCount+0x1>
     b36:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <tickOverflowCount>
     b3a:	9f 91       	pop	r25
     b3c:	8f 91       	pop	r24
     b3e:	0f 90       	pop	r0
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	0f 90       	pop	r0
     b44:	1f 90       	pop	r1
     b46:	18 95       	reti

00000b48 <Chan_Init>:
     b48:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
     b4c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_end+0x1>
     b50:	40 97       	sbiw	r24, 0x10	; 16
     b52:	b1 f1       	breq	.+108    	; 0xbc0 <Chan_Init+0x78>
     b54:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <ChannelArray+0x26>
     b58:	88 23       	and	r24, r24
     b5a:	71 f0       	breq	.+28     	; 0xb78 <Chan_Init+0x30>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	39 e2       	ldi	r19, 0x29	; 41
     b62:	38 9f       	mul	r19, r24
     b64:	f0 01       	movw	r30, r0
     b66:	39 9f       	mul	r19, r25
     b68:	f0 0d       	add	r31, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	ee 5f       	subi	r30, 0xFE	; 254
     b6e:	fd 4f       	sbci	r31, 0xFD	; 253
     b70:	26 a1       	ldd	r18, Z+38	; 0x26
     b72:	21 11       	cpse	r18, r1
     b74:	13 c0       	rjmp	.+38     	; 0xb9c <Chan_Init+0x54>
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <Chan_Init+0x34>
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	29 e2       	ldi	r18, 0x29	; 41
     b7e:	28 9f       	mul	r18, r24
     b80:	f0 01       	movw	r30, r0
     b82:	29 9f       	mul	r18, r25
     b84:	f0 0d       	add	r31, r0
     b86:	11 24       	eor	r1, r1
     b88:	ee 5f       	subi	r30, 0xFE	; 254
     b8a:	fd 4f       	sbci	r31, 0xFD	; 253
     b8c:	22 e0       	ldi	r18, 0x02	; 2
     b8e:	26 a3       	std	Z+38, r18	; 0x26
     b90:	15 a2       	std	Z+37, r1	; 0x25
     b92:	14 a2       	std	Z+36, r1	; 0x24
     b94:	80 31       	cpi	r24, 0x10	; 16
     b96:	91 05       	cpc	r25, r1
     b98:	41 f4       	brne	.+16     	; 0xbaa <Chan_Init+0x62>
     b9a:	15 c0       	rjmp	.+42     	; 0xbc6 <Chan_Init+0x7e>
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	80 31       	cpi	r24, 0x10	; 16
     ba0:	91 05       	cpc	r25, r1
     ba2:	f9 f6       	brne	.-66     	; 0xb62 <Chan_Init+0x1a>
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	08 95       	ret
     baa:	29 e2       	ldi	r18, 0x29	; 41
     bac:	28 9f       	mul	r18, r24
     bae:	f0 01       	movw	r30, r0
     bb0:	29 9f       	mul	r18, r25
     bb2:	f0 0d       	add	r31, r0
     bb4:	11 24       	eor	r1, r1
     bb6:	ee 5f       	subi	r30, 0xFE	; 254
     bb8:	fd 4f       	sbci	r31, 0xFD	; 253
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
     bbe:	08 95       	ret
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	08 95       	ret
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	08 95       	ret

00000bcc <Send>:
     bcc:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <Cp>
     bd0:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <Cp+0x1>
     bd4:	f9 01       	movw	r30, r18
     bd6:	eb 5f       	subi	r30, 0xFB	; 251
     bd8:	fe 4f       	sbci	r31, 0xFE	; 254
     bda:	40 81       	ld	r20, Z
     bdc:	51 81       	ldd	r21, Z+1	; 0x01
     bde:	42 30       	cpi	r20, 0x02	; 2
     be0:	51 05       	cpc	r21, r1
     be2:	19 f4       	brne	.+6      	; 0xbea <Send+0x1e>
     be4:	85 e0       	ldi	r24, 0x05	; 5
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	f1 dc       	rcall	.-1566   	; 0x5cc <OS_Abort>
     bea:	f9 01       	movw	r30, r18
     bec:	e5 5f       	subi	r30, 0xF5	; 245
     bee:	fe 4f       	sbci	r31, 0xFE	; 254
     bf0:	47 e0       	ldi	r20, 0x07	; 7
     bf2:	40 83       	st	Z, r20
     bf4:	71 96       	adiw	r30, 0x11	; 17
     bf6:	91 83       	std	Z+1, r25	; 0x01
     bf8:	80 83       	st	Z, r24
     bfa:	34 96       	adiw	r30, 0x04	; 4
     bfc:	71 83       	std	Z+1, r23	; 0x01
     bfe:	60 83       	st	Z, r22
     c00:	f2 ca       	rjmp	.-2588   	; 0x1e6 <Enter_Kernel>
     c02:	08 95       	ret

00000c04 <kernel_send>:
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     c10:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     c14:	fc 01       	movw	r30, r24
     c16:	e4 5e       	subi	r30, 0xE4	; 228
     c18:	fe 4f       	sbci	r31, 0xFE	; 254
     c1a:	20 81       	ld	r18, Z
     c1c:	31 81       	ldd	r19, Z+1	; 0x01
     c1e:	21 50       	subi	r18, 0x01	; 1
     c20:	31 09       	sbc	r19, r1
     c22:	49 e2       	ldi	r20, 0x29	; 41
     c24:	42 9f       	mul	r20, r18
     c26:	f0 01       	movw	r30, r0
     c28:	43 9f       	mul	r20, r19
     c2a:	f0 0d       	add	r31, r0
     c2c:	11 24       	eor	r1, r1
     c2e:	ee 5f       	subi	r30, 0xFE	; 254
     c30:	fd 4f       	sbci	r31, 0xFD	; 253
     c32:	24 a1       	ldd	r18, Z+36	; 0x24
     c34:	35 a1       	ldd	r19, Z+37	; 0x25
     c36:	23 2b       	or	r18, r19
     c38:	09 f0       	breq	.+2      	; 0xc3c <kernel_send+0x38>
     c3a:	3d c0       	rjmp	.+122    	; 0xcb6 <kernel_send+0xb2>
     c3c:	fc 01       	movw	r30, r24
     c3e:	e4 5e       	subi	r30, 0xE4	; 228
     c40:	fe 4f       	sbci	r31, 0xFE	; 254
     c42:	20 81       	ld	r18, Z
     c44:	31 81       	ldd	r19, Z+1	; 0x01
     c46:	21 50       	subi	r18, 0x01	; 1
     c48:	31 09       	sbc	r19, r1
     c4a:	42 9f       	mul	r20, r18
     c4c:	f0 01       	movw	r30, r0
     c4e:	43 9f       	mul	r20, r19
     c50:	f0 0d       	add	r31, r0
     c52:	11 24       	eor	r1, r1
     c54:	ee 5f       	subi	r30, 0xFE	; 254
     c56:	fd 4f       	sbci	r31, 0xFD	; 253
     c58:	22 81       	ldd	r18, Z+2	; 0x02
     c5a:	33 81       	ldd	r19, Z+3	; 0x03
     c5c:	23 2b       	or	r18, r19
     c5e:	41 f5       	brne	.+80     	; 0xcb0 <kernel_send+0xac>
     c60:	dc 01       	movw	r26, r24
     c62:	a4 5e       	subi	r26, 0xE4	; 228
     c64:	be 4f       	sbci	r27, 0xFE	; 254
     c66:	2d 91       	ld	r18, X+
     c68:	3c 91       	ld	r19, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	21 50       	subi	r18, 0x01	; 1
     c6e:	31 09       	sbc	r19, r1
     c70:	42 9f       	mul	r20, r18
     c72:	f0 01       	movw	r30, r0
     c74:	43 9f       	mul	r20, r19
     c76:	f0 0d       	add	r31, r0
     c78:	11 24       	eor	r1, r1
     c7a:	ee 5f       	subi	r30, 0xFE	; 254
     c7c:	fd 4f       	sbci	r31, 0xFD	; 253
     c7e:	93 83       	std	Z+3, r25	; 0x03
     c80:	82 83       	std	Z+2, r24	; 0x02
     c82:	fc 01       	movw	r30, r24
     c84:	ec 5f       	subi	r30, 0xFC	; 252
     c86:	fe 4f       	sbci	r31, 0xFE	; 254
     c88:	23 e0       	ldi	r18, 0x03	; 3
     c8a:	20 83       	st	Z, r18
     c8c:	2d 91       	ld	r18, X+
     c8e:	3c 91       	ld	r19, X
     c90:	21 50       	subi	r18, 0x01	; 1
     c92:	31 09       	sbc	r19, r1
     c94:	7c 96       	adiw	r30, 0x1c	; 28
     c96:	80 81       	ld	r24, Z
     c98:	91 81       	ldd	r25, Z+1	; 0x01
     c9a:	42 9f       	mul	r20, r18
     c9c:	f0 01       	movw	r30, r0
     c9e:	43 9f       	mul	r20, r19
     ca0:	f0 0d       	add	r31, r0
     ca2:	11 24       	eor	r1, r1
     ca4:	ee 5f       	subi	r30, 0xFE	; 254
     ca6:	fd 4f       	sbci	r31, 0xFD	; 253
     ca8:	90 a7       	std	Z+40, r25	; 0x28
     caa:	87 a3       	std	Z+39, r24	; 0x27
     cac:	b8 dc       	rcall	.-1680   	; 0x61e <Dispatch>
     cae:	0d c1       	rjmp	.+538    	; 0xeca <kernel_send+0x2c6>
     cb0:	86 e0       	ldi	r24, 0x06	; 6
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	8b dc       	rcall	.-1770   	; 0x5cc <OS_Abort>
     cb6:	fc 01       	movw	r30, r24
     cb8:	e4 5e       	subi	r30, 0xE4	; 228
     cba:	fe 4f       	sbci	r31, 0xFE	; 254
     cbc:	20 81       	ld	r18, Z
     cbe:	31 81       	ldd	r19, Z+1	; 0x01
     cc0:	21 50       	subi	r18, 0x01	; 1
     cc2:	31 09       	sbc	r19, r1
     cc4:	49 e2       	ldi	r20, 0x29	; 41
     cc6:	42 9f       	mul	r20, r18
     cc8:	f0 01       	movw	r30, r0
     cca:	43 9f       	mul	r20, r19
     ccc:	f0 0d       	add	r31, r0
     cce:	11 24       	eor	r1, r1
     cd0:	ee 5f       	subi	r30, 0xFE	; 254
     cd2:	fd 4f       	sbci	r31, 0xFD	; 253
     cd4:	22 81       	ldd	r18, Z+2	; 0x02
     cd6:	33 81       	ldd	r19, Z+3	; 0x03
     cd8:	23 2b       	or	r18, r19
     cda:	19 f0       	breq	.+6      	; 0xce2 <kernel_send+0xde>
     cdc:	86 e0       	ldi	r24, 0x06	; 6
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	75 dc       	rcall	.-1814   	; 0x5cc <OS_Abort>
     ce2:	fc 01       	movw	r30, r24
     ce4:	e4 5e       	subi	r30, 0xE4	; 228
     ce6:	fe 4f       	sbci	r31, 0xFE	; 254
     ce8:	80 81       	ld	r24, Z
     cea:	91 81       	ldd	r25, Z+1	; 0x01
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	29 e2       	ldi	r18, 0x29	; 41
     cf0:	28 9f       	mul	r18, r24
     cf2:	f0 01       	movw	r30, r0
     cf4:	29 9f       	mul	r18, r25
     cf6:	f0 0d       	add	r31, r0
     cf8:	11 24       	eor	r1, r1
     cfa:	ee 5f       	subi	r30, 0xFE	; 254
     cfc:	fd 4f       	sbci	r31, 0xFD	; 253
     cfe:	c4 a1       	ldd	r28, Z+36	; 0x24
     d00:	d5 a1       	ldd	r29, Z+37	; 0x25
     d02:	21 97       	sbiw	r28, 0x01	; 1
     d04:	0a f4       	brpl	.+2      	; 0xd08 <kernel_send+0x104>
     d06:	ce c0       	rjmp	.+412    	; 0xea4 <kernel_send+0x2a0>
     d08:	19 e2       	ldi	r17, 0x29	; 41
     d0a:	01 e0       	ldi	r16, 0x01	; 1
     d0c:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <Cp>
     d10:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <Cp+0x1>
     d14:	c9 01       	movw	r24, r18
     d16:	84 5e       	subi	r24, 0xE4	; 228
     d18:	9e 4f       	sbci	r25, 0xFE	; 254
     d1a:	dc 01       	movw	r26, r24
     d1c:	4d 91       	ld	r20, X+
     d1e:	5c 91       	ld	r21, X
     d20:	41 50       	subi	r20, 0x01	; 1
     d22:	51 09       	sbc	r21, r1
     d24:	fe 01       	movw	r30, r28
     d26:	32 96       	adiw	r30, 0x02	; 2
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	14 9f       	mul	r17, r20
     d2e:	d0 01       	movw	r26, r0
     d30:	15 9f       	mul	r17, r21
     d32:	b0 0d       	add	r27, r0
     d34:	11 24       	eor	r1, r1
     d36:	ae 0f       	add	r26, r30
     d38:	bf 1f       	adc	r27, r31
     d3a:	ae 5f       	subi	r26, 0xFE	; 254
     d3c:	bd 4f       	sbci	r27, 0xFD	; 253
     d3e:	0d 90       	ld	r0, X+
     d40:	bc 91       	ld	r27, X
     d42:	a0 2d       	mov	r26, r0
     d44:	ac 5f       	subi	r26, 0xFC	; 252
     d46:	be 4f       	sbci	r27, 0xFE	; 254
     d48:	0c 93       	st	X, r16
     d4a:	dc 01       	movw	r26, r24
     d4c:	4d 91       	ld	r20, X+
     d4e:	5c 91       	ld	r21, X
     d50:	41 50       	subi	r20, 0x01	; 1
     d52:	51 09       	sbc	r21, r1
     d54:	14 9f       	mul	r17, r20
     d56:	d0 01       	movw	r26, r0
     d58:	15 9f       	mul	r17, r21
     d5a:	b0 0d       	add	r27, r0
     d5c:	11 24       	eor	r1, r1
     d5e:	ae 0f       	add	r26, r30
     d60:	bf 1f       	adc	r27, r31
     d62:	ae 5f       	subi	r26, 0xFE	; 254
     d64:	bd 4f       	sbci	r27, 0xFD	; 253
     d66:	6d 91       	ld	r22, X+
     d68:	7c 91       	ld	r23, X
     d6a:	a9 01       	movw	r20, r18
     d6c:	40 5e       	subi	r20, 0xE0	; 224
     d6e:	5e 4f       	sbci	r21, 0xFE	; 254
     d70:	da 01       	movw	r26, r20
     d72:	4d 91       	ld	r20, X+
     d74:	5c 91       	ld	r21, X
     d76:	db 01       	movw	r26, r22
     d78:	a0 5e       	subi	r26, 0xE0	; 224
     d7a:	be 4f       	sbci	r27, 0xFE	; 254
     d7c:	4d 93       	st	X+, r20
     d7e:	5c 93       	st	X, r21
     d80:	dc 01       	movw	r26, r24
     d82:	4d 91       	ld	r20, X+
     d84:	5c 91       	ld	r21, X
     d86:	11 97       	sbiw	r26, 0x01	; 1
     d88:	41 50       	subi	r20, 0x01	; 1
     d8a:	51 09       	sbc	r21, r1
     d8c:	14 9f       	mul	r17, r20
     d8e:	c0 01       	movw	r24, r0
     d90:	15 9f       	mul	r17, r21
     d92:	90 0d       	add	r25, r0
     d94:	11 24       	eor	r1, r1
     d96:	e8 0f       	add	r30, r24
     d98:	f9 1f       	adc	r31, r25
     d9a:	ee 5f       	subi	r30, 0xFE	; 254
     d9c:	fd 4f       	sbci	r31, 0xFD	; 253
     d9e:	01 90       	ld	r0, Z+
     da0:	f0 81       	ld	r31, Z
     da2:	e0 2d       	mov	r30, r0
     da4:	eb 5f       	subi	r30, 0xFB	; 251
     da6:	fe 4f       	sbci	r31, 0xFE	; 254
     da8:	80 81       	ld	r24, Z
     daa:	91 81       	ldd	r25, Z+1	; 0x01
     dac:	03 97       	sbiw	r24, 0x03	; 3
     dae:	c1 f4       	brne	.+48     	; 0xde0 <kernel_send+0x1dc>
     db0:	fd 01       	movw	r30, r26
     db2:	40 81       	ld	r20, Z
     db4:	51 81       	ldd	r21, Z+1	; 0x01
     db6:	ce 01       	movw	r24, r28
     db8:	02 96       	adiw	r24, 0x02	; 2
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	41 50       	subi	r20, 0x01	; 1
     dc0:	51 09       	sbc	r21, r1
     dc2:	14 9f       	mul	r17, r20
     dc4:	90 01       	movw	r18, r0
     dc6:	15 9f       	mul	r17, r21
     dc8:	30 0d       	add	r19, r0
     dca:	11 24       	eor	r1, r1
     dcc:	82 0f       	add	r24, r18
     dce:	93 1f       	adc	r25, r19
     dd0:	46 e9       	ldi	r20, 0x96	; 150
     dd2:	54 e0       	ldi	r21, 0x04	; 4
     dd4:	62 ec       	ldi	r22, 0xC2	; 194
     dd6:	76 e1       	ldi	r23, 0x16	; 22
     dd8:	8e 5f       	subi	r24, 0xFE	; 254
     dda:	9d 4f       	sbci	r25, 0xFD	; 253
     ddc:	b7 d3       	rcall	.+1902   	; 0x154c <enqueue>
     dde:	36 c0       	rjmp	.+108    	; 0xe4c <kernel_send+0x248>
     de0:	f9 01       	movw	r30, r18
     de2:	e4 5e       	subi	r30, 0xE4	; 228
     de4:	fe 4f       	sbci	r31, 0xFE	; 254
     de6:	40 81       	ld	r20, Z
     de8:	51 81       	ldd	r21, Z+1	; 0x01
     dea:	41 50       	subi	r20, 0x01	; 1
     dec:	51 09       	sbc	r21, r1
     dee:	fe 01       	movw	r30, r28
     df0:	32 96       	adiw	r30, 0x02	; 2
     df2:	ee 0f       	add	r30, r30
     df4:	ff 1f       	adc	r31, r31
     df6:	14 9f       	mul	r17, r20
     df8:	c0 01       	movw	r24, r0
     dfa:	15 9f       	mul	r17, r21
     dfc:	90 0d       	add	r25, r0
     dfe:	11 24       	eor	r1, r1
     e00:	e8 0f       	add	r30, r24
     e02:	f9 1f       	adc	r31, r25
     e04:	ee 5f       	subi	r30, 0xFE	; 254
     e06:	fd 4f       	sbci	r31, 0xFD	; 253
     e08:	01 90       	ld	r0, Z+
     e0a:	f0 81       	ld	r31, Z
     e0c:	e0 2d       	mov	r30, r0
     e0e:	eb 5f       	subi	r30, 0xFB	; 251
     e10:	fe 4f       	sbci	r31, 0xFE	; 254
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	c9 f4       	brne	.+50     	; 0xe4c <kernel_send+0x248>
     e1a:	f9 01       	movw	r30, r18
     e1c:	e4 5e       	subi	r30, 0xE4	; 228
     e1e:	fe 4f       	sbci	r31, 0xFE	; 254
     e20:	40 81       	ld	r20, Z
     e22:	51 81       	ldd	r21, Z+1	; 0x01
     e24:	ce 01       	movw	r24, r28
     e26:	02 96       	adiw	r24, 0x02	; 2
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	41 50       	subi	r20, 0x01	; 1
     e2e:	51 09       	sbc	r21, r1
     e30:	14 9f       	mul	r17, r20
     e32:	90 01       	movw	r18, r0
     e34:	15 9f       	mul	r17, r21
     e36:	30 0d       	add	r19, r0
     e38:	11 24       	eor	r1, r1
     e3a:	82 0f       	add	r24, r18
     e3c:	93 1f       	adc	r25, r19
     e3e:	42 e9       	ldi	r20, 0x92	; 146
     e40:	54 e0       	ldi	r21, 0x04	; 4
     e42:	68 e0       	ldi	r22, 0x08	; 8
     e44:	77 e1       	ldi	r23, 0x17	; 23
     e46:	8e 5f       	subi	r24, 0xFE	; 254
     e48:	9d 4f       	sbci	r25, 0xFD	; 253
     e4a:	80 d3       	rcall	.+1792   	; 0x154c <enqueue>
     e4c:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <Cp>
     e50:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <Cp+0x1>
     e54:	a4 5e       	subi	r26, 0xE4	; 228
     e56:	be 4f       	sbci	r27, 0xFE	; 254
     e58:	2d 91       	ld	r18, X+
     e5a:	3c 91       	ld	r19, X
     e5c:	11 97       	sbiw	r26, 0x01	; 1
     e5e:	21 50       	subi	r18, 0x01	; 1
     e60:	31 09       	sbc	r19, r1
     e62:	fe 01       	movw	r30, r28
     e64:	32 96       	adiw	r30, 0x02	; 2
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	12 9f       	mul	r17, r18
     e6c:	c0 01       	movw	r24, r0
     e6e:	13 9f       	mul	r17, r19
     e70:	90 0d       	add	r25, r0
     e72:	11 24       	eor	r1, r1
     e74:	e8 0f       	add	r30, r24
     e76:	f9 1f       	adc	r31, r25
     e78:	ee 5f       	subi	r30, 0xFE	; 254
     e7a:	fd 4f       	sbci	r31, 0xFD	; 253
     e7c:	11 82       	std	Z+1, r1	; 0x01
     e7e:	10 82       	st	Z, r1
     e80:	8d 91       	ld	r24, X+
     e82:	9c 91       	ld	r25, X
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	18 9f       	mul	r17, r24
     e88:	f0 01       	movw	r30, r0
     e8a:	19 9f       	mul	r17, r25
     e8c:	f0 0d       	add	r31, r0
     e8e:	11 24       	eor	r1, r1
     e90:	ee 5f       	subi	r30, 0xFE	; 254
     e92:	fd 4f       	sbci	r31, 0xFD	; 253
     e94:	84 a1       	ldd	r24, Z+36	; 0x24
     e96:	95 a1       	ldd	r25, Z+37	; 0x25
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	95 a3       	std	Z+37, r25	; 0x25
     e9c:	84 a3       	std	Z+36, r24	; 0x24
     e9e:	21 97       	sbiw	r28, 0x01	; 1
     ea0:	0a f0       	brmi	.+2      	; 0xea4 <kernel_send+0x2a0>
     ea2:	34 cf       	rjmp	.-408    	; 0xd0c <kernel_send+0x108>
     ea4:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
     ea8:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
     eac:	e4 5e       	subi	r30, 0xE4	; 228
     eae:	fe 4f       	sbci	r31, 0xFE	; 254
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	29 e2       	ldi	r18, 0x29	; 41
     eb8:	28 9f       	mul	r18, r24
     eba:	f0 01       	movw	r30, r0
     ebc:	29 9f       	mul	r18, r25
     ebe:	f0 0d       	add	r31, r0
     ec0:	11 24       	eor	r1, r1
     ec2:	ee 5f       	subi	r30, 0xFE	; 254
     ec4:	fd 4f       	sbci	r31, 0xFD	; 253
     ec6:	10 a6       	std	Z+40, r1	; 0x28
     ec8:	17 a2       	std	Z+39, r1	; 0x27
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	08 95       	ret

00000ed4 <kernel_receive>:
     ed4:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
     ed8:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
     edc:	fc 01       	movw	r30, r24
     ede:	e2 5e       	subi	r30, 0xE2	; 226
     ee0:	fe 4f       	sbci	r31, 0xFE	; 254
     ee2:	20 81       	ld	r18, Z
     ee4:	31 81       	ldd	r19, Z+1	; 0x01
     ee6:	21 50       	subi	r18, 0x01	; 1
     ee8:	31 09       	sbc	r19, r1
     eea:	49 e2       	ldi	r20, 0x29	; 41
     eec:	42 9f       	mul	r20, r18
     eee:	f0 01       	movw	r30, r0
     ef0:	43 9f       	mul	r20, r19
     ef2:	f0 0d       	add	r31, r0
     ef4:	11 24       	eor	r1, r1
     ef6:	ee 5f       	subi	r30, 0xFE	; 254
     ef8:	fd 4f       	sbci	r31, 0xFD	; 253
     efa:	22 81       	ldd	r18, Z+2	; 0x02
     efc:	33 81       	ldd	r19, Z+3	; 0x03
     efe:	23 2b       	or	r18, r19
     f00:	09 f5       	brne	.+66     	; 0xf44 <kernel_receive+0x70>
     f02:	fc 01       	movw	r30, r24
     f04:	ec 5f       	subi	r30, 0xFC	; 252
     f06:	fe 4f       	sbci	r31, 0xFE	; 254
     f08:	23 e0       	ldi	r18, 0x03	; 3
     f0a:	20 83       	st	Z, r18
     f0c:	7a 96       	adiw	r30, 0x1a	; 26
     f0e:	20 81       	ld	r18, Z
     f10:	31 81       	ldd	r19, Z+1	; 0x01
     f12:	80 81       	ld	r24, Z
     f14:	91 81       	ldd	r25, Z+1	; 0x01
     f16:	21 50       	subi	r18, 0x01	; 1
     f18:	31 09       	sbc	r19, r1
     f1a:	e9 e2       	ldi	r30, 0x29	; 41
     f1c:	e2 9f       	mul	r30, r18
     f1e:	a0 01       	movw	r20, r0
     f20:	e3 9f       	mul	r30, r19
     f22:	50 0d       	add	r21, r0
     f24:	11 24       	eor	r1, r1
     f26:	4a 5d       	subi	r20, 0xDA	; 218
     f28:	5d 4f       	sbci	r21, 0xFD	; 253
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	e8 9f       	mul	r30, r24
     f2e:	b0 01       	movw	r22, r0
     f30:	e9 9f       	mul	r30, r25
     f32:	70 0d       	add	r23, r0
     f34:	11 24       	eor	r1, r1
     f36:	6a 5f       	subi	r22, 0xFA	; 250
     f38:	7d 4f       	sbci	r23, 0xFD	; 253
     f3a:	80 ea       	ldi	r24, 0xA0	; 160
     f3c:	94 e0       	ldi	r25, 0x04	; 4
     f3e:	06 d3       	rcall	.+1548   	; 0x154c <enqueue>
     f40:	6e cb       	rjmp	.-2340   	; 0x61e <Dispatch>
     f42:	08 95       	ret
     f44:	fc 01       	movw	r30, r24
     f46:	e2 5e       	subi	r30, 0xE2	; 226
     f48:	fe 4f       	sbci	r31, 0xFE	; 254
     f4a:	20 81       	ld	r18, Z
     f4c:	31 81       	ldd	r19, Z+1	; 0x01
     f4e:	21 50       	subi	r18, 0x01	; 1
     f50:	31 09       	sbc	r19, r1
     f52:	49 e2       	ldi	r20, 0x29	; 41
     f54:	42 9f       	mul	r20, r18
     f56:	d0 01       	movw	r26, r0
     f58:	43 9f       	mul	r20, r19
     f5a:	b0 0d       	add	r27, r0
     f5c:	11 24       	eor	r1, r1
     f5e:	ae 5f       	subi	r26, 0xFE	; 254
     f60:	bd 4f       	sbci	r27, 0xFD	; 253
     f62:	12 96       	adiw	r26, 0x02	; 2
     f64:	0d 90       	ld	r0, X+
     f66:	bc 91       	ld	r27, X
     f68:	a0 2d       	mov	r26, r0
     f6a:	ac 5f       	subi	r26, 0xFC	; 252
     f6c:	be 4f       	sbci	r27, 0xFE	; 254
     f6e:	21 e0       	ldi	r18, 0x01	; 1
     f70:	2c 93       	st	X, r18
     f72:	20 81       	ld	r18, Z
     f74:	31 81       	ldd	r19, Z+1	; 0x01
     f76:	21 50       	subi	r18, 0x01	; 1
     f78:	31 09       	sbc	r19, r1
     f7a:	42 9f       	mul	r20, r18
     f7c:	d0 01       	movw	r26, r0
     f7e:	43 9f       	mul	r20, r19
     f80:	b0 0d       	add	r27, r0
     f82:	11 24       	eor	r1, r1
     f84:	ae 5f       	subi	r26, 0xFE	; 254
     f86:	bd 4f       	sbci	r27, 0xFD	; 253
     f88:	97 96       	adiw	r26, 0x27	; 39
     f8a:	2d 91       	ld	r18, X+
     f8c:	3c 91       	ld	r19, X
     f8e:	98 97       	sbiw	r26, 0x28	; 40
     f90:	dc 01       	movw	r26, r24
     f92:	a0 5e       	subi	r26, 0xE0	; 224
     f94:	be 4f       	sbci	r27, 0xFE	; 254
     f96:	11 96       	adiw	r26, 0x01	; 1
     f98:	3c 93       	st	X, r19
     f9a:	2e 93       	st	-X, r18
     f9c:	20 81       	ld	r18, Z
     f9e:	31 81       	ldd	r19, Z+1	; 0x01
     fa0:	21 50       	subi	r18, 0x01	; 1
     fa2:	31 09       	sbc	r19, r1
     fa4:	42 9f       	mul	r20, r18
     fa6:	f0 01       	movw	r30, r0
     fa8:	43 9f       	mul	r20, r19
     faa:	f0 0d       	add	r31, r0
     fac:	11 24       	eor	r1, r1
     fae:	ee 5f       	subi	r30, 0xFE	; 254
     fb0:	fd 4f       	sbci	r31, 0xFD	; 253
     fb2:	02 80       	ldd	r0, Z+2	; 0x02
     fb4:	f3 81       	ldd	r31, Z+3	; 0x03
     fb6:	e0 2d       	mov	r30, r0
     fb8:	eb 5f       	subi	r30, 0xFB	; 251
     fba:	fe 4f       	sbci	r31, 0xFE	; 254
     fbc:	20 81       	ld	r18, Z
     fbe:	31 81       	ldd	r19, Z+1	; 0x01
     fc0:	23 30       	cpi	r18, 0x03	; 3
     fc2:	31 05       	cpc	r19, r1
     fc4:	a1 f4       	brne	.+40     	; 0xfee <kernel_receive+0x11a>
     fc6:	fc 01       	movw	r30, r24
     fc8:	e2 5e       	subi	r30, 0xE2	; 226
     fca:	fe 4f       	sbci	r31, 0xFE	; 254
     fcc:	20 81       	ld	r18, Z
     fce:	31 81       	ldd	r19, Z+1	; 0x01
     fd0:	21 50       	subi	r18, 0x01	; 1
     fd2:	31 09       	sbc	r19, r1
     fd4:	42 9f       	mul	r20, r18
     fd6:	c0 01       	movw	r24, r0
     fd8:	43 9f       	mul	r20, r19
     fda:	90 0d       	add	r25, r0
     fdc:	11 24       	eor	r1, r1
     fde:	46 e9       	ldi	r20, 0x96	; 150
     fe0:	54 e0       	ldi	r21, 0x04	; 4
     fe2:	62 ec       	ldi	r22, 0xC2	; 194
     fe4:	76 e1       	ldi	r23, 0x16	; 22
     fe6:	8c 5f       	subi	r24, 0xFC	; 252
     fe8:	9d 4f       	sbci	r25, 0xFD	; 253
     fea:	b0 d2       	rcall	.+1376   	; 0x154c <enqueue>
     fec:	2c c0       	rjmp	.+88     	; 0x1046 <kernel_receive+0x172>
     fee:	fc 01       	movw	r30, r24
     ff0:	e2 5e       	subi	r30, 0xE2	; 226
     ff2:	fe 4f       	sbci	r31, 0xFE	; 254
     ff4:	20 81       	ld	r18, Z
     ff6:	31 81       	ldd	r19, Z+1	; 0x01
     ff8:	21 50       	subi	r18, 0x01	; 1
     ffa:	31 09       	sbc	r19, r1
     ffc:	49 e2       	ldi	r20, 0x29	; 41
     ffe:	42 9f       	mul	r20, r18
    1000:	f0 01       	movw	r30, r0
    1002:	43 9f       	mul	r20, r19
    1004:	f0 0d       	add	r31, r0
    1006:	11 24       	eor	r1, r1
    1008:	ee 5f       	subi	r30, 0xFE	; 254
    100a:	fd 4f       	sbci	r31, 0xFD	; 253
    100c:	02 80       	ldd	r0, Z+2	; 0x02
    100e:	f3 81       	ldd	r31, Z+3	; 0x03
    1010:	e0 2d       	mov	r30, r0
    1012:	eb 5f       	subi	r30, 0xFB	; 251
    1014:	fe 4f       	sbci	r31, 0xFE	; 254
    1016:	20 81       	ld	r18, Z
    1018:	31 81       	ldd	r19, Z+1	; 0x01
    101a:	21 30       	cpi	r18, 0x01	; 1
    101c:	31 05       	cpc	r19, r1
    101e:	99 f4       	brne	.+38     	; 0x1046 <kernel_receive+0x172>
    1020:	fc 01       	movw	r30, r24
    1022:	e2 5e       	subi	r30, 0xE2	; 226
    1024:	fe 4f       	sbci	r31, 0xFE	; 254
    1026:	20 81       	ld	r18, Z
    1028:	31 81       	ldd	r19, Z+1	; 0x01
    102a:	21 50       	subi	r18, 0x01	; 1
    102c:	31 09       	sbc	r19, r1
    102e:	42 9f       	mul	r20, r18
    1030:	c0 01       	movw	r24, r0
    1032:	43 9f       	mul	r20, r19
    1034:	90 0d       	add	r25, r0
    1036:	11 24       	eor	r1, r1
    1038:	42 e9       	ldi	r20, 0x92	; 146
    103a:	54 e0       	ldi	r21, 0x04	; 4
    103c:	68 e0       	ldi	r22, 0x08	; 8
    103e:	77 e1       	ldi	r23, 0x17	; 23
    1040:	8c 5f       	subi	r24, 0xFC	; 252
    1042:	9d 4f       	sbci	r25, 0xFD	; 253
    1044:	83 d2       	rcall	.+1286   	; 0x154c <enqueue>
    1046:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
    104a:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
    104e:	fc 01       	movw	r30, r24
    1050:	e2 5e       	subi	r30, 0xE2	; 226
    1052:	fe 4f       	sbci	r31, 0xFE	; 254
    1054:	20 81       	ld	r18, Z
    1056:	31 81       	ldd	r19, Z+1	; 0x01
    1058:	21 50       	subi	r18, 0x01	; 1
    105a:	31 09       	sbc	r19, r1
    105c:	49 e2       	ldi	r20, 0x29	; 41
    105e:	42 9f       	mul	r20, r18
    1060:	f0 01       	movw	r30, r0
    1062:	43 9f       	mul	r20, r19
    1064:	f0 0d       	add	r31, r0
    1066:	11 24       	eor	r1, r1
    1068:	ee 5f       	subi	r30, 0xFE	; 254
    106a:	fd 4f       	sbci	r31, 0xFD	; 253
    106c:	13 82       	std	Z+3, r1	; 0x03
    106e:	12 82       	std	Z+2, r1	; 0x02
    1070:	fc 01       	movw	r30, r24
    1072:	e4 5e       	subi	r30, 0xE4	; 228
    1074:	fe 4f       	sbci	r31, 0xFE	; 254
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	48 9f       	mul	r20, r24
    107e:	f0 01       	movw	r30, r0
    1080:	49 9f       	mul	r20, r25
    1082:	f0 0d       	add	r31, r0
    1084:	11 24       	eor	r1, r1
    1086:	ee 5f       	subi	r30, 0xFE	; 254
    1088:	fd 4f       	sbci	r31, 0xFD	; 253
    108a:	10 a6       	std	Z+40, r1	; 0x28
    108c:	17 a2       	std	Z+39, r1	; 0x27
    108e:	08 95       	ret

00001090 <kernel_async_send>:
}

void kernel_async_send() {
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
	if (ChannelArray[Cp->senderChannel - 1].numberReceivers == 0) { // no receivers waiting
    1098:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <Cp>
    109c:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <Cp+0x1>
    10a0:	fc 01       	movw	r30, r24
    10a2:	e4 5e       	subi	r30, 0xE4	; 228
    10a4:	fe 4f       	sbci	r31, 0xFE	; 254
    10a6:	20 81       	ld	r18, Z
    10a8:	31 81       	ldd	r19, Z+1	; 0x01
    10aa:	21 50       	subi	r18, 0x01	; 1
    10ac:	31 09       	sbc	r19, r1
    10ae:	49 e2       	ldi	r20, 0x29	; 41
    10b0:	42 9f       	mul	r20, r18
    10b2:	f0 01       	movw	r30, r0
    10b4:	43 9f       	mul	r20, r19
    10b6:	f0 0d       	add	r31, r0
    10b8:	11 24       	eor	r1, r1
    10ba:	ee 5f       	subi	r30, 0xFE	; 254
    10bc:	fd 4f       	sbci	r31, 0xFD	; 253
    10be:	24 a1       	ldd	r18, Z+36	; 0x24
    10c0:	35 a1       	ldd	r19, Z+37	; 0x25
    10c2:	23 2b       	or	r18, r19
    10c4:	31 f5       	brne	.+76     	; 0x1112 <kernel_async_send+0x82>
		if (ChannelArray[Cp->senderChannel - 1].sender == NULL) ChannelArray[Cp->senderChannel - 1].sender = Cp;
    10c6:	fc 01       	movw	r30, r24
    10c8:	e4 5e       	subi	r30, 0xE4	; 228
    10ca:	fe 4f       	sbci	r31, 0xFE	; 254
    10cc:	20 81       	ld	r18, Z
    10ce:	31 81       	ldd	r19, Z+1	; 0x01
    10d0:	21 50       	subi	r18, 0x01	; 1
    10d2:	31 09       	sbc	r19, r1
    10d4:	42 9f       	mul	r20, r18
    10d6:	f0 01       	movw	r30, r0
    10d8:	43 9f       	mul	r20, r19
    10da:	f0 0d       	add	r31, r0
    10dc:	11 24       	eor	r1, r1
    10de:	ee 5f       	subi	r30, 0xFE	; 254
    10e0:	fd 4f       	sbci	r31, 0xFD	; 253
    10e2:	22 81       	ldd	r18, Z+2	; 0x02
    10e4:	33 81       	ldd	r19, Z+3	; 0x03
    10e6:	23 2b       	or	r18, r19
    10e8:	89 f4       	brne	.+34     	; 0x110c <kernel_async_send+0x7c>
    10ea:	fc 01       	movw	r30, r24
    10ec:	e4 5e       	subi	r30, 0xE4	; 228
    10ee:	fe 4f       	sbci	r31, 0xFE	; 254
    10f0:	20 81       	ld	r18, Z
    10f2:	31 81       	ldd	r19, Z+1	; 0x01
    10f4:	21 50       	subi	r18, 0x01	; 1
    10f6:	31 09       	sbc	r19, r1
    10f8:	42 9f       	mul	r20, r18
    10fa:	f0 01       	movw	r30, r0
    10fc:	43 9f       	mul	r20, r19
    10fe:	f0 0d       	add	r31, r0
    1100:	11 24       	eor	r1, r1
    1102:	ee 5f       	subi	r30, 0xFE	; 254
    1104:	fd 4f       	sbci	r31, 0xFD	; 253
    1106:	93 83       	std	Z+3, r25	; 0x03
    1108:	82 83       	std	Z+2, r24	; 0x02
    110a:	0d c1       	rjmp	.+538    	; 0x1326 <kernel_async_send+0x296>
		else OS_Abort(6); // cant have more than 1 sender
    110c:	86 e0       	ldi	r24, 0x06	; 6
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	5d da       	rcall	.-2886   	; 0x5cc <OS_Abort>
		return; // return without blocking
	} else { //receivers are waiting
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(6); // cant have more than 1 sender
    1112:	fc 01       	movw	r30, r24
    1114:	e4 5e       	subi	r30, 0xE4	; 228
    1116:	fe 4f       	sbci	r31, 0xFE	; 254
    1118:	20 81       	ld	r18, Z
    111a:	31 81       	ldd	r19, Z+1	; 0x01
    111c:	21 50       	subi	r18, 0x01	; 1
    111e:	31 09       	sbc	r19, r1
    1120:	49 e2       	ldi	r20, 0x29	; 41
    1122:	42 9f       	mul	r20, r18
    1124:	f0 01       	movw	r30, r0
    1126:	43 9f       	mul	r20, r19
    1128:	f0 0d       	add	r31, r0
    112a:	11 24       	eor	r1, r1
    112c:	ee 5f       	subi	r30, 0xFE	; 254
    112e:	fd 4f       	sbci	r31, 0xFD	; 253
    1130:	22 81       	ldd	r18, Z+2	; 0x02
    1132:	33 81       	ldd	r19, Z+3	; 0x03
    1134:	23 2b       	or	r18, r19
    1136:	19 f0       	breq	.+6      	; 0x113e <kernel_async_send+0xae>
    1138:	86 e0       	ldi	r24, 0x06	; 6
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	47 da       	rcall	.-2930   	; 0x5cc <OS_Abort>
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
    113e:	fc 01       	movw	r30, r24
    1140:	e4 5e       	subi	r30, 0xE4	; 228
    1142:	fe 4f       	sbci	r31, 0xFE	; 254
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	29 e2       	ldi	r18, 0x29	; 41
    114c:	28 9f       	mul	r18, r24
    114e:	f0 01       	movw	r30, r0
    1150:	29 9f       	mul	r18, r25
    1152:	f0 0d       	add	r31, r0
    1154:	11 24       	eor	r1, r1
    1156:	ee 5f       	subi	r30, 0xFE	; 254
    1158:	fd 4f       	sbci	r31, 0xFD	; 253
    115a:	c4 a1       	ldd	r28, Z+36	; 0x24
    115c:	d5 a1       	ldd	r29, Z+37	; 0x25
    115e:	21 97       	sbiw	r28, 0x01	; 1
    1160:	0a f4       	brpl	.+2      	; 0x1164 <kernel_async_send+0xd4>
    1162:	ce c0       	rjmp	.+412    	; 0x1300 <kernel_async_send+0x270>
			ChannelArray[Cp->senderChannel - 1].receivers[l]->state = READY;
    1164:	19 e2       	ldi	r17, 0x29	; 41
    1166:	01 e0       	ldi	r16, 0x01	; 1
    1168:	20 91 a0 04 	lds	r18, 0x04A0	; 0x8004a0 <Cp>
    116c:	30 91 a1 04 	lds	r19, 0x04A1	; 0x8004a1 <Cp+0x1>
    1170:	c9 01       	movw	r24, r18
    1172:	84 5e       	subi	r24, 0xE4	; 228
    1174:	9e 4f       	sbci	r25, 0xFE	; 254
    1176:	dc 01       	movw	r26, r24
    1178:	4d 91       	ld	r20, X+
    117a:	5c 91       	ld	r21, X
    117c:	41 50       	subi	r20, 0x01	; 1
    117e:	51 09       	sbc	r21, r1
    1180:	fe 01       	movw	r30, r28
    1182:	32 96       	adiw	r30, 0x02	; 2
    1184:	ee 0f       	add	r30, r30
    1186:	ff 1f       	adc	r31, r31
    1188:	14 9f       	mul	r17, r20
    118a:	d0 01       	movw	r26, r0
    118c:	15 9f       	mul	r17, r21
    118e:	b0 0d       	add	r27, r0
    1190:	11 24       	eor	r1, r1
    1192:	ae 0f       	add	r26, r30
    1194:	bf 1f       	adc	r27, r31
    1196:	ae 5f       	subi	r26, 0xFE	; 254
    1198:	bd 4f       	sbci	r27, 0xFD	; 253
    119a:	0d 90       	ld	r0, X+
    119c:	bc 91       	ld	r27, X
    119e:	a0 2d       	mov	r26, r0
    11a0:	ac 5f       	subi	r26, 0xFC	; 252
    11a2:	be 4f       	sbci	r27, 0xFE	; 254
    11a4:	0c 93       	st	X, r16
			ChannelArray[Cp->senderChannel - 1].receivers[l]->val = Cp->val;
    11a6:	dc 01       	movw	r26, r24
    11a8:	4d 91       	ld	r20, X+
    11aa:	5c 91       	ld	r21, X
    11ac:	41 50       	subi	r20, 0x01	; 1
    11ae:	51 09       	sbc	r21, r1
    11b0:	14 9f       	mul	r17, r20
    11b2:	d0 01       	movw	r26, r0
    11b4:	15 9f       	mul	r17, r21
    11b6:	b0 0d       	add	r27, r0
    11b8:	11 24       	eor	r1, r1
    11ba:	ae 0f       	add	r26, r30
    11bc:	bf 1f       	adc	r27, r31
    11be:	ae 5f       	subi	r26, 0xFE	; 254
    11c0:	bd 4f       	sbci	r27, 0xFD	; 253
    11c2:	6d 91       	ld	r22, X+
    11c4:	7c 91       	ld	r23, X
    11c6:	a9 01       	movw	r20, r18
    11c8:	40 5e       	subi	r20, 0xE0	; 224
    11ca:	5e 4f       	sbci	r21, 0xFE	; 254
    11cc:	da 01       	movw	r26, r20
    11ce:	4d 91       	ld	r20, X+
    11d0:	5c 91       	ld	r21, X
    11d2:	db 01       	movw	r26, r22
    11d4:	a0 5e       	subi	r26, 0xE0	; 224
    11d6:	be 4f       	sbci	r27, 0xFE	; 254
    11d8:	4d 93       	st	X+, r20
    11da:	5c 93       	st	X, r21

			if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == SYSTEM) {
    11dc:	dc 01       	movw	r26, r24
    11de:	4d 91       	ld	r20, X+
    11e0:	5c 91       	ld	r21, X
    11e2:	11 97       	sbiw	r26, 0x01	; 1
    11e4:	41 50       	subi	r20, 0x01	; 1
    11e6:	51 09       	sbc	r21, r1
    11e8:	14 9f       	mul	r17, r20
    11ea:	c0 01       	movw	r24, r0
    11ec:	15 9f       	mul	r17, r21
    11ee:	90 0d       	add	r25, r0
    11f0:	11 24       	eor	r1, r1
    11f2:	e8 0f       	add	r30, r24
    11f4:	f9 1f       	adc	r31, r25
    11f6:	ee 5f       	subi	r30, 0xFE	; 254
    11f8:	fd 4f       	sbci	r31, 0xFD	; 253
    11fa:	01 90       	ld	r0, Z+
    11fc:	f0 81       	ld	r31, Z
    11fe:	e0 2d       	mov	r30, r0
    1200:	eb 5f       	subi	r30, 0xFB	; 251
    1202:	fe 4f       	sbci	r31, 0xFE	; 254
    1204:	80 81       	ld	r24, Z
    1206:	91 81       	ldd	r25, Z+1	; 0x01
    1208:	03 97       	sbiw	r24, 0x03	; 3
    120a:	c1 f4       	brne	.+48     	; 0x123c <kernel_async_send+0x1ac>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &SysQueue, &SysCount);
    120c:	fd 01       	movw	r30, r26
    120e:	40 81       	ld	r20, Z
    1210:	51 81       	ldd	r21, Z+1	; 0x01
    1212:	ce 01       	movw	r24, r28
    1214:	02 96       	adiw	r24, 0x02	; 2
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	41 50       	subi	r20, 0x01	; 1
    121c:	51 09       	sbc	r21, r1
    121e:	14 9f       	mul	r17, r20
    1220:	90 01       	movw	r18, r0
    1222:	15 9f       	mul	r17, r21
    1224:	30 0d       	add	r19, r0
    1226:	11 24       	eor	r1, r1
    1228:	82 0f       	add	r24, r18
    122a:	93 1f       	adc	r25, r19
    122c:	46 e9       	ldi	r20, 0x96	; 150
    122e:	54 e0       	ldi	r21, 0x04	; 4
    1230:	62 ec       	ldi	r22, 0xC2	; 194
    1232:	76 e1       	ldi	r23, 0x16	; 22
    1234:	8e 5f       	subi	r24, 0xFE	; 254
    1236:	9d 4f       	sbci	r25, 0xFD	; 253
    1238:	89 d1       	rcall	.+786    	; 0x154c <enqueue>
    123a:	36 c0       	rjmp	.+108    	; 0x12a8 <kernel_async_send+0x218>
				} else if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == RR) {
    123c:	f9 01       	movw	r30, r18
    123e:	e4 5e       	subi	r30, 0xE4	; 228
    1240:	fe 4f       	sbci	r31, 0xFE	; 254
    1242:	40 81       	ld	r20, Z
    1244:	51 81       	ldd	r21, Z+1	; 0x01
    1246:	41 50       	subi	r20, 0x01	; 1
    1248:	51 09       	sbc	r21, r1
    124a:	fe 01       	movw	r30, r28
    124c:	32 96       	adiw	r30, 0x02	; 2
    124e:	ee 0f       	add	r30, r30
    1250:	ff 1f       	adc	r31, r31
    1252:	14 9f       	mul	r17, r20
    1254:	c0 01       	movw	r24, r0
    1256:	15 9f       	mul	r17, r21
    1258:	90 0d       	add	r25, r0
    125a:	11 24       	eor	r1, r1
    125c:	e8 0f       	add	r30, r24
    125e:	f9 1f       	adc	r31, r25
    1260:	ee 5f       	subi	r30, 0xFE	; 254
    1262:	fd 4f       	sbci	r31, 0xFD	; 253
    1264:	01 90       	ld	r0, Z+
    1266:	f0 81       	ld	r31, Z
    1268:	e0 2d       	mov	r30, r0
    126a:	eb 5f       	subi	r30, 0xFB	; 251
    126c:	fe 4f       	sbci	r31, 0xFE	; 254
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	c9 f4       	brne	.+50     	; 0x12a8 <kernel_async_send+0x218>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
    1276:	f9 01       	movw	r30, r18
    1278:	e4 5e       	subi	r30, 0xE4	; 228
    127a:	fe 4f       	sbci	r31, 0xFE	; 254
    127c:	40 81       	ld	r20, Z
    127e:	51 81       	ldd	r21, Z+1	; 0x01
    1280:	ce 01       	movw	r24, r28
    1282:	02 96       	adiw	r24, 0x02	; 2
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	41 50       	subi	r20, 0x01	; 1
    128a:	51 09       	sbc	r21, r1
    128c:	14 9f       	mul	r17, r20
    128e:	90 01       	movw	r18, r0
    1290:	15 9f       	mul	r17, r21
    1292:	30 0d       	add	r19, r0
    1294:	11 24       	eor	r1, r1
    1296:	82 0f       	add	r24, r18
    1298:	93 1f       	adc	r25, r19
    129a:	42 e9       	ldi	r20, 0x92	; 146
    129c:	54 e0       	ldi	r21, 0x04	; 4
    129e:	68 e0       	ldi	r22, 0x08	; 8
    12a0:	77 e1       	ldi	r23, 0x17	; 23
    12a2:	8e 5f       	subi	r24, 0xFE	; 254
    12a4:	9d 4f       	sbci	r25, 0xFD	; 253
    12a6:	52 d1       	rcall	.+676    	; 0x154c <enqueue>
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
    12a8:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <Cp>
    12ac:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <Cp+0x1>
    12b0:	a4 5e       	subi	r26, 0xE4	; 228
    12b2:	be 4f       	sbci	r27, 0xFE	; 254
    12b4:	2d 91       	ld	r18, X+
    12b6:	3c 91       	ld	r19, X
    12b8:	11 97       	sbiw	r26, 0x01	; 1
    12ba:	21 50       	subi	r18, 0x01	; 1
    12bc:	31 09       	sbc	r19, r1
    12be:	fe 01       	movw	r30, r28
    12c0:	32 96       	adiw	r30, 0x02	; 2
    12c2:	ee 0f       	add	r30, r30
    12c4:	ff 1f       	adc	r31, r31
    12c6:	12 9f       	mul	r17, r18
    12c8:	c0 01       	movw	r24, r0
    12ca:	13 9f       	mul	r17, r19
    12cc:	90 0d       	add	r25, r0
    12ce:	11 24       	eor	r1, r1
    12d0:	e8 0f       	add	r30, r24
    12d2:	f9 1f       	adc	r31, r25
    12d4:	ee 5f       	subi	r30, 0xFE	; 254
    12d6:	fd 4f       	sbci	r31, 0xFD	; 253
    12d8:	11 82       	std	Z+1, r1	; 0x01
    12da:	10 82       	st	Z, r1
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
    12dc:	8d 91       	ld	r24, X+
    12de:	9c 91       	ld	r25, X
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	18 9f       	mul	r17, r24
    12e4:	f0 01       	movw	r30, r0
    12e6:	19 9f       	mul	r17, r25
    12e8:	f0 0d       	add	r31, r0
    12ea:	11 24       	eor	r1, r1
    12ec:	ee 5f       	subi	r30, 0xFE	; 254
    12ee:	fd 4f       	sbci	r31, 0xFD	; 253
    12f0:	84 a1       	ldd	r24, Z+36	; 0x24
    12f2:	95 a1       	ldd	r25, Z+37	; 0x25
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	95 a3       	std	Z+37, r25	; 0x25
    12f8:	84 a3       	std	Z+36, r24	; 0x24
		else OS_Abort(6); // cant have more than 1 sender
		return; // return without blocking
	} else { //receivers are waiting
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(6); // cant have more than 1 sender
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
    12fa:	21 97       	sbiw	r28, 0x01	; 1
    12fc:	0a f0       	brmi	.+2      	; 0x1300 <kernel_async_send+0x270>
    12fe:	34 cf       	rjmp	.-408    	; 0x1168 <kernel_async_send+0xd8>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
		}
		ChannelArray[Cp->senderChannel - 1].val = NULL;
    1300:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
    1304:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
    1308:	e4 5e       	subi	r30, 0xE4	; 228
    130a:	fe 4f       	sbci	r31, 0xFE	; 254
    130c:	80 81       	ld	r24, Z
    130e:	91 81       	ldd	r25, Z+1	; 0x01
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	29 e2       	ldi	r18, 0x29	; 41
    1314:	28 9f       	mul	r18, r24
    1316:	f0 01       	movw	r30, r0
    1318:	29 9f       	mul	r18, r25
    131a:	f0 0d       	add	r31, r0
    131c:	11 24       	eor	r1, r1
    131e:	ee 5f       	subi	r30, 0xFE	; 254
    1320:	fd 4f       	sbci	r31, 0xFD	; 253
    1322:	10 a6       	std	Z+40, r1	; 0x28
    1324:	17 a2       	std	Z+39, r1	; 0x27
	}
}
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	08 95       	ret

00001330 <OS_Start>:
}

/**
  * This function starts the RTOS after creating a_main
  */
void OS_Start() {   
    1330:	df 92       	push	r13
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
	if ( (! KernelActive) && (Tasks > 0)) {
    133e:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <KernelActive>
    1342:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <KernelActive+0x1>
    1346:	89 2b       	or	r24, r25
    1348:	09 f0       	breq	.+2      	; 0x134c <OS_Start+0x1c>
    134a:	e2 c0       	rjmp	.+452    	; 0x1510 <OS_Start+0x1e0>
    134c:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <Tasks>
    1350:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <Tasks+0x1>
    1354:	89 2b       	or	r24, r25
    1356:	09 f4       	brne	.+2      	; 0x135a <OS_Start+0x2a>
    1358:	db c0       	rjmp	.+438    	; 0x1510 <OS_Start+0x1e0>
		Disable_Interrupt();
    135a:	f8 94       	cli

		KernelActive = 1;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <KernelActive+0x1>
    1364:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <KernelActive>
  * corresponding kernel function on its behalf.
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */
    1368:	5a d9       	rcall	.-3404   	; 0x61e <Dispatch>
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
			break;
		case NEXT:
			Cp->state = READY;
    136a:	dd 24       	eor	r13, r13
    136c:	d3 94       	inc	r13
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */

	while(1) {
		Cp->request = NONE; /* clear its request */
    136e:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <Cp>
    1372:	f0 91 a1 04 	lds	r31, 0x04A1	; 0x8004a1 <Cp+0x1>
    1376:	df 01       	movw	r26, r30
    1378:	a5 5f       	subi	r26, 0xF5	; 245
    137a:	be 4f       	sbci	r27, 0xFE	; 254
    137c:	1c 92       	st	X, r1

		/* activate this newly selected task */
		CurrentSp = Cp->sp;
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	90 93 e5 16 	sts	0x16E5, r25	; 0x8016e5 <CurrentSp+0x1>
    1386:	80 93 e4 16 	sts	0x16E4, r24	; 0x8016e4 <CurrentSp>

		Exit_Kernel();    /* or CSwitch() */
    138a:	0e 94 9e 00 	call	0x13c	; 0x13c <CSwitch>

		/* if this task makes a system call, it will return to here! */

		/* save the Cp's stack pointer */
		Cp->sp = CurrentSp;
    138e:	c0 91 a0 04 	lds	r28, 0x04A0	; 0x8004a0 <Cp>
    1392:	d0 91 a1 04 	lds	r29, 0x04A1	; 0x8004a1 <Cp+0x1>
    1396:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <CurrentSp>
    139a:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <CurrentSp+0x1>
    139e:	9b 83       	std	Y+3, r25	; 0x03
    13a0:	8a 83       	std	Y+2, r24	; 0x02

		switch(Cp->request){
    13a2:	fe 01       	movw	r30, r28
    13a4:	e5 5f       	subi	r30, 0xF5	; 245
    13a6:	fe 4f       	sbci	r31, 0xFE	; 254
    13a8:	e0 81       	ld	r30, Z
    13aa:	8e 2f       	mov	r24, r30
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	fc 01       	movw	r30, r24
    13b0:	31 97       	sbiw	r30, 0x01	; 1
    13b2:	ea 30       	cpi	r30, 0x0A	; 10
    13b4:	f1 05       	cpc	r31, r1
    13b6:	d8 f6       	brcc	.-74     	; 0x136e <OS_Start+0x3e>
    13b8:	88 27       	eor	r24, r24
    13ba:	ee 58       	subi	r30, 0x8E	; 142
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	8f 4f       	sbci	r24, 0xFF	; 255
    13c0:	8e c1       	rjmp	.+796    	; 0x16de <__tablejump2__>
		case CREATE:
			Cp->response = Kernel_Create_Task( Cp->code, Cp->priority, Cp->arg, -1, -1, -1);
    13c2:	fe 01       	movw	r30, r28
    13c4:	e9 5f       	subi	r30, 0xF9	; 249
    13c6:	fe 4f       	sbci	r31, 0xFE	; 254
    13c8:	40 81       	ld	r20, Z
    13ca:	51 81       	ldd	r21, Z+1	; 0x01
    13cc:	32 97       	sbiw	r30, 0x02	; 2
    13ce:	60 81       	ld	r22, Z
    13d0:	71 81       	ldd	r23, Z+1	; 0x01
    13d2:	34 96       	adiw	r30, 0x04	; 4
    13d4:	80 81       	ld	r24, Z
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	ee 24       	eor	r14, r14
    13da:	ea 94       	dec	r14
    13dc:	fe 2c       	mov	r15, r14
    13de:	0f ef       	ldi	r16, 0xFF	; 255
    13e0:	1f ef       	ldi	r17, 0xFF	; 255
    13e2:	2f ef       	ldi	r18, 0xFF	; 255
    13e4:	3f ef       	ldi	r19, 0xFF	; 255
    13e6:	72 d8       	rcall	.-3868   	; 0x4cc <Kernel_Create_Task>
    13e8:	c4 5f       	subi	r28, 0xF4	; 244
    13ea:	de 4f       	sbci	r29, 0xFE	; 254
    13ec:	99 83       	std	Y+1, r25	; 0x01
    13ee:	88 83       	st	Y, r24
    13f0:	be cf       	rjmp	.-132    	; 0x136e <OS_Start+0x3e>
			break;
		case CREATE_SYS:
			Cp->response = Kernel_Create_Task( Cp->code, SYSTEM, Cp->arg, -1, -1, -1);
    13f2:	fe 01       	movw	r30, r28
    13f4:	e9 5f       	subi	r30, 0xF9	; 249
    13f6:	fe 4f       	sbci	r31, 0xFE	; 254
    13f8:	40 81       	ld	r20, Z
    13fa:	51 81       	ldd	r21, Z+1	; 0x01
    13fc:	32 96       	adiw	r30, 0x02	; 2
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	ee 24       	eor	r14, r14
    1404:	ea 94       	dec	r14
    1406:	fe 2c       	mov	r15, r14
    1408:	0f ef       	ldi	r16, 0xFF	; 255
    140a:	1f ef       	ldi	r17, 0xFF	; 255
    140c:	2f ef       	ldi	r18, 0xFF	; 255
    140e:	3f ef       	ldi	r19, 0xFF	; 255
    1410:	63 e0       	ldi	r22, 0x03	; 3
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	5b d8       	rcall	.-3914   	; 0x4cc <Kernel_Create_Task>
    1416:	c4 5f       	subi	r28, 0xF4	; 244
    1418:	de 4f       	sbci	r29, 0xFE	; 254
    141a:	99 83       	std	Y+1, r25	; 0x01
    141c:	88 83       	st	Y, r24
    141e:	a7 cf       	rjmp	.-178    	; 0x136e <OS_Start+0x3e>
			break;
		case CREATE_PERIODIC:
			Cp->response = Kernel_Create_Task( Cp->code, PERIODIC, Cp->arg, Cp->offset, Cp->wcet, Cp->period);
    1420:	fe 01       	movw	r30, r28
    1422:	e0 5f       	subi	r30, 0xF0	; 240
    1424:	fe 4f       	sbci	r31, 0xFE	; 254
    1426:	e0 80       	ld	r14, Z
    1428:	f1 80       	ldd	r15, Z+1	; 0x01
    142a:	32 96       	adiw	r30, 0x02	; 2
    142c:	00 81       	ld	r16, Z
    142e:	11 81       	ldd	r17, Z+1	; 0x01
    1430:	32 96       	adiw	r30, 0x02	; 2
    1432:	20 81       	ld	r18, Z
    1434:	31 81       	ldd	r19, Z+1	; 0x01
    1436:	3d 97       	sbiw	r30, 0x0d	; 13
    1438:	40 81       	ld	r20, Z
    143a:	51 81       	ldd	r21, Z+1	; 0x01
    143c:	32 96       	adiw	r30, 0x02	; 2
    143e:	80 81       	ld	r24, Z
    1440:	91 81       	ldd	r25, Z+1	; 0x01
    1442:	62 e0       	ldi	r22, 0x02	; 2
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	42 d8       	rcall	.-3964   	; 0x4cc <Kernel_Create_Task>
    1448:	c4 5f       	subi	r28, 0xF4	; 244
    144a:	de 4f       	sbci	r29, 0xFE	; 254
    144c:	99 83       	std	Y+1, r25	; 0x01
    144e:	88 83       	st	Y, r24
    1450:	8e cf       	rjmp	.-228    	; 0x136e <OS_Start+0x3e>
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
    1452:	fe 01       	movw	r30, r28
    1454:	e9 5f       	subi	r30, 0xF9	; 249
    1456:	fe 4f       	sbci	r31, 0xFE	; 254
    1458:	40 81       	ld	r20, Z
    145a:	51 81       	ldd	r21, Z+1	; 0x01
    145c:	32 96       	adiw	r30, 0x02	; 2
    145e:	80 81       	ld	r24, Z
    1460:	91 81       	ldd	r25, Z+1	; 0x01
    1462:	ee 24       	eor	r14, r14
    1464:	ea 94       	dec	r14
    1466:	fe 2c       	mov	r15, r14
    1468:	0f ef       	ldi	r16, 0xFF	; 255
    146a:	1f ef       	ldi	r17, 0xFF	; 255
    146c:	2f ef       	ldi	r18, 0xFF	; 255
    146e:	3f ef       	ldi	r19, 0xFF	; 255
    1470:	61 e0       	ldi	r22, 0x01	; 1
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	2b d8       	rcall	.-4010   	; 0x4cc <Kernel_Create_Task>
    1476:	c4 5f       	subi	r28, 0xF4	; 244
    1478:	de 4f       	sbci	r29, 0xFE	; 254
    147a:	99 83       	std	Y+1, r25	; 0x01
    147c:	88 83       	st	Y, r24
    147e:	77 cf       	rjmp	.-274    	; 0x136e <OS_Start+0x3e>
			break;
		case NEXT:
			Cp->state = READY;
    1480:	fe 01       	movw	r30, r28
    1482:	ec 5f       	subi	r30, 0xFC	; 252
    1484:	fe 4f       	sbci	r31, 0xFE	; 254
    1486:	d0 82       	st	Z, r13
			if (Cp->priority == SYSTEM) {
    1488:	31 96       	adiw	r30, 0x01	; 1
    148a:	80 81       	ld	r24, Z
    148c:	91 81       	ldd	r25, Z+1	; 0x01
    148e:	03 97       	sbiw	r24, 0x03	; 3
    1490:	41 f4       	brne	.+16     	; 0x14a2 <OS_Start+0x172>
				enqueue(&Cp, &SysQueue, &SysCount);
    1492:	46 e9       	ldi	r20, 0x96	; 150
    1494:	54 e0       	ldi	r21, 0x04	; 4
    1496:	62 ec       	ldi	r22, 0xC2	; 194
    1498:	76 e1       	ldi	r23, 0x16	; 22
    149a:	80 ea       	ldi	r24, 0xA0	; 160
    149c:	94 e0       	ldi	r25, 0x04	; 4
    149e:	56 d0       	rcall	.+172    	; 0x154c <enqueue>
    14a0:	1c c0       	rjmp	.+56     	; 0x14da <OS_Start+0x1aa>
			} else if (Cp->priority == PERIODIC) {
    14a2:	fe 01       	movw	r30, r28
    14a4:	eb 5f       	subi	r30, 0xFB	; 251
    14a6:	fe 4f       	sbci	r31, 0xFE	; 254
    14a8:	80 81       	ld	r24, Z
    14aa:	91 81       	ldd	r25, Z+1	; 0x01
    14ac:	02 97       	sbiw	r24, 0x02	; 2
    14ae:	41 f4       	brne	.+16     	; 0x14c0 <OS_Start+0x190>
				enqueuePeriodic(&Cp, &PeriodicQueue, &PeriodicCount);
    14b0:	44 e9       	ldi	r20, 0x94	; 148
    14b2:	54 e0       	ldi	r21, 0x04	; 4
    14b4:	66 ee       	ldi	r22, 0xE6	; 230
    14b6:	76 e1       	ldi	r23, 0x16	; 22
    14b8:	80 ea       	ldi	r24, 0xA0	; 160
    14ba:	94 e0       	ldi	r25, 0x04	; 4
    14bc:	99 d0       	rcall	.+306    	; 0x15f0 <enqueuePeriodic>
    14be:	0d c0       	rjmp	.+26     	; 0x14da <OS_Start+0x1aa>
			} else if (Cp->priority == RR) {
    14c0:	cb 5f       	subi	r28, 0xFB	; 251
    14c2:	de 4f       	sbci	r29, 0xFE	; 254
    14c4:	88 81       	ld	r24, Y
    14c6:	99 81       	ldd	r25, Y+1	; 0x01
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	39 f4       	brne	.+14     	; 0x14da <OS_Start+0x1aa>
				enqueue(&Cp, &RRQueue, &RRCount);
    14cc:	42 e9       	ldi	r20, 0x92	; 146
    14ce:	54 e0       	ldi	r21, 0x04	; 4
    14d0:	68 e0       	ldi	r22, 0x08	; 8
    14d2:	77 e1       	ldi	r23, 0x17	; 23
    14d4:	80 ea       	ldi	r24, 0xA0	; 160
    14d6:	94 e0       	ldi	r25, 0x04	; 4
    14d8:	39 d0       	rcall	.+114    	; 0x154c <enqueue>
			}
			Dispatch();
    14da:	a1 d8       	rcall	.-3774   	; 0x61e <Dispatch>
    14dc:	48 cf       	rjmp	.-368    	; 0x136e <OS_Start+0x3e>
			break;
		case NONE:
			break;
		case CHECK_TIME_VIOLATION:
			CheckTimingViolation();
    14de:	7c d8       	rcall	.-3848   	; 0x5d8 <CheckTimingViolation>
    14e0:	46 cf       	rjmp	.-372    	; 0x136e <OS_Start+0x3e>
			break;
		case SEND:
			kernel_send();
    14e2:	90 db       	rcall	.-2272   	; 0xc04 <kernel_send>
    14e4:	44 cf       	rjmp	.-376    	; 0x136e <OS_Start+0x3e>
			break;
		case ASYNC_SEND:
			kernel_async_send();
    14e6:	d4 dd       	rcall	.-1112   	; 0x1090 <kernel_async_send>
    14e8:	42 cf       	rjmp	.-380    	; 0x136e <OS_Start+0x3e>
			break;
		case RECEIVE:
			kernel_receive();
    14ea:	f4 dc       	rcall	.-1560   	; 0xed4 <kernel_receive>
    14ec:	40 cf       	rjmp	.-384    	; 0x136e <OS_Start+0x3e>

/**
  *  Terminate a task
  */
static void Kernel_Terminate_Task() {
	Cp->state = DEAD;
    14ee:	fe 01       	movw	r30, r28
    14f0:	ec 5f       	subi	r30, 0xFC	; 252
    14f2:	fe 4f       	sbci	r31, 0xFE	; 254
    14f4:	10 82       	st	Z, r1
	Cp->processID = 0;
    14f6:	19 82       	std	Y+1, r1	; 0x01
    14f8:	18 82       	st	Y, r1
	Tasks--;
    14fa:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <Tasks>
    14fe:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <Tasks+0x1>
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <Tasks+0x1>
    1508:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <Tasks>
			kernel_receive();
			break;
		case TERMINATE:
			/* deallocate all resources used by this task */
			Kernel_Terminate_Task();
			Dispatch();
    150c:	88 d8       	rcall	.-3824   	; 0x61e <Dispatch>
    150e:	2f cf       	rjmp	.-418    	; 0x136e <OS_Start+0x3e>

		KernelActive = 1;
		Next_Kernel_Request();
		/* SHOULD NEVER GET HERE!!! */
	}
}
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	ef 90       	pop	r14
    151c:	df 90       	pop	r13
    151e:	08 95       	ret

00001520 <main>:
/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	//pin 25
	DDRA |= (1<<PA3);
    1520:	0b 9a       	sbi	0x01, 3	; 1
	PORTA &= ~(1<<PA3);
    1522:	13 98       	cbi	0x02, 3	; 2

	//pin 26
	DDRA |= (1<<PA4);
    1524:	0c 9a       	sbi	0x01, 4	; 1
	PORTA &= ~(1<<PA4);
    1526:	14 98       	cbi	0x02, 4	; 2

	//pin 27
	DDRA |= (1<<PA5);
    1528:	0d 9a       	sbi	0x01, 5	; 1
	PORTA &= ~(1<<PA5);
    152a:	15 98       	cbi	0x02, 5	; 2

	//pin 28
	DDRA |= (1<<PA6);
    152c:	0e 9a       	sbi	0x01, 6	; 1
	PORTA &= ~(1<<PA6);
    152e:	16 98       	cbi	0x02, 6	; 2

	//pin 29
	DDRA |= (1<<PA7);
    1530:	0f 9a       	sbi	0x01, 7	; 1
	PORTA &= ~(1<<PA7);
    1532:	17 98       	cbi	0x02, 7	; 2

	//pin 30
	DDRC |= (1<<PC7);
    1534:	3f 9a       	sbi	0x07, 7	; 7
	PORTC &= ~(1<<PC7);
    1536:	47 98       	cbi	0x08, 7	; 8

	setup();
    1538:	5a da       	rcall	.-2892   	; 0x9ee <setup>
	OS_Init();
    153a:	0b d8       	rcall	.-4074   	; 0x552 <OS_Init>
	Task_Create_Idle();
    153c:	aa d9       	rcall	.-3244   	; 0x892 <Task_Create_Idle>
	Task_Create_System(a_main, 42);
    153e:	6a e2       	ldi	r22, 0x2A	; 42
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	8a e6       	ldi	r24, 0x6A	; 106
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	66 d9       	rcall	.-3380   	; 0x814 <Task_Create_System>
	OS_Start();
    1548:	f3 ce       	rjmp	.-538    	; 0x1330 <OS_Start>
    154a:	08 95       	ret

0000154c <enqueue>:
}

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1552:	28 81       	ld	r18, Y
    1554:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1556:	2f 30       	cpi	r18, 0x0F	; 15
    1558:	31 05       	cpc	r19, r1
    155a:	e9 f0       	breq	.+58     	; 0x1596 <enqueue+0x4a>
        return NULL;
    }

    int i = (*QCount) - 1;
    155c:	e8 81       	ld	r30, Y
    155e:	f9 81       	ldd	r31, Y+1	; 0x01
    1560:	9f 01       	movw	r18, r30
    1562:	21 50       	subi	r18, 0x01	; 1
    1564:	31 09       	sbc	r19, r1
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    1566:	62 f0       	brmi	.+24     	; 0x1580 <enqueue+0x34>
    1568:	ee 0f       	add	r30, r30
    156a:	ff 1f       	adc	r31, r31
    156c:	e6 0f       	add	r30, r22
    156e:	f7 1f       	adc	r31, r23
    1570:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    1572:	32 91       	ld	r19, -Z
    1574:	22 91       	ld	r18, -Z
    1576:	33 83       	std	Z+3, r19	; 0x03
    1578:	22 83       	std	Z+2, r18	; 0x02

    int i = (*QCount) - 1;
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    157a:	ea 17       	cp	r30, r26
    157c:	fb 07       	cpc	r31, r27
    157e:	c9 f7       	brne	.-14     	; 0x1572 <enqueue+0x26>
        i--;
        temp = Queue[i];
    }

    //Queue[i+1] = *p; //original code
	Queue[0] = *p;
    1580:	fc 01       	movw	r30, r24
    1582:	80 81       	ld	r24, Z
    1584:	91 81       	ldd	r25, Z+1	; 0x01
    1586:	fb 01       	movw	r30, r22
    1588:	91 83       	std	Z+1, r25	; 0x01
    158a:	80 83       	st	Z, r24
    (*QCount)++;
    158c:	88 81       	ld	r24, Y
    158e:	99 81       	ldd	r25, Y+1	; 0x01
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	99 83       	std	Y+1, r25	; 0x01
    1594:	88 83       	st	Y, r24
}
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	08 95       	ret

0000159c <dequeue>:


/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    159c:	ac 01       	movw	r20, r24
    159e:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    15a0:	8d 91       	ld	r24, X+
    15a2:	9c 91       	ld	r25, X
    15a4:	11 97       	sbiw	r26, 0x01	; 1

/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
   if(isEmpty(QCount)) {
    15a6:	89 2b       	or	r24, r25
    15a8:	01 f1       	breq	.+64     	; 0x15ea <dequeue+0x4e>
	   return NULL;
   }

   volatile PD *result = (Queue[(*QCount)-1]);
    15aa:	ed 91       	ld	r30, X+
    15ac:	fc 91       	ld	r31, X
    15ae:	11 97       	sbiw	r26, 0x01	; 1
    15b0:	e1 50       	subi	r30, 0x01	; 1
    15b2:	f0 48       	sbci	r31, 0x80	; 128
    15b4:	ee 0f       	add	r30, r30
    15b6:	ff 1f       	adc	r31, r31
    15b8:	e4 0f       	add	r30, r20
    15ba:	f5 1f       	adc	r31, r21
    15bc:	80 81       	ld	r24, Z
    15be:	91 81       	ldd	r25, Z+1	; 0x01
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
    15c0:	2d 91       	ld	r18, X+
    15c2:	3c 91       	ld	r19, X
    15c4:	11 97       	sbiw	r26, 0x01	; 1
    15c6:	f9 01       	movw	r30, r18
    15c8:	e1 50       	subi	r30, 0x01	; 1
    15ca:	f0 48       	sbci	r31, 0x80	; 128
    15cc:	ee 0f       	add	r30, r30
    15ce:	ff 1f       	adc	r31, r31
    15d0:	e4 0f       	add	r30, r20
    15d2:	f5 1f       	adc	r31, r21
    15d4:	11 82       	std	Z+1, r1	; 0x01
    15d6:	10 82       	st	Z, r1
   (*QCount)--;
    15d8:	2d 91       	ld	r18, X+
    15da:	3c 91       	ld	r19, X
    15dc:	11 97       	sbiw	r26, 0x01	; 1
    15de:	21 50       	subi	r18, 0x01	; 1
    15e0:	31 09       	sbc	r19, r1
    15e2:	11 96       	adiw	r26, 0x01	; 1
    15e4:	3c 93       	st	X, r19
    15e6:	2e 93       	st	-X, r18

   return result;
    15e8:	08 95       	ret
/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
   if(isEmpty(QCount)) {
	   return NULL;
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
   volatile PD *result = (Queue[(*QCount)-1]);
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
   (*QCount)--;

   return result;
}
    15ee:	08 95       	ret

000015f0 <enqueuePeriodic>:

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    15f0:	cf 92       	push	r12
    15f2:	df 92       	push	r13
    15f4:	ef 92       	push	r14
    15f6:	ff 92       	push	r15
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1602:	ea 01       	movw	r28, r20
    1604:	28 81       	ld	r18, Y
    1606:	39 81       	ldd	r19, Y+1	; 0x01

   return result;
}

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
	if(isFull(QCount)) {
    1608:	2f 30       	cpi	r18, 0x0F	; 15
    160a:	31 05       	cpc	r19, r1
    160c:	09 f4       	brne	.+2      	; 0x1610 <enqueuePeriodic+0x20>
    160e:	4a c0       	rjmp	.+148    	; 0x16a4 <enqueuePeriodic+0xb4>
		return;
	}

	int i = (*QCount) - 1;
    1610:	28 81       	ld	r18, Y
    1612:	39 81       	ldd	r19, Y+1	; 0x01
    1614:	21 50       	subi	r18, 0x01	; 1
    1616:	31 09       	sbc	r19, r1

	volatile PD *new = *p;
    1618:	fc 01       	movw	r30, r24
    161a:	00 81       	ld	r16, Z
    161c:	11 81       	ldd	r17, Z+1	; 0x01

	volatile PD *temp = Queue[i];
    161e:	f9 01       	movw	r30, r18
    1620:	ee 0f       	add	r30, r30
    1622:	ff 1f       	adc	r31, r31
    1624:	db 01       	movw	r26, r22
    1626:	ae 0f       	add	r26, r30
    1628:	bf 1f       	adc	r27, r31
    162a:	4d 91       	ld	r20, X+
    162c:	5c 91       	ld	r21, X

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    162e:	33 23       	and	r19, r19
    1630:	3c f1       	brlt	.+78     	; 0x1680 <enqueuePeriodic+0x90>
    1632:	d8 01       	movw	r26, r16
    1634:	aa 5e       	subi	r26, 0xEA	; 234
    1636:	be 4f       	sbci	r27, 0xFE	; 254
    1638:	ed 90       	ld	r14, X+
    163a:	fc 90       	ld	r15, X
    163c:	da 01       	movw	r26, r20
    163e:	aa 5e       	subi	r26, 0xEA	; 234
    1640:	be 4f       	sbci	r27, 0xFE	; 254
    1642:	4d 91       	ld	r20, X+
    1644:	5c 91       	ld	r21, X
    1646:	e4 16       	cp	r14, r20
    1648:	f5 06       	cpc	r15, r21
    164a:	d4 f0       	brlt	.+52     	; 0x1680 <enqueuePeriodic+0x90>
    164c:	e6 0f       	add	r30, r22
    164e:	f7 1f       	adc	r31, r23
    1650:	0a 5e       	subi	r16, 0xEA	; 234
    1652:	1e 4f       	sbci	r17, 0xFE	; 254
		Queue[i+1] = Queue[i];
    1654:	a0 81       	ld	r26, Z
    1656:	b1 81       	ldd	r27, Z+1	; 0x01
    1658:	b3 83       	std	Z+3, r27	; 0x03
    165a:	a2 83       	std	Z+2, r26	; 0x02
		i--;
    165c:	21 50       	subi	r18, 0x01	; 1
    165e:	31 09       	sbc	r19, r1
		temp = Queue[i];
    1660:	b2 91       	ld	r27, -Z
    1662:	a2 91       	ld	r26, -Z

	volatile PD *new = *p;

	volatile PD *temp = Queue[i];

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    1664:	2f 3f       	cpi	r18, 0xFF	; 255
    1666:	4f ef       	ldi	r20, 0xFF	; 255
    1668:	34 07       	cpc	r19, r20
    166a:	51 f0       	breq	.+20     	; 0x1680 <enqueuePeriodic+0x90>
    166c:	e8 01       	movw	r28, r16
    166e:	e8 80       	ld	r14, Y
    1670:	f9 80       	ldd	r15, Y+1	; 0x01
    1672:	aa 5e       	subi	r26, 0xEA	; 234
    1674:	be 4f       	sbci	r27, 0xFE	; 254
    1676:	4d 91       	ld	r20, X+
    1678:	5c 91       	ld	r21, X
    167a:	e4 16       	cp	r14, r20
    167c:	f5 06       	cpc	r15, r21
    167e:	54 f7       	brge	.-44     	; 0x1654 <enqueuePeriodic+0x64>
		Queue[i+1] = Queue[i];
		i--;
		temp = Queue[i];
	}

	Queue[i+1] = *p;
    1680:	fc 01       	movw	r30, r24
    1682:	80 81       	ld	r24, Z
    1684:	91 81       	ldd	r25, Z+1	; 0x01
    1686:	2f 5f       	subi	r18, 0xFF	; 255
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	22 0f       	add	r18, r18
    168c:	33 1f       	adc	r19, r19
    168e:	fb 01       	movw	r30, r22
    1690:	e2 0f       	add	r30, r18
    1692:	f3 1f       	adc	r31, r19
    1694:	91 83       	std	Z+1, r25	; 0x01
    1696:	80 83       	st	Z, r24
	(*QCount)++;
    1698:	e6 01       	movw	r28, r12
    169a:	88 81       	ld	r24, Y
    169c:	99 81       	ldd	r25, Y+1	; 0x01
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	99 83       	std	Y+1, r25	; 0x01
    16a2:	88 83       	st	Y, r24
}
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	ff 90       	pop	r15
    16ae:	ef 90       	pop	r14
    16b0:	df 90       	pop	r13
    16b2:	cf 90       	pop	r12
    16b4:	08 95       	ret

000016b6 <peek>:

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    16b6:	fb 01       	movw	r30, r22
    16b8:	20 81       	ld	r18, Z
    16ba:	31 81       	ldd	r19, Z+1	; 0x01
	Queue[i+1] = *p;
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
    16bc:	23 2b       	or	r18, r19
    16be:	61 f0       	breq	.+24     	; 0x16d8 <peek+0x22>
		return NULL;
	}
	volatile PD *result = (Queue[(*QCount)-1]);
    16c0:	20 81       	ld	r18, Z
    16c2:	31 81       	ldd	r19, Z+1	; 0x01
    16c4:	f9 01       	movw	r30, r18
    16c6:	e1 50       	subi	r30, 0x01	; 1
    16c8:	f0 48       	sbci	r31, 0x80	; 128
    16ca:	ee 0f       	add	r30, r30
    16cc:	ff 1f       	adc	r31, r31
    16ce:	e8 0f       	add	r30, r24
    16d0:	f9 1f       	adc	r31, r25
    16d2:	80 81       	ld	r24, Z
    16d4:	91 81       	ldd	r25, Z+1	; 0x01
	return result;
    16d6:	08 95       	ret
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
		return NULL;
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
	}
	volatile PD *result = (Queue[(*QCount)-1]);
	return result;
    16dc:	08 95       	ret

000016de <__tablejump2__>:
    16de:	ee 0f       	add	r30, r30
    16e0:	ff 1f       	adc	r31, r31
    16e2:	88 1f       	adc	r24, r24
    16e4:	8b bf       	out	0x3b, r24	; 59
    16e6:	07 90       	elpm	r0, Z+
    16e8:	f6 91       	elpm	r31, Z
    16ea:	e0 2d       	mov	r30, r0
    16ec:	19 94       	eijmp

000016ee <_exit>:
    16ee:	f8 94       	cli

000016f0 <__stop_program>:
    16f0:	ff cf       	rjmp	.-2      	; 0x16f0 <__stop_program>
