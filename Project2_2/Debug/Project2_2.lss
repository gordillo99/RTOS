
Project2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800200  0000184c  000018e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000184c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001524  008002b2  008002b2  00001992  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001992  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00001a30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000277d  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001357  00000000  00000000  0000438d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010c6  00000000  00000000  000056e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  000067ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a18  00000000  00000000  00006c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013ab  00000000  00000000  0000769c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00008a47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
       2:	00 00       	nop
       4:	97 c0       	rjmp	.+302    	; 0x134 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c0       	rjmp	.+298    	; 0x134 <__bad_interrupt>
       a:	00 00       	nop
       c:	93 c0       	rjmp	.+294    	; 0x134 <__bad_interrupt>
       e:	00 00       	nop
      10:	91 c0       	rjmp	.+290    	; 0x134 <__bad_interrupt>
      12:	00 00       	nop
      14:	8f c0       	rjmp	.+286    	; 0x134 <__bad_interrupt>
      16:	00 00       	nop
      18:	8d c0       	rjmp	.+282    	; 0x134 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c0       	rjmp	.+278    	; 0x134 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c0       	rjmp	.+274    	; 0x134 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c0       	rjmp	.+270    	; 0x134 <__bad_interrupt>
      26:	00 00       	nop
      28:	85 c0       	rjmp	.+266    	; 0x134 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	83 c0       	rjmp	.+262    	; 0x134 <__bad_interrupt>
      2e:	00 00       	nop
      30:	81 c0       	rjmp	.+258    	; 0x134 <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c0       	rjmp	.+254    	; 0x134 <__bad_interrupt>
      36:	00 00       	nop
      38:	7d c0       	rjmp	.+250    	; 0x134 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7b c0       	rjmp	.+246    	; 0x134 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c0       	rjmp	.+242    	; 0x134 <__bad_interrupt>
      42:	00 00       	nop
      44:	05 c4       	rjmp	.+2058   	; 0x850 <__vector_17>
      46:	00 00       	nop
      48:	75 c0       	rjmp	.+234    	; 0x134 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c0       	rjmp	.+230    	; 0x134 <__bad_interrupt>
      4e:	00 00       	nop
      50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
      52:	00 00       	nop
      54:	6f c0       	rjmp	.+222    	; 0x134 <__bad_interrupt>
      56:	00 00       	nop
      58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c0       	rjmp	.+214    	; 0x134 <__bad_interrupt>
      5e:	00 00       	nop
      60:	69 c0       	rjmp	.+210    	; 0x134 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c0       	rjmp	.+206    	; 0x134 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c0       	rjmp	.+202    	; 0x134 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c0       	rjmp	.+198    	; 0x134 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c0       	rjmp	.+194    	; 0x134 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c0       	rjmp	.+190    	; 0x134 <__bad_interrupt>
      76:	00 00       	nop
      78:	5d c0       	rjmp	.+186    	; 0x134 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5b c0       	rjmp	.+182    	; 0x134 <__bad_interrupt>
      7e:	00 00       	nop
      80:	39 c4       	rjmp	.+2162   	; 0x8f4 <__vector_32>
      82:	00 00       	nop
      84:	57 c0       	rjmp	.+174    	; 0x134 <__bad_interrupt>
      86:	00 00       	nop
      88:	55 c0       	rjmp	.+170    	; 0x134 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	53 c0       	rjmp	.+166    	; 0x134 <__bad_interrupt>
      8e:	00 00       	nop
      90:	51 c0       	rjmp	.+162    	; 0x134 <__bad_interrupt>
      92:	00 00       	nop
      94:	4f c0       	rjmp	.+158    	; 0x134 <__bad_interrupt>
      96:	00 00       	nop
      98:	4d c0       	rjmp	.+154    	; 0x134 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4b c0       	rjmp	.+150    	; 0x134 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	49 c0       	rjmp	.+146    	; 0x134 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	47 c0       	rjmp	.+142    	; 0x134 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	45 c0       	rjmp	.+138    	; 0x134 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	43 c0       	rjmp	.+134    	; 0x134 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	41 c0       	rjmp	.+130    	; 0x134 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3f c0       	rjmp	.+126    	; 0x134 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3d c0       	rjmp	.+122    	; 0x134 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3b c0       	rjmp	.+118    	; 0x134 <__bad_interrupt>
      be:	00 00       	nop
      c0:	39 c0       	rjmp	.+114    	; 0x134 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	37 c0       	rjmp	.+110    	; 0x134 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	35 c0       	rjmp	.+106    	; 0x134 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 c0       	rjmp	.+102    	; 0x134 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	31 c0       	rjmp	.+98     	; 0x134 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2f c0       	rjmp	.+94     	; 0x134 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2d c0       	rjmp	.+90     	; 0x134 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2b c0       	rjmp	.+86     	; 0x134 <__bad_interrupt>
      de:	00 00       	nop
      e0:	29 c0       	rjmp	.+82     	; 0x134 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	1a 07       	cpc	r17, r26
      e6:	32 07       	cpc	r19, r18
      e8:	62 07       	cpc	r22, r18
      ea:	49 07       	cpc	r20, r25
      ec:	79 07       	cpc	r23, r25
      ee:	ac 07       	cpc	r26, r28
      f0:	a8 07       	cpc	r26, r24
      f2:	aa 07       	cpc	r26, r26

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d1 e2       	ldi	r29, 0x21	; 33
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0c bf       	out	0x3c, r16	; 60

00000104 <__do_copy_data>:
     104:	12 e0       	ldi	r17, 0x02	; 2
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b2 e0       	ldi	r27, 0x02	; 2
     10a:	ec e4       	ldi	r30, 0x4C	; 76
     10c:	f8 e1       	ldi	r31, 0x18	; 24
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	0b bf       	out	0x3b, r16	; 59
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
     114:	07 90       	elpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	a2 3b       	cpi	r26, 0xB2	; 178
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>

0000011e <__do_clear_bss>:
     11e:	27 e1       	ldi	r18, 0x17	; 23
     120:	a2 eb       	ldi	r26, 0xB2	; 178
     122:	b2 e0       	ldi	r27, 0x02	; 2
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	a6 3d       	cpi	r26, 0xD6	; 214
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>
     12e:	2d d7       	rcall	.+3674   	; 0xf8a <main>
     130:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <_exit>

00000134 <__bad_interrupt>:
     134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     136:	0f 92       	push	r0
     138:	1f 92       	push	r1
     13a:	2f 92       	push	r2
     13c:	3f 92       	push	r3
     13e:	4f 92       	push	r4
     140:	5f 92       	push	r5
     142:	6f 92       	push	r6
     144:	7f 92       	push	r7
     146:	8f 92       	push	r8
     148:	9f 92       	push	r9
     14a:	af 92       	push	r10
     14c:	bf 92       	push	r11
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	2f 93       	push	r18
     15c:	3f 93       	push	r19
     15e:	4f 93       	push	r20
     160:	5f 93       	push	r21
     162:	6f 93       	push	r22
     164:	7f 93       	push	r23
     166:	8f 93       	push	r24
     168:	9f 93       	push	r25
     16a:	af 93       	push	r26
     16c:	bf 93       	push	r27
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	ef 93       	push	r30
     174:	ff 93       	push	r31
     176:	0f b7       	in	r16, 0x3f	; 63
     178:	0f 93       	push	r16
     17a:	fc b7       	in	r31, 0x3c	; 60
     17c:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     17e:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     180:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     182:	e0 93 b4 17 	sts	0x17B4, r30	; 0x8017b4 <KernelSp>
        sts  KernelSp+1, r31
     186:	f0 93 b5 17 	sts	0x17B5, r31	; 0x8017b5 <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     18a:	e0 91 92 17 	lds	r30, 0x1792	; 0x801792 <CurrentSp>
        lds  r31, CurrentSp+1
     18e:	f0 91 93 17 	lds	r31, 0x1793	; 0x801793 <CurrentSp+0x1>
        out  SPL, r30
     192:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     194:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     196:	ff 91       	pop	r31
     198:	fc bf       	out	0x3c, r31	; 60
     19a:	0f 91       	pop	r16
     19c:	0f bf       	out	0x3f, r16	; 63
     19e:	ff 91       	pop	r31
     1a0:	ef 91       	pop	r30
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	bf 91       	pop	r27
     1a8:	af 91       	pop	r26
     1aa:	9f 91       	pop	r25
     1ac:	8f 91       	pop	r24
     1ae:	7f 91       	pop	r23
     1b0:	6f 91       	pop	r22
     1b2:	5f 91       	pop	r21
     1b4:	4f 91       	pop	r20
     1b6:	3f 91       	pop	r19
     1b8:	2f 91       	pop	r18
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	ff 90       	pop	r15
     1c0:	ef 90       	pop	r14
     1c2:	df 90       	pop	r13
     1c4:	cf 90       	pop	r12
     1c6:	bf 90       	pop	r11
     1c8:	af 90       	pop	r10
     1ca:	9f 90       	pop	r9
     1cc:	8f 90       	pop	r8
     1ce:	7f 90       	pop	r7
     1d0:	6f 90       	pop	r6
     1d2:	5f 90       	pop	r5
     1d4:	4f 90       	pop	r4
     1d6:	3f 90       	pop	r3
     1d8:	2f 90       	pop	r2
     1da:	1f 90       	pop	r1
     1dc:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1de:	18 95       	reti

000001e0 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1e0:	0f 92       	push	r0
     1e2:	1f 92       	push	r1
     1e4:	2f 92       	push	r2
     1e6:	3f 92       	push	r3
     1e8:	4f 92       	push	r4
     1ea:	5f 92       	push	r5
     1ec:	6f 92       	push	r6
     1ee:	7f 92       	push	r7
     1f0:	8f 92       	push	r8
     1f2:	9f 92       	push	r9
     1f4:	af 92       	push	r10
     1f6:	bf 92       	push	r11
     1f8:	cf 92       	push	r12
     1fa:	df 92       	push	r13
     1fc:	ef 92       	push	r14
     1fe:	ff 92       	push	r15
     200:	0f 93       	push	r16
     202:	1f 93       	push	r17
     204:	2f 93       	push	r18
     206:	3f 93       	push	r19
     208:	4f 93       	push	r20
     20a:	5f 93       	push	r21
     20c:	6f 93       	push	r22
     20e:	7f 93       	push	r23
     210:	8f 93       	push	r24
     212:	9f 93       	push	r25
     214:	af 93       	push	r26
     216:	bf 93       	push	r27
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31
     220:	0f b7       	in	r16, 0x3f	; 63
     222:	0f 93       	push	r16
     224:	fc b7       	in	r31, 0x3c	; 60
     226:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     228:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     22a:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     22c:	e0 93 92 17 	sts	0x1792, r30	; 0x801792 <CurrentSp>
        sts  CurrentSp+1, r31
     230:	f0 93 93 17 	sts	0x1793, r31	; 0x801793 <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     234:	e0 91 b4 17 	lds	r30, 0x17B4	; 0x8017b4 <KernelSp>
        lds  r31, KernelSp+1
     238:	f0 91 b5 17 	lds	r31, 0x17B5	; 0x8017b5 <KernelSp+0x1>
        out  SPL, r30
     23c:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     23e:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     240:	ff 91       	pop	r31
     242:	fc bf       	out	0x3c, r31	; 60
     244:	0f 91       	pop	r16
     246:	0f bf       	out	0x3f, r16	; 63
     248:	ff 91       	pop	r31
     24a:	ef 91       	pop	r30
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	bf 91       	pop	r27
     252:	af 91       	pop	r26
     254:	9f 91       	pop	r25
     256:	8f 91       	pop	r24
     258:	7f 91       	pop	r23
     25a:	6f 91       	pop	r22
     25c:	5f 91       	pop	r21
     25e:	4f 91       	pop	r20
     260:	3f 91       	pop	r19
     262:	2f 91       	pop	r18
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	ff 90       	pop	r15
     26a:	ef 90       	pop	r14
     26c:	df 90       	pop	r13
     26e:	cf 90       	pop	r12
     270:	bf 90       	pop	r11
     272:	af 90       	pop	r10
     274:	9f 90       	pop	r9
     276:	8f 90       	pop	r8
     278:	7f 90       	pop	r7
     27a:	6f 90       	pop	r6
     27c:	5f 90       	pop	r5
     27e:	4f 90       	pop	r4
     280:	3f 90       	pop	r3
     282:	2f 90       	pop	r2
     284:	1f 90       	pop	r1
     286:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     288:	08 95       	ret

0000028a <a_main>:
    //Task_Create(ASDF1, PERIODIC, 0, 0, 2, 10);
    //Task_Create(ASDF2, PERIODIC, 0, 4, 1, 10);
	//Task_Create(ASDF3, PERIODIC, 0, 8, 1, 10);
	//Task_Create(ASDF4, PERIODIC, 0, -1, -1, -1);
	//Task_Create(ASDF5, RR, 0, -1, -1, -1);
	Task_Create_System(test_too_many_tasks,0);
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	84 ea       	ldi	r24, 0xA4	; 164
     290:	98 e0       	ldi	r25, 0x08	; 8
     292:	09 d2       	rcall	.+1042   	; 0x6a6 <Task_Create_System>
    // Kill the initialization task
    Task_Terminate();
     294:	52 c0       	rjmp	.+164    	; 0x33a <Task_Terminate>
     296:	08 95       	ret

00000298 <idle>:
	if (Cp->priority == PERIODIC) OS_Abort(); // periodic tasks are not allowed to use csp 
	Cp->request = RECEIVE;
	Cp->receiverChannel = ch;
	Enter_Kernel();
	return Cp->val;
}
     298:	ff cf       	rjmp	.-2      	; 0x298 <idle>

0000029a <Dispatch>:
     29a:	66 e4       	ldi	r22, 0x46	; 70
     29c:	75 e0       	ldi	r23, 0x05	; 5
     29e:	82 e7       	ldi	r24, 0x72	; 114
     2a0:	97 e1       	ldi	r25, 0x17	; 23
     2a2:	af d6       	rcall	.+3422   	; 0x1002 <dequeue>
     2a4:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <Cp+0x1>
     2a8:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <Cp>
     2ac:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <PeriodicCount>
     2b0:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <PeriodicCount+0x1>
     2b4:	89 2b       	or	r24, r25
     2b6:	d9 f0       	breq	.+54     	; 0x2ee <Dispatch+0x54>
     2b8:	64 e4       	ldi	r22, 0x44	; 68
     2ba:	75 e0       	ldi	r23, 0x05	; 5
     2bc:	84 e9       	ldi	r24, 0x94	; 148
     2be:	97 e1       	ldi	r25, 0x17	; 23
     2c0:	2d d7       	rcall	.+3674   	; 0x111c <peek>
     2c2:	fc 01       	movw	r30, r24
     2c4:	ea 5e       	subi	r30, 0xEA	; 234
     2c6:	fe 4f       	sbci	r31, 0xFE	; 254
     2c8:	80 81       	ld	r24, Z
     2ca:	91 81       	ldd	r25, Z+1	; 0x01
     2cc:	89 2b       	or	r24, r25
     2ce:	79 f4       	brne	.+30     	; 0x2ee <Dispatch+0x54>
     2d0:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <Cp>
     2d4:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <Cp+0x1>
     2d8:	89 2b       	or	r24, r25
     2da:	01 f5       	brne	.+64     	; 0x31c <Dispatch+0x82>
     2dc:	64 e4       	ldi	r22, 0x44	; 68
     2de:	75 e0       	ldi	r23, 0x05	; 5
     2e0:	84 e9       	ldi	r24, 0x94	; 148
     2e2:	97 e1       	ldi	r25, 0x17	; 23
     2e4:	8e d6       	rcall	.+3356   	; 0x1002 <dequeue>
     2e6:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <Cp+0x1>
     2ea:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <Cp>
     2ee:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <Cp>
     2f2:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <Cp+0x1>
     2f6:	89 2b       	or	r24, r25
     2f8:	89 f4       	brne	.+34     	; 0x31c <Dispatch+0x82>
     2fa:	62 e4       	ldi	r22, 0x42	; 66
     2fc:	75 e0       	ldi	r23, 0x05	; 5
     2fe:	86 eb       	ldi	r24, 0xB6	; 182
     300:	97 e1       	ldi	r25, 0x17	; 23
     302:	7f d6       	rcall	.+3326   	; 0x1002 <dequeue>
     304:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <Cp+0x1>
     308:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <Cp>
     30c:	89 2b       	or	r24, r25
     30e:	31 f4       	brne	.+12     	; 0x31c <Dispatch+0x82>
     310:	82 e5       	ldi	r24, 0x52	; 82
     312:	95 e0       	ldi	r25, 0x05	; 5
     314:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <Cp+0x1>
     318:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <Cp>
     31c:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <Cp>
     320:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <Cp+0x1>
     324:	82 81       	ldd	r24, Z+2	; 0x02
     326:	93 81       	ldd	r25, Z+3	; 0x03
     328:	90 93 93 17 	sts	0x1793, r25	; 0x801793 <CurrentSp+0x1>
     32c:	80 93 92 17 	sts	0x1792, r24	; 0x801792 <CurrentSp>
     330:	ec 5f       	subi	r30, 0xFC	; 252
     332:	fe 4f       	sbci	r31, 0xFE	; 254
     334:	82 e0       	ldi	r24, 0x02	; 2
     336:	80 83       	st	Z, r24
     338:	08 95       	ret

0000033a <Task_Terminate>:
     33a:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <KernelActive>
     33e:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <KernelActive+0x1>
     342:	89 2b       	or	r24, r25
     344:	51 f0       	breq	.+20     	; 0x35a <Task_Terminate+0x20>
     346:	f8 94       	cli
     348:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <Cp>
     34c:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <Cp+0x1>
     350:	e5 5f       	subi	r30, 0xF5	; 245
     352:	fe 4f       	sbci	r31, 0xFE	; 254
     354:	86 e0       	ldi	r24, 0x06	; 6
     356:	80 83       	st	Z, r24
     358:	43 cf       	rjmp	.-378    	; 0x1e0 <Enter_Kernel>
     35a:	08 95       	ret

0000035c <Kernel_Create_Task_At>:
     35c:	8f 92       	push	r8
     35e:	9f 92       	push	r9
     360:	af 92       	push	r10
     362:	bf 92       	push	r11
     364:	cf 92       	push	r12
     366:	df 92       	push	r13
     368:	ef 92       	push	r14
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	1f 92       	push	r1
     376:	1f 92       	push	r1
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	9a 83       	std	Y+2, r25	; 0x02
     37e:	89 83       	std	Y+1, r24	; 0x01
     380:	5c 01       	movw	r10, r24
     382:	a4 e0       	ldi	r26, 0x04	; 4
     384:	aa 0e       	add	r10, r26
     386:	b1 1c       	adc	r11, r1
     388:	81 2c       	mov	r8, r1
     38a:	99 24       	eor	r9, r9
     38c:	93 94       	inc	r9
     38e:	f5 01       	movw	r30, r10
     390:	d4 01       	movw	r26, r8
     392:	11 92       	st	Z+, r1
     394:	11 97       	sbiw	r26, 0x01	; 1
     396:	e9 f7       	brne	.-6      	; 0x392 <Kernel_Create_Task_At+0x36>
     398:	dc 01       	movw	r26, r24
     39a:	ad 5f       	subi	r26, 0xFD	; 253
     39c:	be 4f       	sbci	r27, 0xFE	; 254
     39e:	ed e9       	ldi	r30, 0x9D	; 157
     3a0:	f1 e0       	ldi	r31, 0x01	; 1
     3a2:	ec 93       	st	X, r30
     3a4:	11 97       	sbiw	r26, 0x01	; 1
     3a6:	fc 93       	st	X, r31
     3a8:	fc 01       	movw	r30, r24
     3aa:	ef 5f       	subi	r30, 0xFF	; 255
     3ac:	fe 4f       	sbci	r31, 0xFE	; 254
     3ae:	60 83       	st	Z, r22
     3b0:	31 97       	sbiw	r30, 0x01	; 1
     3b2:	70 83       	st	Z, r23
     3b4:	31 97       	sbiw	r30, 0x01	; 1
     3b6:	10 82       	st	Z, r1
     3b8:	b3 97       	sbiw	r30, 0x23	; 35
     3ba:	dc 01       	movw	r26, r24
     3bc:	13 96       	adiw	r26, 0x03	; 3
     3be:	fc 93       	st	X, r31
     3c0:	ee 93       	st	-X, r30
     3c2:	12 97       	sbiw	r26, 0x02	; 2
     3c4:	bd 96       	adiw	r30, 0x2d	; 45
     3c6:	71 83       	std	Z+1, r23	; 0x01
     3c8:	60 83       	st	Z, r22
     3ca:	32 96       	adiw	r30, 0x02	; 2
     3cc:	10 82       	st	Z, r1
     3ce:	60 91 4a 05 	lds	r22, 0x054A	; 0x80054a <pCount>
     3d2:	70 91 4b 05 	lds	r23, 0x054B	; 0x80054b <pCount+0x1>
     3d6:	fc 01       	movw	r30, r24
     3d8:	71 83       	std	Z+1, r23	; 0x01
     3da:	60 83       	st	Z, r22
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	fc 01       	movw	r30, r24
     3e2:	eb 5f       	subi	r30, 0xFB	; 251
     3e4:	fe 4f       	sbci	r31, 0xFE	; 254
     3e6:	51 83       	std	Z+1, r21	; 0x01
     3e8:	40 83       	st	Z, r20
     3ea:	32 96       	adiw	r30, 0x02	; 2
     3ec:	31 83       	std	Z+1, r19	; 0x01
     3ee:	20 83       	st	Z, r18
     3f0:	3f 96       	adiw	r30, 0x0f	; 15
     3f2:	2f ef       	ldi	r18, 0xFF	; 255
     3f4:	3f ef       	ldi	r19, 0xFF	; 255
     3f6:	31 83       	std	Z+1, r19	; 0x01
     3f8:	20 83       	st	Z, r18
     3fa:	32 96       	adiw	r30, 0x02	; 2
     3fc:	11 82       	std	Z+1, r1	; 0x01
     3fe:	10 82       	st	Z, r1
     400:	34 97       	sbiw	r30, 0x04	; 4
     402:	11 83       	std	Z+1, r17	; 0x01
     404:	00 83       	st	Z, r16
     406:	34 97       	sbiw	r30, 0x04	; 4
     408:	d1 82       	std	Z+1, r13	; 0x01
     40a:	c0 82       	st	Z, r12
     40c:	32 96       	adiw	r30, 0x02	; 2
     40e:	f1 82       	std	Z+1, r15	; 0x01
     410:	e0 82       	st	Z, r14
     412:	20 91 4c 05 	lds	r18, 0x054C	; 0x80054c <Tasks>
     416:	30 91 4d 05 	lds	r19, 0x054D	; 0x80054d <Tasks+0x1>
     41a:	2f 5f       	subi	r18, 0xFF	; 255
     41c:	3f 4f       	sbci	r19, 0xFF	; 255
     41e:	30 93 4d 05 	sts	0x054D, r19	; 0x80054d <Tasks+0x1>
     422:	20 93 4c 05 	sts	0x054C, r18	; 0x80054c <Tasks>
     426:	20 91 4a 05 	lds	r18, 0x054A	; 0x80054a <pCount>
     42a:	30 91 4b 05 	lds	r19, 0x054B	; 0x80054b <pCount+0x1>
     42e:	2f 5f       	subi	r18, 0xFF	; 255
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	30 93 4b 05 	sts	0x054B, r19	; 0x80054b <pCount+0x1>
     436:	20 93 4a 05 	sts	0x054A, r18	; 0x80054a <pCount>
     43a:	3e 97       	sbiw	r30, 0x0e	; 14
     43c:	21 e0       	ldi	r18, 0x01	; 1
     43e:	20 83       	st	Z, r18
     440:	43 30       	cpi	r20, 0x03	; 3
     442:	51 05       	cpc	r21, r1
     444:	41 f4       	brne	.+16     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     446:	46 e4       	ldi	r20, 0x46	; 70
     448:	55 e0       	ldi	r21, 0x05	; 5
     44a:	62 e7       	ldi	r22, 0x72	; 114
     44c:	77 e1       	ldi	r23, 0x17	; 23
     44e:	ce 01       	movw	r24, r28
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	af d5       	rcall	.+2910   	; 0xfb2 <enqueue>
     454:	1a c0       	rjmp	.+52     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     456:	42 30       	cpi	r20, 0x02	; 2
     458:	51 05       	cpc	r21, r1
     45a:	69 f4       	brne	.+26     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     45c:	fc 01       	movw	r30, r24
     45e:	ea 5e       	subi	r30, 0xEA	; 234
     460:	fe 4f       	sbci	r31, 0xFE	; 254
     462:	11 83       	std	Z+1, r17	; 0x01
     464:	00 83       	st	Z, r16
     466:	44 e4       	ldi	r20, 0x44	; 68
     468:	55 e0       	ldi	r21, 0x05	; 5
     46a:	64 e9       	ldi	r22, 0x94	; 148
     46c:	77 e1       	ldi	r23, 0x17	; 23
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	f1 d5       	rcall	.+3042   	; 0x1056 <enqueuePeriodic>
     474:	0a c0       	rjmp	.+20     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     476:	41 30       	cpi	r20, 0x01	; 1
     478:	51 05       	cpc	r21, r1
     47a:	39 f4       	brne	.+14     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     47c:	42 e4       	ldi	r20, 0x42	; 66
     47e:	55 e0       	ldi	r21, 0x05	; 5
     480:	66 eb       	ldi	r22, 0xB6	; 182
     482:	77 e1       	ldi	r23, 0x17	; 23
     484:	ce 01       	movw	r24, r28
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	94 d5       	rcall	.+2856   	; 0xfb2 <enqueue>
     48a:	e9 81       	ldd	r30, Y+1	; 0x01
     48c:	fa 81       	ldd	r31, Y+2	; 0x02
     48e:	80 81       	ld	r24, Z
     490:	91 81       	ldd	r25, Z+1	; 0x01
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	df 90       	pop	r13
     4a4:	cf 90       	pop	r12
     4a6:	bf 90       	pop	r11
     4a8:	af 90       	pop	r10
     4aa:	9f 90       	pop	r9
     4ac:	8f 90       	pop	r8
     4ae:	08 95       	ret

000004b0 <Kernel_Create_Task>:
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	e9 01       	movw	r28, r18
     4c2:	20 91 4c 05 	lds	r18, 0x054C	; 0x80054c <Tasks>
     4c6:	30 91 4d 05 	lds	r19, 0x054D	; 0x80054d <Tasks+0x1>
     4ca:	20 31       	cpi	r18, 0x10	; 16
     4cc:	31 05       	cpc	r19, r1
     4ce:	41 f1       	breq	.+80     	; 0x520 <Kernel_Create_Task+0x70>
     4d0:	20 91 56 06 	lds	r18, 0x0656	; 0x800656 <Process+0x104>
     4d4:	22 23       	and	r18, r18
     4d6:	71 f0       	breq	.+28     	; 0x4f4 <Kernel_Create_Task+0x44>
     4d8:	a8 e7       	ldi	r26, 0x78	; 120
     4da:	b7 e0       	ldi	r27, 0x07	; 7
     4dc:	e1 e0       	ldi	r30, 0x01	; 1
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	3c 91       	ld	r19, X
     4e2:	33 23       	and	r19, r19
     4e4:	49 f0       	breq	.+18     	; 0x4f8 <Kernel_Create_Task+0x48>
     4e6:	31 96       	adiw	r30, 0x01	; 1
     4e8:	ae 5d       	subi	r26, 0xDE	; 222
     4ea:	be 4f       	sbci	r27, 0xFE	; 254
     4ec:	e0 31       	cpi	r30, 0x10	; 16
     4ee:	f1 05       	cpc	r31, r1
     4f0:	b9 f7       	brne	.-18     	; 0x4e0 <Kernel_Create_Task+0x30>
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <Kernel_Create_Task+0x48>
     4f4:	e0 e0       	ldi	r30, 0x00	; 0
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	67 01       	movw	r12, r14
     4fa:	78 01       	movw	r14, r16
     4fc:	8e 01       	movw	r16, r28
     4fe:	9a 01       	movw	r18, r20
     500:	ab 01       	movw	r20, r22
     502:	bc 01       	movw	r22, r24
     504:	82 e2       	ldi	r24, 0x22	; 34
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	e8 9f       	mul	r30, r24
     50a:	d0 01       	movw	r26, r0
     50c:	e9 9f       	mul	r30, r25
     50e:	b0 0d       	add	r27, r0
     510:	f8 9f       	mul	r31, r24
     512:	b0 0d       	add	r27, r0
     514:	11 24       	eor	r1, r1
     516:	cd 01       	movw	r24, r26
     518:	8e 5a       	subi	r24, 0xAE	; 174
     51a:	9a 4f       	sbci	r25, 0xFA	; 250
     51c:	1f df       	rcall	.-450    	; 0x35c <Kernel_Create_Task_At>
     51e:	02 c0       	rjmp	.+4      	; 0x524 <Kernel_Create_Task+0x74>
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	ff 90       	pop	r15
     52e:	ef 90       	pop	r14
     530:	df 90       	pop	r13
     532:	cf 90       	pop	r12
     534:	08 95       	ret

00000536 <OS_Init>:
     536:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <Tasks+0x1>
     53a:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <Tasks>
     53e:	10 92 4f 05 	sts	0x054F, r1	; 0x80054f <KernelActive+0x1>
     542:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <KernelActive>
     546:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <pCount+0x1>
     54a:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <pCount>
     54e:	e2 e5       	ldi	r30, 0x52	; 82
     550:	f5 e0       	ldi	r31, 0x05	; 5
     552:	22 e7       	ldi	r18, 0x72	; 114
     554:	37 e1       	ldi	r19, 0x17	; 23
     556:	82 e2       	ldi	r24, 0x22	; 34
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	df 01       	movw	r26, r30
     55c:	ac 01       	movw	r20, r24
     55e:	1d 92       	st	X+, r1
     560:	41 50       	subi	r20, 0x01	; 1
     562:	50 40       	sbci	r21, 0x00	; 0
     564:	e1 f7       	brne	.-8      	; 0x55e <OS_Init+0x28>
     566:	df 01       	movw	r26, r30
     568:	ac 5f       	subi	r26, 0xFC	; 252
     56a:	be 4f       	sbci	r27, 0xFE	; 254
     56c:	1c 92       	st	X, r1
     56e:	11 82       	std	Z+1, r1	; 0x01
     570:	10 82       	st	Z, r1
     572:	ee 5d       	subi	r30, 0xDE	; 222
     574:	fe 4f       	sbci	r31, 0xFE	; 254
     576:	e2 17       	cp	r30, r18
     578:	f3 07       	cpc	r31, r19
     57a:	79 f7       	brne	.-34     	; 0x55a <OS_Init+0x24>
     57c:	a2 eb       	ldi	r26, 0xB2	; 178
     57e:	b2 e0       	ldi	r27, 0x02	; 2
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	29 e2       	ldi	r18, 0x29	; 41
     586:	fd 01       	movw	r30, r26
     588:	32 2f       	mov	r19, r18
     58a:	11 92       	st	Z+, r1
     58c:	3a 95       	dec	r19
     58e:	e9 f7       	brne	.-6      	; 0x58a <OS_Init+0x54>
     590:	28 9f       	mul	r18, r24
     592:	f0 01       	movw	r30, r0
     594:	29 9f       	mul	r18, r25
     596:	f0 0d       	add	r31, r0
     598:	11 24       	eor	r1, r1
     59a:	ee 54       	subi	r30, 0x4E	; 78
     59c:	fd 4f       	sbci	r31, 0xFD	; 253
     59e:	16 a2       	std	Z+38, r1	; 0x26
     5a0:	01 96       	adiw	r24, 0x01	; 1
     5a2:	91 83       	std	Z+1, r25	; 0x01
     5a4:	80 83       	st	Z, r24
     5a6:	99 96       	adiw	r26, 0x29	; 41
     5a8:	80 31       	cpi	r24, 0x10	; 16
     5aa:	91 05       	cpc	r25, r1
     5ac:	61 f7       	brne	.-40     	; 0x586 <OS_Init+0x50>
     5ae:	08 95       	ret

000005b0 <OS_Abort>:
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 24 0c 	call	0x1848	; 0x1848 <_exit>

000005b8 <Task_Create>:
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	e0 91 4e 05 	lds	r30, 0x054E	; 0x80054e <KernelActive>
     5c6:	f0 91 4f 05 	lds	r31, 0x054F	; 0x80054f <KernelActive+0x1>
     5ca:	ef 2b       	or	r30, r31
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <Task_Create+0x18>
     5ce:	5d c0       	rjmp	.+186    	; 0x68a <Task_Create+0xd2>
     5d0:	f8 94       	cli
     5d2:	63 30       	cpi	r22, 0x03	; 3
     5d4:	71 05       	cpc	r23, r1
     5d6:	49 f4       	brne	.+18     	; 0x5ea <Task_Create+0x32>
     5d8:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <Cp>
     5dc:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <Cp+0x1>
     5e0:	e5 5f       	subi	r30, 0xF5	; 245
     5e2:	fe 4f       	sbci	r31, 0xFE	; 254
     5e4:	a2 e0       	ldi	r26, 0x02	; 2
     5e6:	a0 83       	st	Z, r26
     5e8:	28 c0       	rjmp	.+80     	; 0x63a <Task_Create+0x82>
     5ea:	62 30       	cpi	r22, 0x02	; 2
     5ec:	71 05       	cpc	r23, r1
     5ee:	89 f4       	brne	.+34     	; 0x612 <Task_Create+0x5a>
     5f0:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <Cp>
     5f4:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <Cp+0x1>
     5f8:	df 01       	movw	r26, r30
     5fa:	a5 5f       	subi	r26, 0xF5	; 245
     5fc:	be 4f       	sbci	r27, 0xFE	; 254
     5fe:	c4 e0       	ldi	r28, 0x04	; 4
     600:	cc 93       	st	X, r28
     602:	ea 5e       	subi	r30, 0xEA	; 234
     604:	fe 4f       	sbci	r31, 0xFE	; 254
     606:	d9 01       	movw	r26, r18
     608:	ae 0d       	add	r26, r14
     60a:	bf 1d       	adc	r27, r15
     60c:	b1 83       	std	Z+1, r27	; 0x01
     60e:	a0 83       	st	Z, r26
     610:	14 c0       	rjmp	.+40     	; 0x63a <Task_Create+0x82>
     612:	61 30       	cpi	r22, 0x01	; 1
     614:	71 05       	cpc	r23, r1
     616:	49 f4       	brne	.+18     	; 0x62a <Task_Create+0x72>
     618:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <Cp>
     61c:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <Cp+0x1>
     620:	e5 5f       	subi	r30, 0xF5	; 245
     622:	fe 4f       	sbci	r31, 0xFE	; 254
     624:	a3 e0       	ldi	r26, 0x03	; 3
     626:	a0 83       	st	Z, r26
     628:	08 c0       	rjmp	.+16     	; 0x63a <Task_Create+0x82>
     62a:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <Cp>
     62e:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <Cp+0x1>
     632:	e5 5f       	subi	r30, 0xF5	; 245
     634:	fe 4f       	sbci	r31, 0xFE	; 254
     636:	a1 e0       	ldi	r26, 0x01	; 1
     638:	a0 83       	st	Z, r26
     63a:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <Cp>
     63e:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <Cp+0x1>
     642:	df 01       	movw	r26, r30
     644:	a7 5f       	subi	r26, 0xF7	; 247
     646:	be 4f       	sbci	r27, 0xFE	; 254
     648:	11 96       	adiw	r26, 0x01	; 1
     64a:	9c 93       	st	X, r25
     64c:	8e 93       	st	-X, r24
     64e:	14 97       	sbiw	r26, 0x04	; 4
     650:	11 96       	adiw	r26, 0x01	; 1
     652:	7c 93       	st	X, r23
     654:	6e 93       	st	-X, r22
     656:	12 96       	adiw	r26, 0x02	; 2
     658:	11 96       	adiw	r26, 0x01	; 1
     65a:	5c 93       	st	X, r21
     65c:	4e 93       	st	-X, r20
     65e:	1d 96       	adiw	r26, 0x0d	; 13
     660:	11 96       	adiw	r26, 0x01	; 1
     662:	3c 93       	st	X, r19
     664:	2e 93       	st	-X, r18
     666:	12 97       	sbiw	r26, 0x02	; 2
     668:	11 96       	adiw	r26, 0x01	; 1
     66a:	1c 93       	st	X, r17
     66c:	0e 93       	st	-X, r16
     66e:	e0 5f       	subi	r30, 0xF0	; 240
     670:	fe 4f       	sbci	r31, 0xFE	; 254
     672:	f1 82       	std	Z+1, r15	; 0x01
     674:	e0 82       	st	Z, r14
     676:	b4 dd       	rcall	.-1176   	; 0x1e0 <Enter_Kernel>
     678:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <Cp>
     67c:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <Cp+0x1>
     680:	e4 5f       	subi	r30, 0xF4	; 244
     682:	fe 4f       	sbci	r31, 0xFE	; 254
     684:	80 81       	ld	r24, Z
     686:	91 81       	ldd	r25, Z+1	; 0x01
     688:	08 c0       	rjmp	.+16     	; 0x69a <Task_Create+0xe2>
     68a:	ee 24       	eor	r14, r14
     68c:	ea 94       	dec	r14
     68e:	fe 2c       	mov	r15, r14
     690:	0f ef       	ldi	r16, 0xFF	; 255
     692:	1f ef       	ldi	r17, 0xFF	; 255
     694:	2f ef       	ldi	r18, 0xFF	; 255
     696:	3f ef       	ldi	r19, 0xFF	; 255
     698:	0b df       	rcall	.-490    	; 0x4b0 <Kernel_Create_Task>
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	ff 90       	pop	r15
     6a2:	ef 90       	pop	r14
     6a4:	08 95       	ret

000006a6 <Task_Create_System>:
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	ab 01       	movw	r20, r22
     6b0:	ee 24       	eor	r14, r14
     6b2:	ea 94       	dec	r14
     6b4:	fe 2c       	mov	r15, r14
     6b6:	0f ef       	ldi	r16, 0xFF	; 255
     6b8:	1f ef       	ldi	r17, 0xFF	; 255
     6ba:	2f ef       	ldi	r18, 0xFF	; 255
     6bc:	3f ef       	ldi	r19, 0xFF	; 255
     6be:	63 e0       	ldi	r22, 0x03	; 3
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	7a df       	rcall	.-268    	; 0x5b8 <Task_Create>
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	08 95       	ret

000006ce <Task_Create_Idle>:
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <KernelActive>
     6da:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <KernelActive+0x1>
     6de:	89 2b       	or	r24, r25
     6e0:	f1 f0       	breq	.+60     	; 0x71e <Task_Create_Idle+0x50>
     6e2:	f8 94       	cli
     6e4:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <Cp>
     6e8:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <Cp+0x1>
     6ec:	fc 01       	movw	r30, r24
     6ee:	e7 5f       	subi	r30, 0xF7	; 247
     6f0:	fe 4f       	sbci	r31, 0xFE	; 254
     6f2:	2c e4       	ldi	r18, 0x4C	; 76
     6f4:	31 e0       	ldi	r19, 0x01	; 1
     6f6:	31 83       	std	Z+1, r19	; 0x01
     6f8:	20 83       	st	Z, r18
     6fa:	34 97       	sbiw	r30, 0x04	; 4
     6fc:	24 e0       	ldi	r18, 0x04	; 4
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	31 83       	std	Z+1, r19	; 0x01
     702:	20 83       	st	Z, r18
     704:	32 96       	adiw	r30, 0x02	; 2
     706:	11 82       	std	Z+1, r1	; 0x01
     708:	10 82       	st	Z, r1
     70a:	6a dd       	rcall	.-1324   	; 0x1e0 <Enter_Kernel>
     70c:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <Cp>
     710:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <Cp+0x1>
     714:	e4 5f       	subi	r30, 0xF4	; 244
     716:	fe 4f       	sbci	r31, 0xFE	; 254
     718:	80 81       	ld	r24, Z
     71a:	91 81       	ldd	r25, Z+1	; 0x01
     71c:	0e c0       	rjmp	.+28     	; 0x73a <Task_Create_Idle+0x6c>
     71e:	ee 24       	eor	r14, r14
     720:	ea 94       	dec	r14
     722:	fe 2c       	mov	r15, r14
     724:	0f ef       	ldi	r16, 0xFF	; 255
     726:	1f ef       	ldi	r17, 0xFF	; 255
     728:	2f ef       	ldi	r18, 0xFF	; 255
     72a:	3f ef       	ldi	r19, 0xFF	; 255
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	64 e0       	ldi	r22, 0x04	; 4
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	8c e4       	ldi	r24, 0x4C	; 76
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	bb de       	rcall	.-650    	; 0x4b0 <Kernel_Create_Task>
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	08 95       	ret

00000744 <Run_Next>:
     744:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <KernelActive>
     748:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <KernelActive+0x1>
     74c:	89 2b       	or	r24, r25
     74e:	09 f4       	brne	.+2      	; 0x752 <Run_Next+0xe>
     750:	49 c0       	rjmp	.+146    	; 0x7e4 <Run_Next+0xa0>
     752:	f8 94       	cli
     754:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <Cp>
     758:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <Cp+0x1>
     75c:	fc 01       	movw	r30, r24
     75e:	eb 5f       	subi	r30, 0xFB	; 251
     760:	fe 4f       	sbci	r31, 0xFE	; 254
     762:	20 81       	ld	r18, Z
     764:	31 81       	ldd	r19, Z+1	; 0x01
     766:	23 30       	cpi	r18, 0x03	; 3
     768:	31 05       	cpc	r19, r1
     76a:	19 f4       	brne	.+6      	; 0x772 <Run_Next+0x2e>
     76c:	36 96       	adiw	r30, 0x06	; 6
     76e:	10 82       	st	Z, r1
     770:	38 c0       	rjmp	.+112    	; 0x7e2 <Run_Next+0x9e>
     772:	fc 01       	movw	r30, r24
     774:	eb 5f       	subi	r30, 0xFB	; 251
     776:	fe 4f       	sbci	r31, 0xFE	; 254
     778:	20 81       	ld	r18, Z
     77a:	31 81       	ldd	r19, Z+1	; 0x01
     77c:	22 30       	cpi	r18, 0x02	; 2
     77e:	31 05       	cpc	r19, r1
     780:	59 f5       	brne	.+86     	; 0x7d8 <Run_Next+0x94>
     782:	73 96       	adiw	r30, 0x13	; 19
     784:	40 81       	ld	r20, Z
     786:	51 81       	ldd	r21, Z+1	; 0x01
     788:	36 97       	sbiw	r30, 0x06	; 6
     78a:	20 81       	ld	r18, Z
     78c:	31 81       	ldd	r19, Z+1	; 0x01
     78e:	42 17       	cp	r20, r18
     790:	53 07       	cpc	r21, r19
     792:	39 f0       	breq	.+14     	; 0x7a2 <Run_Next+0x5e>
     794:	20 91 46 05 	lds	r18, 0x0546	; 0x800546 <SysCount>
     798:	30 91 47 05 	lds	r19, 0x0547	; 0x800547 <SysCount+0x1>
     79c:	12 16       	cp	r1, r18
     79e:	13 06       	cpc	r1, r19
     7a0:	b4 f4       	brge	.+44     	; 0x7ce <Run_Next+0x8a>
     7a2:	fc 01       	movw	r30, r24
     7a4:	e0 5f       	subi	r30, 0xF0	; 240
     7a6:	fe 4f       	sbci	r31, 0xFE	; 254
     7a8:	20 81       	ld	r18, Z
     7aa:	31 81       	ldd	r19, Z+1	; 0x01
     7ac:	38 96       	adiw	r30, 0x08	; 8
     7ae:	40 81       	ld	r20, Z
     7b0:	51 81       	ldd	r21, Z+1	; 0x01
     7b2:	24 1b       	sub	r18, r20
     7b4:	35 0b       	sbc	r19, r21
     7b6:	dc 01       	movw	r26, r24
     7b8:	aa 5e       	subi	r26, 0xEA	; 234
     7ba:	be 4f       	sbci	r27, 0xFE	; 254
     7bc:	11 96       	adiw	r26, 0x01	; 1
     7be:	3c 93       	st	X, r19
     7c0:	2e 93       	st	-X, r18
     7c2:	11 82       	std	Z+1, r1	; 0x01
     7c4:	10 82       	st	Z, r1
     7c6:	3d 97       	sbiw	r30, 0x0d	; 13
     7c8:	85 e0       	ldi	r24, 0x05	; 5
     7ca:	80 83       	st	Z, r24
     7cc:	0a c0       	rjmp	.+20     	; 0x7e2 <Run_Next+0x9e>
     7ce:	fc 01       	movw	r30, r24
     7d0:	e5 5f       	subi	r30, 0xF5	; 245
     7d2:	fe 4f       	sbci	r31, 0xFE	; 254
     7d4:	10 82       	st	Z, r1
     7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <Run_Next+0x9e>
     7d8:	fc 01       	movw	r30, r24
     7da:	e5 5f       	subi	r30, 0xF5	; 245
     7dc:	fe 4f       	sbci	r31, 0xFE	; 254
     7de:	85 e0       	ldi	r24, 0x05	; 5
     7e0:	80 83       	st	Z, r24
     7e2:	fe cc       	rjmp	.-1540   	; 0x1e0 <Enter_Kernel>
     7e4:	08 95       	ret

000007e6 <setup>:
     7e6:	f8 94       	cli
     7e8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     7ec:	e1 e8       	ldi	r30, 0x81	; 129
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	10 82       	st	Z, r1
     7f2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     7f6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     7fa:	80 e7       	ldi	r24, 0x70	; 112
     7fc:	92 e0       	ldi	r25, 0x02	; 2
     7fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     802:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     806:	80 81       	ld	r24, Z
     808:	88 60       	ori	r24, 0x08	; 8
     80a:	80 83       	st	Z, r24
     80c:	80 81       	ld	r24, Z
     80e:	84 60       	ori	r24, 0x04	; 4
     810:	80 83       	st	Z, r24
     812:	ef e6       	ldi	r30, 0x6F	; 111
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	82 60       	ori	r24, 0x02	; 2
     81a:	80 83       	st	Z, r24
     81c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     820:	e1 e9       	ldi	r30, 0x91	; 145
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	10 82       	st	Z, r1
     826:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     82a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     82e:	83 e2       	ldi	r24, 0x23	; 35
     830:	94 ef       	ldi	r25, 0xF4	; 244
     832:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     836:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     83a:	80 81       	ld	r24, Z
     83c:	88 60       	ori	r24, 0x08	; 8
     83e:	80 83       	st	Z, r24
     840:	80 81       	ld	r24, Z
     842:	84 60       	ori	r24, 0x04	; 4
     844:	80 83       	st	Z, r24
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     84c:	78 94       	sei
     84e:	08 95       	ret

00000850 <__vector_17>:
     850:	1f 92       	push	r1
     852:	0f 92       	push	r0
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	0f 92       	push	r0
     858:	11 24       	eor	r1, r1
     85a:	0b b6       	in	r0, 0x3b	; 59
     85c:	0f 92       	push	r0
     85e:	2f 93       	push	r18
     860:	3f 93       	push	r19
     862:	4f 93       	push	r20
     864:	5f 93       	push	r21
     866:	6f 93       	push	r22
     868:	7f 93       	push	r23
     86a:	8f 93       	push	r24
     86c:	9f 93       	push	r25
     86e:	af 93       	push	r26
     870:	bf 93       	push	r27
     872:	ef 93       	push	r30
     874:	ff 93       	push	r31
     876:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <Cp>
     87a:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <Cp+0x1>
     87e:	fc 01       	movw	r30, r24
     880:	eb 5f       	subi	r30, 0xFB	; 251
     882:	fe 4f       	sbci	r31, 0xFE	; 254
     884:	20 81       	ld	r18, Z
     886:	31 81       	ldd	r19, Z+1	; 0x01
     888:	22 30       	cpi	r18, 0x02	; 2
     88a:	31 05       	cpc	r19, r1
     88c:	31 f4       	brne	.+12     	; 0x89a <__vector_17+0x4a>
     88e:	73 96       	adiw	r30, 0x13	; 19
     890:	80 81       	ld	r24, Z
     892:	91 81       	ldd	r25, Z+1	; 0x01
     894:	01 96       	adiw	r24, 0x01	; 1
     896:	91 83       	std	Z+1, r25	; 0x01
     898:	80 83       	st	Z, r24
     89a:	a0 91 44 05 	lds	r26, 0x0544	; 0x800544 <PeriodicCount>
     89e:	b0 91 45 05 	lds	r27, 0x0545	; 0x800545 <PeriodicCount+0x1>
     8a2:	cd 01       	movw	r24, r26
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	92 f0       	brmi	.+36     	; 0x8cc <__vector_17+0x7c>
     8a8:	aa 0f       	add	r26, r26
     8aa:	bb 1f       	adc	r27, r27
     8ac:	ac 56       	subi	r26, 0x6C	; 108
     8ae:	b8 4e       	sbci	r27, 0xE8	; 232
     8b0:	24 e9       	ldi	r18, 0x94	; 148
     8b2:	37 e1       	ldi	r19, 0x17	; 23
     8b4:	fe 91       	ld	r31, -X
     8b6:	ee 91       	ld	r30, -X
     8b8:	ea 5e       	subi	r30, 0xEA	; 234
     8ba:	fe 4f       	sbci	r31, 0xFE	; 254
     8bc:	80 81       	ld	r24, Z
     8be:	91 81       	ldd	r25, Z+1	; 0x01
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	91 83       	std	Z+1, r25	; 0x01
     8c4:	80 83       	st	Z, r24
     8c6:	a2 17       	cp	r26, r18
     8c8:	b3 07       	cpc	r27, r19
     8ca:	a1 f7       	brne	.-24     	; 0x8b4 <__vector_17+0x64>
     8cc:	3b df       	rcall	.-394    	; 0x744 <Run_Next>
     8ce:	ff 91       	pop	r31
     8d0:	ef 91       	pop	r30
     8d2:	bf 91       	pop	r27
     8d4:	af 91       	pop	r26
     8d6:	9f 91       	pop	r25
     8d8:	8f 91       	pop	r24
     8da:	7f 91       	pop	r23
     8dc:	6f 91       	pop	r22
     8de:	5f 91       	pop	r21
     8e0:	4f 91       	pop	r20
     8e2:	3f 91       	pop	r19
     8e4:	2f 91       	pop	r18
     8e6:	0f 90       	pop	r0
     8e8:	0b be       	out	0x3b, r0	; 59
     8ea:	0f 90       	pop	r0
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	0f 90       	pop	r0
     8f0:	1f 90       	pop	r1
     8f2:	18 95       	reti

000008f4 <__vector_32>:
     8f4:	1f 92       	push	r1
     8f6:	0f 92       	push	r0
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	0f 92       	push	r0
     8fc:	11 24       	eor	r1, r1
     8fe:	8f 93       	push	r24
     900:	9f 93       	push	r25
     902:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <tickOverflowCount>
     906:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <tickOverflowCount+0x1>
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <tickOverflowCount+0x1>
     910:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <tickOverflowCount>
     914:	9f 91       	pop	r25
     916:	8f 91       	pop	r24
     918:	0f 90       	pop	r0
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	0f 90       	pop	r0
     91e:	1f 90       	pop	r1
     920:	18 95       	reti

00000922 <kernel_send>:
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <Cp>
     92e:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <Cp+0x1>
     932:	fc 01       	movw	r30, r24
     934:	e4 5e       	subi	r30, 0xE4	; 228
     936:	fe 4f       	sbci	r31, 0xFE	; 254
     938:	20 81       	ld	r18, Z
     93a:	31 81       	ldd	r19, Z+1	; 0x01
     93c:	21 50       	subi	r18, 0x01	; 1
     93e:	31 09       	sbc	r19, r1
     940:	49 e2       	ldi	r20, 0x29	; 41
     942:	42 9f       	mul	r20, r18
     944:	f0 01       	movw	r30, r0
     946:	43 9f       	mul	r20, r19
     948:	f0 0d       	add	r31, r0
     94a:	11 24       	eor	r1, r1
     94c:	ee 54       	subi	r30, 0x4E	; 78
     94e:	fd 4f       	sbci	r31, 0xFD	; 253
     950:	24 a1       	ldd	r18, Z+36	; 0x24
     952:	35 a1       	ldd	r19, Z+37	; 0x25
     954:	23 2b       	or	r18, r19
     956:	d9 f5       	brne	.+118    	; 0x9ce <kernel_send+0xac>
     958:	fc 01       	movw	r30, r24
     95a:	e4 5e       	subi	r30, 0xE4	; 228
     95c:	fe 4f       	sbci	r31, 0xFE	; 254
     95e:	20 81       	ld	r18, Z
     960:	31 81       	ldd	r19, Z+1	; 0x01
     962:	21 50       	subi	r18, 0x01	; 1
     964:	31 09       	sbc	r19, r1
     966:	42 9f       	mul	r20, r18
     968:	f0 01       	movw	r30, r0
     96a:	43 9f       	mul	r20, r19
     96c:	f0 0d       	add	r31, r0
     96e:	11 24       	eor	r1, r1
     970:	ee 54       	subi	r30, 0x4E	; 78
     972:	fd 4f       	sbci	r31, 0xFD	; 253
     974:	22 81       	ldd	r18, Z+2	; 0x02
     976:	33 81       	ldd	r19, Z+3	; 0x03
     978:	23 2b       	or	r18, r19
     97a:	41 f5       	brne	.+80     	; 0x9cc <kernel_send+0xaa>
     97c:	dc 01       	movw	r26, r24
     97e:	a4 5e       	subi	r26, 0xE4	; 228
     980:	be 4f       	sbci	r27, 0xFE	; 254
     982:	2d 91       	ld	r18, X+
     984:	3c 91       	ld	r19, X
     986:	11 97       	sbiw	r26, 0x01	; 1
     988:	21 50       	subi	r18, 0x01	; 1
     98a:	31 09       	sbc	r19, r1
     98c:	42 9f       	mul	r20, r18
     98e:	f0 01       	movw	r30, r0
     990:	43 9f       	mul	r20, r19
     992:	f0 0d       	add	r31, r0
     994:	11 24       	eor	r1, r1
     996:	ee 54       	subi	r30, 0x4E	; 78
     998:	fd 4f       	sbci	r31, 0xFD	; 253
     99a:	93 83       	std	Z+3, r25	; 0x03
     99c:	82 83       	std	Z+2, r24	; 0x02
     99e:	fc 01       	movw	r30, r24
     9a0:	ec 5f       	subi	r30, 0xFC	; 252
     9a2:	fe 4f       	sbci	r31, 0xFE	; 254
     9a4:	23 e0       	ldi	r18, 0x03	; 3
     9a6:	20 83       	st	Z, r18
     9a8:	2d 91       	ld	r18, X+
     9aa:	3c 91       	ld	r19, X
     9ac:	21 50       	subi	r18, 0x01	; 1
     9ae:	31 09       	sbc	r19, r1
     9b0:	7c 96       	adiw	r30, 0x1c	; 28
     9b2:	80 81       	ld	r24, Z
     9b4:	91 81       	ldd	r25, Z+1	; 0x01
     9b6:	42 9f       	mul	r20, r18
     9b8:	f0 01       	movw	r30, r0
     9ba:	43 9f       	mul	r20, r19
     9bc:	f0 0d       	add	r31, r0
     9be:	11 24       	eor	r1, r1
     9c0:	ee 54       	subi	r30, 0x4E	; 78
     9c2:	fd 4f       	sbci	r31, 0xFD	; 253
     9c4:	90 a7       	std	Z+40, r25	; 0x28
     9c6:	87 a3       	std	Z+39, r24	; 0x27
     9c8:	68 dc       	rcall	.-1840   	; 0x29a <Dispatch>
     9ca:	09 c1       	rjmp	.+530    	; 0xbde <kernel_send+0x2bc>
     9cc:	f1 dd       	rcall	.-1054   	; 0x5b0 <OS_Abort>
     9ce:	fc 01       	movw	r30, r24
     9d0:	e4 5e       	subi	r30, 0xE4	; 228
     9d2:	fe 4f       	sbci	r31, 0xFE	; 254
     9d4:	20 81       	ld	r18, Z
     9d6:	31 81       	ldd	r19, Z+1	; 0x01
     9d8:	21 50       	subi	r18, 0x01	; 1
     9da:	31 09       	sbc	r19, r1
     9dc:	49 e2       	ldi	r20, 0x29	; 41
     9de:	42 9f       	mul	r20, r18
     9e0:	f0 01       	movw	r30, r0
     9e2:	43 9f       	mul	r20, r19
     9e4:	f0 0d       	add	r31, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	ee 54       	subi	r30, 0x4E	; 78
     9ea:	fd 4f       	sbci	r31, 0xFD	; 253
     9ec:	22 81       	ldd	r18, Z+2	; 0x02
     9ee:	33 81       	ldd	r19, Z+3	; 0x03
     9f0:	23 2b       	or	r18, r19
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <kernel_send+0xd4>
     9f4:	dd dd       	rcall	.-1094   	; 0x5b0 <OS_Abort>
     9f6:	fc 01       	movw	r30, r24
     9f8:	e4 5e       	subi	r30, 0xE4	; 228
     9fa:	fe 4f       	sbci	r31, 0xFE	; 254
     9fc:	80 81       	ld	r24, Z
     9fe:	91 81       	ldd	r25, Z+1	; 0x01
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	29 e2       	ldi	r18, 0x29	; 41
     a04:	28 9f       	mul	r18, r24
     a06:	f0 01       	movw	r30, r0
     a08:	29 9f       	mul	r18, r25
     a0a:	f0 0d       	add	r31, r0
     a0c:	11 24       	eor	r1, r1
     a0e:	ee 54       	subi	r30, 0x4E	; 78
     a10:	fd 4f       	sbci	r31, 0xFD	; 253
     a12:	c4 a1       	ldd	r28, Z+36	; 0x24
     a14:	d5 a1       	ldd	r29, Z+37	; 0x25
     a16:	21 97       	sbiw	r28, 0x01	; 1
     a18:	0a f4       	brpl	.+2      	; 0xa1c <kernel_send+0xfa>
     a1a:	ce c0       	rjmp	.+412    	; 0xbb8 <kernel_send+0x296>
     a1c:	19 e2       	ldi	r17, 0x29	; 41
     a1e:	01 e0       	ldi	r16, 0x01	; 1
     a20:	20 91 50 05 	lds	r18, 0x0550	; 0x800550 <Cp>
     a24:	30 91 51 05 	lds	r19, 0x0551	; 0x800551 <Cp+0x1>
     a28:	c9 01       	movw	r24, r18
     a2a:	84 5e       	subi	r24, 0xE4	; 228
     a2c:	9e 4f       	sbci	r25, 0xFE	; 254
     a2e:	dc 01       	movw	r26, r24
     a30:	4d 91       	ld	r20, X+
     a32:	5c 91       	ld	r21, X
     a34:	41 50       	subi	r20, 0x01	; 1
     a36:	51 09       	sbc	r21, r1
     a38:	fe 01       	movw	r30, r28
     a3a:	32 96       	adiw	r30, 0x02	; 2
     a3c:	ee 0f       	add	r30, r30
     a3e:	ff 1f       	adc	r31, r31
     a40:	14 9f       	mul	r17, r20
     a42:	d0 01       	movw	r26, r0
     a44:	15 9f       	mul	r17, r21
     a46:	b0 0d       	add	r27, r0
     a48:	11 24       	eor	r1, r1
     a4a:	ae 0f       	add	r26, r30
     a4c:	bf 1f       	adc	r27, r31
     a4e:	ae 54       	subi	r26, 0x4E	; 78
     a50:	bd 4f       	sbci	r27, 0xFD	; 253
     a52:	0d 90       	ld	r0, X+
     a54:	bc 91       	ld	r27, X
     a56:	a0 2d       	mov	r26, r0
     a58:	ac 5f       	subi	r26, 0xFC	; 252
     a5a:	be 4f       	sbci	r27, 0xFE	; 254
     a5c:	0c 93       	st	X, r16
     a5e:	dc 01       	movw	r26, r24
     a60:	4d 91       	ld	r20, X+
     a62:	5c 91       	ld	r21, X
     a64:	41 50       	subi	r20, 0x01	; 1
     a66:	51 09       	sbc	r21, r1
     a68:	14 9f       	mul	r17, r20
     a6a:	d0 01       	movw	r26, r0
     a6c:	15 9f       	mul	r17, r21
     a6e:	b0 0d       	add	r27, r0
     a70:	11 24       	eor	r1, r1
     a72:	ae 0f       	add	r26, r30
     a74:	bf 1f       	adc	r27, r31
     a76:	ae 54       	subi	r26, 0x4E	; 78
     a78:	bd 4f       	sbci	r27, 0xFD	; 253
     a7a:	6d 91       	ld	r22, X+
     a7c:	7c 91       	ld	r23, X
     a7e:	a9 01       	movw	r20, r18
     a80:	40 5e       	subi	r20, 0xE0	; 224
     a82:	5e 4f       	sbci	r21, 0xFE	; 254
     a84:	da 01       	movw	r26, r20
     a86:	4d 91       	ld	r20, X+
     a88:	5c 91       	ld	r21, X
     a8a:	db 01       	movw	r26, r22
     a8c:	a0 5e       	subi	r26, 0xE0	; 224
     a8e:	be 4f       	sbci	r27, 0xFE	; 254
     a90:	4d 93       	st	X+, r20
     a92:	5c 93       	st	X, r21
     a94:	dc 01       	movw	r26, r24
     a96:	4d 91       	ld	r20, X+
     a98:	5c 91       	ld	r21, X
     a9a:	11 97       	sbiw	r26, 0x01	; 1
     a9c:	41 50       	subi	r20, 0x01	; 1
     a9e:	51 09       	sbc	r21, r1
     aa0:	14 9f       	mul	r17, r20
     aa2:	c0 01       	movw	r24, r0
     aa4:	15 9f       	mul	r17, r21
     aa6:	90 0d       	add	r25, r0
     aa8:	11 24       	eor	r1, r1
     aaa:	e8 0f       	add	r30, r24
     aac:	f9 1f       	adc	r31, r25
     aae:	ee 54       	subi	r30, 0x4E	; 78
     ab0:	fd 4f       	sbci	r31, 0xFD	; 253
     ab2:	01 90       	ld	r0, Z+
     ab4:	f0 81       	ld	r31, Z
     ab6:	e0 2d       	mov	r30, r0
     ab8:	eb 5f       	subi	r30, 0xFB	; 251
     aba:	fe 4f       	sbci	r31, 0xFE	; 254
     abc:	80 81       	ld	r24, Z
     abe:	91 81       	ldd	r25, Z+1	; 0x01
     ac0:	03 97       	sbiw	r24, 0x03	; 3
     ac2:	c1 f4       	brne	.+48     	; 0xaf4 <kernel_send+0x1d2>
     ac4:	fd 01       	movw	r30, r26
     ac6:	40 81       	ld	r20, Z
     ac8:	51 81       	ldd	r21, Z+1	; 0x01
     aca:	ce 01       	movw	r24, r28
     acc:	02 96       	adiw	r24, 0x02	; 2
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	41 50       	subi	r20, 0x01	; 1
     ad4:	51 09       	sbc	r21, r1
     ad6:	14 9f       	mul	r17, r20
     ad8:	90 01       	movw	r18, r0
     ada:	15 9f       	mul	r17, r21
     adc:	30 0d       	add	r19, r0
     ade:	11 24       	eor	r1, r1
     ae0:	82 0f       	add	r24, r18
     ae2:	93 1f       	adc	r25, r19
     ae4:	46 e4       	ldi	r20, 0x46	; 70
     ae6:	55 e0       	ldi	r21, 0x05	; 5
     ae8:	62 e7       	ldi	r22, 0x72	; 114
     aea:	77 e1       	ldi	r23, 0x17	; 23
     aec:	8e 54       	subi	r24, 0x4E	; 78
     aee:	9d 4f       	sbci	r25, 0xFD	; 253
     af0:	60 d2       	rcall	.+1216   	; 0xfb2 <enqueue>
     af2:	36 c0       	rjmp	.+108    	; 0xb60 <kernel_send+0x23e>
     af4:	f9 01       	movw	r30, r18
     af6:	e4 5e       	subi	r30, 0xE4	; 228
     af8:	fe 4f       	sbci	r31, 0xFE	; 254
     afa:	40 81       	ld	r20, Z
     afc:	51 81       	ldd	r21, Z+1	; 0x01
     afe:	41 50       	subi	r20, 0x01	; 1
     b00:	51 09       	sbc	r21, r1
     b02:	fe 01       	movw	r30, r28
     b04:	32 96       	adiw	r30, 0x02	; 2
     b06:	ee 0f       	add	r30, r30
     b08:	ff 1f       	adc	r31, r31
     b0a:	14 9f       	mul	r17, r20
     b0c:	c0 01       	movw	r24, r0
     b0e:	15 9f       	mul	r17, r21
     b10:	90 0d       	add	r25, r0
     b12:	11 24       	eor	r1, r1
     b14:	e8 0f       	add	r30, r24
     b16:	f9 1f       	adc	r31, r25
     b18:	ee 54       	subi	r30, 0x4E	; 78
     b1a:	fd 4f       	sbci	r31, 0xFD	; 253
     b1c:	01 90       	ld	r0, Z+
     b1e:	f0 81       	ld	r31, Z
     b20:	e0 2d       	mov	r30, r0
     b22:	eb 5f       	subi	r30, 0xFB	; 251
     b24:	fe 4f       	sbci	r31, 0xFE	; 254
     b26:	80 81       	ld	r24, Z
     b28:	91 81       	ldd	r25, Z+1	; 0x01
     b2a:	01 97       	sbiw	r24, 0x01	; 1
     b2c:	c9 f4       	brne	.+50     	; 0xb60 <kernel_send+0x23e>
     b2e:	f9 01       	movw	r30, r18
     b30:	e4 5e       	subi	r30, 0xE4	; 228
     b32:	fe 4f       	sbci	r31, 0xFE	; 254
     b34:	40 81       	ld	r20, Z
     b36:	51 81       	ldd	r21, Z+1	; 0x01
     b38:	ce 01       	movw	r24, r28
     b3a:	02 96       	adiw	r24, 0x02	; 2
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	41 50       	subi	r20, 0x01	; 1
     b42:	51 09       	sbc	r21, r1
     b44:	14 9f       	mul	r17, r20
     b46:	90 01       	movw	r18, r0
     b48:	15 9f       	mul	r17, r21
     b4a:	30 0d       	add	r19, r0
     b4c:	11 24       	eor	r1, r1
     b4e:	82 0f       	add	r24, r18
     b50:	93 1f       	adc	r25, r19
     b52:	42 e4       	ldi	r20, 0x42	; 66
     b54:	55 e0       	ldi	r21, 0x05	; 5
     b56:	66 eb       	ldi	r22, 0xB6	; 182
     b58:	77 e1       	ldi	r23, 0x17	; 23
     b5a:	8e 54       	subi	r24, 0x4E	; 78
     b5c:	9d 4f       	sbci	r25, 0xFD	; 253
     b5e:	29 d2       	rcall	.+1106   	; 0xfb2 <enqueue>
     b60:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <Cp>
     b64:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <Cp+0x1>
     b68:	a4 5e       	subi	r26, 0xE4	; 228
     b6a:	be 4f       	sbci	r27, 0xFE	; 254
     b6c:	2d 91       	ld	r18, X+
     b6e:	3c 91       	ld	r19, X
     b70:	11 97       	sbiw	r26, 0x01	; 1
     b72:	21 50       	subi	r18, 0x01	; 1
     b74:	31 09       	sbc	r19, r1
     b76:	fe 01       	movw	r30, r28
     b78:	32 96       	adiw	r30, 0x02	; 2
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	12 9f       	mul	r17, r18
     b80:	c0 01       	movw	r24, r0
     b82:	13 9f       	mul	r17, r19
     b84:	90 0d       	add	r25, r0
     b86:	11 24       	eor	r1, r1
     b88:	e8 0f       	add	r30, r24
     b8a:	f9 1f       	adc	r31, r25
     b8c:	ee 54       	subi	r30, 0x4E	; 78
     b8e:	fd 4f       	sbci	r31, 0xFD	; 253
     b90:	11 82       	std	Z+1, r1	; 0x01
     b92:	10 82       	st	Z, r1
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	18 9f       	mul	r17, r24
     b9c:	f0 01       	movw	r30, r0
     b9e:	19 9f       	mul	r17, r25
     ba0:	f0 0d       	add	r31, r0
     ba2:	11 24       	eor	r1, r1
     ba4:	ee 54       	subi	r30, 0x4E	; 78
     ba6:	fd 4f       	sbci	r31, 0xFD	; 253
     ba8:	84 a1       	ldd	r24, Z+36	; 0x24
     baa:	95 a1       	ldd	r25, Z+37	; 0x25
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	95 a3       	std	Z+37, r25	; 0x25
     bb0:	84 a3       	std	Z+36, r24	; 0x24
     bb2:	21 97       	sbiw	r28, 0x01	; 1
     bb4:	0a f0       	brmi	.+2      	; 0xbb8 <kernel_send+0x296>
     bb6:	34 cf       	rjmp	.-408    	; 0xa20 <kernel_send+0xfe>
     bb8:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <Cp>
     bbc:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <Cp+0x1>
     bc0:	e4 5e       	subi	r30, 0xE4	; 228
     bc2:	fe 4f       	sbci	r31, 0xFE	; 254
     bc4:	80 81       	ld	r24, Z
     bc6:	91 81       	ldd	r25, Z+1	; 0x01
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	29 e2       	ldi	r18, 0x29	; 41
     bcc:	28 9f       	mul	r18, r24
     bce:	f0 01       	movw	r30, r0
     bd0:	29 9f       	mul	r18, r25
     bd2:	f0 0d       	add	r31, r0
     bd4:	11 24       	eor	r1, r1
     bd6:	ee 54       	subi	r30, 0x4E	; 78
     bd8:	fd 4f       	sbci	r31, 0xFD	; 253
     bda:	10 a6       	std	Z+40, r1	; 0x28
     bdc:	17 a2       	std	Z+39, r1	; 0x27
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	08 95       	ret

00000be8 <kernel_receive>:

void kernel_receive() {
	if (ChannelArray[Cp->receiverChannel - 1].sender == NULL) { // no sender waiting
     be8:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <Cp>
     bec:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <Cp+0x1>
     bf0:	fc 01       	movw	r30, r24
     bf2:	e2 5e       	subi	r30, 0xE2	; 226
     bf4:	fe 4f       	sbci	r31, 0xFE	; 254
     bf6:	20 81       	ld	r18, Z
     bf8:	31 81       	ldd	r19, Z+1	; 0x01
     bfa:	21 50       	subi	r18, 0x01	; 1
     bfc:	31 09       	sbc	r19, r1
     bfe:	49 e2       	ldi	r20, 0x29	; 41
     c00:	42 9f       	mul	r20, r18
     c02:	f0 01       	movw	r30, r0
     c04:	43 9f       	mul	r20, r19
     c06:	f0 0d       	add	r31, r0
     c08:	11 24       	eor	r1, r1
     c0a:	ee 54       	subi	r30, 0x4E	; 78
     c0c:	fd 4f       	sbci	r31, 0xFD	; 253
     c0e:	22 81       	ldd	r18, Z+2	; 0x02
     c10:	33 81       	ldd	r19, Z+3	; 0x03
     c12:	23 2b       	or	r18, r19
     c14:	09 f5       	brne	.+66     	; 0xc58 <kernel_receive+0x70>
		Cp->state = BLOCKED;
     c16:	fc 01       	movw	r30, r24
     c18:	ec 5f       	subi	r30, 0xFC	; 252
     c1a:	fe 4f       	sbci	r31, 0xFE	; 254
     c1c:	23 e0       	ldi	r18, 0x03	; 3
     c1e:	20 83       	st	Z, r18
		enqueue(&Cp, &ChannelArray[Cp->receiverChannel - 1].receivers, &ChannelArray[Cp->receiverChannel - 1].numberReceivers);
     c20:	7a 96       	adiw	r30, 0x1a	; 26
     c22:	20 81       	ld	r18, Z
     c24:	31 81       	ldd	r19, Z+1	; 0x01
     c26:	80 81       	ld	r24, Z
     c28:	91 81       	ldd	r25, Z+1	; 0x01
     c2a:	21 50       	subi	r18, 0x01	; 1
     c2c:	31 09       	sbc	r19, r1
     c2e:	e9 e2       	ldi	r30, 0x29	; 41
     c30:	e2 9f       	mul	r30, r18
     c32:	a0 01       	movw	r20, r0
     c34:	e3 9f       	mul	r30, r19
     c36:	50 0d       	add	r21, r0
     c38:	11 24       	eor	r1, r1
     c3a:	4a 52       	subi	r20, 0x2A	; 42
     c3c:	5d 4f       	sbci	r21, 0xFD	; 253
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	e8 9f       	mul	r30, r24
     c42:	b0 01       	movw	r22, r0
     c44:	e9 9f       	mul	r30, r25
     c46:	70 0d       	add	r23, r0
     c48:	11 24       	eor	r1, r1
     c4a:	6a 54       	subi	r22, 0x4A	; 74
     c4c:	7d 4f       	sbci	r23, 0xFD	; 253
     c4e:	80 e5       	ldi	r24, 0x50	; 80
     c50:	95 e0       	ldi	r25, 0x05	; 5
     c52:	af d1       	rcall	.+862    	; 0xfb2 <enqueue>
		Dispatch();
     c54:	22 cb       	rjmp	.-2492   	; 0x29a <Dispatch>
     c56:	08 95       	ret
	} else { // sender is waiting
		ChannelArray[Cp->receiverChannel - 1].sender->state = READY;
     c58:	fc 01       	movw	r30, r24
     c5a:	e2 5e       	subi	r30, 0xE2	; 226
     c5c:	fe 4f       	sbci	r31, 0xFE	; 254
     c5e:	20 81       	ld	r18, Z
     c60:	31 81       	ldd	r19, Z+1	; 0x01
     c62:	21 50       	subi	r18, 0x01	; 1
     c64:	31 09       	sbc	r19, r1
     c66:	49 e2       	ldi	r20, 0x29	; 41
     c68:	42 9f       	mul	r20, r18
     c6a:	d0 01       	movw	r26, r0
     c6c:	43 9f       	mul	r20, r19
     c6e:	b0 0d       	add	r27, r0
     c70:	11 24       	eor	r1, r1
     c72:	ae 54       	subi	r26, 0x4E	; 78
     c74:	bd 4f       	sbci	r27, 0xFD	; 253
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	0d 90       	ld	r0, X+
     c7a:	bc 91       	ld	r27, X
     c7c:	a0 2d       	mov	r26, r0
     c7e:	ac 5f       	subi	r26, 0xFC	; 252
     c80:	be 4f       	sbci	r27, 0xFE	; 254
     c82:	21 e0       	ldi	r18, 0x01	; 1
     c84:	2c 93       	st	X, r18
		Cp->val = ChannelArray[Cp->receiverChannel - 1].val;
     c86:	20 81       	ld	r18, Z
     c88:	31 81       	ldd	r19, Z+1	; 0x01
     c8a:	21 50       	subi	r18, 0x01	; 1
     c8c:	31 09       	sbc	r19, r1
     c8e:	42 9f       	mul	r20, r18
     c90:	d0 01       	movw	r26, r0
     c92:	43 9f       	mul	r20, r19
     c94:	b0 0d       	add	r27, r0
     c96:	11 24       	eor	r1, r1
     c98:	ae 54       	subi	r26, 0x4E	; 78
     c9a:	bd 4f       	sbci	r27, 0xFD	; 253
     c9c:	97 96       	adiw	r26, 0x27	; 39
     c9e:	2d 91       	ld	r18, X+
     ca0:	3c 91       	ld	r19, X
     ca2:	98 97       	sbiw	r26, 0x28	; 40
     ca4:	dc 01       	movw	r26, r24
     ca6:	a0 5e       	subi	r26, 0xE0	; 224
     ca8:	be 4f       	sbci	r27, 0xFE	; 254
     caa:	11 96       	adiw	r26, 0x01	; 1
     cac:	3c 93       	st	X, r19
     cae:	2e 93       	st	-X, r18

		if (ChannelArray[Cp->receiverChannel - 1].sender->priority == SYSTEM) {
     cb0:	20 81       	ld	r18, Z
     cb2:	31 81       	ldd	r19, Z+1	; 0x01
     cb4:	21 50       	subi	r18, 0x01	; 1
     cb6:	31 09       	sbc	r19, r1
     cb8:	42 9f       	mul	r20, r18
     cba:	f0 01       	movw	r30, r0
     cbc:	43 9f       	mul	r20, r19
     cbe:	f0 0d       	add	r31, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	ee 54       	subi	r30, 0x4E	; 78
     cc4:	fd 4f       	sbci	r31, 0xFD	; 253
     cc6:	02 80       	ldd	r0, Z+2	; 0x02
     cc8:	f3 81       	ldd	r31, Z+3	; 0x03
     cca:	e0 2d       	mov	r30, r0
     ccc:	eb 5f       	subi	r30, 0xFB	; 251
     cce:	fe 4f       	sbci	r31, 0xFE	; 254
     cd0:	20 81       	ld	r18, Z
     cd2:	31 81       	ldd	r19, Z+1	; 0x01
     cd4:	23 30       	cpi	r18, 0x03	; 3
     cd6:	31 05       	cpc	r19, r1
     cd8:	a1 f4       	brne	.+40     	; 0xd02 <kernel_receive+0x11a>
			enqueue(&ChannelArray[Cp->receiverChannel - 1].sender, &SysQueue, &SysCount);
     cda:	fc 01       	movw	r30, r24
     cdc:	e2 5e       	subi	r30, 0xE2	; 226
     cde:	fe 4f       	sbci	r31, 0xFE	; 254
     ce0:	20 81       	ld	r18, Z
     ce2:	31 81       	ldd	r19, Z+1	; 0x01
     ce4:	21 50       	subi	r18, 0x01	; 1
     ce6:	31 09       	sbc	r19, r1
     ce8:	42 9f       	mul	r20, r18
     cea:	c0 01       	movw	r24, r0
     cec:	43 9f       	mul	r20, r19
     cee:	90 0d       	add	r25, r0
     cf0:	11 24       	eor	r1, r1
     cf2:	46 e4       	ldi	r20, 0x46	; 70
     cf4:	55 e0       	ldi	r21, 0x05	; 5
     cf6:	62 e7       	ldi	r22, 0x72	; 114
     cf8:	77 e1       	ldi	r23, 0x17	; 23
     cfa:	8c 54       	subi	r24, 0x4C	; 76
     cfc:	9d 4f       	sbci	r25, 0xFD	; 253
     cfe:	59 d1       	rcall	.+690    	; 0xfb2 <enqueue>
     d00:	2c c0       	rjmp	.+88     	; 0xd5a <kernel_receive+0x172>
		} else if (ChannelArray[Cp->receiverChannel - 1].sender->priority == RR) {
     d02:	fc 01       	movw	r30, r24
     d04:	e2 5e       	subi	r30, 0xE2	; 226
     d06:	fe 4f       	sbci	r31, 0xFE	; 254
     d08:	20 81       	ld	r18, Z
     d0a:	31 81       	ldd	r19, Z+1	; 0x01
     d0c:	21 50       	subi	r18, 0x01	; 1
     d0e:	31 09       	sbc	r19, r1
     d10:	49 e2       	ldi	r20, 0x29	; 41
     d12:	42 9f       	mul	r20, r18
     d14:	f0 01       	movw	r30, r0
     d16:	43 9f       	mul	r20, r19
     d18:	f0 0d       	add	r31, r0
     d1a:	11 24       	eor	r1, r1
     d1c:	ee 54       	subi	r30, 0x4E	; 78
     d1e:	fd 4f       	sbci	r31, 0xFD	; 253
     d20:	02 80       	ldd	r0, Z+2	; 0x02
     d22:	f3 81       	ldd	r31, Z+3	; 0x03
     d24:	e0 2d       	mov	r30, r0
     d26:	eb 5f       	subi	r30, 0xFB	; 251
     d28:	fe 4f       	sbci	r31, 0xFE	; 254
     d2a:	20 81       	ld	r18, Z
     d2c:	31 81       	ldd	r19, Z+1	; 0x01
     d2e:	21 30       	cpi	r18, 0x01	; 1
     d30:	31 05       	cpc	r19, r1
     d32:	99 f4       	brne	.+38     	; 0xd5a <kernel_receive+0x172>
			enqueue(&ChannelArray[Cp->receiverChannel - 1].sender, &RRQueue, &RRCount);
     d34:	fc 01       	movw	r30, r24
     d36:	e2 5e       	subi	r30, 0xE2	; 226
     d38:	fe 4f       	sbci	r31, 0xFE	; 254
     d3a:	20 81       	ld	r18, Z
     d3c:	31 81       	ldd	r19, Z+1	; 0x01
     d3e:	21 50       	subi	r18, 0x01	; 1
     d40:	31 09       	sbc	r19, r1
     d42:	42 9f       	mul	r20, r18
     d44:	c0 01       	movw	r24, r0
     d46:	43 9f       	mul	r20, r19
     d48:	90 0d       	add	r25, r0
     d4a:	11 24       	eor	r1, r1
     d4c:	42 e4       	ldi	r20, 0x42	; 66
     d4e:	55 e0       	ldi	r21, 0x05	; 5
     d50:	66 eb       	ldi	r22, 0xB6	; 182
     d52:	77 e1       	ldi	r23, 0x17	; 23
     d54:	8c 54       	subi	r24, 0x4C	; 76
     d56:	9d 4f       	sbci	r25, 0xFD	; 253
     d58:	2c d1       	rcall	.+600    	; 0xfb2 <enqueue>
		}
		ChannelArray[Cp->receiverChannel - 1].sender = NULL;
     d5a:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <Cp>
     d5e:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <Cp+0x1>
     d62:	fc 01       	movw	r30, r24
     d64:	e2 5e       	subi	r30, 0xE2	; 226
     d66:	fe 4f       	sbci	r31, 0xFE	; 254
     d68:	20 81       	ld	r18, Z
     d6a:	31 81       	ldd	r19, Z+1	; 0x01
     d6c:	21 50       	subi	r18, 0x01	; 1
     d6e:	31 09       	sbc	r19, r1
     d70:	49 e2       	ldi	r20, 0x29	; 41
     d72:	42 9f       	mul	r20, r18
     d74:	f0 01       	movw	r30, r0
     d76:	43 9f       	mul	r20, r19
     d78:	f0 0d       	add	r31, r0
     d7a:	11 24       	eor	r1, r1
     d7c:	ee 54       	subi	r30, 0x4E	; 78
     d7e:	fd 4f       	sbci	r31, 0xFD	; 253
     d80:	13 82       	std	Z+3, r1	; 0x03
     d82:	12 82       	std	Z+2, r1	; 0x02
		ChannelArray[Cp->senderChannel - 1].val = NULL;
     d84:	fc 01       	movw	r30, r24
     d86:	e4 5e       	subi	r30, 0xE4	; 228
     d88:	fe 4f       	sbci	r31, 0xFE	; 254
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	48 9f       	mul	r20, r24
     d92:	f0 01       	movw	r30, r0
     d94:	49 9f       	mul	r20, r25
     d96:	f0 0d       	add	r31, r0
     d98:	11 24       	eor	r1, r1
     d9a:	ee 54       	subi	r30, 0x4E	; 78
     d9c:	fd 4f       	sbci	r31, 0xFD	; 253
     d9e:	10 a6       	std	Z+40, r1	; 0x28
     da0:	17 a2       	std	Z+39, r1	; 0x27
     da2:	08 95       	ret

00000da4 <OS_Start>:
}

/**
  * This function starts the RTOS after creating a_main
  */
void OS_Start() {   
     da4:	df 92       	push	r13
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
	if ( (! KernelActive) && (Tasks > 0)) {
     db2:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <KernelActive>
     db6:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <KernelActive+0x1>
     dba:	89 2b       	or	r24, r25
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <OS_Start+0x1c>
     dbe:	dd c0       	rjmp	.+442    	; 0xf7a <OS_Start+0x1d6>
     dc0:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <Tasks>
     dc4:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <Tasks+0x1>
     dc8:	89 2b       	or	r24, r25
     dca:	09 f4       	brne	.+2      	; 0xdce <OS_Start+0x2a>
     dcc:	d6 c0       	rjmp	.+428    	; 0xf7a <OS_Start+0x1d6>
		Disable_Interrupt();
     dce:	f8 94       	cli

		KernelActive = 1;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <KernelActive+0x1>
     dd8:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <KernelActive>
  * corresponding kernel function on its behalf.
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */
     ddc:	5e da       	rcall	.-2884   	; 0x29a <Dispatch>
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
			break;
		case NEXT:
			Cp->state = READY;
     dde:	dd 24       	eor	r13, r13
     de0:	d3 94       	inc	r13
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */

	while(1) {
		Cp->request = NONE; /* clear its request */
     de2:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <Cp>
     de6:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <Cp+0x1>
     dea:	df 01       	movw	r26, r30
     dec:	a5 5f       	subi	r26, 0xF5	; 245
     dee:	be 4f       	sbci	r27, 0xFE	; 254
     df0:	1c 92       	st	X, r1

		/* activate this newly selected task */
		CurrentSp = Cp->sp;
     df2:	82 81       	ldd	r24, Z+2	; 0x02
     df4:	93 81       	ldd	r25, Z+3	; 0x03
     df6:	90 93 93 17 	sts	0x1793, r25	; 0x801793 <CurrentSp+0x1>
     dfa:	80 93 92 17 	sts	0x1792, r24	; 0x801792 <CurrentSp>

		Exit_Kernel();    /* or CSwitch() */
     dfe:	9b d9       	rcall	.-3274   	; 0x136 <CSwitch>

		/* if this task makes a system call, it will return to here! */

		/* save the Cp's stack pointer */
		Cp->sp = CurrentSp;
     e00:	c0 91 50 05 	lds	r28, 0x0550	; 0x800550 <Cp>
     e04:	d0 91 51 05 	lds	r29, 0x0551	; 0x800551 <Cp+0x1>
     e08:	80 91 92 17 	lds	r24, 0x1792	; 0x801792 <CurrentSp>
     e0c:	90 91 93 17 	lds	r25, 0x1793	; 0x801793 <CurrentSp+0x1>
     e10:	9b 83       	std	Y+3, r25	; 0x03
     e12:	8a 83       	std	Y+2, r24	; 0x02

		switch(Cp->request){
     e14:	fe 01       	movw	r30, r28
     e16:	e5 5f       	subi	r30, 0xF5	; 245
     e18:	fe 4f       	sbci	r31, 0xFE	; 254
     e1a:	e0 81       	ld	r30, Z
     e1c:	8e 2f       	mov	r24, r30
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	fc 01       	movw	r30, r24
     e22:	31 97       	sbiw	r30, 0x01	; 1
     e24:	e8 30       	cpi	r30, 0x08	; 8
     e26:	f1 05       	cpc	r31, r1
     e28:	e0 f6       	brcc	.-72     	; 0xde2 <OS_Start+0x3e>
     e2a:	88 27       	eor	r24, r24
     e2c:	ee 58       	subi	r30, 0x8E	; 142
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	8f 4f       	sbci	r24, 0xFF	; 255
     e32:	2e c2       	rjmp	.+1116   	; 0x1290 <__tablejump2__>
		case CREATE:
			Cp->response = Kernel_Create_Task( Cp->code, Cp->priority, Cp->arg, -1, -1, -1);
     e34:	fe 01       	movw	r30, r28
     e36:	e9 5f       	subi	r30, 0xF9	; 249
     e38:	fe 4f       	sbci	r31, 0xFE	; 254
     e3a:	40 81       	ld	r20, Z
     e3c:	51 81       	ldd	r21, Z+1	; 0x01
     e3e:	32 97       	sbiw	r30, 0x02	; 2
     e40:	60 81       	ld	r22, Z
     e42:	71 81       	ldd	r23, Z+1	; 0x01
     e44:	34 96       	adiw	r30, 0x04	; 4
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	ee 24       	eor	r14, r14
     e4c:	ea 94       	dec	r14
     e4e:	fe 2c       	mov	r15, r14
     e50:	0f ef       	ldi	r16, 0xFF	; 255
     e52:	1f ef       	ldi	r17, 0xFF	; 255
     e54:	2f ef       	ldi	r18, 0xFF	; 255
     e56:	3f ef       	ldi	r19, 0xFF	; 255
     e58:	2b db       	rcall	.-2474   	; 0x4b0 <Kernel_Create_Task>
     e5a:	c4 5f       	subi	r28, 0xF4	; 244
     e5c:	de 4f       	sbci	r29, 0xFE	; 254
     e5e:	99 83       	std	Y+1, r25	; 0x01
     e60:	88 83       	st	Y, r24
     e62:	bf cf       	rjmp	.-130    	; 0xde2 <OS_Start+0x3e>
			break;
		case CREATE_SYS:
			Cp->response = Kernel_Create_Task( Cp->code, SYSTEM, Cp->arg, -1, -1, -1);
     e64:	fe 01       	movw	r30, r28
     e66:	e9 5f       	subi	r30, 0xF9	; 249
     e68:	fe 4f       	sbci	r31, 0xFE	; 254
     e6a:	40 81       	ld	r20, Z
     e6c:	51 81       	ldd	r21, Z+1	; 0x01
     e6e:	32 96       	adiw	r30, 0x02	; 2
     e70:	80 81       	ld	r24, Z
     e72:	91 81       	ldd	r25, Z+1	; 0x01
     e74:	ee 24       	eor	r14, r14
     e76:	ea 94       	dec	r14
     e78:	fe 2c       	mov	r15, r14
     e7a:	0f ef       	ldi	r16, 0xFF	; 255
     e7c:	1f ef       	ldi	r17, 0xFF	; 255
     e7e:	2f ef       	ldi	r18, 0xFF	; 255
     e80:	3f ef       	ldi	r19, 0xFF	; 255
     e82:	63 e0       	ldi	r22, 0x03	; 3
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	14 db       	rcall	.-2520   	; 0x4b0 <Kernel_Create_Task>
     e88:	c4 5f       	subi	r28, 0xF4	; 244
     e8a:	de 4f       	sbci	r29, 0xFE	; 254
     e8c:	99 83       	std	Y+1, r25	; 0x01
     e8e:	88 83       	st	Y, r24
     e90:	a8 cf       	rjmp	.-176    	; 0xde2 <OS_Start+0x3e>
			break;
		case CREATE_PERIODIC:
			Cp->response = Kernel_Create_Task( Cp->code, PERIODIC, Cp->arg, Cp->offset, Cp->wcet, Cp->period);
     e92:	fe 01       	movw	r30, r28
     e94:	e0 5f       	subi	r30, 0xF0	; 240
     e96:	fe 4f       	sbci	r31, 0xFE	; 254
     e98:	e0 80       	ld	r14, Z
     e9a:	f1 80       	ldd	r15, Z+1	; 0x01
     e9c:	32 96       	adiw	r30, 0x02	; 2
     e9e:	00 81       	ld	r16, Z
     ea0:	11 81       	ldd	r17, Z+1	; 0x01
     ea2:	32 96       	adiw	r30, 0x02	; 2
     ea4:	20 81       	ld	r18, Z
     ea6:	31 81       	ldd	r19, Z+1	; 0x01
     ea8:	3d 97       	sbiw	r30, 0x0d	; 13
     eaa:	40 81       	ld	r20, Z
     eac:	51 81       	ldd	r21, Z+1	; 0x01
     eae:	32 96       	adiw	r30, 0x02	; 2
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	62 e0       	ldi	r22, 0x02	; 2
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	fb da       	rcall	.-2570   	; 0x4b0 <Kernel_Create_Task>
     eba:	c4 5f       	subi	r28, 0xF4	; 244
     ebc:	de 4f       	sbci	r29, 0xFE	; 254
     ebe:	99 83       	std	Y+1, r25	; 0x01
     ec0:	88 83       	st	Y, r24
     ec2:	8f cf       	rjmp	.-226    	; 0xde2 <OS_Start+0x3e>
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
     ec4:	fe 01       	movw	r30, r28
     ec6:	e9 5f       	subi	r30, 0xF9	; 249
     ec8:	fe 4f       	sbci	r31, 0xFE	; 254
     eca:	40 81       	ld	r20, Z
     ecc:	51 81       	ldd	r21, Z+1	; 0x01
     ece:	32 96       	adiw	r30, 0x02	; 2
     ed0:	80 81       	ld	r24, Z
     ed2:	91 81       	ldd	r25, Z+1	; 0x01
     ed4:	ee 24       	eor	r14, r14
     ed6:	ea 94       	dec	r14
     ed8:	fe 2c       	mov	r15, r14
     eda:	0f ef       	ldi	r16, 0xFF	; 255
     edc:	1f ef       	ldi	r17, 0xFF	; 255
     ede:	2f ef       	ldi	r18, 0xFF	; 255
     ee0:	3f ef       	ldi	r19, 0xFF	; 255
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	e4 da       	rcall	.-2616   	; 0x4b0 <Kernel_Create_Task>
     ee8:	c4 5f       	subi	r28, 0xF4	; 244
     eea:	de 4f       	sbci	r29, 0xFE	; 254
     eec:	99 83       	std	Y+1, r25	; 0x01
     eee:	88 83       	st	Y, r24
     ef0:	78 cf       	rjmp	.-272    	; 0xde2 <OS_Start+0x3e>
			break;
		case NEXT:
			Cp->state = READY;
     ef2:	fe 01       	movw	r30, r28
     ef4:	ec 5f       	subi	r30, 0xFC	; 252
     ef6:	fe 4f       	sbci	r31, 0xFE	; 254
     ef8:	d0 82       	st	Z, r13
			if (Cp->priority == SYSTEM) {
     efa:	31 96       	adiw	r30, 0x01	; 1
     efc:	80 81       	ld	r24, Z
     efe:	91 81       	ldd	r25, Z+1	; 0x01
     f00:	03 97       	sbiw	r24, 0x03	; 3
     f02:	41 f4       	brne	.+16     	; 0xf14 <OS_Start+0x170>
				enqueue(&Cp, &SysQueue, &SysCount);
     f04:	46 e4       	ldi	r20, 0x46	; 70
     f06:	55 e0       	ldi	r21, 0x05	; 5
     f08:	62 e7       	ldi	r22, 0x72	; 114
     f0a:	77 e1       	ldi	r23, 0x17	; 23
     f0c:	80 e5       	ldi	r24, 0x50	; 80
     f0e:	95 e0       	ldi	r25, 0x05	; 5
     f10:	50 d0       	rcall	.+160    	; 0xfb2 <enqueue>
     f12:	1c c0       	rjmp	.+56     	; 0xf4c <OS_Start+0x1a8>
			} else if (Cp->priority == PERIODIC) {
     f14:	fe 01       	movw	r30, r28
     f16:	eb 5f       	subi	r30, 0xFB	; 251
     f18:	fe 4f       	sbci	r31, 0xFE	; 254
     f1a:	80 81       	ld	r24, Z
     f1c:	91 81       	ldd	r25, Z+1	; 0x01
     f1e:	02 97       	sbiw	r24, 0x02	; 2
     f20:	41 f4       	brne	.+16     	; 0xf32 <OS_Start+0x18e>
				enqueuePeriodic(&Cp, &PeriodicQueue, &PeriodicCount);
     f22:	44 e4       	ldi	r20, 0x44	; 68
     f24:	55 e0       	ldi	r21, 0x05	; 5
     f26:	64 e9       	ldi	r22, 0x94	; 148
     f28:	77 e1       	ldi	r23, 0x17	; 23
     f2a:	80 e5       	ldi	r24, 0x50	; 80
     f2c:	95 e0       	ldi	r25, 0x05	; 5
     f2e:	93 d0       	rcall	.+294    	; 0x1056 <enqueuePeriodic>
     f30:	0d c0       	rjmp	.+26     	; 0xf4c <OS_Start+0x1a8>
			} else if (Cp->priority == RR) {
     f32:	cb 5f       	subi	r28, 0xFB	; 251
     f34:	de 4f       	sbci	r29, 0xFE	; 254
     f36:	88 81       	ld	r24, Y
     f38:	99 81       	ldd	r25, Y+1	; 0x01
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	39 f4       	brne	.+14     	; 0xf4c <OS_Start+0x1a8>
				enqueue(&Cp, &RRQueue, &RRCount);
     f3e:	42 e4       	ldi	r20, 0x42	; 66
     f40:	55 e0       	ldi	r21, 0x05	; 5
     f42:	66 eb       	ldi	r22, 0xB6	; 182
     f44:	77 e1       	ldi	r23, 0x17	; 23
     f46:	80 e5       	ldi	r24, 0x50	; 80
     f48:	95 e0       	ldi	r25, 0x05	; 5
     f4a:	33 d0       	rcall	.+102    	; 0xfb2 <enqueue>
			}
			Dispatch();
     f4c:	a6 d9       	rcall	.-3252   	; 0x29a <Dispatch>
     f4e:	49 cf       	rjmp	.-366    	; 0xde2 <OS_Start+0x3e>
			break;
		case NONE:
			break;
		case SEND:
			kernel_send();
     f50:	e8 dc       	rcall	.-1584   	; 0x922 <kernel_send>
     f52:	47 cf       	rjmp	.-370    	; 0xde2 <OS_Start+0x3e>
			break;
		case RECEIVE:
			kernel_receive();
     f54:	49 de       	rcall	.-878    	; 0xbe8 <kernel_receive>
     f56:	45 cf       	rjmp	.-374    	; 0xde2 <OS_Start+0x3e>

/**
  *  Terminate a task
  */
static void Kernel_Terminate_Task() {
	Cp->state = DEAD;
     f58:	fe 01       	movw	r30, r28
     f5a:	ec 5f       	subi	r30, 0xFC	; 252
     f5c:	fe 4f       	sbci	r31, 0xFE	; 254
     f5e:	10 82       	st	Z, r1
	Cp->processID = 0;
     f60:	19 82       	std	Y+1, r1	; 0x01
     f62:	18 82       	st	Y, r1
	Tasks--;
     f64:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <Tasks>
     f68:	90 91 4d 05 	lds	r25, 0x054D	; 0x80054d <Tasks+0x1>
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <Tasks+0x1>
     f72:	80 93 4c 05 	sts	0x054C, r24	; 0x80054c <Tasks>
			kernel_receive();
			break;
		case TERMINATE:
			/* deallocate all resources used by this task */
			Kernel_Terminate_Task();
			Dispatch();
     f76:	91 d9       	rcall	.-3294   	; 0x29a <Dispatch>
     f78:	34 cf       	rjmp	.-408    	; 0xde2 <OS_Start+0x3e>

		KernelActive = 1;
		Next_Kernel_Request();
		/* SHOULD NEVER GET HERE!!! */
	}
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	df 90       	pop	r13
     f88:	08 95       	ret

00000f8a <main>:
/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	//pin 25
	DDRA |= (1<<PA3);
     f8a:	0b 9a       	sbi	0x01, 3	; 1
	PORTA &= ~(1<<PA3);
     f8c:	13 98       	cbi	0x02, 3	; 2

	//pin 26
	DDRA |= (1<<PA4);
     f8e:	0c 9a       	sbi	0x01, 4	; 1
	PORTA &= ~(1<<PA4);
     f90:	14 98       	cbi	0x02, 4	; 2

	//pin 27
	DDRA |= (1<<PA5);
     f92:	0d 9a       	sbi	0x01, 5	; 1
	PORTA &= ~(1<<PA5);
     f94:	15 98       	cbi	0x02, 5	; 2

	//pin 28
	DDRA |= (1<<PA6);
     f96:	0e 9a       	sbi	0x01, 6	; 1
	PORTA &= ~(1<<PA6);
     f98:	16 98       	cbi	0x02, 6	; 2

	//pin 29
	DDRA |= (1<<PA7);
     f9a:	0f 9a       	sbi	0x01, 7	; 1
	PORTA &= ~(1<<PA7);
     f9c:	17 98       	cbi	0x02, 7	; 2

	setup();
     f9e:	23 dc       	rcall	.-1978   	; 0x7e6 <setup>
	OS_Init();
     fa0:	ca da       	rcall	.-2668   	; 0x536 <OS_Init>
	Task_Create_Idle();
     fa2:	95 db       	rcall	.-2262   	; 0x6ce <Task_Create_Idle>
	Task_Create_System(a_main, 1);
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	85 e4       	ldi	r24, 0x45	; 69
     faa:	91 e0       	ldi	r25, 0x01	; 1
     fac:	7c db       	rcall	.-2312   	; 0x6a6 <Task_Create_System>
	OS_Start();
     fae:	fa ce       	rjmp	.-524    	; 0xda4 <OS_Start>
     fb0:	08 95       	ret

00000fb2 <enqueue>:
}

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
     fb8:	28 81       	ld	r18, Y
     fba:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
     fbc:	2f 30       	cpi	r18, 0x0F	; 15
     fbe:	31 05       	cpc	r19, r1
     fc0:	e9 f0       	breq	.+58     	; 0xffc <enqueue+0x4a>
        return NULL;
    }

    int i = (*QCount) - 1;
     fc2:	e8 81       	ld	r30, Y
     fc4:	f9 81       	ldd	r31, Y+1	; 0x01
     fc6:	9f 01       	movw	r18, r30
     fc8:	21 50       	subi	r18, 0x01	; 1
     fca:	31 09       	sbc	r19, r1
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
     fcc:	62 f0       	brmi	.+24     	; 0xfe6 <enqueue+0x34>
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	e6 0f       	add	r30, r22
     fd4:	f7 1f       	adc	r31, r23
     fd6:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
     fd8:	32 91       	ld	r19, -Z
     fda:	22 91       	ld	r18, -Z
     fdc:	33 83       	std	Z+3, r19	; 0x03
     fde:	22 83       	std	Z+2, r18	; 0x02

    int i = (*QCount) - 1;
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
     fe0:	ea 17       	cp	r30, r26
     fe2:	fb 07       	cpc	r31, r27
     fe4:	c9 f7       	brne	.-14     	; 0xfd8 <enqueue+0x26>
        i--;
        temp = Queue[i];
    }

    //Queue[i+1] = *p; //original code
	Queue[0] = *p;
     fe6:	fc 01       	movw	r30, r24
     fe8:	80 81       	ld	r24, Z
     fea:	91 81       	ldd	r25, Z+1	; 0x01
     fec:	fb 01       	movw	r30, r22
     fee:	91 83       	std	Z+1, r25	; 0x01
     ff0:	80 83       	st	Z, r24
    (*QCount)++;
     ff2:	88 81       	ld	r24, Y
     ff4:	99 81       	ldd	r25, Y+1	; 0x01
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	99 83       	std	Y+1, r25	; 0x01
     ffa:	88 83       	st	Y, r24
}
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	08 95       	ret

00001002 <dequeue>:

/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    1002:	ac 01       	movw	r20, r24
    1004:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1006:	8d 91       	ld	r24, X+
    1008:	9c 91       	ld	r25, X
    100a:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
    100c:	89 2b       	or	r24, r25
    100e:	01 f1       	breq	.+64     	; 0x1050 <dequeue+0x4e>
	   return NULL;
   }

   volatile PD *result = (Queue[(*QCount)-1]);
    1010:	ed 91       	ld	r30, X+
    1012:	fc 91       	ld	r31, X
    1014:	11 97       	sbiw	r26, 0x01	; 1
    1016:	e1 50       	subi	r30, 0x01	; 1
    1018:	f0 48       	sbci	r31, 0x80	; 128
    101a:	ee 0f       	add	r30, r30
    101c:	ff 1f       	adc	r31, r31
    101e:	e4 0f       	add	r30, r20
    1020:	f5 1f       	adc	r31, r21
    1022:	80 81       	ld	r24, Z
    1024:	91 81       	ldd	r25, Z+1	; 0x01
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
    1026:	2d 91       	ld	r18, X+
    1028:	3c 91       	ld	r19, X
    102a:	11 97       	sbiw	r26, 0x01	; 1
    102c:	f9 01       	movw	r30, r18
    102e:	e1 50       	subi	r30, 0x01	; 1
    1030:	f0 48       	sbci	r31, 0x80	; 128
    1032:	ee 0f       	add	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	e4 0f       	add	r30, r20
    1038:	f5 1f       	adc	r31, r21
    103a:	11 82       	std	Z+1, r1	; 0x01
    103c:	10 82       	st	Z, r1
   (*QCount)--;
    103e:	2d 91       	ld	r18, X+
    1040:	3c 91       	ld	r19, X
    1042:	11 97       	sbiw	r26, 0x01	; 1
    1044:	21 50       	subi	r18, 0x01	; 1
    1046:	31 09       	sbc	r19, r1
    1048:	11 96       	adiw	r26, 0x01	; 1
    104a:	3c 93       	st	X, r19
    104c:	2e 93       	st	-X, r18

   return result;
    104e:	08 95       	ret
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
	   return NULL;
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
   volatile PD *result = (Queue[(*QCount)-1]);
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
   (*QCount)--;

   return result;
}
    1054:	08 95       	ret

00001056 <enqueuePeriodic>:

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1056:	cf 92       	push	r12
    1058:	df 92       	push	r13
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1068:	ea 01       	movw	r28, r20
    106a:	28 81       	ld	r18, Y
    106c:	39 81       	ldd	r19, Y+1	; 0x01

   return result;
}

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
	if(isFull(QCount)) {
    106e:	2f 30       	cpi	r18, 0x0F	; 15
    1070:	31 05       	cpc	r19, r1
    1072:	09 f4       	brne	.+2      	; 0x1076 <enqueuePeriodic+0x20>
    1074:	4a c0       	rjmp	.+148    	; 0x110a <enqueuePeriodic+0xb4>
		return;
	}

	int i = (*QCount) - 1;
    1076:	28 81       	ld	r18, Y
    1078:	39 81       	ldd	r19, Y+1	; 0x01
    107a:	21 50       	subi	r18, 0x01	; 1
    107c:	31 09       	sbc	r19, r1

	volatile PD *new = *p;
    107e:	fc 01       	movw	r30, r24
    1080:	00 81       	ld	r16, Z
    1082:	11 81       	ldd	r17, Z+1	; 0x01

	volatile PD *temp = Queue[i];
    1084:	f9 01       	movw	r30, r18
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	db 01       	movw	r26, r22
    108c:	ae 0f       	add	r26, r30
    108e:	bf 1f       	adc	r27, r31
    1090:	4d 91       	ld	r20, X+
    1092:	5c 91       	ld	r21, X

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    1094:	33 23       	and	r19, r19
    1096:	3c f1       	brlt	.+78     	; 0x10e6 <enqueuePeriodic+0x90>
    1098:	d8 01       	movw	r26, r16
    109a:	aa 5e       	subi	r26, 0xEA	; 234
    109c:	be 4f       	sbci	r27, 0xFE	; 254
    109e:	ed 90       	ld	r14, X+
    10a0:	fc 90       	ld	r15, X
    10a2:	da 01       	movw	r26, r20
    10a4:	aa 5e       	subi	r26, 0xEA	; 234
    10a6:	be 4f       	sbci	r27, 0xFE	; 254
    10a8:	4d 91       	ld	r20, X+
    10aa:	5c 91       	ld	r21, X
    10ac:	e4 16       	cp	r14, r20
    10ae:	f5 06       	cpc	r15, r21
    10b0:	d4 f0       	brlt	.+52     	; 0x10e6 <enqueuePeriodic+0x90>
    10b2:	e6 0f       	add	r30, r22
    10b4:	f7 1f       	adc	r31, r23
    10b6:	0a 5e       	subi	r16, 0xEA	; 234
    10b8:	1e 4f       	sbci	r17, 0xFE	; 254
		Queue[i+1] = Queue[i];
    10ba:	a0 81       	ld	r26, Z
    10bc:	b1 81       	ldd	r27, Z+1	; 0x01
    10be:	b3 83       	std	Z+3, r27	; 0x03
    10c0:	a2 83       	std	Z+2, r26	; 0x02
		i--;
    10c2:	21 50       	subi	r18, 0x01	; 1
    10c4:	31 09       	sbc	r19, r1
		temp = Queue[i];
    10c6:	b2 91       	ld	r27, -Z
    10c8:	a2 91       	ld	r26, -Z

	volatile PD *new = *p;

	volatile PD *temp = Queue[i];

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    10ca:	2f 3f       	cpi	r18, 0xFF	; 255
    10cc:	4f ef       	ldi	r20, 0xFF	; 255
    10ce:	34 07       	cpc	r19, r20
    10d0:	51 f0       	breq	.+20     	; 0x10e6 <enqueuePeriodic+0x90>
    10d2:	e8 01       	movw	r28, r16
    10d4:	e8 80       	ld	r14, Y
    10d6:	f9 80       	ldd	r15, Y+1	; 0x01
    10d8:	aa 5e       	subi	r26, 0xEA	; 234
    10da:	be 4f       	sbci	r27, 0xFE	; 254
    10dc:	4d 91       	ld	r20, X+
    10de:	5c 91       	ld	r21, X
    10e0:	e4 16       	cp	r14, r20
    10e2:	f5 06       	cpc	r15, r21
    10e4:	54 f7       	brge	.-44     	; 0x10ba <enqueuePeriodic+0x64>
		Queue[i+1] = Queue[i];
		i--;
		temp = Queue[i];
	}

	Queue[i+1] = *p;
    10e6:	fc 01       	movw	r30, r24
    10e8:	80 81       	ld	r24, Z
    10ea:	91 81       	ldd	r25, Z+1	; 0x01
    10ec:	2f 5f       	subi	r18, 0xFF	; 255
    10ee:	3f 4f       	sbci	r19, 0xFF	; 255
    10f0:	22 0f       	add	r18, r18
    10f2:	33 1f       	adc	r19, r19
    10f4:	fb 01       	movw	r30, r22
    10f6:	e2 0f       	add	r30, r18
    10f8:	f3 1f       	adc	r31, r19
    10fa:	91 83       	std	Z+1, r25	; 0x01
    10fc:	80 83       	st	Z, r24
	(*QCount)++;
    10fe:	e6 01       	movw	r28, r12
    1100:	88 81       	ld	r24, Y
    1102:	99 81       	ldd	r25, Y+1	; 0x01
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	99 83       	std	Y+1, r25	; 0x01
    1108:	88 83       	st	Y, r24
}
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	08 95       	ret

0000111c <peek>:

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    111c:	fb 01       	movw	r30, r22
    111e:	20 81       	ld	r18, Z
    1120:	31 81       	ldd	r19, Z+1	; 0x01
	Queue[i+1] = *p;
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
    1122:	23 2b       	or	r18, r19
    1124:	61 f0       	breq	.+24     	; 0x113e <peek+0x22>
		return NULL;
	}
	volatile PD *result = (Queue[(*QCount)-1]);
    1126:	20 81       	ld	r18, Z
    1128:	31 81       	ldd	r19, Z+1	; 0x01
    112a:	f9 01       	movw	r30, r18
    112c:	e1 50       	subi	r30, 0x01	; 1
    112e:	f0 48       	sbci	r31, 0x80	; 128
    1130:	ee 0f       	add	r30, r30
    1132:	ff 1f       	adc	r31, r31
    1134:	e8 0f       	add	r30, r24
    1136:	f9 1f       	adc	r31, r25
    1138:	80 81       	ld	r24, Z
    113a:	91 81       	ldd	r25, Z+1	; 0x01
	return result;
    113c:	08 95       	ret
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
		return NULL;
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
	}
	volatile PD *result = (Queue[(*QCount)-1]);
	return result;
    1142:	08 95       	ret

00001144 <Test_Task>:
#include "TEST_too_many_tasks.h"

void Test_Task(){
	Task_Terminate();
    1144:	fa c8       	rjmp	.-3596   	; 0x33a <Task_Terminate>
    1146:	08 95       	ret

00001148 <test_too_many_tasks>:
}

void test_too_many_tasks(void){
    1148:	af 92       	push	r10
    114a:	bf 92       	push	r11
    114c:	cf 92       	push	r12
    114e:	df 92       	push	r13
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	e7 97       	sbiw	r28, 0x37	; 55
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	cd bf       	out	0x3d, r28	; 61
	uart_start();
    116c:	60 d0       	rcall	.+192    	; 0x122e <uart_start>
	int x; 
	PID k;
	char my_str[50] = "Tasks Created: ";
    116e:	80 e1       	ldi	r24, 0x10	; 16
    1170:	e0 e0       	ldi	r30, 0x00	; 0
    1172:	f2 e0       	ldi	r31, 0x02	; 2
    1174:	de 01       	movw	r26, r28
    1176:	11 96       	adiw	r26, 0x01	; 1
    1178:	01 90       	ld	r0, Z+
    117a:	0d 92       	st	X+, r0
    117c:	8a 95       	dec	r24
    117e:	e1 f7       	brne	.-8      	; 0x1178 <test_too_many_tasks+0x30>
    1180:	fe 01       	movw	r30, r28
    1182:	71 96       	adiw	r30, 0x11	; 17
    1184:	82 e2       	ldi	r24, 0x22	; 34
    1186:	df 01       	movw	r26, r30
    1188:	1d 92       	st	X+, r1
    118a:	8a 95       	dec	r24
    118c:	e9 f7       	brne	.-6      	; 0x1188 <test_too_many_tasks+0x40>
	char temp[5];
	for(x = 0; x < MAXTHREAD*2 ; x++){
    118e:	00 e0       	ldi	r16, 0x00	; 0
    1190:	10 e0       	ldi	r17, 0x00	; 0
		k = Task_Create_System(Test_Task, x);
		sprintf(temp, "%d", x+1);
    1192:	0f 2e       	mov	r0, r31
    1194:	f2 e3       	ldi	r31, 0x32	; 50
    1196:	cf 2e       	mov	r12, r31
    1198:	f2 e0       	ldi	r31, 0x02	; 2
    119a:	df 2e       	mov	r13, r31
    119c:	f0 2d       	mov	r31, r0
    119e:	7e 01       	movw	r14, r28
    11a0:	b3 e3       	ldi	r27, 0x33	; 51
    11a2:	eb 0e       	add	r14, r27
    11a4:	f1 1c       	adc	r15, r1
	int x; 
	PID k;
	char my_str[50] = "Tasks Created: ";
	char temp[5];
	for(x = 0; x < MAXTHREAD*2 ; x++){
		k = Task_Create_System(Test_Task, x);
    11a6:	b8 01       	movw	r22, r16
    11a8:	82 ea       	ldi	r24, 0xA2	; 162
    11aa:	98 e0       	ldi	r25, 0x08	; 8
    11ac:	7c da       	rcall	.-2824   	; 0x6a6 <Task_Create_System>
    11ae:	5c 01       	movw	r10, r24
		sprintf(temp, "%d", x+1);
    11b0:	0f 5f       	subi	r16, 0xFF	; 255
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	1f 93       	push	r17
    11b6:	0f 93       	push	r16
    11b8:	df 92       	push	r13
    11ba:	cf 92       	push	r12
    11bc:	ff 92       	push	r15
    11be:	ef 92       	push	r14
    11c0:	7a d0       	rcall	.+244    	; 0x12b6 <sprintf>
		strcat(my_str, temp);
    11c2:	b7 01       	movw	r22, r14
    11c4:	ce 01       	movw	r24, r28
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	6b d0       	rcall	.+214    	; 0x12a0 <strcat>
		if(k != NULL)
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	ab 28       	or	r10, r11
    11d8:	b9 f0       	breq	.+46     	; 0x1208 <test_too_many_tasks+0xc0>
			uart_write(my_str);
    11da:	ce 01       	movw	r24, r28
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	3a d0       	rcall	.+116    	; 0x1254 <uart_write>
		my_str[15] = '\0';
    11e0:	18 8a       	std	Y+16, r1	; 0x10
    11e2:	c8 01       	movw	r24, r16
    11e4:	01 97       	sbiw	r24, 0x01	; 1
		if(x >= MAXTHREAD && k != NULL){
    11e6:	40 97       	sbiw	r24, 0x10	; 16
    11e8:	3c f0       	brlt	.+14     	; 0x11f8 <test_too_many_tasks+0xb0>
			uart_write("Too many tasks created!");
    11ea:	85 e3       	ldi	r24, 0x35	; 53
    11ec:	92 e0       	ldi	r25, 0x02	; 2
    11ee:	32 d0       	rcall	.+100    	; 0x1254 <uart_write>
			uart_write("test_too_many_tasks                        FAILED");
    11f0:	8d e4       	ldi	r24, 0x4D	; 77
    11f2:	92 e0       	ldi	r25, 0x02	; 2
    11f4:	2f d0       	rcall	.+94     	; 0x1254 <uart_write>
			Task_Terminate();
    11f6:	a1 d8       	rcall	.-3774   	; 0x33a <Task_Terminate>
	uart_start();
	int x; 
	PID k;
	char my_str[50] = "Tasks Created: ";
	char temp[5];
	for(x = 0; x < MAXTHREAD*2 ; x++){
    11f8:	00 32       	cpi	r16, 0x20	; 32
    11fa:	11 05       	cpc	r17, r1
    11fc:	a1 f6       	brne	.-88     	; 0x11a6 <test_too_many_tasks+0x5e>
			uart_write("Too many tasks created!");
			uart_write("test_too_many_tasks                        FAILED");
			Task_Terminate();
		}
	}
	uart_write("test_too_many_tasks                        PASSED");
    11fe:	8f e7       	ldi	r24, 0x7F	; 127
    1200:	92 e0       	ldi	r25, 0x02	; 2
    1202:	28 d0       	rcall	.+80     	; 0x1254 <uart_write>
	Task_Terminate();
    1204:	9a d8       	rcall	.-3788   	; 0x33a <Task_Terminate>
    1206:	02 c0       	rjmp	.+4      	; 0x120c <test_too_many_tasks+0xc4>
		k = Task_Create_System(Test_Task, x);
		sprintf(temp, "%d", x+1);
		strcat(my_str, temp);
		if(k != NULL)
			uart_write(my_str);
		my_str[15] = '\0';
    1208:	18 8a       	std	Y+16, r1	; 0x10
    120a:	f6 cf       	rjmp	.-20     	; 0x11f8 <test_too_many_tasks+0xb0>
			Task_Terminate();
		}
	}
	uart_write("test_too_many_tasks                        PASSED");
	Task_Terminate();
    120c:	e7 96       	adiw	r28, 0x37	; 55
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	bf 90       	pop	r11
    122a:	af 90       	pop	r10
    122c:	08 95       	ret

0000122e <uart_start>:
 */ 

#include "uart.h"

void uart_start(void) {
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //transmit side of hardware
    122e:	e1 ec       	ldi	r30, 0xC1	; 193
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	88 61       	ori	r24, 0x18	; 24
    1236:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); //receive side of hardware
    1238:	a2 ec       	ldi	r26, 0xC2	; 194
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	8c 91       	ld	r24, X
    123e:	86 60       	ori	r24, 0x06	; 6
    1240:	8c 93       	st	X, r24

	UBRR0L = BAUD_PRESCALE; //set the baud to 9600, have to split it into the two registers
    1242:	87 e6       	ldi	r24, 0x67	; 103
    1244:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = (BAUD_PRESCALE >> 8); //high end of baud register
    1248:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>

	UCSR0B |= (1 << RXCIE0); //recieve data interrupt, makes sure we don't loose data
    124c:	80 81       	ld	r24, Z
    124e:	80 68       	ori	r24, 0x80	; 128
    1250:	80 83       	st	Z, r24
    1252:	08 95       	ret

00001254 <uart_write>:

}

void uart_write(char *data) {
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
    while (*data) {
    1258:	fc 01       	movw	r30, r24
    125a:	20 81       	ld	r18, Z
    125c:	22 23       	and	r18, r18
    125e:	69 f0       	breq	.+26     	; 0x127a <uart_write+0x26>
    1260:	dc 01       	movw	r26, r24
    1262:	11 96       	adiw	r26, 0x01	; 1
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    1264:	e0 ec       	ldi	r30, 0xC0	; 192
    1266:	f0 e0       	ldi	r31, 0x00	; 0
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
    1268:	c6 ec       	ldi	r28, 0xC6	; 198
    126a:	d0 e0       	ldi	r29, 0x00	; 0
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
    while (*data) {
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    126c:	90 81       	ld	r25, Z
    126e:	95 ff       	sbrs	r25, 5
    1270:	fd cf       	rjmp	.-6      	; 0x126c <uart_write+0x18>
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
    1272:	28 83       	st	Y, r18
void uart_write(char *data) {
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
    while (*data) {
    1274:	2d 91       	ld	r18, X+
    1276:	21 11       	cpse	r18, r1
    1278:	f9 cf       	rjmp	.-14     	; 0x126c <uart_write+0x18>
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
        data += 1;//go to new bit in string
    }
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    127a:	e0 ec       	ldi	r30, 0xC0	; 192
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	85 ff       	sbrs	r24, 5
    1282:	fd cf       	rjmp	.-6      	; 0x127e <uart_write+0x2a>
    UDR0 = '\n';//send a new line just to be sure
    1284:	8a e0       	ldi	r24, 0x0A	; 10
    1286:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	08 95       	ret

00001290 <__tablejump2__>:
    1290:	ee 0f       	add	r30, r30
    1292:	ff 1f       	adc	r31, r31
    1294:	88 1f       	adc	r24, r24
    1296:	8b bf       	out	0x3b, r24	; 59
    1298:	07 90       	elpm	r0, Z+
    129a:	f6 91       	elpm	r31, Z
    129c:	e0 2d       	mov	r30, r0
    129e:	19 94       	eijmp

000012a0 <strcat>:
    12a0:	fb 01       	movw	r30, r22
    12a2:	dc 01       	movw	r26, r24
    12a4:	0d 90       	ld	r0, X+
    12a6:	00 20       	and	r0, r0
    12a8:	e9 f7       	brne	.-6      	; 0x12a4 <strcat+0x4>
    12aa:	11 97       	sbiw	r26, 0x01	; 1
    12ac:	01 90       	ld	r0, Z+
    12ae:	0d 92       	st	X+, r0
    12b0:	00 20       	and	r0, r0
    12b2:	e1 f7       	brne	.-8      	; 0x12ac <strcat+0xc>
    12b4:	08 95       	ret

000012b6 <sprintf>:
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	cf 93       	push	r28
    12bc:	df 93       	push	r29
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	2e 97       	sbiw	r28, 0x0e	; 14
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	0e 89       	ldd	r16, Y+22	; 0x16
    12d0:	1f 89       	ldd	r17, Y+23	; 0x17
    12d2:	86 e0       	ldi	r24, 0x06	; 6
    12d4:	8c 83       	std	Y+4, r24	; 0x04
    12d6:	1a 83       	std	Y+2, r17	; 0x02
    12d8:	09 83       	std	Y+1, r16	; 0x01
    12da:	8f ef       	ldi	r24, 0xFF	; 255
    12dc:	9f e7       	ldi	r25, 0x7F	; 127
    12de:	9e 83       	std	Y+6, r25	; 0x06
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	ae 01       	movw	r20, r28
    12e4:	46 5e       	subi	r20, 0xE6	; 230
    12e6:	5f 4f       	sbci	r21, 0xFF	; 255
    12e8:	68 8d       	ldd	r22, Y+24	; 0x18
    12ea:	79 8d       	ldd	r23, Y+25	; 0x19
    12ec:	ce 01       	movw	r24, r28
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	11 d0       	rcall	.+34     	; 0x1314 <vfprintf>
    12f2:	2f 81       	ldd	r18, Y+7	; 0x07
    12f4:	38 85       	ldd	r19, Y+8	; 0x08
    12f6:	f8 01       	movw	r30, r16
    12f8:	e2 0f       	add	r30, r18
    12fa:	f3 1f       	adc	r31, r19
    12fc:	10 82       	st	Z, r1
    12fe:	2e 96       	adiw	r28, 0x0e	; 14
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	08 95       	ret

00001314 <vfprintf>:
    1314:	2f 92       	push	r2
    1316:	3f 92       	push	r3
    1318:	4f 92       	push	r4
    131a:	5f 92       	push	r5
    131c:	6f 92       	push	r6
    131e:	7f 92       	push	r7
    1320:	8f 92       	push	r8
    1322:	9f 92       	push	r9
    1324:	af 92       	push	r10
    1326:	bf 92       	push	r11
    1328:	cf 92       	push	r12
    132a:	df 92       	push	r13
    132c:	ef 92       	push	r14
    132e:	ff 92       	push	r15
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	2c 97       	sbiw	r28, 0x0c	; 12
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	7c 01       	movw	r14, r24
    134a:	6b 01       	movw	r12, r22
    134c:	8a 01       	movw	r16, r20
    134e:	fc 01       	movw	r30, r24
    1350:	17 82       	std	Z+7, r1	; 0x07
    1352:	16 82       	std	Z+6, r1	; 0x06
    1354:	83 81       	ldd	r24, Z+3	; 0x03
    1356:	81 ff       	sbrs	r24, 1
    1358:	b0 c1       	rjmp	.+864    	; 0x16ba <vfprintf+0x3a6>
    135a:	ce 01       	movw	r24, r28
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	4c 01       	movw	r8, r24
    1360:	f7 01       	movw	r30, r14
    1362:	93 81       	ldd	r25, Z+3	; 0x03
    1364:	f6 01       	movw	r30, r12
    1366:	93 fd       	sbrc	r25, 3
    1368:	85 91       	lpm	r24, Z+
    136a:	93 ff       	sbrs	r25, 3
    136c:	81 91       	ld	r24, Z+
    136e:	6f 01       	movw	r12, r30
    1370:	88 23       	and	r24, r24
    1372:	09 f4       	brne	.+2      	; 0x1376 <vfprintf+0x62>
    1374:	9e c1       	rjmp	.+828    	; 0x16b2 <vfprintf+0x39e>
    1376:	85 32       	cpi	r24, 0x25	; 37
    1378:	39 f4       	brne	.+14     	; 0x1388 <vfprintf+0x74>
    137a:	93 fd       	sbrc	r25, 3
    137c:	85 91       	lpm	r24, Z+
    137e:	93 ff       	sbrs	r25, 3
    1380:	81 91       	ld	r24, Z+
    1382:	6f 01       	movw	r12, r30
    1384:	85 32       	cpi	r24, 0x25	; 37
    1386:	21 f4       	brne	.+8      	; 0x1390 <vfprintf+0x7c>
    1388:	b7 01       	movw	r22, r14
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	c7 d1       	rcall	.+910    	; 0x171c <fputc>
    138e:	e8 cf       	rjmp	.-48     	; 0x1360 <vfprintf+0x4c>
    1390:	51 2c       	mov	r5, r1
    1392:	31 2c       	mov	r3, r1
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	20 32       	cpi	r18, 0x20	; 32
    1398:	a0 f4       	brcc	.+40     	; 0x13c2 <vfprintf+0xae>
    139a:	8b 32       	cpi	r24, 0x2B	; 43
    139c:	69 f0       	breq	.+26     	; 0x13b8 <vfprintf+0xa4>
    139e:	30 f4       	brcc	.+12     	; 0x13ac <vfprintf+0x98>
    13a0:	80 32       	cpi	r24, 0x20	; 32
    13a2:	59 f0       	breq	.+22     	; 0x13ba <vfprintf+0xa6>
    13a4:	83 32       	cpi	r24, 0x23	; 35
    13a6:	69 f4       	brne	.+26     	; 0x13c2 <vfprintf+0xae>
    13a8:	20 61       	ori	r18, 0x10	; 16
    13aa:	2c c0       	rjmp	.+88     	; 0x1404 <vfprintf+0xf0>
    13ac:	8d 32       	cpi	r24, 0x2D	; 45
    13ae:	39 f0       	breq	.+14     	; 0x13be <vfprintf+0xaa>
    13b0:	80 33       	cpi	r24, 0x30	; 48
    13b2:	39 f4       	brne	.+14     	; 0x13c2 <vfprintf+0xae>
    13b4:	21 60       	ori	r18, 0x01	; 1
    13b6:	26 c0       	rjmp	.+76     	; 0x1404 <vfprintf+0xf0>
    13b8:	22 60       	ori	r18, 0x02	; 2
    13ba:	24 60       	ori	r18, 0x04	; 4
    13bc:	23 c0       	rjmp	.+70     	; 0x1404 <vfprintf+0xf0>
    13be:	28 60       	ori	r18, 0x08	; 8
    13c0:	21 c0       	rjmp	.+66     	; 0x1404 <vfprintf+0xf0>
    13c2:	27 fd       	sbrc	r18, 7
    13c4:	27 c0       	rjmp	.+78     	; 0x1414 <vfprintf+0x100>
    13c6:	30 ed       	ldi	r19, 0xD0	; 208
    13c8:	38 0f       	add	r19, r24
    13ca:	3a 30       	cpi	r19, 0x0A	; 10
    13cc:	78 f4       	brcc	.+30     	; 0x13ec <vfprintf+0xd8>
    13ce:	26 ff       	sbrs	r18, 6
    13d0:	06 c0       	rjmp	.+12     	; 0x13de <vfprintf+0xca>
    13d2:	fa e0       	ldi	r31, 0x0A	; 10
    13d4:	5f 9e       	mul	r5, r31
    13d6:	30 0d       	add	r19, r0
    13d8:	11 24       	eor	r1, r1
    13da:	53 2e       	mov	r5, r19
    13dc:	13 c0       	rjmp	.+38     	; 0x1404 <vfprintf+0xf0>
    13de:	8a e0       	ldi	r24, 0x0A	; 10
    13e0:	38 9e       	mul	r3, r24
    13e2:	30 0d       	add	r19, r0
    13e4:	11 24       	eor	r1, r1
    13e6:	33 2e       	mov	r3, r19
    13e8:	20 62       	ori	r18, 0x20	; 32
    13ea:	0c c0       	rjmp	.+24     	; 0x1404 <vfprintf+0xf0>
    13ec:	8e 32       	cpi	r24, 0x2E	; 46
    13ee:	21 f4       	brne	.+8      	; 0x13f8 <vfprintf+0xe4>
    13f0:	26 fd       	sbrc	r18, 6
    13f2:	5f c1       	rjmp	.+702    	; 0x16b2 <vfprintf+0x39e>
    13f4:	20 64       	ori	r18, 0x40	; 64
    13f6:	06 c0       	rjmp	.+12     	; 0x1404 <vfprintf+0xf0>
    13f8:	8c 36       	cpi	r24, 0x6C	; 108
    13fa:	11 f4       	brne	.+4      	; 0x1400 <vfprintf+0xec>
    13fc:	20 68       	ori	r18, 0x80	; 128
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <vfprintf+0xf0>
    1400:	88 36       	cpi	r24, 0x68	; 104
    1402:	41 f4       	brne	.+16     	; 0x1414 <vfprintf+0x100>
    1404:	f6 01       	movw	r30, r12
    1406:	93 fd       	sbrc	r25, 3
    1408:	85 91       	lpm	r24, Z+
    140a:	93 ff       	sbrs	r25, 3
    140c:	81 91       	ld	r24, Z+
    140e:	6f 01       	movw	r12, r30
    1410:	81 11       	cpse	r24, r1
    1412:	c1 cf       	rjmp	.-126    	; 0x1396 <vfprintf+0x82>
    1414:	98 2f       	mov	r25, r24
    1416:	9f 7d       	andi	r25, 0xDF	; 223
    1418:	95 54       	subi	r25, 0x45	; 69
    141a:	93 30       	cpi	r25, 0x03	; 3
    141c:	28 f4       	brcc	.+10     	; 0x1428 <vfprintf+0x114>
    141e:	0c 5f       	subi	r16, 0xFC	; 252
    1420:	1f 4f       	sbci	r17, 0xFF	; 255
    1422:	ff e3       	ldi	r31, 0x3F	; 63
    1424:	f9 83       	std	Y+1, r31	; 0x01
    1426:	0d c0       	rjmp	.+26     	; 0x1442 <vfprintf+0x12e>
    1428:	83 36       	cpi	r24, 0x63	; 99
    142a:	31 f0       	breq	.+12     	; 0x1438 <vfprintf+0x124>
    142c:	83 37       	cpi	r24, 0x73	; 115
    142e:	71 f0       	breq	.+28     	; 0x144c <vfprintf+0x138>
    1430:	83 35       	cpi	r24, 0x53	; 83
    1432:	09 f0       	breq	.+2      	; 0x1436 <vfprintf+0x122>
    1434:	57 c0       	rjmp	.+174    	; 0x14e4 <vfprintf+0x1d0>
    1436:	21 c0       	rjmp	.+66     	; 0x147a <vfprintf+0x166>
    1438:	f8 01       	movw	r30, r16
    143a:	80 81       	ld	r24, Z
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	0e 5f       	subi	r16, 0xFE	; 254
    1440:	1f 4f       	sbci	r17, 0xFF	; 255
    1442:	44 24       	eor	r4, r4
    1444:	43 94       	inc	r4
    1446:	51 2c       	mov	r5, r1
    1448:	54 01       	movw	r10, r8
    144a:	14 c0       	rjmp	.+40     	; 0x1474 <vfprintf+0x160>
    144c:	38 01       	movw	r6, r16
    144e:	f2 e0       	ldi	r31, 0x02	; 2
    1450:	6f 0e       	add	r6, r31
    1452:	71 1c       	adc	r7, r1
    1454:	f8 01       	movw	r30, r16
    1456:	a0 80       	ld	r10, Z
    1458:	b1 80       	ldd	r11, Z+1	; 0x01
    145a:	26 ff       	sbrs	r18, 6
    145c:	03 c0       	rjmp	.+6      	; 0x1464 <vfprintf+0x150>
    145e:	65 2d       	mov	r22, r5
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <vfprintf+0x154>
    1464:	6f ef       	ldi	r22, 0xFF	; 255
    1466:	7f ef       	ldi	r23, 0xFF	; 255
    1468:	c5 01       	movw	r24, r10
    146a:	2c 87       	std	Y+12, r18	; 0x0c
    146c:	4c d1       	rcall	.+664    	; 0x1706 <strnlen>
    146e:	2c 01       	movw	r4, r24
    1470:	83 01       	movw	r16, r6
    1472:	2c 85       	ldd	r18, Y+12	; 0x0c
    1474:	2f 77       	andi	r18, 0x7F	; 127
    1476:	22 2e       	mov	r2, r18
    1478:	16 c0       	rjmp	.+44     	; 0x14a6 <vfprintf+0x192>
    147a:	38 01       	movw	r6, r16
    147c:	f2 e0       	ldi	r31, 0x02	; 2
    147e:	6f 0e       	add	r6, r31
    1480:	71 1c       	adc	r7, r1
    1482:	f8 01       	movw	r30, r16
    1484:	a0 80       	ld	r10, Z
    1486:	b1 80       	ldd	r11, Z+1	; 0x01
    1488:	26 ff       	sbrs	r18, 6
    148a:	03 c0       	rjmp	.+6      	; 0x1492 <vfprintf+0x17e>
    148c:	65 2d       	mov	r22, r5
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <vfprintf+0x182>
    1492:	6f ef       	ldi	r22, 0xFF	; 255
    1494:	7f ef       	ldi	r23, 0xFF	; 255
    1496:	c5 01       	movw	r24, r10
    1498:	2c 87       	std	Y+12, r18	; 0x0c
    149a:	2a d1       	rcall	.+596    	; 0x16f0 <strnlen_P>
    149c:	2c 01       	movw	r4, r24
    149e:	2c 85       	ldd	r18, Y+12	; 0x0c
    14a0:	20 68       	ori	r18, 0x80	; 128
    14a2:	22 2e       	mov	r2, r18
    14a4:	83 01       	movw	r16, r6
    14a6:	23 fc       	sbrc	r2, 3
    14a8:	19 c0       	rjmp	.+50     	; 0x14dc <vfprintf+0x1c8>
    14aa:	83 2d       	mov	r24, r3
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	48 16       	cp	r4, r24
    14b0:	59 06       	cpc	r5, r25
    14b2:	a0 f4       	brcc	.+40     	; 0x14dc <vfprintf+0x1c8>
    14b4:	b7 01       	movw	r22, r14
    14b6:	80 e2       	ldi	r24, 0x20	; 32
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	30 d1       	rcall	.+608    	; 0x171c <fputc>
    14bc:	3a 94       	dec	r3
    14be:	f5 cf       	rjmp	.-22     	; 0x14aa <vfprintf+0x196>
    14c0:	f5 01       	movw	r30, r10
    14c2:	27 fc       	sbrc	r2, 7
    14c4:	85 91       	lpm	r24, Z+
    14c6:	27 fe       	sbrs	r2, 7
    14c8:	81 91       	ld	r24, Z+
    14ca:	5f 01       	movw	r10, r30
    14cc:	b7 01       	movw	r22, r14
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	25 d1       	rcall	.+586    	; 0x171c <fputc>
    14d2:	31 10       	cpse	r3, r1
    14d4:	3a 94       	dec	r3
    14d6:	f1 e0       	ldi	r31, 0x01	; 1
    14d8:	4f 1a       	sub	r4, r31
    14da:	51 08       	sbc	r5, r1
    14dc:	41 14       	cp	r4, r1
    14de:	51 04       	cpc	r5, r1
    14e0:	79 f7       	brne	.-34     	; 0x14c0 <vfprintf+0x1ac>
    14e2:	de c0       	rjmp	.+444    	; 0x16a0 <vfprintf+0x38c>
    14e4:	84 36       	cpi	r24, 0x64	; 100
    14e6:	11 f0       	breq	.+4      	; 0x14ec <vfprintf+0x1d8>
    14e8:	89 36       	cpi	r24, 0x69	; 105
    14ea:	31 f5       	brne	.+76     	; 0x1538 <vfprintf+0x224>
    14ec:	f8 01       	movw	r30, r16
    14ee:	27 ff       	sbrs	r18, 7
    14f0:	07 c0       	rjmp	.+14     	; 0x1500 <vfprintf+0x1ec>
    14f2:	60 81       	ld	r22, Z
    14f4:	71 81       	ldd	r23, Z+1	; 0x01
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	93 81       	ldd	r25, Z+3	; 0x03
    14fa:	0c 5f       	subi	r16, 0xFC	; 252
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	08 c0       	rjmp	.+16     	; 0x1510 <vfprintf+0x1fc>
    1500:	60 81       	ld	r22, Z
    1502:	71 81       	ldd	r23, Z+1	; 0x01
    1504:	07 2e       	mov	r0, r23
    1506:	00 0c       	add	r0, r0
    1508:	88 0b       	sbc	r24, r24
    150a:	99 0b       	sbc	r25, r25
    150c:	0e 5f       	subi	r16, 0xFE	; 254
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	2f 76       	andi	r18, 0x6F	; 111
    1512:	72 2e       	mov	r7, r18
    1514:	97 ff       	sbrs	r25, 7
    1516:	09 c0       	rjmp	.+18     	; 0x152a <vfprintf+0x216>
    1518:	90 95       	com	r25
    151a:	80 95       	com	r24
    151c:	70 95       	com	r23
    151e:	61 95       	neg	r22
    1520:	7f 4f       	sbci	r23, 0xFF	; 255
    1522:	8f 4f       	sbci	r24, 0xFF	; 255
    1524:	9f 4f       	sbci	r25, 0xFF	; 255
    1526:	20 68       	ori	r18, 0x80	; 128
    1528:	72 2e       	mov	r7, r18
    152a:	2a e0       	ldi	r18, 0x0A	; 10
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	a4 01       	movw	r20, r8
    1530:	2d d1       	rcall	.+602    	; 0x178c <__ultoa_invert>
    1532:	a8 2e       	mov	r10, r24
    1534:	a8 18       	sub	r10, r8
    1536:	43 c0       	rjmp	.+134    	; 0x15be <vfprintf+0x2aa>
    1538:	85 37       	cpi	r24, 0x75	; 117
    153a:	29 f4       	brne	.+10     	; 0x1546 <vfprintf+0x232>
    153c:	2f 7e       	andi	r18, 0xEF	; 239
    153e:	b2 2e       	mov	r11, r18
    1540:	2a e0       	ldi	r18, 0x0A	; 10
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	25 c0       	rjmp	.+74     	; 0x1590 <vfprintf+0x27c>
    1546:	f2 2f       	mov	r31, r18
    1548:	f9 7f       	andi	r31, 0xF9	; 249
    154a:	bf 2e       	mov	r11, r31
    154c:	8f 36       	cpi	r24, 0x6F	; 111
    154e:	c1 f0       	breq	.+48     	; 0x1580 <vfprintf+0x26c>
    1550:	18 f4       	brcc	.+6      	; 0x1558 <vfprintf+0x244>
    1552:	88 35       	cpi	r24, 0x58	; 88
    1554:	79 f0       	breq	.+30     	; 0x1574 <vfprintf+0x260>
    1556:	ad c0       	rjmp	.+346    	; 0x16b2 <vfprintf+0x39e>
    1558:	80 37       	cpi	r24, 0x70	; 112
    155a:	19 f0       	breq	.+6      	; 0x1562 <vfprintf+0x24e>
    155c:	88 37       	cpi	r24, 0x78	; 120
    155e:	21 f0       	breq	.+8      	; 0x1568 <vfprintf+0x254>
    1560:	a8 c0       	rjmp	.+336    	; 0x16b2 <vfprintf+0x39e>
    1562:	2f 2f       	mov	r18, r31
    1564:	20 61       	ori	r18, 0x10	; 16
    1566:	b2 2e       	mov	r11, r18
    1568:	b4 fe       	sbrs	r11, 4
    156a:	0d c0       	rjmp	.+26     	; 0x1586 <vfprintf+0x272>
    156c:	8b 2d       	mov	r24, r11
    156e:	84 60       	ori	r24, 0x04	; 4
    1570:	b8 2e       	mov	r11, r24
    1572:	09 c0       	rjmp	.+18     	; 0x1586 <vfprintf+0x272>
    1574:	24 ff       	sbrs	r18, 4
    1576:	0a c0       	rjmp	.+20     	; 0x158c <vfprintf+0x278>
    1578:	9f 2f       	mov	r25, r31
    157a:	96 60       	ori	r25, 0x06	; 6
    157c:	b9 2e       	mov	r11, r25
    157e:	06 c0       	rjmp	.+12     	; 0x158c <vfprintf+0x278>
    1580:	28 e0       	ldi	r18, 0x08	; 8
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	05 c0       	rjmp	.+10     	; 0x1590 <vfprintf+0x27c>
    1586:	20 e1       	ldi	r18, 0x10	; 16
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <vfprintf+0x27c>
    158c:	20 e1       	ldi	r18, 0x10	; 16
    158e:	32 e0       	ldi	r19, 0x02	; 2
    1590:	f8 01       	movw	r30, r16
    1592:	b7 fe       	sbrs	r11, 7
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <vfprintf+0x290>
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	0c 5f       	subi	r16, 0xFC	; 252
    15a0:	1f 4f       	sbci	r17, 0xFF	; 255
    15a2:	06 c0       	rjmp	.+12     	; 0x15b0 <vfprintf+0x29c>
    15a4:	60 81       	ld	r22, Z
    15a6:	71 81       	ldd	r23, Z+1	; 0x01
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0e 5f       	subi	r16, 0xFE	; 254
    15ae:	1f 4f       	sbci	r17, 0xFF	; 255
    15b0:	a4 01       	movw	r20, r8
    15b2:	ec d0       	rcall	.+472    	; 0x178c <__ultoa_invert>
    15b4:	a8 2e       	mov	r10, r24
    15b6:	a8 18       	sub	r10, r8
    15b8:	fb 2d       	mov	r31, r11
    15ba:	ff 77       	andi	r31, 0x7F	; 127
    15bc:	7f 2e       	mov	r7, r31
    15be:	76 fe       	sbrs	r7, 6
    15c0:	0b c0       	rjmp	.+22     	; 0x15d8 <vfprintf+0x2c4>
    15c2:	37 2d       	mov	r19, r7
    15c4:	3e 7f       	andi	r19, 0xFE	; 254
    15c6:	a5 14       	cp	r10, r5
    15c8:	50 f4       	brcc	.+20     	; 0x15de <vfprintf+0x2ca>
    15ca:	74 fe       	sbrs	r7, 4
    15cc:	0a c0       	rjmp	.+20     	; 0x15e2 <vfprintf+0x2ce>
    15ce:	72 fc       	sbrc	r7, 2
    15d0:	08 c0       	rjmp	.+16     	; 0x15e2 <vfprintf+0x2ce>
    15d2:	37 2d       	mov	r19, r7
    15d4:	3e 7e       	andi	r19, 0xEE	; 238
    15d6:	05 c0       	rjmp	.+10     	; 0x15e2 <vfprintf+0x2ce>
    15d8:	ba 2c       	mov	r11, r10
    15da:	37 2d       	mov	r19, r7
    15dc:	03 c0       	rjmp	.+6      	; 0x15e4 <vfprintf+0x2d0>
    15de:	ba 2c       	mov	r11, r10
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <vfprintf+0x2d0>
    15e2:	b5 2c       	mov	r11, r5
    15e4:	34 ff       	sbrs	r19, 4
    15e6:	0d c0       	rjmp	.+26     	; 0x1602 <vfprintf+0x2ee>
    15e8:	fe 01       	movw	r30, r28
    15ea:	ea 0d       	add	r30, r10
    15ec:	f1 1d       	adc	r31, r1
    15ee:	80 81       	ld	r24, Z
    15f0:	80 33       	cpi	r24, 0x30	; 48
    15f2:	11 f4       	brne	.+4      	; 0x15f8 <vfprintf+0x2e4>
    15f4:	39 7e       	andi	r19, 0xE9	; 233
    15f6:	09 c0       	rjmp	.+18     	; 0x160a <vfprintf+0x2f6>
    15f8:	32 ff       	sbrs	r19, 2
    15fa:	06 c0       	rjmp	.+12     	; 0x1608 <vfprintf+0x2f4>
    15fc:	b3 94       	inc	r11
    15fe:	b3 94       	inc	r11
    1600:	04 c0       	rjmp	.+8      	; 0x160a <vfprintf+0x2f6>
    1602:	83 2f       	mov	r24, r19
    1604:	86 78       	andi	r24, 0x86	; 134
    1606:	09 f0       	breq	.+2      	; 0x160a <vfprintf+0x2f6>
    1608:	b3 94       	inc	r11
    160a:	33 fd       	sbrc	r19, 3
    160c:	12 c0       	rjmp	.+36     	; 0x1632 <vfprintf+0x31e>
    160e:	30 ff       	sbrs	r19, 0
    1610:	06 c0       	rjmp	.+12     	; 0x161e <vfprintf+0x30a>
    1612:	5a 2c       	mov	r5, r10
    1614:	b3 14       	cp	r11, r3
    1616:	18 f4       	brcc	.+6      	; 0x161e <vfprintf+0x30a>
    1618:	53 0c       	add	r5, r3
    161a:	5b 18       	sub	r5, r11
    161c:	b3 2c       	mov	r11, r3
    161e:	b3 14       	cp	r11, r3
    1620:	60 f4       	brcc	.+24     	; 0x163a <vfprintf+0x326>
    1622:	b7 01       	movw	r22, r14
    1624:	80 e2       	ldi	r24, 0x20	; 32
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	3c 87       	std	Y+12, r19	; 0x0c
    162a:	78 d0       	rcall	.+240    	; 0x171c <fputc>
    162c:	b3 94       	inc	r11
    162e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1630:	f6 cf       	rjmp	.-20     	; 0x161e <vfprintf+0x30a>
    1632:	b3 14       	cp	r11, r3
    1634:	10 f4       	brcc	.+4      	; 0x163a <vfprintf+0x326>
    1636:	3b 18       	sub	r3, r11
    1638:	01 c0       	rjmp	.+2      	; 0x163c <vfprintf+0x328>
    163a:	31 2c       	mov	r3, r1
    163c:	34 ff       	sbrs	r19, 4
    163e:	11 c0       	rjmp	.+34     	; 0x1662 <vfprintf+0x34e>
    1640:	b7 01       	movw	r22, r14
    1642:	80 e3       	ldi	r24, 0x30	; 48
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	3c 87       	std	Y+12, r19	; 0x0c
    1648:	69 d0       	rcall	.+210    	; 0x171c <fputc>
    164a:	3c 85       	ldd	r19, Y+12	; 0x0c
    164c:	32 ff       	sbrs	r19, 2
    164e:	16 c0       	rjmp	.+44     	; 0x167c <vfprintf+0x368>
    1650:	31 fd       	sbrc	r19, 1
    1652:	03 c0       	rjmp	.+6      	; 0x165a <vfprintf+0x346>
    1654:	88 e7       	ldi	r24, 0x78	; 120
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 c0       	rjmp	.+4      	; 0x165e <vfprintf+0x34a>
    165a:	88 e5       	ldi	r24, 0x58	; 88
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	b7 01       	movw	r22, r14
    1660:	0c c0       	rjmp	.+24     	; 0x167a <vfprintf+0x366>
    1662:	83 2f       	mov	r24, r19
    1664:	86 78       	andi	r24, 0x86	; 134
    1666:	51 f0       	breq	.+20     	; 0x167c <vfprintf+0x368>
    1668:	31 ff       	sbrs	r19, 1
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <vfprintf+0x35c>
    166c:	8b e2       	ldi	r24, 0x2B	; 43
    166e:	01 c0       	rjmp	.+2      	; 0x1672 <vfprintf+0x35e>
    1670:	80 e2       	ldi	r24, 0x20	; 32
    1672:	37 fd       	sbrc	r19, 7
    1674:	8d e2       	ldi	r24, 0x2D	; 45
    1676:	b7 01       	movw	r22, r14
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	50 d0       	rcall	.+160    	; 0x171c <fputc>
    167c:	a5 14       	cp	r10, r5
    167e:	30 f4       	brcc	.+12     	; 0x168c <vfprintf+0x378>
    1680:	b7 01       	movw	r22, r14
    1682:	80 e3       	ldi	r24, 0x30	; 48
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	4a d0       	rcall	.+148    	; 0x171c <fputc>
    1688:	5a 94       	dec	r5
    168a:	f8 cf       	rjmp	.-16     	; 0x167c <vfprintf+0x368>
    168c:	aa 94       	dec	r10
    168e:	f4 01       	movw	r30, r8
    1690:	ea 0d       	add	r30, r10
    1692:	f1 1d       	adc	r31, r1
    1694:	80 81       	ld	r24, Z
    1696:	b7 01       	movw	r22, r14
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	40 d0       	rcall	.+128    	; 0x171c <fputc>
    169c:	a1 10       	cpse	r10, r1
    169e:	f6 cf       	rjmp	.-20     	; 0x168c <vfprintf+0x378>
    16a0:	33 20       	and	r3, r3
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <vfprintf+0x392>
    16a4:	5d ce       	rjmp	.-838    	; 0x1360 <vfprintf+0x4c>
    16a6:	b7 01       	movw	r22, r14
    16a8:	80 e2       	ldi	r24, 0x20	; 32
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	37 d0       	rcall	.+110    	; 0x171c <fputc>
    16ae:	3a 94       	dec	r3
    16b0:	f7 cf       	rjmp	.-18     	; 0x16a0 <vfprintf+0x38c>
    16b2:	f7 01       	movw	r30, r14
    16b4:	86 81       	ldd	r24, Z+6	; 0x06
    16b6:	97 81       	ldd	r25, Z+7	; 0x07
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <vfprintf+0x3aa>
    16ba:	8f ef       	ldi	r24, 0xFF	; 255
    16bc:	9f ef       	ldi	r25, 0xFF	; 255
    16be:	2c 96       	adiw	r28, 0x0c	; 12
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	df 91       	pop	r29
    16cc:	cf 91       	pop	r28
    16ce:	1f 91       	pop	r17
    16d0:	0f 91       	pop	r16
    16d2:	ff 90       	pop	r15
    16d4:	ef 90       	pop	r14
    16d6:	df 90       	pop	r13
    16d8:	cf 90       	pop	r12
    16da:	bf 90       	pop	r11
    16dc:	af 90       	pop	r10
    16de:	9f 90       	pop	r9
    16e0:	8f 90       	pop	r8
    16e2:	7f 90       	pop	r7
    16e4:	6f 90       	pop	r6
    16e6:	5f 90       	pop	r5
    16e8:	4f 90       	pop	r4
    16ea:	3f 90       	pop	r3
    16ec:	2f 90       	pop	r2
    16ee:	08 95       	ret

000016f0 <strnlen_P>:
    16f0:	fc 01       	movw	r30, r24
    16f2:	05 90       	lpm	r0, Z+
    16f4:	61 50       	subi	r22, 0x01	; 1
    16f6:	70 40       	sbci	r23, 0x00	; 0
    16f8:	01 10       	cpse	r0, r1
    16fa:	d8 f7       	brcc	.-10     	; 0x16f2 <strnlen_P+0x2>
    16fc:	80 95       	com	r24
    16fe:	90 95       	com	r25
    1700:	8e 0f       	add	r24, r30
    1702:	9f 1f       	adc	r25, r31
    1704:	08 95       	ret

00001706 <strnlen>:
    1706:	fc 01       	movw	r30, r24
    1708:	61 50       	subi	r22, 0x01	; 1
    170a:	70 40       	sbci	r23, 0x00	; 0
    170c:	01 90       	ld	r0, Z+
    170e:	01 10       	cpse	r0, r1
    1710:	d8 f7       	brcc	.-10     	; 0x1708 <strnlen+0x2>
    1712:	80 95       	com	r24
    1714:	90 95       	com	r25
    1716:	8e 0f       	add	r24, r30
    1718:	9f 1f       	adc	r25, r31
    171a:	08 95       	ret

0000171c <fputc>:
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	fb 01       	movw	r30, r22
    1726:	23 81       	ldd	r18, Z+3	; 0x03
    1728:	21 fd       	sbrc	r18, 1
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <fputc+0x16>
    172c:	8f ef       	ldi	r24, 0xFF	; 255
    172e:	9f ef       	ldi	r25, 0xFF	; 255
    1730:	28 c0       	rjmp	.+80     	; 0x1782 <fputc+0x66>
    1732:	22 ff       	sbrs	r18, 2
    1734:	16 c0       	rjmp	.+44     	; 0x1762 <fputc+0x46>
    1736:	46 81       	ldd	r20, Z+6	; 0x06
    1738:	57 81       	ldd	r21, Z+7	; 0x07
    173a:	24 81       	ldd	r18, Z+4	; 0x04
    173c:	35 81       	ldd	r19, Z+5	; 0x05
    173e:	42 17       	cp	r20, r18
    1740:	53 07       	cpc	r21, r19
    1742:	44 f4       	brge	.+16     	; 0x1754 <fputc+0x38>
    1744:	a0 81       	ld	r26, Z
    1746:	b1 81       	ldd	r27, Z+1	; 0x01
    1748:	9d 01       	movw	r18, r26
    174a:	2f 5f       	subi	r18, 0xFF	; 255
    174c:	3f 4f       	sbci	r19, 0xFF	; 255
    174e:	31 83       	std	Z+1, r19	; 0x01
    1750:	20 83       	st	Z, r18
    1752:	8c 93       	st	X, r24
    1754:	26 81       	ldd	r18, Z+6	; 0x06
    1756:	37 81       	ldd	r19, Z+7	; 0x07
    1758:	2f 5f       	subi	r18, 0xFF	; 255
    175a:	3f 4f       	sbci	r19, 0xFF	; 255
    175c:	37 83       	std	Z+7, r19	; 0x07
    175e:	26 83       	std	Z+6, r18	; 0x06
    1760:	10 c0       	rjmp	.+32     	; 0x1782 <fputc+0x66>
    1762:	eb 01       	movw	r28, r22
    1764:	09 2f       	mov	r16, r25
    1766:	18 2f       	mov	r17, r24
    1768:	00 84       	ldd	r0, Z+8	; 0x08
    176a:	f1 85       	ldd	r31, Z+9	; 0x09
    176c:	e0 2d       	mov	r30, r0
    176e:	19 95       	eicall
    1770:	89 2b       	or	r24, r25
    1772:	e1 f6       	brne	.-72     	; 0x172c <fputc+0x10>
    1774:	8e 81       	ldd	r24, Y+6	; 0x06
    1776:	9f 81       	ldd	r25, Y+7	; 0x07
    1778:	01 96       	adiw	r24, 0x01	; 1
    177a:	9f 83       	std	Y+7, r25	; 0x07
    177c:	8e 83       	std	Y+6, r24	; 0x06
    177e:	81 2f       	mov	r24, r17
    1780:	90 2f       	mov	r25, r16
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	1f 91       	pop	r17
    1788:	0f 91       	pop	r16
    178a:	08 95       	ret

0000178c <__ultoa_invert>:
    178c:	fa 01       	movw	r30, r20
    178e:	aa 27       	eor	r26, r26
    1790:	28 30       	cpi	r18, 0x08	; 8
    1792:	51 f1       	breq	.+84     	; 0x17e8 <__ultoa_invert+0x5c>
    1794:	20 31       	cpi	r18, 0x10	; 16
    1796:	81 f1       	breq	.+96     	; 0x17f8 <__ultoa_invert+0x6c>
    1798:	e8 94       	clt
    179a:	6f 93       	push	r22
    179c:	6e 7f       	andi	r22, 0xFE	; 254
    179e:	6e 5f       	subi	r22, 0xFE	; 254
    17a0:	7f 4f       	sbci	r23, 0xFF	; 255
    17a2:	8f 4f       	sbci	r24, 0xFF	; 255
    17a4:	9f 4f       	sbci	r25, 0xFF	; 255
    17a6:	af 4f       	sbci	r26, 0xFF	; 255
    17a8:	b1 e0       	ldi	r27, 0x01	; 1
    17aa:	3e d0       	rcall	.+124    	; 0x1828 <__ultoa_invert+0x9c>
    17ac:	b4 e0       	ldi	r27, 0x04	; 4
    17ae:	3c d0       	rcall	.+120    	; 0x1828 <__ultoa_invert+0x9c>
    17b0:	67 0f       	add	r22, r23
    17b2:	78 1f       	adc	r23, r24
    17b4:	89 1f       	adc	r24, r25
    17b6:	9a 1f       	adc	r25, r26
    17b8:	a1 1d       	adc	r26, r1
    17ba:	68 0f       	add	r22, r24
    17bc:	79 1f       	adc	r23, r25
    17be:	8a 1f       	adc	r24, r26
    17c0:	91 1d       	adc	r25, r1
    17c2:	a1 1d       	adc	r26, r1
    17c4:	6a 0f       	add	r22, r26
    17c6:	71 1d       	adc	r23, r1
    17c8:	81 1d       	adc	r24, r1
    17ca:	91 1d       	adc	r25, r1
    17cc:	a1 1d       	adc	r26, r1
    17ce:	20 d0       	rcall	.+64     	; 0x1810 <__ultoa_invert+0x84>
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <__ultoa_invert+0x48>
    17d2:	68 94       	set
    17d4:	3f 91       	pop	r19
    17d6:	2a e0       	ldi	r18, 0x0A	; 10
    17d8:	26 9f       	mul	r18, r22
    17da:	11 24       	eor	r1, r1
    17dc:	30 19       	sub	r19, r0
    17de:	30 5d       	subi	r19, 0xD0	; 208
    17e0:	31 93       	st	Z+, r19
    17e2:	de f6       	brtc	.-74     	; 0x179a <__ultoa_invert+0xe>
    17e4:	cf 01       	movw	r24, r30
    17e6:	08 95       	ret
    17e8:	46 2f       	mov	r20, r22
    17ea:	47 70       	andi	r20, 0x07	; 7
    17ec:	40 5d       	subi	r20, 0xD0	; 208
    17ee:	41 93       	st	Z+, r20
    17f0:	b3 e0       	ldi	r27, 0x03	; 3
    17f2:	0f d0       	rcall	.+30     	; 0x1812 <__ultoa_invert+0x86>
    17f4:	c9 f7       	brne	.-14     	; 0x17e8 <__ultoa_invert+0x5c>
    17f6:	f6 cf       	rjmp	.-20     	; 0x17e4 <__ultoa_invert+0x58>
    17f8:	46 2f       	mov	r20, r22
    17fa:	4f 70       	andi	r20, 0x0F	; 15
    17fc:	40 5d       	subi	r20, 0xD0	; 208
    17fe:	4a 33       	cpi	r20, 0x3A	; 58
    1800:	18 f0       	brcs	.+6      	; 0x1808 <__ultoa_invert+0x7c>
    1802:	49 5d       	subi	r20, 0xD9	; 217
    1804:	31 fd       	sbrc	r19, 1
    1806:	40 52       	subi	r20, 0x20	; 32
    1808:	41 93       	st	Z+, r20
    180a:	02 d0       	rcall	.+4      	; 0x1810 <__ultoa_invert+0x84>
    180c:	a9 f7       	brne	.-22     	; 0x17f8 <__ultoa_invert+0x6c>
    180e:	ea cf       	rjmp	.-44     	; 0x17e4 <__ultoa_invert+0x58>
    1810:	b4 e0       	ldi	r27, 0x04	; 4
    1812:	a6 95       	lsr	r26
    1814:	97 95       	ror	r25
    1816:	87 95       	ror	r24
    1818:	77 95       	ror	r23
    181a:	67 95       	ror	r22
    181c:	ba 95       	dec	r27
    181e:	c9 f7       	brne	.-14     	; 0x1812 <__ultoa_invert+0x86>
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	61 05       	cpc	r22, r1
    1824:	71 05       	cpc	r23, r1
    1826:	08 95       	ret
    1828:	9b 01       	movw	r18, r22
    182a:	ac 01       	movw	r20, r24
    182c:	0a 2e       	mov	r0, r26
    182e:	06 94       	lsr	r0
    1830:	57 95       	ror	r21
    1832:	47 95       	ror	r20
    1834:	37 95       	ror	r19
    1836:	27 95       	ror	r18
    1838:	ba 95       	dec	r27
    183a:	c9 f7       	brne	.-14     	; 0x182e <__ultoa_invert+0xa2>
    183c:	62 0f       	add	r22, r18
    183e:	73 1f       	adc	r23, r19
    1840:	84 1f       	adc	r24, r20
    1842:	95 1f       	adc	r25, r21
    1844:	a0 1d       	adc	r26, r0
    1846:	08 95       	ret

00001848 <_exit>:
    1848:	f8 94       	cli

0000184a <__stop_program>:
    184a:	ff cf       	rjmp	.-2      	; 0x184a <__stop_program>
