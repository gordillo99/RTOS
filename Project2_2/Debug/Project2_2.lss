
Project2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800200  000012f8  0000138c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001526  0080027c  0080027c  00001408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001478  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000276c  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001330  00000000  00000000  00003dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001101  00000000  00000000  000050fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00006200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a16  00000000  00000000  000066c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000136f  00000000  00000000  000070da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00008449  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
       2:	00 00       	nop
       4:	97 c0       	rjmp	.+302    	; 0x134 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c0       	rjmp	.+298    	; 0x134 <__bad_interrupt>
       a:	00 00       	nop
       c:	93 c0       	rjmp	.+294    	; 0x134 <__bad_interrupt>
       e:	00 00       	nop
      10:	91 c0       	rjmp	.+290    	; 0x134 <__bad_interrupt>
      12:	00 00       	nop
      14:	8f c0       	rjmp	.+286    	; 0x134 <__bad_interrupt>
      16:	00 00       	nop
      18:	8d c0       	rjmp	.+282    	; 0x134 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c0       	rjmp	.+278    	; 0x134 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c0       	rjmp	.+274    	; 0x134 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c0       	rjmp	.+270    	; 0x134 <__bad_interrupt>
      26:	00 00       	nop
      28:	85 c0       	rjmp	.+266    	; 0x134 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	83 c0       	rjmp	.+262    	; 0x134 <__bad_interrupt>
      2e:	00 00       	nop
      30:	81 c0       	rjmp	.+258    	; 0x134 <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c0       	rjmp	.+254    	; 0x134 <__bad_interrupt>
      36:	00 00       	nop
      38:	7d c0       	rjmp	.+250    	; 0x134 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7b c0       	rjmp	.+246    	; 0x134 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c0       	rjmp	.+242    	; 0x134 <__bad_interrupt>
      42:	00 00       	nop
      44:	43 c4       	rjmp	.+2182   	; 0x8cc <__vector_17>
      46:	00 00       	nop
      48:	75 c0       	rjmp	.+234    	; 0x134 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c0       	rjmp	.+230    	; 0x134 <__bad_interrupt>
      4e:	00 00       	nop
      50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
      52:	00 00       	nop
      54:	6f c0       	rjmp	.+222    	; 0x134 <__bad_interrupt>
      56:	00 00       	nop
      58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c0       	rjmp	.+214    	; 0x134 <__bad_interrupt>
      5e:	00 00       	nop
      60:	69 c0       	rjmp	.+210    	; 0x134 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c0       	rjmp	.+206    	; 0x134 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c0       	rjmp	.+202    	; 0x134 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c0       	rjmp	.+198    	; 0x134 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c0       	rjmp	.+194    	; 0x134 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c0       	rjmp	.+190    	; 0x134 <__bad_interrupt>
      76:	00 00       	nop
      78:	5d c0       	rjmp	.+186    	; 0x134 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5b c0       	rjmp	.+182    	; 0x134 <__bad_interrupt>
      7e:	00 00       	nop
      80:	80 c4       	rjmp	.+2304   	; 0x982 <__vector_32>
      82:	00 00       	nop
      84:	57 c0       	rjmp	.+174    	; 0x134 <__bad_interrupt>
      86:	00 00       	nop
      88:	55 c0       	rjmp	.+170    	; 0x134 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	53 c0       	rjmp	.+166    	; 0x134 <__bad_interrupt>
      8e:	00 00       	nop
      90:	51 c0       	rjmp	.+162    	; 0x134 <__bad_interrupt>
      92:	00 00       	nop
      94:	4f c0       	rjmp	.+158    	; 0x134 <__bad_interrupt>
      96:	00 00       	nop
      98:	4d c0       	rjmp	.+154    	; 0x134 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4b c0       	rjmp	.+150    	; 0x134 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	49 c0       	rjmp	.+146    	; 0x134 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	47 c0       	rjmp	.+142    	; 0x134 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	45 c0       	rjmp	.+138    	; 0x134 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	43 c0       	rjmp	.+134    	; 0x134 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	41 c0       	rjmp	.+130    	; 0x134 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3f c0       	rjmp	.+126    	; 0x134 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3d c0       	rjmp	.+122    	; 0x134 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3b c0       	rjmp	.+118    	; 0x134 <__bad_interrupt>
      be:	00 00       	nop
      c0:	39 c0       	rjmp	.+114    	; 0x134 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	37 c0       	rjmp	.+110    	; 0x134 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	35 c0       	rjmp	.+106    	; 0x134 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 c0       	rjmp	.+102    	; 0x134 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	31 c0       	rjmp	.+98     	; 0x134 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2f c0       	rjmp	.+94     	; 0x134 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2d c0       	rjmp	.+90     	; 0x134 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2b c0       	rjmp	.+86     	; 0x134 <__bad_interrupt>
      de:	00 00       	nop
      e0:	29 c0       	rjmp	.+82     	; 0x134 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	61 07       	cpc	r22, r17
      e6:	79 07       	cpc	r23, r25
      e8:	a9 07       	cpc	r26, r25
      ea:	90 07       	cpc	r25, r16
      ec:	c0 07       	cpc	r28, r16
      ee:	f3 07       	cpc	r31, r19
      f0:	ef 07       	cpc	r30, r31
      f2:	f1 07       	cpc	r31, r17

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	d1 e2       	ldi	r29, 0x21	; 33
      fc:	de bf       	out	0x3e, r29	; 62
      fe:	cd bf       	out	0x3d, r28	; 61
     100:	00 e0       	ldi	r16, 0x00	; 0
     102:	0c bf       	out	0x3c, r16	; 60

00000104 <__do_copy_data>:
     104:	12 e0       	ldi	r17, 0x02	; 2
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b2 e0       	ldi	r27, 0x02	; 2
     10a:	e8 ef       	ldi	r30, 0xF8	; 248
     10c:	f2 e1       	ldi	r31, 0x12	; 18
     10e:	00 e0       	ldi	r16, 0x00	; 0
     110:	0b bf       	out	0x3b, r16	; 59
     112:	02 c0       	rjmp	.+4      	; 0x118 <__do_copy_data+0x14>
     114:	07 90       	elpm	r0, Z+
     116:	0d 92       	st	X+, r0
     118:	ac 37       	cpi	r26, 0x7C	; 124
     11a:	b1 07       	cpc	r27, r17
     11c:	d9 f7       	brne	.-10     	; 0x114 <__do_copy_data+0x10>

0000011e <__do_clear_bss>:
     11e:	27 e1       	ldi	r18, 0x17	; 23
     120:	ac e7       	ldi	r26, 0x7C	; 124
     122:	b2 e0       	ldi	r27, 0x02	; 2
     124:	01 c0       	rjmp	.+2      	; 0x128 <.do_clear_bss_start>

00000126 <.do_clear_bss_loop>:
     126:	1d 92       	st	X+, r1

00000128 <.do_clear_bss_start>:
     128:	a2 3a       	cpi	r26, 0xA2	; 162
     12a:	b2 07       	cpc	r27, r18
     12c:	e1 f7       	brne	.-8      	; 0x126 <.do_clear_bss_loop>
     12e:	74 d7       	rcall	.+3816   	; 0x1018 <main>
     130:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <_exit>

00000134 <__bad_interrupt>:
     134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     136:	0f 92       	push	r0
     138:	1f 92       	push	r1
     13a:	2f 92       	push	r2
     13c:	3f 92       	push	r3
     13e:	4f 92       	push	r4
     140:	5f 92       	push	r5
     142:	6f 92       	push	r6
     144:	7f 92       	push	r7
     146:	8f 92       	push	r8
     148:	9f 92       	push	r9
     14a:	af 92       	push	r10
     14c:	bf 92       	push	r11
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	2f 93       	push	r18
     15c:	3f 93       	push	r19
     15e:	4f 93       	push	r20
     160:	5f 93       	push	r21
     162:	6f 93       	push	r22
     164:	7f 93       	push	r23
     166:	8f 93       	push	r24
     168:	9f 93       	push	r25
     16a:	af 93       	push	r26
     16c:	bf 93       	push	r27
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	ef 93       	push	r30
     174:	ff 93       	push	r31
     176:	0f b7       	in	r16, 0x3f	; 63
     178:	0f 93       	push	r16
     17a:	fc b7       	in	r31, 0x3c	; 60
     17c:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     17e:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     180:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     182:	e0 93 80 17 	sts	0x1780, r30	; 0x801780 <KernelSp>
        sts  KernelSp+1, r31
     186:	f0 93 81 17 	sts	0x1781, r31	; 0x801781 <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     18a:	e0 91 5e 17 	lds	r30, 0x175E	; 0x80175e <CurrentSp>
        lds  r31, CurrentSp+1
     18e:	f0 91 5f 17 	lds	r31, 0x175F	; 0x80175f <CurrentSp+0x1>
        out  SPL, r30
     192:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     194:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     196:	ff 91       	pop	r31
     198:	fc bf       	out	0x3c, r31	; 60
     19a:	0f 91       	pop	r16
     19c:	0f bf       	out	0x3f, r16	; 63
     19e:	ff 91       	pop	r31
     1a0:	ef 91       	pop	r30
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	bf 91       	pop	r27
     1a8:	af 91       	pop	r26
     1aa:	9f 91       	pop	r25
     1ac:	8f 91       	pop	r24
     1ae:	7f 91       	pop	r23
     1b0:	6f 91       	pop	r22
     1b2:	5f 91       	pop	r21
     1b4:	4f 91       	pop	r20
     1b6:	3f 91       	pop	r19
     1b8:	2f 91       	pop	r18
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	ff 90       	pop	r15
     1c0:	ef 90       	pop	r14
     1c2:	df 90       	pop	r13
     1c4:	cf 90       	pop	r12
     1c6:	bf 90       	pop	r11
     1c8:	af 90       	pop	r10
     1ca:	9f 90       	pop	r9
     1cc:	8f 90       	pop	r8
     1ce:	7f 90       	pop	r7
     1d0:	6f 90       	pop	r6
     1d2:	5f 90       	pop	r5
     1d4:	4f 90       	pop	r4
     1d6:	3f 90       	pop	r3
     1d8:	2f 90       	pop	r2
     1da:	1f 90       	pop	r1
     1dc:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1de:	18 95       	reti

000001e0 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1e0:	0f 92       	push	r0
     1e2:	1f 92       	push	r1
     1e4:	2f 92       	push	r2
     1e6:	3f 92       	push	r3
     1e8:	4f 92       	push	r4
     1ea:	5f 92       	push	r5
     1ec:	6f 92       	push	r6
     1ee:	7f 92       	push	r7
     1f0:	8f 92       	push	r8
     1f2:	9f 92       	push	r9
     1f4:	af 92       	push	r10
     1f6:	bf 92       	push	r11
     1f8:	cf 92       	push	r12
     1fa:	df 92       	push	r13
     1fc:	ef 92       	push	r14
     1fe:	ff 92       	push	r15
     200:	0f 93       	push	r16
     202:	1f 93       	push	r17
     204:	2f 93       	push	r18
     206:	3f 93       	push	r19
     208:	4f 93       	push	r20
     20a:	5f 93       	push	r21
     20c:	6f 93       	push	r22
     20e:	7f 93       	push	r23
     210:	8f 93       	push	r24
     212:	9f 93       	push	r25
     214:	af 93       	push	r26
     216:	bf 93       	push	r27
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31
     220:	0f b7       	in	r16, 0x3f	; 63
     222:	0f 93       	push	r16
     224:	fc b7       	in	r31, 0x3c	; 60
     226:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     228:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     22a:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     22c:	e0 93 5e 17 	sts	0x175E, r30	; 0x80175e <CurrentSp>
        sts  CurrentSp+1, r31
     230:	f0 93 5f 17 	sts	0x175F, r31	; 0x80175f <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     234:	e0 91 80 17 	lds	r30, 0x1780	; 0x801780 <KernelSp>
        lds  r31, KernelSp+1
     238:	f0 91 81 17 	lds	r31, 0x1781	; 0x801781 <KernelSp+0x1>
        out  SPL, r30
     23c:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     23e:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     240:	ff 91       	pop	r31
     242:	fc bf       	out	0x3c, r31	; 60
     244:	0f 91       	pop	r16
     246:	0f bf       	out	0x3f, r16	; 63
     248:	ff 91       	pop	r31
     24a:	ef 91       	pop	r30
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	bf 91       	pop	r27
     252:	af 91       	pop	r26
     254:	9f 91       	pop	r25
     256:	8f 91       	pop	r24
     258:	7f 91       	pop	r23
     25a:	6f 91       	pop	r22
     25c:	5f 91       	pop	r21
     25e:	4f 91       	pop	r20
     260:	3f 91       	pop	r19
     262:	2f 91       	pop	r18
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	ff 90       	pop	r15
     26a:	ef 90       	pop	r14
     26c:	df 90       	pop	r13
     26e:	cf 90       	pop	r12
     270:	bf 90       	pop	r11
     272:	af 90       	pop	r10
     274:	9f 90       	pop	r9
     276:	8f 90       	pop	r8
     278:	7f 90       	pop	r7
     27a:	6f 90       	pop	r6
     27c:	5f 90       	pop	r5
     27e:	4f 90       	pop	r4
     280:	3f 90       	pop	r3
     282:	2f 90       	pop	r2
     284:	1f 90       	pop	r1
     286:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     288:	08 95       	ret

0000028a <a_main>:
    //Task_Create(ASDF1, PERIODIC, 0, 0, 2, 10);
    //Task_Create(ASDF2, PERIODIC, 0, 4, 1, 10);
	//Task_Create(ASDF3, PERIODIC, 0, 8, 1, 10);
	//Task_Create(ASDF4, PERIODIC, 0, -1, -1, -1);
	//Task_Create(ASDF5, RR, 0, -1, -1, -1);
	Task_Create_System(test_too_many_tasks,0);
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	8b ee       	ldi	r24, 0xEB	; 235
     290:	98 e0       	ldi	r25, 0x08	; 8
     292:	08 d2       	rcall	.+1040   	; 0x6a4 <Task_Create_System>
    // Kill the initialization task
    Task_Terminate();
     294:	52 c0       	rjmp	.+164    	; 0x33a <Task_Terminate>
     296:	08 95       	ret

00000298 <idle>:
	if (Cp->priority == PERIODIC) OS_Abort(); // periodic tasks are not allowed to use csp 
	Cp->request = RECEIVE;
	Cp->receiverChannel = ch;
	Enter_Kernel();
	return Cp->val;
}
     298:	ff cf       	rjmp	.-2      	; 0x298 <idle>

0000029a <Dispatch>:
     29a:	60 e1       	ldi	r22, 0x10	; 16
     29c:	75 e0       	ldi	r23, 0x05	; 5
     29e:	8e e3       	ldi	r24, 0x3E	; 62
     2a0:	97 e1       	ldi	r25, 0x17	; 23
     2a2:	f6 d6       	rcall	.+3564   	; 0x1090 <dequeue>
     2a4:	90 93 1d 05 	sts	0x051D, r25	; 0x80051d <Cp+0x1>
     2a8:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <Cp>
     2ac:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <PeriodicCount>
     2b0:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <PeriodicCount+0x1>
     2b4:	89 2b       	or	r24, r25
     2b6:	d9 f0       	breq	.+54     	; 0x2ee <Dispatch+0x54>
     2b8:	6e e0       	ldi	r22, 0x0E	; 14
     2ba:	75 e0       	ldi	r23, 0x05	; 5
     2bc:	80 e6       	ldi	r24, 0x60	; 96
     2be:	97 e1       	ldi	r25, 0x17	; 23
     2c0:	74 d7       	rcall	.+3816   	; 0x11aa <peek>
     2c2:	fc 01       	movw	r30, r24
     2c4:	ea 5e       	subi	r30, 0xEA	; 234
     2c6:	fe 4f       	sbci	r31, 0xFE	; 254
     2c8:	80 81       	ld	r24, Z
     2ca:	91 81       	ldd	r25, Z+1	; 0x01
     2cc:	89 2b       	or	r24, r25
     2ce:	79 f4       	brne	.+30     	; 0x2ee <Dispatch+0x54>
     2d0:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <Cp>
     2d4:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <Cp+0x1>
     2d8:	89 2b       	or	r24, r25
     2da:	01 f5       	brne	.+64     	; 0x31c <Dispatch+0x82>
     2dc:	6e e0       	ldi	r22, 0x0E	; 14
     2de:	75 e0       	ldi	r23, 0x05	; 5
     2e0:	80 e6       	ldi	r24, 0x60	; 96
     2e2:	97 e1       	ldi	r25, 0x17	; 23
     2e4:	d5 d6       	rcall	.+3498   	; 0x1090 <dequeue>
     2e6:	90 93 1d 05 	sts	0x051D, r25	; 0x80051d <Cp+0x1>
     2ea:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <Cp>
     2ee:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <Cp>
     2f2:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <Cp+0x1>
     2f6:	89 2b       	or	r24, r25
     2f8:	89 f4       	brne	.+34     	; 0x31c <Dispatch+0x82>
     2fa:	6c e0       	ldi	r22, 0x0C	; 12
     2fc:	75 e0       	ldi	r23, 0x05	; 5
     2fe:	82 e8       	ldi	r24, 0x82	; 130
     300:	97 e1       	ldi	r25, 0x17	; 23
     302:	c6 d6       	rcall	.+3468   	; 0x1090 <dequeue>
     304:	90 93 1d 05 	sts	0x051D, r25	; 0x80051d <Cp+0x1>
     308:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <Cp>
     30c:	89 2b       	or	r24, r25
     30e:	31 f4       	brne	.+12     	; 0x31c <Dispatch+0x82>
     310:	8e e1       	ldi	r24, 0x1E	; 30
     312:	95 e0       	ldi	r25, 0x05	; 5
     314:	90 93 1d 05 	sts	0x051D, r25	; 0x80051d <Cp+0x1>
     318:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <Cp>
     31c:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <Cp>
     320:	f0 91 1d 05 	lds	r31, 0x051D	; 0x80051d <Cp+0x1>
     324:	82 81       	ldd	r24, Z+2	; 0x02
     326:	93 81       	ldd	r25, Z+3	; 0x03
     328:	90 93 5f 17 	sts	0x175F, r25	; 0x80175f <CurrentSp+0x1>
     32c:	80 93 5e 17 	sts	0x175E, r24	; 0x80175e <CurrentSp>
     330:	ec 5f       	subi	r30, 0xFC	; 252
     332:	fe 4f       	sbci	r31, 0xFE	; 254
     334:	82 e0       	ldi	r24, 0x02	; 2
     336:	80 83       	st	Z, r24
     338:	08 95       	ret

0000033a <Task_Terminate>:
     33a:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <KernelActive>
     33e:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <KernelActive+0x1>
     342:	89 2b       	or	r24, r25
     344:	51 f0       	breq	.+20     	; 0x35a <Task_Terminate+0x20>
     346:	f8 94       	cli
     348:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <Cp>
     34c:	f0 91 1d 05 	lds	r31, 0x051D	; 0x80051d <Cp+0x1>
     350:	e5 5f       	subi	r30, 0xF5	; 245
     352:	fe 4f       	sbci	r31, 0xFE	; 254
     354:	86 e0       	ldi	r24, 0x06	; 6
     356:	80 83       	st	Z, r24
     358:	43 cf       	rjmp	.-378    	; 0x1e0 <Enter_Kernel>
     35a:	08 95       	ret

0000035c <Kernel_Create_Task_At>:
     35c:	8f 92       	push	r8
     35e:	9f 92       	push	r9
     360:	af 92       	push	r10
     362:	bf 92       	push	r11
     364:	cf 92       	push	r12
     366:	df 92       	push	r13
     368:	ef 92       	push	r14
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	1f 92       	push	r1
     376:	1f 92       	push	r1
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	9a 83       	std	Y+2, r25	; 0x02
     37e:	89 83       	std	Y+1, r24	; 0x01
     380:	5c 01       	movw	r10, r24
     382:	a4 e0       	ldi	r26, 0x04	; 4
     384:	aa 0e       	add	r10, r26
     386:	b1 1c       	adc	r11, r1
     388:	81 2c       	mov	r8, r1
     38a:	99 24       	eor	r9, r9
     38c:	93 94       	inc	r9
     38e:	f5 01       	movw	r30, r10
     390:	d4 01       	movw	r26, r8
     392:	11 92       	st	Z+, r1
     394:	11 97       	sbiw	r26, 0x01	; 1
     396:	e9 f7       	brne	.-6      	; 0x392 <Kernel_Create_Task_At+0x36>
     398:	dc 01       	movw	r26, r24
     39a:	ad 5f       	subi	r26, 0xFD	; 253
     39c:	be 4f       	sbci	r27, 0xFE	; 254
     39e:	ed e9       	ldi	r30, 0x9D	; 157
     3a0:	f1 e0       	ldi	r31, 0x01	; 1
     3a2:	ec 93       	st	X, r30
     3a4:	11 97       	sbiw	r26, 0x01	; 1
     3a6:	fc 93       	st	X, r31
     3a8:	fc 01       	movw	r30, r24
     3aa:	ef 5f       	subi	r30, 0xFF	; 255
     3ac:	fe 4f       	sbci	r31, 0xFE	; 254
     3ae:	60 83       	st	Z, r22
     3b0:	31 97       	sbiw	r30, 0x01	; 1
     3b2:	70 83       	st	Z, r23
     3b4:	31 97       	sbiw	r30, 0x01	; 1
     3b6:	10 82       	st	Z, r1
     3b8:	b3 97       	sbiw	r30, 0x23	; 35
     3ba:	dc 01       	movw	r26, r24
     3bc:	13 96       	adiw	r26, 0x03	; 3
     3be:	fc 93       	st	X, r31
     3c0:	ee 93       	st	-X, r30
     3c2:	12 97       	sbiw	r26, 0x02	; 2
     3c4:	bd 96       	adiw	r30, 0x2d	; 45
     3c6:	71 83       	std	Z+1, r23	; 0x01
     3c8:	60 83       	st	Z, r22
     3ca:	32 96       	adiw	r30, 0x02	; 2
     3cc:	10 82       	st	Z, r1
     3ce:	60 91 14 05 	lds	r22, 0x0514	; 0x800514 <pCount>
     3d2:	70 91 15 05 	lds	r23, 0x0515	; 0x800515 <pCount+0x1>
     3d6:	fc 01       	movw	r30, r24
     3d8:	71 83       	std	Z+1, r23	; 0x01
     3da:	60 83       	st	Z, r22
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	fc 01       	movw	r30, r24
     3e2:	eb 5f       	subi	r30, 0xFB	; 251
     3e4:	fe 4f       	sbci	r31, 0xFE	; 254
     3e6:	51 83       	std	Z+1, r21	; 0x01
     3e8:	40 83       	st	Z, r20
     3ea:	32 96       	adiw	r30, 0x02	; 2
     3ec:	31 83       	std	Z+1, r19	; 0x01
     3ee:	20 83       	st	Z, r18
     3f0:	3f 96       	adiw	r30, 0x0f	; 15
     3f2:	2f ef       	ldi	r18, 0xFF	; 255
     3f4:	3f ef       	ldi	r19, 0xFF	; 255
     3f6:	31 83       	std	Z+1, r19	; 0x01
     3f8:	20 83       	st	Z, r18
     3fa:	32 96       	adiw	r30, 0x02	; 2
     3fc:	11 82       	std	Z+1, r1	; 0x01
     3fe:	10 82       	st	Z, r1
     400:	34 97       	sbiw	r30, 0x04	; 4
     402:	11 83       	std	Z+1, r17	; 0x01
     404:	00 83       	st	Z, r16
     406:	34 97       	sbiw	r30, 0x04	; 4
     408:	d1 82       	std	Z+1, r13	; 0x01
     40a:	c0 82       	st	Z, r12
     40c:	32 96       	adiw	r30, 0x02	; 2
     40e:	f1 82       	std	Z+1, r15	; 0x01
     410:	e0 82       	st	Z, r14
     412:	20 91 16 05 	lds	r18, 0x0516	; 0x800516 <Tasks>
     416:	30 91 17 05 	lds	r19, 0x0517	; 0x800517 <Tasks+0x1>
     41a:	2f 5f       	subi	r18, 0xFF	; 255
     41c:	3f 4f       	sbci	r19, 0xFF	; 255
     41e:	30 93 17 05 	sts	0x0517, r19	; 0x800517 <Tasks+0x1>
     422:	20 93 16 05 	sts	0x0516, r18	; 0x800516 <Tasks>
     426:	20 91 14 05 	lds	r18, 0x0514	; 0x800514 <pCount>
     42a:	30 91 15 05 	lds	r19, 0x0515	; 0x800515 <pCount+0x1>
     42e:	2f 5f       	subi	r18, 0xFF	; 255
     430:	3f 4f       	sbci	r19, 0xFF	; 255
     432:	30 93 15 05 	sts	0x0515, r19	; 0x800515 <pCount+0x1>
     436:	20 93 14 05 	sts	0x0514, r18	; 0x800514 <pCount>
     43a:	3e 97       	sbiw	r30, 0x0e	; 14
     43c:	21 e0       	ldi	r18, 0x01	; 1
     43e:	20 83       	st	Z, r18
     440:	43 30       	cpi	r20, 0x03	; 3
     442:	51 05       	cpc	r21, r1
     444:	41 f4       	brne	.+16     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     446:	40 e1       	ldi	r20, 0x10	; 16
     448:	55 e0       	ldi	r21, 0x05	; 5
     44a:	6e e3       	ldi	r22, 0x3E	; 62
     44c:	77 e1       	ldi	r23, 0x17	; 23
     44e:	ce 01       	movw	r24, r28
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	f6 d5       	rcall	.+3052   	; 0x1040 <enqueue>
     454:	1a c0       	rjmp	.+52     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     456:	42 30       	cpi	r20, 0x02	; 2
     458:	51 05       	cpc	r21, r1
     45a:	69 f4       	brne	.+26     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     45c:	fc 01       	movw	r30, r24
     45e:	ea 5e       	subi	r30, 0xEA	; 234
     460:	fe 4f       	sbci	r31, 0xFE	; 254
     462:	11 83       	std	Z+1, r17	; 0x01
     464:	00 83       	st	Z, r16
     466:	4e e0       	ldi	r20, 0x0E	; 14
     468:	55 e0       	ldi	r21, 0x05	; 5
     46a:	60 e6       	ldi	r22, 0x60	; 96
     46c:	77 e1       	ldi	r23, 0x17	; 23
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	38 d6       	rcall	.+3184   	; 0x10e4 <enqueuePeriodic>
     474:	0a c0       	rjmp	.+20     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     476:	41 30       	cpi	r20, 0x01	; 1
     478:	51 05       	cpc	r21, r1
     47a:	39 f4       	brne	.+14     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     47c:	4c e0       	ldi	r20, 0x0C	; 12
     47e:	55 e0       	ldi	r21, 0x05	; 5
     480:	62 e8       	ldi	r22, 0x82	; 130
     482:	77 e1       	ldi	r23, 0x17	; 23
     484:	ce 01       	movw	r24, r28
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	db d5       	rcall	.+2998   	; 0x1040 <enqueue>
     48a:	e9 81       	ldd	r30, Y+1	; 0x01
     48c:	fa 81       	ldd	r31, Y+2	; 0x02
     48e:	80 81       	ld	r24, Z
     490:	91 81       	ldd	r25, Z+1	; 0x01
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	df 90       	pop	r13
     4a4:	cf 90       	pop	r12
     4a6:	bf 90       	pop	r11
     4a8:	af 90       	pop	r10
     4aa:	9f 90       	pop	r9
     4ac:	8f 90       	pop	r8
     4ae:	08 95       	ret

000004b0 <Kernel_Create_Task>:
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	e9 01       	movw	r28, r18
     4c2:	20 91 16 05 	lds	r18, 0x0516	; 0x800516 <Tasks>
     4c6:	30 91 17 05 	lds	r19, 0x0517	; 0x800517 <Tasks+0x1>
     4ca:	20 31       	cpi	r18, 0x10	; 16
     4cc:	31 05       	cpc	r19, r1
     4ce:	41 f1       	breq	.+80     	; 0x520 <Kernel_Create_Task+0x70>
     4d0:	20 91 22 06 	lds	r18, 0x0622	; 0x800622 <Process+0x104>
     4d4:	22 23       	and	r18, r18
     4d6:	71 f0       	breq	.+28     	; 0x4f4 <Kernel_Create_Task+0x44>
     4d8:	a4 e4       	ldi	r26, 0x44	; 68
     4da:	b7 e0       	ldi	r27, 0x07	; 7
     4dc:	e1 e0       	ldi	r30, 0x01	; 1
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	3c 91       	ld	r19, X
     4e2:	33 23       	and	r19, r19
     4e4:	49 f0       	breq	.+18     	; 0x4f8 <Kernel_Create_Task+0x48>
     4e6:	31 96       	adiw	r30, 0x01	; 1
     4e8:	ae 5d       	subi	r26, 0xDE	; 222
     4ea:	be 4f       	sbci	r27, 0xFE	; 254
     4ec:	e0 31       	cpi	r30, 0x10	; 16
     4ee:	f1 05       	cpc	r31, r1
     4f0:	b9 f7       	brne	.-18     	; 0x4e0 <Kernel_Create_Task+0x30>
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <Kernel_Create_Task+0x48>
     4f4:	e0 e0       	ldi	r30, 0x00	; 0
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	67 01       	movw	r12, r14
     4fa:	78 01       	movw	r14, r16
     4fc:	8e 01       	movw	r16, r28
     4fe:	9a 01       	movw	r18, r20
     500:	ab 01       	movw	r20, r22
     502:	bc 01       	movw	r22, r24
     504:	82 e2       	ldi	r24, 0x22	; 34
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	e8 9f       	mul	r30, r24
     50a:	d0 01       	movw	r26, r0
     50c:	e9 9f       	mul	r30, r25
     50e:	b0 0d       	add	r27, r0
     510:	f8 9f       	mul	r31, r24
     512:	b0 0d       	add	r27, r0
     514:	11 24       	eor	r1, r1
     516:	cd 01       	movw	r24, r26
     518:	82 5e       	subi	r24, 0xE2	; 226
     51a:	9a 4f       	sbci	r25, 0xFA	; 250
     51c:	1f df       	rcall	.-450    	; 0x35c <Kernel_Create_Task_At>
     51e:	02 c0       	rjmp	.+4      	; 0x524 <Kernel_Create_Task+0x74>
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	ff 90       	pop	r15
     52e:	ef 90       	pop	r14
     530:	df 90       	pop	r13
     532:	cf 90       	pop	r12
     534:	08 95       	ret

00000536 <OS_Init>:
     536:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <Tasks+0x1>
     53a:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <Tasks>
     53e:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <KernelActive+0x1>
     542:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <KernelActive>
     546:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <pCount+0x1>
     54a:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <pCount>
     54e:	ee e1       	ldi	r30, 0x1E	; 30
     550:	f5 e0       	ldi	r31, 0x05	; 5
     552:	2e e3       	ldi	r18, 0x3E	; 62
     554:	37 e1       	ldi	r19, 0x17	; 23
     556:	82 e2       	ldi	r24, 0x22	; 34
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	df 01       	movw	r26, r30
     55c:	ac 01       	movw	r20, r24
     55e:	1d 92       	st	X+, r1
     560:	41 50       	subi	r20, 0x01	; 1
     562:	50 40       	sbci	r21, 0x00	; 0
     564:	e1 f7       	brne	.-8      	; 0x55e <OS_Init+0x28>
     566:	df 01       	movw	r26, r30
     568:	ac 5f       	subi	r26, 0xFC	; 252
     56a:	be 4f       	sbci	r27, 0xFE	; 254
     56c:	1c 92       	st	X, r1
     56e:	11 82       	std	Z+1, r1	; 0x01
     570:	10 82       	st	Z, r1
     572:	ee 5d       	subi	r30, 0xDE	; 222
     574:	fe 4f       	sbci	r31, 0xFE	; 254
     576:	e2 17       	cp	r30, r18
     578:	f3 07       	cpc	r31, r19
     57a:	79 f7       	brne	.-34     	; 0x55a <OS_Init+0x24>
     57c:	ac e7       	ldi	r26, 0x7C	; 124
     57e:	b2 e0       	ldi	r27, 0x02	; 2
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	29 e2       	ldi	r18, 0x29	; 41
     586:	fd 01       	movw	r30, r26
     588:	32 2f       	mov	r19, r18
     58a:	11 92       	st	Z+, r1
     58c:	3a 95       	dec	r19
     58e:	e9 f7       	brne	.-6      	; 0x58a <OS_Init+0x54>
     590:	28 9f       	mul	r18, r24
     592:	f0 01       	movw	r30, r0
     594:	29 9f       	mul	r18, r25
     596:	f0 0d       	add	r31, r0
     598:	11 24       	eor	r1, r1
     59a:	e4 58       	subi	r30, 0x84	; 132
     59c:	fd 4f       	sbci	r31, 0xFD	; 253
     59e:	16 a2       	std	Z+38, r1	; 0x26
     5a0:	01 96       	adiw	r24, 0x01	; 1
     5a2:	91 83       	std	Z+1, r25	; 0x01
     5a4:	80 83       	st	Z, r24
     5a6:	99 96       	adiw	r26, 0x29	; 41
     5a8:	80 31       	cpi	r24, 0x10	; 16
     5aa:	91 05       	cpc	r25, r1
     5ac:	61 f7       	brne	.-40     	; 0x586 <OS_Init+0x50>
     5ae:	08 95       	ret

000005b0 <OS_Abort>:
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	9f d6       	rcall	.+3390   	; 0x12f4 <_exit>

000005b6 <Task_Create>:
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	e0 91 18 05 	lds	r30, 0x0518	; 0x800518 <KernelActive>
     5c4:	f0 91 19 05 	lds	r31, 0x0519	; 0x800519 <KernelActive+0x1>
     5c8:	ef 2b       	or	r30, r31
     5ca:	09 f4       	brne	.+2      	; 0x5ce <Task_Create+0x18>
     5cc:	5d c0       	rjmp	.+186    	; 0x688 <Task_Create+0xd2>
     5ce:	f8 94       	cli
     5d0:	63 30       	cpi	r22, 0x03	; 3
     5d2:	71 05       	cpc	r23, r1
     5d4:	49 f4       	brne	.+18     	; 0x5e8 <Task_Create+0x32>
     5d6:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <Cp>
     5da:	f0 91 1d 05 	lds	r31, 0x051D	; 0x80051d <Cp+0x1>
     5de:	e5 5f       	subi	r30, 0xF5	; 245
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	a2 e0       	ldi	r26, 0x02	; 2
     5e4:	a0 83       	st	Z, r26
     5e6:	28 c0       	rjmp	.+80     	; 0x638 <Task_Create+0x82>
     5e8:	62 30       	cpi	r22, 0x02	; 2
     5ea:	71 05       	cpc	r23, r1
     5ec:	89 f4       	brne	.+34     	; 0x610 <Task_Create+0x5a>
     5ee:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <Cp>
     5f2:	f0 91 1d 05 	lds	r31, 0x051D	; 0x80051d <Cp+0x1>
     5f6:	df 01       	movw	r26, r30
     5f8:	a5 5f       	subi	r26, 0xF5	; 245
     5fa:	be 4f       	sbci	r27, 0xFE	; 254
     5fc:	c4 e0       	ldi	r28, 0x04	; 4
     5fe:	cc 93       	st	X, r28
     600:	ea 5e       	subi	r30, 0xEA	; 234
     602:	fe 4f       	sbci	r31, 0xFE	; 254
     604:	d9 01       	movw	r26, r18
     606:	ae 0d       	add	r26, r14
     608:	bf 1d       	adc	r27, r15
     60a:	b1 83       	std	Z+1, r27	; 0x01
     60c:	a0 83       	st	Z, r26
     60e:	14 c0       	rjmp	.+40     	; 0x638 <Task_Create+0x82>
     610:	61 30       	cpi	r22, 0x01	; 1
     612:	71 05       	cpc	r23, r1
     614:	49 f4       	brne	.+18     	; 0x628 <Task_Create+0x72>
     616:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <Cp>
     61a:	f0 91 1d 05 	lds	r31, 0x051D	; 0x80051d <Cp+0x1>
     61e:	e5 5f       	subi	r30, 0xF5	; 245
     620:	fe 4f       	sbci	r31, 0xFE	; 254
     622:	a3 e0       	ldi	r26, 0x03	; 3
     624:	a0 83       	st	Z, r26
     626:	08 c0       	rjmp	.+16     	; 0x638 <Task_Create+0x82>
     628:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <Cp>
     62c:	f0 91 1d 05 	lds	r31, 0x051D	; 0x80051d <Cp+0x1>
     630:	e5 5f       	subi	r30, 0xF5	; 245
     632:	fe 4f       	sbci	r31, 0xFE	; 254
     634:	a1 e0       	ldi	r26, 0x01	; 1
     636:	a0 83       	st	Z, r26
     638:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <Cp>
     63c:	f0 91 1d 05 	lds	r31, 0x051D	; 0x80051d <Cp+0x1>
     640:	df 01       	movw	r26, r30
     642:	a7 5f       	subi	r26, 0xF7	; 247
     644:	be 4f       	sbci	r27, 0xFE	; 254
     646:	11 96       	adiw	r26, 0x01	; 1
     648:	9c 93       	st	X, r25
     64a:	8e 93       	st	-X, r24
     64c:	14 97       	sbiw	r26, 0x04	; 4
     64e:	11 96       	adiw	r26, 0x01	; 1
     650:	7c 93       	st	X, r23
     652:	6e 93       	st	-X, r22
     654:	12 96       	adiw	r26, 0x02	; 2
     656:	11 96       	adiw	r26, 0x01	; 1
     658:	5c 93       	st	X, r21
     65a:	4e 93       	st	-X, r20
     65c:	1d 96       	adiw	r26, 0x0d	; 13
     65e:	11 96       	adiw	r26, 0x01	; 1
     660:	3c 93       	st	X, r19
     662:	2e 93       	st	-X, r18
     664:	12 97       	sbiw	r26, 0x02	; 2
     666:	11 96       	adiw	r26, 0x01	; 1
     668:	1c 93       	st	X, r17
     66a:	0e 93       	st	-X, r16
     66c:	e0 5f       	subi	r30, 0xF0	; 240
     66e:	fe 4f       	sbci	r31, 0xFE	; 254
     670:	f1 82       	std	Z+1, r15	; 0x01
     672:	e0 82       	st	Z, r14
     674:	b5 dd       	rcall	.-1174   	; 0x1e0 <Enter_Kernel>
     676:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <Cp>
     67a:	f0 91 1d 05 	lds	r31, 0x051D	; 0x80051d <Cp+0x1>
     67e:	e4 5f       	subi	r30, 0xF4	; 244
     680:	fe 4f       	sbci	r31, 0xFE	; 254
     682:	80 81       	ld	r24, Z
     684:	91 81       	ldd	r25, Z+1	; 0x01
     686:	08 c0       	rjmp	.+16     	; 0x698 <Task_Create+0xe2>
     688:	ee 24       	eor	r14, r14
     68a:	ea 94       	dec	r14
     68c:	fe 2c       	mov	r15, r14
     68e:	0f ef       	ldi	r16, 0xFF	; 255
     690:	1f ef       	ldi	r17, 0xFF	; 255
     692:	2f ef       	ldi	r18, 0xFF	; 255
     694:	3f ef       	ldi	r19, 0xFF	; 255
     696:	0c df       	rcall	.-488    	; 0x4b0 <Kernel_Create_Task>
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	08 95       	ret

000006a4 <Task_Create_System>:
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	ab 01       	movw	r20, r22
     6ae:	ee 24       	eor	r14, r14
     6b0:	ea 94       	dec	r14
     6b2:	fe 2c       	mov	r15, r14
     6b4:	0f ef       	ldi	r16, 0xFF	; 255
     6b6:	1f ef       	ldi	r17, 0xFF	; 255
     6b8:	2f ef       	ldi	r18, 0xFF	; 255
     6ba:	3f ef       	ldi	r19, 0xFF	; 255
     6bc:	63 e0       	ldi	r22, 0x03	; 3
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	7a df       	rcall	.-268    	; 0x5b6 <Task_Create>
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	08 95       	ret

000006cc <Task_Create_Period>:
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	7a 01       	movw	r14, r20
     6d6:	a8 01       	movw	r20, r16
     6d8:	2e 15       	cp	r18, r14
     6da:	3f 05       	cpc	r19, r15
     6dc:	08 f0       	brcs	.+2      	; 0x6e0 <Task_Create_Period+0x14>
     6de:	68 df       	rcall	.-304    	; 0x5b0 <OS_Abort>
     6e0:	89 01       	movw	r16, r18
     6e2:	9a 01       	movw	r18, r20
     6e4:	ab 01       	movw	r20, r22
     6e6:	62 e0       	ldi	r22, 0x02	; 2
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	65 df       	rcall	.-310    	; 0x5b6 <Task_Create>
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	ef 90       	pop	r14
     6f4:	08 95       	ret

000006f6 <Task_Create_Idle>:
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <KernelActive>
     702:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <KernelActive+0x1>
     706:	89 2b       	or	r24, r25
     708:	f1 f0       	breq	.+60     	; 0x746 <Task_Create_Idle+0x50>
     70a:	f8 94       	cli
     70c:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <Cp>
     710:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <Cp+0x1>
     714:	fc 01       	movw	r30, r24
     716:	e7 5f       	subi	r30, 0xF7	; 247
     718:	fe 4f       	sbci	r31, 0xFE	; 254
     71a:	2c e4       	ldi	r18, 0x4C	; 76
     71c:	31 e0       	ldi	r19, 0x01	; 1
     71e:	31 83       	std	Z+1, r19	; 0x01
     720:	20 83       	st	Z, r18
     722:	34 97       	sbiw	r30, 0x04	; 4
     724:	24 e0       	ldi	r18, 0x04	; 4
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	31 83       	std	Z+1, r19	; 0x01
     72a:	20 83       	st	Z, r18
     72c:	32 96       	adiw	r30, 0x02	; 2
     72e:	11 82       	std	Z+1, r1	; 0x01
     730:	10 82       	st	Z, r1
     732:	56 dd       	rcall	.-1364   	; 0x1e0 <Enter_Kernel>
     734:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <Cp>
     738:	f0 91 1d 05 	lds	r31, 0x051D	; 0x80051d <Cp+0x1>
     73c:	e4 5f       	subi	r30, 0xF4	; 244
     73e:	fe 4f       	sbci	r31, 0xFE	; 254
     740:	80 81       	ld	r24, Z
     742:	91 81       	ldd	r25, Z+1	; 0x01
     744:	0e c0       	rjmp	.+28     	; 0x762 <Task_Create_Idle+0x6c>
     746:	ee 24       	eor	r14, r14
     748:	ea 94       	dec	r14
     74a:	fe 2c       	mov	r15, r14
     74c:	0f ef       	ldi	r16, 0xFF	; 255
     74e:	1f ef       	ldi	r17, 0xFF	; 255
     750:	2f ef       	ldi	r18, 0xFF	; 255
     752:	3f ef       	ldi	r19, 0xFF	; 255
     754:	40 e0       	ldi	r20, 0x00	; 0
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	64 e0       	ldi	r22, 0x04	; 4
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	8c e4       	ldi	r24, 0x4C	; 76
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	a7 de       	rcall	.-690    	; 0x4b0 <Kernel_Create_Task>
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	08 95       	ret

0000076c <Task_Next>:
     76c:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <KernelActive>
     770:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <KernelActive+0x1>
     774:	89 2b       	or	r24, r25
     776:	19 f1       	breq	.+70     	; 0x7be <Task_Next+0x52>
     778:	f8 94       	cli
     77a:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <Cp>
     77e:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <Cp+0x1>
     782:	fc 01       	movw	r30, r24
     784:	eb 5f       	subi	r30, 0xFB	; 251
     786:	fe 4f       	sbci	r31, 0xFE	; 254
     788:	20 81       	ld	r18, Z
     78a:	31 81       	ldd	r19, Z+1	; 0x01
     78c:	22 30       	cpi	r18, 0x02	; 2
     78e:	31 05       	cpc	r19, r1
     790:	81 f4       	brne	.+32     	; 0x7b2 <Task_Next+0x46>
     792:	3b 96       	adiw	r30, 0x0b	; 11
     794:	20 81       	ld	r18, Z
     796:	31 81       	ldd	r19, Z+1	; 0x01
     798:	38 96       	adiw	r30, 0x08	; 8
     79a:	40 81       	ld	r20, Z
     79c:	51 81       	ldd	r21, Z+1	; 0x01
     79e:	24 1b       	sub	r18, r20
     7a0:	35 0b       	sbc	r19, r21
     7a2:	dc 01       	movw	r26, r24
     7a4:	aa 5e       	subi	r26, 0xEA	; 234
     7a6:	be 4f       	sbci	r27, 0xFE	; 254
     7a8:	11 96       	adiw	r26, 0x01	; 1
     7aa:	3c 93       	st	X, r19
     7ac:	2e 93       	st	-X, r18
     7ae:	11 82       	std	Z+1, r1	; 0x01
     7b0:	10 82       	st	Z, r1
     7b2:	fc 01       	movw	r30, r24
     7b4:	e5 5f       	subi	r30, 0xF5	; 245
     7b6:	fe 4f       	sbci	r31, 0xFE	; 254
     7b8:	85 e0       	ldi	r24, 0x05	; 5
     7ba:	80 83       	st	Z, r24
     7bc:	11 cd       	rjmp	.-1502   	; 0x1e0 <Enter_Kernel>
     7be:	08 95       	ret

000007c0 <Run_Next>:
     7c0:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <KernelActive>
     7c4:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <KernelActive+0x1>
     7c8:	89 2b       	or	r24, r25
     7ca:	09 f4       	brne	.+2      	; 0x7ce <Run_Next+0xe>
     7cc:	49 c0       	rjmp	.+146    	; 0x860 <Run_Next+0xa0>
     7ce:	f8 94       	cli
     7d0:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <Cp>
     7d4:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <Cp+0x1>
     7d8:	fc 01       	movw	r30, r24
     7da:	eb 5f       	subi	r30, 0xFB	; 251
     7dc:	fe 4f       	sbci	r31, 0xFE	; 254
     7de:	20 81       	ld	r18, Z
     7e0:	31 81       	ldd	r19, Z+1	; 0x01
     7e2:	23 30       	cpi	r18, 0x03	; 3
     7e4:	31 05       	cpc	r19, r1
     7e6:	19 f4       	brne	.+6      	; 0x7ee <Run_Next+0x2e>
     7e8:	36 96       	adiw	r30, 0x06	; 6
     7ea:	10 82       	st	Z, r1
     7ec:	38 c0       	rjmp	.+112    	; 0x85e <Run_Next+0x9e>
     7ee:	fc 01       	movw	r30, r24
     7f0:	eb 5f       	subi	r30, 0xFB	; 251
     7f2:	fe 4f       	sbci	r31, 0xFE	; 254
     7f4:	20 81       	ld	r18, Z
     7f6:	31 81       	ldd	r19, Z+1	; 0x01
     7f8:	22 30       	cpi	r18, 0x02	; 2
     7fa:	31 05       	cpc	r19, r1
     7fc:	59 f5       	brne	.+86     	; 0x854 <Run_Next+0x94>
     7fe:	73 96       	adiw	r30, 0x13	; 19
     800:	40 81       	ld	r20, Z
     802:	51 81       	ldd	r21, Z+1	; 0x01
     804:	36 97       	sbiw	r30, 0x06	; 6
     806:	20 81       	ld	r18, Z
     808:	31 81       	ldd	r19, Z+1	; 0x01
     80a:	42 17       	cp	r20, r18
     80c:	53 07       	cpc	r21, r19
     80e:	39 f0       	breq	.+14     	; 0x81e <Run_Next+0x5e>
     810:	20 91 10 05 	lds	r18, 0x0510	; 0x800510 <SysCount>
     814:	30 91 11 05 	lds	r19, 0x0511	; 0x800511 <SysCount+0x1>
     818:	12 16       	cp	r1, r18
     81a:	13 06       	cpc	r1, r19
     81c:	b4 f4       	brge	.+44     	; 0x84a <Run_Next+0x8a>
     81e:	fc 01       	movw	r30, r24
     820:	e0 5f       	subi	r30, 0xF0	; 240
     822:	fe 4f       	sbci	r31, 0xFE	; 254
     824:	20 81       	ld	r18, Z
     826:	31 81       	ldd	r19, Z+1	; 0x01
     828:	38 96       	adiw	r30, 0x08	; 8
     82a:	40 81       	ld	r20, Z
     82c:	51 81       	ldd	r21, Z+1	; 0x01
     82e:	24 1b       	sub	r18, r20
     830:	35 0b       	sbc	r19, r21
     832:	dc 01       	movw	r26, r24
     834:	aa 5e       	subi	r26, 0xEA	; 234
     836:	be 4f       	sbci	r27, 0xFE	; 254
     838:	11 96       	adiw	r26, 0x01	; 1
     83a:	3c 93       	st	X, r19
     83c:	2e 93       	st	-X, r18
     83e:	11 82       	std	Z+1, r1	; 0x01
     840:	10 82       	st	Z, r1
     842:	3d 97       	sbiw	r30, 0x0d	; 13
     844:	85 e0       	ldi	r24, 0x05	; 5
     846:	80 83       	st	Z, r24
     848:	0a c0       	rjmp	.+20     	; 0x85e <Run_Next+0x9e>
     84a:	fc 01       	movw	r30, r24
     84c:	e5 5f       	subi	r30, 0xF5	; 245
     84e:	fe 4f       	sbci	r31, 0xFE	; 254
     850:	10 82       	st	Z, r1
     852:	05 c0       	rjmp	.+10     	; 0x85e <Run_Next+0x9e>
     854:	fc 01       	movw	r30, r24
     856:	e5 5f       	subi	r30, 0xF5	; 245
     858:	fe 4f       	sbci	r31, 0xFE	; 254
     85a:	85 e0       	ldi	r24, 0x05	; 5
     85c:	80 83       	st	Z, r24
     85e:	c0 cc       	rjmp	.-1664   	; 0x1e0 <Enter_Kernel>
     860:	08 95       	ret

00000862 <setup>:
     862:	f8 94       	cli
     864:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     868:	e1 e8       	ldi	r30, 0x81	; 129
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	10 82       	st	Z, r1
     86e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     872:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     876:	80 e7       	ldi	r24, 0x70	; 112
     878:	92 e0       	ldi	r25, 0x02	; 2
     87a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     87e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     882:	80 81       	ld	r24, Z
     884:	88 60       	ori	r24, 0x08	; 8
     886:	80 83       	st	Z, r24
     888:	80 81       	ld	r24, Z
     88a:	84 60       	ori	r24, 0x04	; 4
     88c:	80 83       	st	Z, r24
     88e:	ef e6       	ldi	r30, 0x6F	; 111
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	82 60       	ori	r24, 0x02	; 2
     896:	80 83       	st	Z, r24
     898:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     89c:	e1 e9       	ldi	r30, 0x91	; 145
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	10 82       	st	Z, r1
     8a2:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     8a6:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     8aa:	83 e2       	ldi	r24, 0x23	; 35
     8ac:	94 ef       	ldi	r25, 0xF4	; 244
     8ae:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     8b2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     8b6:	80 81       	ld	r24, Z
     8b8:	88 60       	ori	r24, 0x08	; 8
     8ba:	80 83       	st	Z, r24
     8bc:	80 81       	ld	r24, Z
     8be:	84 60       	ori	r24, 0x04	; 4
     8c0:	80 83       	st	Z, r24
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     8c8:	78 94       	sei
     8ca:	08 95       	ret

000008cc <__vector_17>:
     8cc:	1f 92       	push	r1
     8ce:	0f 92       	push	r0
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	0f 92       	push	r0
     8d4:	11 24       	eor	r1, r1
     8d6:	0b b6       	in	r0, 0x3b	; 59
     8d8:	0f 92       	push	r0
     8da:	2f 93       	push	r18
     8dc:	3f 93       	push	r19
     8de:	4f 93       	push	r20
     8e0:	5f 93       	push	r21
     8e2:	6f 93       	push	r22
     8e4:	7f 93       	push	r23
     8e6:	8f 93       	push	r24
     8e8:	9f 93       	push	r25
     8ea:	af 93       	push	r26
     8ec:	bf 93       	push	r27
     8ee:	ef 93       	push	r30
     8f0:	ff 93       	push	r31
     8f2:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <Cp>
     8f6:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <Cp+0x1>
     8fa:	fc 01       	movw	r30, r24
     8fc:	eb 5f       	subi	r30, 0xFB	; 251
     8fe:	fe 4f       	sbci	r31, 0xFE	; 254
     900:	20 81       	ld	r18, Z
     902:	31 81       	ldd	r19, Z+1	; 0x01
     904:	22 30       	cpi	r18, 0x02	; 2
     906:	31 05       	cpc	r19, r1
     908:	31 f4       	brne	.+12     	; 0x916 <__vector_17+0x4a>
     90a:	73 96       	adiw	r30, 0x13	; 19
     90c:	80 81       	ld	r24, Z
     90e:	91 81       	ldd	r25, Z+1	; 0x01
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	91 83       	std	Z+1, r25	; 0x01
     914:	80 83       	st	Z, r24
     916:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <time_elapsed>
     91a:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <time_elapsed+0x1>
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	90 93 1b 05 	sts	0x051B, r25	; 0x80051b <time_elapsed+0x1>
     924:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <time_elapsed>
     928:	a0 91 0e 05 	lds	r26, 0x050E	; 0x80050e <PeriodicCount>
     92c:	b0 91 0f 05 	lds	r27, 0x050F	; 0x80050f <PeriodicCount+0x1>
     930:	cd 01       	movw	r24, r26
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	92 f0       	brmi	.+36     	; 0x95a <__vector_17+0x8e>
     936:	aa 0f       	add	r26, r26
     938:	bb 1f       	adc	r27, r27
     93a:	a0 5a       	subi	r26, 0xA0	; 160
     93c:	b8 4e       	sbci	r27, 0xE8	; 232
     93e:	20 e6       	ldi	r18, 0x60	; 96
     940:	37 e1       	ldi	r19, 0x17	; 23
     942:	fe 91       	ld	r31, -X
     944:	ee 91       	ld	r30, -X
     946:	ea 5e       	subi	r30, 0xEA	; 234
     948:	fe 4f       	sbci	r31, 0xFE	; 254
     94a:	80 81       	ld	r24, Z
     94c:	91 81       	ldd	r25, Z+1	; 0x01
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	91 83       	std	Z+1, r25	; 0x01
     952:	80 83       	st	Z, r24
     954:	a2 17       	cp	r26, r18
     956:	b3 07       	cpc	r27, r19
     958:	a1 f7       	brne	.-24     	; 0x942 <__vector_17+0x76>
     95a:	32 df       	rcall	.-412    	; 0x7c0 <Run_Next>
     95c:	ff 91       	pop	r31
     95e:	ef 91       	pop	r30
     960:	bf 91       	pop	r27
     962:	af 91       	pop	r26
     964:	9f 91       	pop	r25
     966:	8f 91       	pop	r24
     968:	7f 91       	pop	r23
     96a:	6f 91       	pop	r22
     96c:	5f 91       	pop	r21
     96e:	4f 91       	pop	r20
     970:	3f 91       	pop	r19
     972:	2f 91       	pop	r18
     974:	0f 90       	pop	r0
     976:	0b be       	out	0x3b, r0	; 59
     978:	0f 90       	pop	r0
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	0f 90       	pop	r0
     97e:	1f 90       	pop	r1
     980:	18 95       	reti

00000982 <__vector_32>:
     982:	1f 92       	push	r1
     984:	0f 92       	push	r0
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	0f 92       	push	r0
     98a:	11 24       	eor	r1, r1
     98c:	8f 93       	push	r24
     98e:	9f 93       	push	r25
     990:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <tickOverflowCount>
     994:	90 91 13 05 	lds	r25, 0x0513	; 0x800513 <tickOverflowCount+0x1>
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <tickOverflowCount+0x1>
     99e:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <tickOverflowCount>
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	0f 90       	pop	r0
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	0f 90       	pop	r0
     9ac:	1f 90       	pop	r1
     9ae:	18 95       	reti

000009b0 <kernel_send>:
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <Cp>
     9bc:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <Cp+0x1>
     9c0:	fc 01       	movw	r30, r24
     9c2:	e4 5e       	subi	r30, 0xE4	; 228
     9c4:	fe 4f       	sbci	r31, 0xFE	; 254
     9c6:	20 81       	ld	r18, Z
     9c8:	31 81       	ldd	r19, Z+1	; 0x01
     9ca:	21 50       	subi	r18, 0x01	; 1
     9cc:	31 09       	sbc	r19, r1
     9ce:	49 e2       	ldi	r20, 0x29	; 41
     9d0:	42 9f       	mul	r20, r18
     9d2:	f0 01       	movw	r30, r0
     9d4:	43 9f       	mul	r20, r19
     9d6:	f0 0d       	add	r31, r0
     9d8:	11 24       	eor	r1, r1
     9da:	e4 58       	subi	r30, 0x84	; 132
     9dc:	fd 4f       	sbci	r31, 0xFD	; 253
     9de:	24 a1       	ldd	r18, Z+36	; 0x24
     9e0:	35 a1       	ldd	r19, Z+37	; 0x25
     9e2:	23 2b       	or	r18, r19
     9e4:	d9 f5       	brne	.+118    	; 0xa5c <kernel_send+0xac>
     9e6:	fc 01       	movw	r30, r24
     9e8:	e4 5e       	subi	r30, 0xE4	; 228
     9ea:	fe 4f       	sbci	r31, 0xFE	; 254
     9ec:	20 81       	ld	r18, Z
     9ee:	31 81       	ldd	r19, Z+1	; 0x01
     9f0:	21 50       	subi	r18, 0x01	; 1
     9f2:	31 09       	sbc	r19, r1
     9f4:	42 9f       	mul	r20, r18
     9f6:	f0 01       	movw	r30, r0
     9f8:	43 9f       	mul	r20, r19
     9fa:	f0 0d       	add	r31, r0
     9fc:	11 24       	eor	r1, r1
     9fe:	e4 58       	subi	r30, 0x84	; 132
     a00:	fd 4f       	sbci	r31, 0xFD	; 253
     a02:	22 81       	ldd	r18, Z+2	; 0x02
     a04:	33 81       	ldd	r19, Z+3	; 0x03
     a06:	23 2b       	or	r18, r19
     a08:	41 f5       	brne	.+80     	; 0xa5a <kernel_send+0xaa>
     a0a:	dc 01       	movw	r26, r24
     a0c:	a4 5e       	subi	r26, 0xE4	; 228
     a0e:	be 4f       	sbci	r27, 0xFE	; 254
     a10:	2d 91       	ld	r18, X+
     a12:	3c 91       	ld	r19, X
     a14:	11 97       	sbiw	r26, 0x01	; 1
     a16:	21 50       	subi	r18, 0x01	; 1
     a18:	31 09       	sbc	r19, r1
     a1a:	42 9f       	mul	r20, r18
     a1c:	f0 01       	movw	r30, r0
     a1e:	43 9f       	mul	r20, r19
     a20:	f0 0d       	add	r31, r0
     a22:	11 24       	eor	r1, r1
     a24:	e4 58       	subi	r30, 0x84	; 132
     a26:	fd 4f       	sbci	r31, 0xFD	; 253
     a28:	93 83       	std	Z+3, r25	; 0x03
     a2a:	82 83       	std	Z+2, r24	; 0x02
     a2c:	fc 01       	movw	r30, r24
     a2e:	ec 5f       	subi	r30, 0xFC	; 252
     a30:	fe 4f       	sbci	r31, 0xFE	; 254
     a32:	23 e0       	ldi	r18, 0x03	; 3
     a34:	20 83       	st	Z, r18
     a36:	2d 91       	ld	r18, X+
     a38:	3c 91       	ld	r19, X
     a3a:	21 50       	subi	r18, 0x01	; 1
     a3c:	31 09       	sbc	r19, r1
     a3e:	7c 96       	adiw	r30, 0x1c	; 28
     a40:	80 81       	ld	r24, Z
     a42:	91 81       	ldd	r25, Z+1	; 0x01
     a44:	42 9f       	mul	r20, r18
     a46:	f0 01       	movw	r30, r0
     a48:	43 9f       	mul	r20, r19
     a4a:	f0 0d       	add	r31, r0
     a4c:	11 24       	eor	r1, r1
     a4e:	e4 58       	subi	r30, 0x84	; 132
     a50:	fd 4f       	sbci	r31, 0xFD	; 253
     a52:	90 a7       	std	Z+40, r25	; 0x28
     a54:	87 a3       	std	Z+39, r24	; 0x27
     a56:	21 dc       	rcall	.-1982   	; 0x29a <Dispatch>
     a58:	09 c1       	rjmp	.+530    	; 0xc6c <kernel_send+0x2bc>
     a5a:	aa dd       	rcall	.-1196   	; 0x5b0 <OS_Abort>
     a5c:	fc 01       	movw	r30, r24
     a5e:	e4 5e       	subi	r30, 0xE4	; 228
     a60:	fe 4f       	sbci	r31, 0xFE	; 254
     a62:	20 81       	ld	r18, Z
     a64:	31 81       	ldd	r19, Z+1	; 0x01
     a66:	21 50       	subi	r18, 0x01	; 1
     a68:	31 09       	sbc	r19, r1
     a6a:	49 e2       	ldi	r20, 0x29	; 41
     a6c:	42 9f       	mul	r20, r18
     a6e:	f0 01       	movw	r30, r0
     a70:	43 9f       	mul	r20, r19
     a72:	f0 0d       	add	r31, r0
     a74:	11 24       	eor	r1, r1
     a76:	e4 58       	subi	r30, 0x84	; 132
     a78:	fd 4f       	sbci	r31, 0xFD	; 253
     a7a:	22 81       	ldd	r18, Z+2	; 0x02
     a7c:	33 81       	ldd	r19, Z+3	; 0x03
     a7e:	23 2b       	or	r18, r19
     a80:	09 f0       	breq	.+2      	; 0xa84 <kernel_send+0xd4>
     a82:	96 dd       	rcall	.-1236   	; 0x5b0 <OS_Abort>
     a84:	fc 01       	movw	r30, r24
     a86:	e4 5e       	subi	r30, 0xE4	; 228
     a88:	fe 4f       	sbci	r31, 0xFE	; 254
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	29 e2       	ldi	r18, 0x29	; 41
     a92:	28 9f       	mul	r18, r24
     a94:	f0 01       	movw	r30, r0
     a96:	29 9f       	mul	r18, r25
     a98:	f0 0d       	add	r31, r0
     a9a:	11 24       	eor	r1, r1
     a9c:	e4 58       	subi	r30, 0x84	; 132
     a9e:	fd 4f       	sbci	r31, 0xFD	; 253
     aa0:	c4 a1       	ldd	r28, Z+36	; 0x24
     aa2:	d5 a1       	ldd	r29, Z+37	; 0x25
     aa4:	21 97       	sbiw	r28, 0x01	; 1
     aa6:	0a f4       	brpl	.+2      	; 0xaaa <kernel_send+0xfa>
     aa8:	ce c0       	rjmp	.+412    	; 0xc46 <kernel_send+0x296>
     aaa:	19 e2       	ldi	r17, 0x29	; 41
     aac:	01 e0       	ldi	r16, 0x01	; 1
     aae:	20 91 1c 05 	lds	r18, 0x051C	; 0x80051c <Cp>
     ab2:	30 91 1d 05 	lds	r19, 0x051D	; 0x80051d <Cp+0x1>
     ab6:	c9 01       	movw	r24, r18
     ab8:	84 5e       	subi	r24, 0xE4	; 228
     aba:	9e 4f       	sbci	r25, 0xFE	; 254
     abc:	dc 01       	movw	r26, r24
     abe:	4d 91       	ld	r20, X+
     ac0:	5c 91       	ld	r21, X
     ac2:	41 50       	subi	r20, 0x01	; 1
     ac4:	51 09       	sbc	r21, r1
     ac6:	fe 01       	movw	r30, r28
     ac8:	32 96       	adiw	r30, 0x02	; 2
     aca:	ee 0f       	add	r30, r30
     acc:	ff 1f       	adc	r31, r31
     ace:	14 9f       	mul	r17, r20
     ad0:	d0 01       	movw	r26, r0
     ad2:	15 9f       	mul	r17, r21
     ad4:	b0 0d       	add	r27, r0
     ad6:	11 24       	eor	r1, r1
     ad8:	ae 0f       	add	r26, r30
     ada:	bf 1f       	adc	r27, r31
     adc:	a4 58       	subi	r26, 0x84	; 132
     ade:	bd 4f       	sbci	r27, 0xFD	; 253
     ae0:	0d 90       	ld	r0, X+
     ae2:	bc 91       	ld	r27, X
     ae4:	a0 2d       	mov	r26, r0
     ae6:	ac 5f       	subi	r26, 0xFC	; 252
     ae8:	be 4f       	sbci	r27, 0xFE	; 254
     aea:	0c 93       	st	X, r16
     aec:	dc 01       	movw	r26, r24
     aee:	4d 91       	ld	r20, X+
     af0:	5c 91       	ld	r21, X
     af2:	41 50       	subi	r20, 0x01	; 1
     af4:	51 09       	sbc	r21, r1
     af6:	14 9f       	mul	r17, r20
     af8:	d0 01       	movw	r26, r0
     afa:	15 9f       	mul	r17, r21
     afc:	b0 0d       	add	r27, r0
     afe:	11 24       	eor	r1, r1
     b00:	ae 0f       	add	r26, r30
     b02:	bf 1f       	adc	r27, r31
     b04:	a4 58       	subi	r26, 0x84	; 132
     b06:	bd 4f       	sbci	r27, 0xFD	; 253
     b08:	6d 91       	ld	r22, X+
     b0a:	7c 91       	ld	r23, X
     b0c:	a9 01       	movw	r20, r18
     b0e:	40 5e       	subi	r20, 0xE0	; 224
     b10:	5e 4f       	sbci	r21, 0xFE	; 254
     b12:	da 01       	movw	r26, r20
     b14:	4d 91       	ld	r20, X+
     b16:	5c 91       	ld	r21, X
     b18:	db 01       	movw	r26, r22
     b1a:	a0 5e       	subi	r26, 0xE0	; 224
     b1c:	be 4f       	sbci	r27, 0xFE	; 254
     b1e:	4d 93       	st	X+, r20
     b20:	5c 93       	st	X, r21
     b22:	dc 01       	movw	r26, r24
     b24:	4d 91       	ld	r20, X+
     b26:	5c 91       	ld	r21, X
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	41 50       	subi	r20, 0x01	; 1
     b2c:	51 09       	sbc	r21, r1
     b2e:	14 9f       	mul	r17, r20
     b30:	c0 01       	movw	r24, r0
     b32:	15 9f       	mul	r17, r21
     b34:	90 0d       	add	r25, r0
     b36:	11 24       	eor	r1, r1
     b38:	e8 0f       	add	r30, r24
     b3a:	f9 1f       	adc	r31, r25
     b3c:	e4 58       	subi	r30, 0x84	; 132
     b3e:	fd 4f       	sbci	r31, 0xFD	; 253
     b40:	01 90       	ld	r0, Z+
     b42:	f0 81       	ld	r31, Z
     b44:	e0 2d       	mov	r30, r0
     b46:	eb 5f       	subi	r30, 0xFB	; 251
     b48:	fe 4f       	sbci	r31, 0xFE	; 254
     b4a:	80 81       	ld	r24, Z
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	03 97       	sbiw	r24, 0x03	; 3
     b50:	c1 f4       	brne	.+48     	; 0xb82 <kernel_send+0x1d2>
     b52:	fd 01       	movw	r30, r26
     b54:	40 81       	ld	r20, Z
     b56:	51 81       	ldd	r21, Z+1	; 0x01
     b58:	ce 01       	movw	r24, r28
     b5a:	02 96       	adiw	r24, 0x02	; 2
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	41 50       	subi	r20, 0x01	; 1
     b62:	51 09       	sbc	r21, r1
     b64:	14 9f       	mul	r17, r20
     b66:	90 01       	movw	r18, r0
     b68:	15 9f       	mul	r17, r21
     b6a:	30 0d       	add	r19, r0
     b6c:	11 24       	eor	r1, r1
     b6e:	82 0f       	add	r24, r18
     b70:	93 1f       	adc	r25, r19
     b72:	40 e1       	ldi	r20, 0x10	; 16
     b74:	55 e0       	ldi	r21, 0x05	; 5
     b76:	6e e3       	ldi	r22, 0x3E	; 62
     b78:	77 e1       	ldi	r23, 0x17	; 23
     b7a:	84 58       	subi	r24, 0x84	; 132
     b7c:	9d 4f       	sbci	r25, 0xFD	; 253
     b7e:	60 d2       	rcall	.+1216   	; 0x1040 <enqueue>
     b80:	36 c0       	rjmp	.+108    	; 0xbee <kernel_send+0x23e>
     b82:	f9 01       	movw	r30, r18
     b84:	e4 5e       	subi	r30, 0xE4	; 228
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	40 81       	ld	r20, Z
     b8a:	51 81       	ldd	r21, Z+1	; 0x01
     b8c:	41 50       	subi	r20, 0x01	; 1
     b8e:	51 09       	sbc	r21, r1
     b90:	fe 01       	movw	r30, r28
     b92:	32 96       	adiw	r30, 0x02	; 2
     b94:	ee 0f       	add	r30, r30
     b96:	ff 1f       	adc	r31, r31
     b98:	14 9f       	mul	r17, r20
     b9a:	c0 01       	movw	r24, r0
     b9c:	15 9f       	mul	r17, r21
     b9e:	90 0d       	add	r25, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	e8 0f       	add	r30, r24
     ba4:	f9 1f       	adc	r31, r25
     ba6:	e4 58       	subi	r30, 0x84	; 132
     ba8:	fd 4f       	sbci	r31, 0xFD	; 253
     baa:	01 90       	ld	r0, Z+
     bac:	f0 81       	ld	r31, Z
     bae:	e0 2d       	mov	r30, r0
     bb0:	eb 5f       	subi	r30, 0xFB	; 251
     bb2:	fe 4f       	sbci	r31, 0xFE	; 254
     bb4:	80 81       	ld	r24, Z
     bb6:	91 81       	ldd	r25, Z+1	; 0x01
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	c9 f4       	brne	.+50     	; 0xbee <kernel_send+0x23e>
     bbc:	f9 01       	movw	r30, r18
     bbe:	e4 5e       	subi	r30, 0xE4	; 228
     bc0:	fe 4f       	sbci	r31, 0xFE	; 254
     bc2:	40 81       	ld	r20, Z
     bc4:	51 81       	ldd	r21, Z+1	; 0x01
     bc6:	ce 01       	movw	r24, r28
     bc8:	02 96       	adiw	r24, 0x02	; 2
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	41 50       	subi	r20, 0x01	; 1
     bd0:	51 09       	sbc	r21, r1
     bd2:	14 9f       	mul	r17, r20
     bd4:	90 01       	movw	r18, r0
     bd6:	15 9f       	mul	r17, r21
     bd8:	30 0d       	add	r19, r0
     bda:	11 24       	eor	r1, r1
     bdc:	82 0f       	add	r24, r18
     bde:	93 1f       	adc	r25, r19
     be0:	4c e0       	ldi	r20, 0x0C	; 12
     be2:	55 e0       	ldi	r21, 0x05	; 5
     be4:	62 e8       	ldi	r22, 0x82	; 130
     be6:	77 e1       	ldi	r23, 0x17	; 23
     be8:	84 58       	subi	r24, 0x84	; 132
     bea:	9d 4f       	sbci	r25, 0xFD	; 253
     bec:	29 d2       	rcall	.+1106   	; 0x1040 <enqueue>
     bee:	a0 91 1c 05 	lds	r26, 0x051C	; 0x80051c <Cp>
     bf2:	b0 91 1d 05 	lds	r27, 0x051D	; 0x80051d <Cp+0x1>
     bf6:	a4 5e       	subi	r26, 0xE4	; 228
     bf8:	be 4f       	sbci	r27, 0xFE	; 254
     bfa:	2d 91       	ld	r18, X+
     bfc:	3c 91       	ld	r19, X
     bfe:	11 97       	sbiw	r26, 0x01	; 1
     c00:	21 50       	subi	r18, 0x01	; 1
     c02:	31 09       	sbc	r19, r1
     c04:	fe 01       	movw	r30, r28
     c06:	32 96       	adiw	r30, 0x02	; 2
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	12 9f       	mul	r17, r18
     c0e:	c0 01       	movw	r24, r0
     c10:	13 9f       	mul	r17, r19
     c12:	90 0d       	add	r25, r0
     c14:	11 24       	eor	r1, r1
     c16:	e8 0f       	add	r30, r24
     c18:	f9 1f       	adc	r31, r25
     c1a:	e4 58       	subi	r30, 0x84	; 132
     c1c:	fd 4f       	sbci	r31, 0xFD	; 253
     c1e:	11 82       	std	Z+1, r1	; 0x01
     c20:	10 82       	st	Z, r1
     c22:	8d 91       	ld	r24, X+
     c24:	9c 91       	ld	r25, X
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	18 9f       	mul	r17, r24
     c2a:	f0 01       	movw	r30, r0
     c2c:	19 9f       	mul	r17, r25
     c2e:	f0 0d       	add	r31, r0
     c30:	11 24       	eor	r1, r1
     c32:	e4 58       	subi	r30, 0x84	; 132
     c34:	fd 4f       	sbci	r31, 0xFD	; 253
     c36:	84 a1       	ldd	r24, Z+36	; 0x24
     c38:	95 a1       	ldd	r25, Z+37	; 0x25
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	95 a3       	std	Z+37, r25	; 0x25
     c3e:	84 a3       	std	Z+36, r24	; 0x24
     c40:	21 97       	sbiw	r28, 0x01	; 1
     c42:	0a f0       	brmi	.+2      	; 0xc46 <kernel_send+0x296>
     c44:	34 cf       	rjmp	.-408    	; 0xaae <kernel_send+0xfe>
     c46:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <Cp>
     c4a:	f0 91 1d 05 	lds	r31, 0x051D	; 0x80051d <Cp+0x1>
     c4e:	e4 5e       	subi	r30, 0xE4	; 228
     c50:	fe 4f       	sbci	r31, 0xFE	; 254
     c52:	80 81       	ld	r24, Z
     c54:	91 81       	ldd	r25, Z+1	; 0x01
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	29 e2       	ldi	r18, 0x29	; 41
     c5a:	28 9f       	mul	r18, r24
     c5c:	f0 01       	movw	r30, r0
     c5e:	29 9f       	mul	r18, r25
     c60:	f0 0d       	add	r31, r0
     c62:	11 24       	eor	r1, r1
     c64:	e4 58       	subi	r30, 0x84	; 132
     c66:	fd 4f       	sbci	r31, 0xFD	; 253
     c68:	10 a6       	std	Z+40, r1	; 0x28
     c6a:	17 a2       	std	Z+39, r1	; 0x27
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	08 95       	ret

00000c76 <kernel_receive>:

void kernel_receive() {
	if (ChannelArray[Cp->receiverChannel - 1].sender == NULL) { // no sender waiting
     c76:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <Cp>
     c7a:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <Cp+0x1>
     c7e:	fc 01       	movw	r30, r24
     c80:	e2 5e       	subi	r30, 0xE2	; 226
     c82:	fe 4f       	sbci	r31, 0xFE	; 254
     c84:	20 81       	ld	r18, Z
     c86:	31 81       	ldd	r19, Z+1	; 0x01
     c88:	21 50       	subi	r18, 0x01	; 1
     c8a:	31 09       	sbc	r19, r1
     c8c:	49 e2       	ldi	r20, 0x29	; 41
     c8e:	42 9f       	mul	r20, r18
     c90:	f0 01       	movw	r30, r0
     c92:	43 9f       	mul	r20, r19
     c94:	f0 0d       	add	r31, r0
     c96:	11 24       	eor	r1, r1
     c98:	e4 58       	subi	r30, 0x84	; 132
     c9a:	fd 4f       	sbci	r31, 0xFD	; 253
     c9c:	22 81       	ldd	r18, Z+2	; 0x02
     c9e:	33 81       	ldd	r19, Z+3	; 0x03
     ca0:	23 2b       	or	r18, r19
     ca2:	09 f5       	brne	.+66     	; 0xce6 <kernel_receive+0x70>
		Cp->state = BLOCKED;
     ca4:	fc 01       	movw	r30, r24
     ca6:	ec 5f       	subi	r30, 0xFC	; 252
     ca8:	fe 4f       	sbci	r31, 0xFE	; 254
     caa:	23 e0       	ldi	r18, 0x03	; 3
     cac:	20 83       	st	Z, r18
		enqueue(&Cp, &ChannelArray[Cp->receiverChannel - 1].receivers, &ChannelArray[Cp->receiverChannel - 1].numberReceivers);
     cae:	7a 96       	adiw	r30, 0x1a	; 26
     cb0:	20 81       	ld	r18, Z
     cb2:	31 81       	ldd	r19, Z+1	; 0x01
     cb4:	80 81       	ld	r24, Z
     cb6:	91 81       	ldd	r25, Z+1	; 0x01
     cb8:	21 50       	subi	r18, 0x01	; 1
     cba:	31 09       	sbc	r19, r1
     cbc:	e9 e2       	ldi	r30, 0x29	; 41
     cbe:	e2 9f       	mul	r30, r18
     cc0:	a0 01       	movw	r20, r0
     cc2:	e3 9f       	mul	r30, r19
     cc4:	50 0d       	add	r21, r0
     cc6:	11 24       	eor	r1, r1
     cc8:	40 56       	subi	r20, 0x60	; 96
     cca:	5d 4f       	sbci	r21, 0xFD	; 253
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	e8 9f       	mul	r30, r24
     cd0:	b0 01       	movw	r22, r0
     cd2:	e9 9f       	mul	r30, r25
     cd4:	70 0d       	add	r23, r0
     cd6:	11 24       	eor	r1, r1
     cd8:	60 58       	subi	r22, 0x80	; 128
     cda:	7d 4f       	sbci	r23, 0xFD	; 253
     cdc:	8c e1       	ldi	r24, 0x1C	; 28
     cde:	95 e0       	ldi	r25, 0x05	; 5
     ce0:	af d1       	rcall	.+862    	; 0x1040 <enqueue>
		Dispatch();
     ce2:	db ca       	rjmp	.-2634   	; 0x29a <Dispatch>
     ce4:	08 95       	ret
	} else { // sender is waiting
		ChannelArray[Cp->receiverChannel - 1].sender->state = READY;
     ce6:	fc 01       	movw	r30, r24
     ce8:	e2 5e       	subi	r30, 0xE2	; 226
     cea:	fe 4f       	sbci	r31, 0xFE	; 254
     cec:	20 81       	ld	r18, Z
     cee:	31 81       	ldd	r19, Z+1	; 0x01
     cf0:	21 50       	subi	r18, 0x01	; 1
     cf2:	31 09       	sbc	r19, r1
     cf4:	49 e2       	ldi	r20, 0x29	; 41
     cf6:	42 9f       	mul	r20, r18
     cf8:	d0 01       	movw	r26, r0
     cfa:	43 9f       	mul	r20, r19
     cfc:	b0 0d       	add	r27, r0
     cfe:	11 24       	eor	r1, r1
     d00:	a4 58       	subi	r26, 0x84	; 132
     d02:	bd 4f       	sbci	r27, 0xFD	; 253
     d04:	12 96       	adiw	r26, 0x02	; 2
     d06:	0d 90       	ld	r0, X+
     d08:	bc 91       	ld	r27, X
     d0a:	a0 2d       	mov	r26, r0
     d0c:	ac 5f       	subi	r26, 0xFC	; 252
     d0e:	be 4f       	sbci	r27, 0xFE	; 254
     d10:	21 e0       	ldi	r18, 0x01	; 1
     d12:	2c 93       	st	X, r18
		Cp->val = ChannelArray[Cp->receiverChannel - 1].val;
     d14:	20 81       	ld	r18, Z
     d16:	31 81       	ldd	r19, Z+1	; 0x01
     d18:	21 50       	subi	r18, 0x01	; 1
     d1a:	31 09       	sbc	r19, r1
     d1c:	42 9f       	mul	r20, r18
     d1e:	d0 01       	movw	r26, r0
     d20:	43 9f       	mul	r20, r19
     d22:	b0 0d       	add	r27, r0
     d24:	11 24       	eor	r1, r1
     d26:	a4 58       	subi	r26, 0x84	; 132
     d28:	bd 4f       	sbci	r27, 0xFD	; 253
     d2a:	97 96       	adiw	r26, 0x27	; 39
     d2c:	2d 91       	ld	r18, X+
     d2e:	3c 91       	ld	r19, X
     d30:	98 97       	sbiw	r26, 0x28	; 40
     d32:	dc 01       	movw	r26, r24
     d34:	a0 5e       	subi	r26, 0xE0	; 224
     d36:	be 4f       	sbci	r27, 0xFE	; 254
     d38:	11 96       	adiw	r26, 0x01	; 1
     d3a:	3c 93       	st	X, r19
     d3c:	2e 93       	st	-X, r18

		if (ChannelArray[Cp->receiverChannel - 1].sender->priority == SYSTEM) {
     d3e:	20 81       	ld	r18, Z
     d40:	31 81       	ldd	r19, Z+1	; 0x01
     d42:	21 50       	subi	r18, 0x01	; 1
     d44:	31 09       	sbc	r19, r1
     d46:	42 9f       	mul	r20, r18
     d48:	f0 01       	movw	r30, r0
     d4a:	43 9f       	mul	r20, r19
     d4c:	f0 0d       	add	r31, r0
     d4e:	11 24       	eor	r1, r1
     d50:	e4 58       	subi	r30, 0x84	; 132
     d52:	fd 4f       	sbci	r31, 0xFD	; 253
     d54:	02 80       	ldd	r0, Z+2	; 0x02
     d56:	f3 81       	ldd	r31, Z+3	; 0x03
     d58:	e0 2d       	mov	r30, r0
     d5a:	eb 5f       	subi	r30, 0xFB	; 251
     d5c:	fe 4f       	sbci	r31, 0xFE	; 254
     d5e:	20 81       	ld	r18, Z
     d60:	31 81       	ldd	r19, Z+1	; 0x01
     d62:	23 30       	cpi	r18, 0x03	; 3
     d64:	31 05       	cpc	r19, r1
     d66:	a1 f4       	brne	.+40     	; 0xd90 <kernel_receive+0x11a>
			enqueue(&ChannelArray[Cp->receiverChannel - 1].sender, &SysQueue, &SysCount);
     d68:	fc 01       	movw	r30, r24
     d6a:	e2 5e       	subi	r30, 0xE2	; 226
     d6c:	fe 4f       	sbci	r31, 0xFE	; 254
     d6e:	20 81       	ld	r18, Z
     d70:	31 81       	ldd	r19, Z+1	; 0x01
     d72:	21 50       	subi	r18, 0x01	; 1
     d74:	31 09       	sbc	r19, r1
     d76:	42 9f       	mul	r20, r18
     d78:	c0 01       	movw	r24, r0
     d7a:	43 9f       	mul	r20, r19
     d7c:	90 0d       	add	r25, r0
     d7e:	11 24       	eor	r1, r1
     d80:	40 e1       	ldi	r20, 0x10	; 16
     d82:	55 e0       	ldi	r21, 0x05	; 5
     d84:	6e e3       	ldi	r22, 0x3E	; 62
     d86:	77 e1       	ldi	r23, 0x17	; 23
     d88:	82 58       	subi	r24, 0x82	; 130
     d8a:	9d 4f       	sbci	r25, 0xFD	; 253
     d8c:	59 d1       	rcall	.+690    	; 0x1040 <enqueue>
     d8e:	2c c0       	rjmp	.+88     	; 0xde8 <kernel_receive+0x172>
		} else if (ChannelArray[Cp->receiverChannel - 1].sender->priority == RR) {
     d90:	fc 01       	movw	r30, r24
     d92:	e2 5e       	subi	r30, 0xE2	; 226
     d94:	fe 4f       	sbci	r31, 0xFE	; 254
     d96:	20 81       	ld	r18, Z
     d98:	31 81       	ldd	r19, Z+1	; 0x01
     d9a:	21 50       	subi	r18, 0x01	; 1
     d9c:	31 09       	sbc	r19, r1
     d9e:	49 e2       	ldi	r20, 0x29	; 41
     da0:	42 9f       	mul	r20, r18
     da2:	f0 01       	movw	r30, r0
     da4:	43 9f       	mul	r20, r19
     da6:	f0 0d       	add	r31, r0
     da8:	11 24       	eor	r1, r1
     daa:	e4 58       	subi	r30, 0x84	; 132
     dac:	fd 4f       	sbci	r31, 0xFD	; 253
     dae:	02 80       	ldd	r0, Z+2	; 0x02
     db0:	f3 81       	ldd	r31, Z+3	; 0x03
     db2:	e0 2d       	mov	r30, r0
     db4:	eb 5f       	subi	r30, 0xFB	; 251
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	20 81       	ld	r18, Z
     dba:	31 81       	ldd	r19, Z+1	; 0x01
     dbc:	21 30       	cpi	r18, 0x01	; 1
     dbe:	31 05       	cpc	r19, r1
     dc0:	99 f4       	brne	.+38     	; 0xde8 <kernel_receive+0x172>
			enqueue(&ChannelArray[Cp->receiverChannel - 1].sender, &RRQueue, &RRCount);
     dc2:	fc 01       	movw	r30, r24
     dc4:	e2 5e       	subi	r30, 0xE2	; 226
     dc6:	fe 4f       	sbci	r31, 0xFE	; 254
     dc8:	20 81       	ld	r18, Z
     dca:	31 81       	ldd	r19, Z+1	; 0x01
     dcc:	21 50       	subi	r18, 0x01	; 1
     dce:	31 09       	sbc	r19, r1
     dd0:	42 9f       	mul	r20, r18
     dd2:	c0 01       	movw	r24, r0
     dd4:	43 9f       	mul	r20, r19
     dd6:	90 0d       	add	r25, r0
     dd8:	11 24       	eor	r1, r1
     dda:	4c e0       	ldi	r20, 0x0C	; 12
     ddc:	55 e0       	ldi	r21, 0x05	; 5
     dde:	62 e8       	ldi	r22, 0x82	; 130
     de0:	77 e1       	ldi	r23, 0x17	; 23
     de2:	82 58       	subi	r24, 0x82	; 130
     de4:	9d 4f       	sbci	r25, 0xFD	; 253
     de6:	2c d1       	rcall	.+600    	; 0x1040 <enqueue>
		}
		ChannelArray[Cp->receiverChannel - 1].sender = NULL;
     de8:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <Cp>
     dec:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <Cp+0x1>
     df0:	fc 01       	movw	r30, r24
     df2:	e2 5e       	subi	r30, 0xE2	; 226
     df4:	fe 4f       	sbci	r31, 0xFE	; 254
     df6:	20 81       	ld	r18, Z
     df8:	31 81       	ldd	r19, Z+1	; 0x01
     dfa:	21 50       	subi	r18, 0x01	; 1
     dfc:	31 09       	sbc	r19, r1
     dfe:	49 e2       	ldi	r20, 0x29	; 41
     e00:	42 9f       	mul	r20, r18
     e02:	f0 01       	movw	r30, r0
     e04:	43 9f       	mul	r20, r19
     e06:	f0 0d       	add	r31, r0
     e08:	11 24       	eor	r1, r1
     e0a:	e4 58       	subi	r30, 0x84	; 132
     e0c:	fd 4f       	sbci	r31, 0xFD	; 253
     e0e:	13 82       	std	Z+3, r1	; 0x03
     e10:	12 82       	std	Z+2, r1	; 0x02
		ChannelArray[Cp->senderChannel - 1].val = NULL;
     e12:	fc 01       	movw	r30, r24
     e14:	e4 5e       	subi	r30, 0xE4	; 228
     e16:	fe 4f       	sbci	r31, 0xFE	; 254
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	48 9f       	mul	r20, r24
     e20:	f0 01       	movw	r30, r0
     e22:	49 9f       	mul	r20, r25
     e24:	f0 0d       	add	r31, r0
     e26:	11 24       	eor	r1, r1
     e28:	e4 58       	subi	r30, 0x84	; 132
     e2a:	fd 4f       	sbci	r31, 0xFD	; 253
     e2c:	10 a6       	std	Z+40, r1	; 0x28
     e2e:	17 a2       	std	Z+39, r1	; 0x27
     e30:	08 95       	ret

00000e32 <OS_Start>:
}

/**
  * This function starts the RTOS after creating a_main
  */
void OS_Start() {   
     e32:	df 92       	push	r13
     e34:	ef 92       	push	r14
     e36:	ff 92       	push	r15
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
	if ( (! KernelActive) && (Tasks > 0)) {
     e40:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <KernelActive>
     e44:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <KernelActive+0x1>
     e48:	89 2b       	or	r24, r25
     e4a:	09 f0       	breq	.+2      	; 0xe4e <OS_Start+0x1c>
     e4c:	dd c0       	rjmp	.+442    	; 0x1008 <OS_Start+0x1d6>
     e4e:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <Tasks>
     e52:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <Tasks+0x1>
     e56:	89 2b       	or	r24, r25
     e58:	09 f4       	brne	.+2      	; 0xe5c <OS_Start+0x2a>
     e5a:	d6 c0       	rjmp	.+428    	; 0x1008 <OS_Start+0x1d6>
		Disable_Interrupt();
     e5c:	f8 94       	cli

		KernelActive = 1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	90 93 19 05 	sts	0x0519, r25	; 0x800519 <KernelActive+0x1>
     e66:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <KernelActive>
  * corresponding kernel function on its behalf.
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */
     e6a:	17 da       	rcall	.-3026   	; 0x29a <Dispatch>
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
			break;
		case NEXT:
			Cp->state = READY;
     e6c:	dd 24       	eor	r13, r13
     e6e:	d3 94       	inc	r13
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */

	while(1) {
		Cp->request = NONE; /* clear its request */
     e70:	e0 91 1c 05 	lds	r30, 0x051C	; 0x80051c <Cp>
     e74:	f0 91 1d 05 	lds	r31, 0x051D	; 0x80051d <Cp+0x1>
     e78:	df 01       	movw	r26, r30
     e7a:	a5 5f       	subi	r26, 0xF5	; 245
     e7c:	be 4f       	sbci	r27, 0xFE	; 254
     e7e:	1c 92       	st	X, r1

		/* activate this newly selected task */
		CurrentSp = Cp->sp;
     e80:	82 81       	ldd	r24, Z+2	; 0x02
     e82:	93 81       	ldd	r25, Z+3	; 0x03
     e84:	90 93 5f 17 	sts	0x175F, r25	; 0x80175f <CurrentSp+0x1>
     e88:	80 93 5e 17 	sts	0x175E, r24	; 0x80175e <CurrentSp>

		Exit_Kernel();    /* or CSwitch() */
     e8c:	54 d9       	rcall	.-3416   	; 0x136 <CSwitch>

		/* if this task makes a system call, it will return to here! */

		/* save the Cp's stack pointer */
		Cp->sp = CurrentSp;
     e8e:	c0 91 1c 05 	lds	r28, 0x051C	; 0x80051c <Cp>
     e92:	d0 91 1d 05 	lds	r29, 0x051D	; 0x80051d <Cp+0x1>
     e96:	80 91 5e 17 	lds	r24, 0x175E	; 0x80175e <CurrentSp>
     e9a:	90 91 5f 17 	lds	r25, 0x175F	; 0x80175f <CurrentSp+0x1>
     e9e:	9b 83       	std	Y+3, r25	; 0x03
     ea0:	8a 83       	std	Y+2, r24	; 0x02

		switch(Cp->request){
     ea2:	fe 01       	movw	r30, r28
     ea4:	e5 5f       	subi	r30, 0xF5	; 245
     ea6:	fe 4f       	sbci	r31, 0xFE	; 254
     ea8:	e0 81       	ld	r30, Z
     eaa:	8e 2f       	mov	r24, r30
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	fc 01       	movw	r30, r24
     eb0:	31 97       	sbiw	r30, 0x01	; 1
     eb2:	e8 30       	cpi	r30, 0x08	; 8
     eb4:	f1 05       	cpc	r31, r1
     eb6:	e0 f6       	brcc	.-72     	; 0xe70 <OS_Start+0x3e>
     eb8:	88 27       	eor	r24, r24
     eba:	ee 58       	subi	r30, 0x8E	; 142
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	8f 4f       	sbci	r24, 0xFF	; 255
     ec0:	11 c2       	rjmp	.+1058   	; 0x12e4 <__tablejump2__>
		case CREATE:
			Cp->response = Kernel_Create_Task( Cp->code, Cp->priority, Cp->arg, -1, -1, -1);
     ec2:	fe 01       	movw	r30, r28
     ec4:	e9 5f       	subi	r30, 0xF9	; 249
     ec6:	fe 4f       	sbci	r31, 0xFE	; 254
     ec8:	40 81       	ld	r20, Z
     eca:	51 81       	ldd	r21, Z+1	; 0x01
     ecc:	32 97       	sbiw	r30, 0x02	; 2
     ece:	60 81       	ld	r22, Z
     ed0:	71 81       	ldd	r23, Z+1	; 0x01
     ed2:	34 96       	adiw	r30, 0x04	; 4
     ed4:	80 81       	ld	r24, Z
     ed6:	91 81       	ldd	r25, Z+1	; 0x01
     ed8:	ee 24       	eor	r14, r14
     eda:	ea 94       	dec	r14
     edc:	fe 2c       	mov	r15, r14
     ede:	0f ef       	ldi	r16, 0xFF	; 255
     ee0:	1f ef       	ldi	r17, 0xFF	; 255
     ee2:	2f ef       	ldi	r18, 0xFF	; 255
     ee4:	3f ef       	ldi	r19, 0xFF	; 255
     ee6:	e4 da       	rcall	.-2616   	; 0x4b0 <Kernel_Create_Task>
     ee8:	c4 5f       	subi	r28, 0xF4	; 244
     eea:	de 4f       	sbci	r29, 0xFE	; 254
     eec:	99 83       	std	Y+1, r25	; 0x01
     eee:	88 83       	st	Y, r24
     ef0:	bf cf       	rjmp	.-130    	; 0xe70 <OS_Start+0x3e>
			break;
		case CREATE_SYS:
			Cp->response = Kernel_Create_Task( Cp->code, SYSTEM, Cp->arg, -1, -1, -1);
     ef2:	fe 01       	movw	r30, r28
     ef4:	e9 5f       	subi	r30, 0xF9	; 249
     ef6:	fe 4f       	sbci	r31, 0xFE	; 254
     ef8:	40 81       	ld	r20, Z
     efa:	51 81       	ldd	r21, Z+1	; 0x01
     efc:	32 96       	adiw	r30, 0x02	; 2
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	ee 24       	eor	r14, r14
     f04:	ea 94       	dec	r14
     f06:	fe 2c       	mov	r15, r14
     f08:	0f ef       	ldi	r16, 0xFF	; 255
     f0a:	1f ef       	ldi	r17, 0xFF	; 255
     f0c:	2f ef       	ldi	r18, 0xFF	; 255
     f0e:	3f ef       	ldi	r19, 0xFF	; 255
     f10:	63 e0       	ldi	r22, 0x03	; 3
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	cd da       	rcall	.-2662   	; 0x4b0 <Kernel_Create_Task>
     f16:	c4 5f       	subi	r28, 0xF4	; 244
     f18:	de 4f       	sbci	r29, 0xFE	; 254
     f1a:	99 83       	std	Y+1, r25	; 0x01
     f1c:	88 83       	st	Y, r24
     f1e:	a8 cf       	rjmp	.-176    	; 0xe70 <OS_Start+0x3e>
			break;
		case CREATE_PERIODIC:
			Cp->response = Kernel_Create_Task( Cp->code, PERIODIC, Cp->arg, Cp->offset, Cp->wcet, Cp->period);
     f20:	fe 01       	movw	r30, r28
     f22:	e0 5f       	subi	r30, 0xF0	; 240
     f24:	fe 4f       	sbci	r31, 0xFE	; 254
     f26:	e0 80       	ld	r14, Z
     f28:	f1 80       	ldd	r15, Z+1	; 0x01
     f2a:	32 96       	adiw	r30, 0x02	; 2
     f2c:	00 81       	ld	r16, Z
     f2e:	11 81       	ldd	r17, Z+1	; 0x01
     f30:	32 96       	adiw	r30, 0x02	; 2
     f32:	20 81       	ld	r18, Z
     f34:	31 81       	ldd	r19, Z+1	; 0x01
     f36:	3d 97       	sbiw	r30, 0x0d	; 13
     f38:	40 81       	ld	r20, Z
     f3a:	51 81       	ldd	r21, Z+1	; 0x01
     f3c:	32 96       	adiw	r30, 0x02	; 2
     f3e:	80 81       	ld	r24, Z
     f40:	91 81       	ldd	r25, Z+1	; 0x01
     f42:	62 e0       	ldi	r22, 0x02	; 2
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	b4 da       	rcall	.-2712   	; 0x4b0 <Kernel_Create_Task>
     f48:	c4 5f       	subi	r28, 0xF4	; 244
     f4a:	de 4f       	sbci	r29, 0xFE	; 254
     f4c:	99 83       	std	Y+1, r25	; 0x01
     f4e:	88 83       	st	Y, r24
     f50:	8f cf       	rjmp	.-226    	; 0xe70 <OS_Start+0x3e>
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
     f52:	fe 01       	movw	r30, r28
     f54:	e9 5f       	subi	r30, 0xF9	; 249
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	40 81       	ld	r20, Z
     f5a:	51 81       	ldd	r21, Z+1	; 0x01
     f5c:	32 96       	adiw	r30, 0x02	; 2
     f5e:	80 81       	ld	r24, Z
     f60:	91 81       	ldd	r25, Z+1	; 0x01
     f62:	ee 24       	eor	r14, r14
     f64:	ea 94       	dec	r14
     f66:	fe 2c       	mov	r15, r14
     f68:	0f ef       	ldi	r16, 0xFF	; 255
     f6a:	1f ef       	ldi	r17, 0xFF	; 255
     f6c:	2f ef       	ldi	r18, 0xFF	; 255
     f6e:	3f ef       	ldi	r19, 0xFF	; 255
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	9d da       	rcall	.-2758   	; 0x4b0 <Kernel_Create_Task>
     f76:	c4 5f       	subi	r28, 0xF4	; 244
     f78:	de 4f       	sbci	r29, 0xFE	; 254
     f7a:	99 83       	std	Y+1, r25	; 0x01
     f7c:	88 83       	st	Y, r24
     f7e:	78 cf       	rjmp	.-272    	; 0xe70 <OS_Start+0x3e>
			break;
		case NEXT:
			Cp->state = READY;
     f80:	fe 01       	movw	r30, r28
     f82:	ec 5f       	subi	r30, 0xFC	; 252
     f84:	fe 4f       	sbci	r31, 0xFE	; 254
     f86:	d0 82       	st	Z, r13
			if (Cp->priority == SYSTEM) {
     f88:	31 96       	adiw	r30, 0x01	; 1
     f8a:	80 81       	ld	r24, Z
     f8c:	91 81       	ldd	r25, Z+1	; 0x01
     f8e:	03 97       	sbiw	r24, 0x03	; 3
     f90:	41 f4       	brne	.+16     	; 0xfa2 <OS_Start+0x170>
				enqueue(&Cp, &SysQueue, &SysCount);
     f92:	40 e1       	ldi	r20, 0x10	; 16
     f94:	55 e0       	ldi	r21, 0x05	; 5
     f96:	6e e3       	ldi	r22, 0x3E	; 62
     f98:	77 e1       	ldi	r23, 0x17	; 23
     f9a:	8c e1       	ldi	r24, 0x1C	; 28
     f9c:	95 e0       	ldi	r25, 0x05	; 5
     f9e:	50 d0       	rcall	.+160    	; 0x1040 <enqueue>
     fa0:	1c c0       	rjmp	.+56     	; 0xfda <OS_Start+0x1a8>
			} else if (Cp->priority == PERIODIC) {
     fa2:	fe 01       	movw	r30, r28
     fa4:	eb 5f       	subi	r30, 0xFB	; 251
     fa6:	fe 4f       	sbci	r31, 0xFE	; 254
     fa8:	80 81       	ld	r24, Z
     faa:	91 81       	ldd	r25, Z+1	; 0x01
     fac:	02 97       	sbiw	r24, 0x02	; 2
     fae:	41 f4       	brne	.+16     	; 0xfc0 <OS_Start+0x18e>
				enqueuePeriodic(&Cp, &PeriodicQueue, &PeriodicCount);
     fb0:	4e e0       	ldi	r20, 0x0E	; 14
     fb2:	55 e0       	ldi	r21, 0x05	; 5
     fb4:	60 e6       	ldi	r22, 0x60	; 96
     fb6:	77 e1       	ldi	r23, 0x17	; 23
     fb8:	8c e1       	ldi	r24, 0x1C	; 28
     fba:	95 e0       	ldi	r25, 0x05	; 5
     fbc:	93 d0       	rcall	.+294    	; 0x10e4 <enqueuePeriodic>
     fbe:	0d c0       	rjmp	.+26     	; 0xfda <OS_Start+0x1a8>
			} else if (Cp->priority == RR) {
     fc0:	cb 5f       	subi	r28, 0xFB	; 251
     fc2:	de 4f       	sbci	r29, 0xFE	; 254
     fc4:	88 81       	ld	r24, Y
     fc6:	99 81       	ldd	r25, Y+1	; 0x01
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	39 f4       	brne	.+14     	; 0xfda <OS_Start+0x1a8>
				enqueue(&Cp, &RRQueue, &RRCount);
     fcc:	4c e0       	ldi	r20, 0x0C	; 12
     fce:	55 e0       	ldi	r21, 0x05	; 5
     fd0:	62 e8       	ldi	r22, 0x82	; 130
     fd2:	77 e1       	ldi	r23, 0x17	; 23
     fd4:	8c e1       	ldi	r24, 0x1C	; 28
     fd6:	95 e0       	ldi	r25, 0x05	; 5
     fd8:	33 d0       	rcall	.+102    	; 0x1040 <enqueue>
			}
			Dispatch();
     fda:	5f d9       	rcall	.-3394   	; 0x29a <Dispatch>
     fdc:	49 cf       	rjmp	.-366    	; 0xe70 <OS_Start+0x3e>
			break;
		case NONE:
			break;
		case SEND:
			kernel_send();
     fde:	e8 dc       	rcall	.-1584   	; 0x9b0 <kernel_send>
     fe0:	47 cf       	rjmp	.-370    	; 0xe70 <OS_Start+0x3e>
			break;
		case RECEIVE:
			kernel_receive();
     fe2:	49 de       	rcall	.-878    	; 0xc76 <kernel_receive>
     fe4:	45 cf       	rjmp	.-374    	; 0xe70 <OS_Start+0x3e>

/**
  *  Terminate a task
  */
static void Kernel_Terminate_Task() {
	Cp->state = DEAD;
     fe6:	fe 01       	movw	r30, r28
     fe8:	ec 5f       	subi	r30, 0xFC	; 252
     fea:	fe 4f       	sbci	r31, 0xFE	; 254
     fec:	10 82       	st	Z, r1
	Cp->processID = 0;
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	18 82       	st	Y, r1
	Tasks--;
     ff2:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <Tasks>
     ff6:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <Tasks+0x1>
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	90 93 17 05 	sts	0x0517, r25	; 0x800517 <Tasks+0x1>
    1000:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <Tasks>
			kernel_receive();
			break;
		case TERMINATE:
			/* deallocate all resources used by this task */
			Kernel_Terminate_Task();
			Dispatch();
    1004:	4a d9       	rcall	.-3436   	; 0x29a <Dispatch>
    1006:	34 cf       	rjmp	.-408    	; 0xe70 <OS_Start+0x3e>

		KernelActive = 1;
		Next_Kernel_Request();
		/* SHOULD NEVER GET HERE!!! */
	}
}
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	df 90       	pop	r13
    1016:	08 95       	ret

00001018 <main>:
/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	//pin 25
	DDRA |= (1<<PA3);
    1018:	0b 9a       	sbi	0x01, 3	; 1
	PORTA &= ~(1<<PA3);
    101a:	13 98       	cbi	0x02, 3	; 2

	//pin 26
	DDRA |= (1<<PA4);
    101c:	0c 9a       	sbi	0x01, 4	; 1
	PORTA &= ~(1<<PA4);
    101e:	14 98       	cbi	0x02, 4	; 2

	//pin 27
	DDRA |= (1<<PA5);
    1020:	0d 9a       	sbi	0x01, 5	; 1
	PORTA &= ~(1<<PA5);
    1022:	15 98       	cbi	0x02, 5	; 2

	//pin 28
	DDRA |= (1<<PA6);
    1024:	0e 9a       	sbi	0x01, 6	; 1
	PORTA &= ~(1<<PA6);
    1026:	16 98       	cbi	0x02, 6	; 2

	//pin 29
	DDRA |= (1<<PA7);
    1028:	0f 9a       	sbi	0x01, 7	; 1
	PORTA &= ~(1<<PA7);
    102a:	17 98       	cbi	0x02, 7	; 2

	setup();
    102c:	1a dc       	rcall	.-1996   	; 0x862 <setup>
	OS_Init();
    102e:	83 da       	rcall	.-2810   	; 0x536 <OS_Init>
	Task_Create_Idle();
    1030:	62 db       	rcall	.-2364   	; 0x6f6 <Task_Create_Idle>
	Task_Create_System(a_main, 1);
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	85 e4       	ldi	r24, 0x45	; 69
    1038:	91 e0       	ldi	r25, 0x01	; 1
    103a:	34 db       	rcall	.-2456   	; 0x6a4 <Task_Create_System>
	OS_Start();
    103c:	fa ce       	rjmp	.-524    	; 0xe32 <OS_Start>
    103e:	08 95       	ret

00001040 <enqueue>:
}

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1046:	28 81       	ld	r18, Y
    1048:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    104a:	2f 30       	cpi	r18, 0x0F	; 15
    104c:	31 05       	cpc	r19, r1
    104e:	e9 f0       	breq	.+58     	; 0x108a <enqueue+0x4a>
        return NULL;
    }

    int i = (*QCount) - 1;
    1050:	e8 81       	ld	r30, Y
    1052:	f9 81       	ldd	r31, Y+1	; 0x01
    1054:	9f 01       	movw	r18, r30
    1056:	21 50       	subi	r18, 0x01	; 1
    1058:	31 09       	sbc	r19, r1
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    105a:	62 f0       	brmi	.+24     	; 0x1074 <enqueue+0x34>
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	e6 0f       	add	r30, r22
    1062:	f7 1f       	adc	r31, r23
    1064:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    1066:	32 91       	ld	r19, -Z
    1068:	22 91       	ld	r18, -Z
    106a:	33 83       	std	Z+3, r19	; 0x03
    106c:	22 83       	std	Z+2, r18	; 0x02

    int i = (*QCount) - 1;
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    106e:	ea 17       	cp	r30, r26
    1070:	fb 07       	cpc	r31, r27
    1072:	c9 f7       	brne	.-14     	; 0x1066 <enqueue+0x26>
        i--;
        temp = Queue[i];
    }

    //Queue[i+1] = *p; //original code
	Queue[0] = *p;
    1074:	fc 01       	movw	r30, r24
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	fb 01       	movw	r30, r22
    107c:	91 83       	std	Z+1, r25	; 0x01
    107e:	80 83       	st	Z, r24
    (*QCount)++;
    1080:	88 81       	ld	r24, Y
    1082:	99 81       	ldd	r25, Y+1	; 0x01
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	99 83       	std	Y+1, r25	; 0x01
    1088:	88 83       	st	Y, r24
}
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <dequeue>:

/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    1090:	ac 01       	movw	r20, r24
    1092:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1094:	8d 91       	ld	r24, X+
    1096:	9c 91       	ld	r25, X
    1098:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
    109a:	89 2b       	or	r24, r25
    109c:	01 f1       	breq	.+64     	; 0x10de <dequeue+0x4e>
	   return NULL;
   }

   volatile PD *result = (Queue[(*QCount)-1]);
    109e:	ed 91       	ld	r30, X+
    10a0:	fc 91       	ld	r31, X
    10a2:	11 97       	sbiw	r26, 0x01	; 1
    10a4:	e1 50       	subi	r30, 0x01	; 1
    10a6:	f0 48       	sbci	r31, 0x80	; 128
    10a8:	ee 0f       	add	r30, r30
    10aa:	ff 1f       	adc	r31, r31
    10ac:	e4 0f       	add	r30, r20
    10ae:	f5 1f       	adc	r31, r21
    10b0:	80 81       	ld	r24, Z
    10b2:	91 81       	ldd	r25, Z+1	; 0x01
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
    10b4:	2d 91       	ld	r18, X+
    10b6:	3c 91       	ld	r19, X
    10b8:	11 97       	sbiw	r26, 0x01	; 1
    10ba:	f9 01       	movw	r30, r18
    10bc:	e1 50       	subi	r30, 0x01	; 1
    10be:	f0 48       	sbci	r31, 0x80	; 128
    10c0:	ee 0f       	add	r30, r30
    10c2:	ff 1f       	adc	r31, r31
    10c4:	e4 0f       	add	r30, r20
    10c6:	f5 1f       	adc	r31, r21
    10c8:	11 82       	std	Z+1, r1	; 0x01
    10ca:	10 82       	st	Z, r1
   (*QCount)--;
    10cc:	2d 91       	ld	r18, X+
    10ce:	3c 91       	ld	r19, X
    10d0:	11 97       	sbiw	r26, 0x01	; 1
    10d2:	21 50       	subi	r18, 0x01	; 1
    10d4:	31 09       	sbc	r19, r1
    10d6:	11 96       	adiw	r26, 0x01	; 1
    10d8:	3c 93       	st	X, r19
    10da:	2e 93       	st	-X, r18

   return result;
    10dc:	08 95       	ret
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
	   return NULL;
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
   volatile PD *result = (Queue[(*QCount)-1]);
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
   (*QCount)--;

   return result;
}
    10e2:	08 95       	ret

000010e4 <enqueuePeriodic>:

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    10e4:	cf 92       	push	r12
    10e6:	df 92       	push	r13
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    10f6:	ea 01       	movw	r28, r20
    10f8:	28 81       	ld	r18, Y
    10fa:	39 81       	ldd	r19, Y+1	; 0x01

   return result;
}

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
	if(isFull(QCount)) {
    10fc:	2f 30       	cpi	r18, 0x0F	; 15
    10fe:	31 05       	cpc	r19, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <enqueuePeriodic+0x20>
    1102:	4a c0       	rjmp	.+148    	; 0x1198 <enqueuePeriodic+0xb4>
		return;
	}

	int i = (*QCount) - 1;
    1104:	28 81       	ld	r18, Y
    1106:	39 81       	ldd	r19, Y+1	; 0x01
    1108:	21 50       	subi	r18, 0x01	; 1
    110a:	31 09       	sbc	r19, r1

	volatile PD *new = *p;
    110c:	fc 01       	movw	r30, r24
    110e:	00 81       	ld	r16, Z
    1110:	11 81       	ldd	r17, Z+1	; 0x01

	volatile PD *temp = Queue[i];
    1112:	f9 01       	movw	r30, r18
    1114:	ee 0f       	add	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	db 01       	movw	r26, r22
    111a:	ae 0f       	add	r26, r30
    111c:	bf 1f       	adc	r27, r31
    111e:	4d 91       	ld	r20, X+
    1120:	5c 91       	ld	r21, X

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    1122:	33 23       	and	r19, r19
    1124:	3c f1       	brlt	.+78     	; 0x1174 <enqueuePeriodic+0x90>
    1126:	d8 01       	movw	r26, r16
    1128:	aa 5e       	subi	r26, 0xEA	; 234
    112a:	be 4f       	sbci	r27, 0xFE	; 254
    112c:	ed 90       	ld	r14, X+
    112e:	fc 90       	ld	r15, X
    1130:	da 01       	movw	r26, r20
    1132:	aa 5e       	subi	r26, 0xEA	; 234
    1134:	be 4f       	sbci	r27, 0xFE	; 254
    1136:	4d 91       	ld	r20, X+
    1138:	5c 91       	ld	r21, X
    113a:	e4 16       	cp	r14, r20
    113c:	f5 06       	cpc	r15, r21
    113e:	d4 f0       	brlt	.+52     	; 0x1174 <enqueuePeriodic+0x90>
    1140:	e6 0f       	add	r30, r22
    1142:	f7 1f       	adc	r31, r23
    1144:	0a 5e       	subi	r16, 0xEA	; 234
    1146:	1e 4f       	sbci	r17, 0xFE	; 254
		Queue[i+1] = Queue[i];
    1148:	a0 81       	ld	r26, Z
    114a:	b1 81       	ldd	r27, Z+1	; 0x01
    114c:	b3 83       	std	Z+3, r27	; 0x03
    114e:	a2 83       	std	Z+2, r26	; 0x02
		i--;
    1150:	21 50       	subi	r18, 0x01	; 1
    1152:	31 09       	sbc	r19, r1
		temp = Queue[i];
    1154:	b2 91       	ld	r27, -Z
    1156:	a2 91       	ld	r26, -Z

	volatile PD *new = *p;

	volatile PD *temp = Queue[i];

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    1158:	2f 3f       	cpi	r18, 0xFF	; 255
    115a:	4f ef       	ldi	r20, 0xFF	; 255
    115c:	34 07       	cpc	r19, r20
    115e:	51 f0       	breq	.+20     	; 0x1174 <enqueuePeriodic+0x90>
    1160:	e8 01       	movw	r28, r16
    1162:	e8 80       	ld	r14, Y
    1164:	f9 80       	ldd	r15, Y+1	; 0x01
    1166:	aa 5e       	subi	r26, 0xEA	; 234
    1168:	be 4f       	sbci	r27, 0xFE	; 254
    116a:	4d 91       	ld	r20, X+
    116c:	5c 91       	ld	r21, X
    116e:	e4 16       	cp	r14, r20
    1170:	f5 06       	cpc	r15, r21
    1172:	54 f7       	brge	.-44     	; 0x1148 <enqueuePeriodic+0x64>
		Queue[i+1] = Queue[i];
		i--;
		temp = Queue[i];
	}

	Queue[i+1] = *p;
    1174:	fc 01       	movw	r30, r24
    1176:	80 81       	ld	r24, Z
    1178:	91 81       	ldd	r25, Z+1	; 0x01
    117a:	2f 5f       	subi	r18, 0xFF	; 255
    117c:	3f 4f       	sbci	r19, 0xFF	; 255
    117e:	22 0f       	add	r18, r18
    1180:	33 1f       	adc	r19, r19
    1182:	fb 01       	movw	r30, r22
    1184:	e2 0f       	add	r30, r18
    1186:	f3 1f       	adc	r31, r19
    1188:	91 83       	std	Z+1, r25	; 0x01
    118a:	80 83       	st	Z, r24
	(*QCount)++;
    118c:	e6 01       	movw	r28, r12
    118e:	88 81       	ld	r24, Y
    1190:	99 81       	ldd	r25, Y+1	; 0x01
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	99 83       	std	Y+1, r25	; 0x01
    1196:	88 83       	st	Y, r24
}
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	ff 90       	pop	r15
    11a2:	ef 90       	pop	r14
    11a4:	df 90       	pop	r13
    11a6:	cf 90       	pop	r12
    11a8:	08 95       	ret

000011aa <peek>:

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    11aa:	fb 01       	movw	r30, r22
    11ac:	20 81       	ld	r18, Z
    11ae:	31 81       	ldd	r19, Z+1	; 0x01
	Queue[i+1] = *p;
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
    11b0:	23 2b       	or	r18, r19
    11b2:	61 f0       	breq	.+24     	; 0x11cc <peek+0x22>
		return NULL;
	}
	volatile PD *result = (Queue[(*QCount)-1]);
    11b4:	20 81       	ld	r18, Z
    11b6:	31 81       	ldd	r19, Z+1	; 0x01
    11b8:	f9 01       	movw	r30, r18
    11ba:	e1 50       	subi	r30, 0x01	; 1
    11bc:	f0 48       	sbci	r31, 0x80	; 128
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	e8 0f       	add	r30, r24
    11c4:	f9 1f       	adc	r31, r25
    11c6:	80 81       	ld	r24, Z
    11c8:	91 81       	ldd	r25, Z+1	; 0x01
	return result;
    11ca:	08 95       	ret
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
		return NULL;
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
	}
	volatile PD *result = (Queue[(*QCount)-1]);
	return result;
    11d0:	08 95       	ret

000011d2 <Test_Task>:
// Tests if more than MAXTHREAD number of tasks can be created.
#include "TEST_too_many_tasks.h"

static void Test_Task(){
	Task_Terminate();
    11d2:	b3 c8       	rjmp	.-3738   	; 0x33a <Task_Terminate>
    11d4:	08 95       	ret

000011d6 <test_too_many_tasks>:
}

void test_too_many_tasks(void){
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
	uart_start();
    11de:	51 d0       	rcall	.+162    	; 0x1282 <uart_start>
	int x; 
	PID k;
	for(x = 0; x < MAXTHREAD*2 ; x++){
		k = Task_Create_System(Test_Task, x);
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	89 ee       	ldi	r24, 0xE9	; 233
    11e6:	98 e0       	ldi	r25, 0x08	; 8
    11e8:	5d da       	rcall	.-2886   	; 0x6a4 <Task_Create_System>

void test_too_many_tasks(void){
	uart_start();
	int x; 
	PID k;
	for(x = 0; x < MAXTHREAD*2 ; x++){
    11ea:	c0 e0       	ldi	r28, 0x00	; 0
    11ec:	d0 e0       	ldi	r29, 0x00	; 0
    11ee:	10 c0       	rjmp	.+32     	; 0x1210 <test_too_many_tasks+0x3a>
		k = Task_Create_System(Test_Task, x);
    11f0:	be 01       	movw	r22, r28
    11f2:	89 ee       	ldi	r24, 0xE9	; 233
    11f4:	98 e0       	ldi	r25, 0x08	; 8
    11f6:	56 da       	rcall	.-2900   	; 0x6a4 <Task_Create_System>
		if(x >= MAXTHREAD && k != NULL){
    11f8:	c0 31       	cpi	r28, 0x10	; 16
    11fa:	d1 05       	cpc	r29, r1
    11fc:	4c f0       	brlt	.+18     	; 0x1210 <test_too_many_tasks+0x3a>
    11fe:	89 2b       	or	r24, r25
    1200:	39 f0       	breq	.+14     	; 0x1210 <test_too_many_tasks+0x3a>
			uart_write("Too many tasks created!");
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	92 e0       	ldi	r25, 0x02	; 2
    1206:	50 d0       	rcall	.+160    	; 0x12a8 <uart_write>
			uart_write("test_too_many_tasks                        FAILED");
    1208:	88 e1       	ldi	r24, 0x18	; 24
    120a:	92 e0       	ldi	r25, 0x02	; 2
    120c:	4d d0       	rcall	.+154    	; 0x12a8 <uart_write>
			Task_Terminate();
    120e:	95 d8       	rcall	.-3798   	; 0x33a <Task_Terminate>

void test_too_many_tasks(void){
	uart_start();
	int x; 
	PID k;
	for(x = 0; x < MAXTHREAD*2 ; x++){
    1210:	21 96       	adiw	r28, 0x01	; 1
    1212:	c0 32       	cpi	r28, 0x20	; 32
    1214:	d1 05       	cpc	r29, r1
    1216:	61 f7       	brne	.-40     	; 0x11f0 <test_too_many_tasks+0x1a>
			uart_write("Too many tasks created!");
			uart_write("test_too_many_tasks                        FAILED");
			Task_Terminate();
		}
	}
	Task_Next();
    1218:	a9 da       	rcall	.-2734   	; 0x76c <Task_Next>
	for(x = 0; x < MAXTHREAD*2 ; x++){
		k = Task_Create_Period(Test_Task, 0, x+2, x+1, x);
    121a:	00 e0       	ldi	r16, 0x00	; 0
    121c:	10 e0       	ldi	r17, 0x00	; 0
    121e:	21 e0       	ldi	r18, 0x01	; 1
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	42 e0       	ldi	r20, 0x02	; 2
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	89 ee       	ldi	r24, 0xE9	; 233
    122c:	98 e0       	ldi	r25, 0x08	; 8
    122e:	4e da       	rcall	.-2916   	; 0x6cc <Task_Create_Period>
    1230:	c1 e0       	ldi	r28, 0x01	; 1
    1232:	d0 e0       	ldi	r29, 0x00	; 0
    1234:	0c 2f       	mov	r16, r28
    1236:	1d 2f       	mov	r17, r29
    1238:	21 96       	adiw	r28, 0x01	; 1
    123a:	ae 01       	movw	r20, r28
    123c:	4f 5f       	subi	r20, 0xFF	; 255
    123e:	5f 4f       	sbci	r21, 0xFF	; 255
    1240:	9e 01       	movw	r18, r28
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	89 ee       	ldi	r24, 0xE9	; 233
    1248:	98 e0       	ldi	r25, 0x08	; 8
    124a:	40 da       	rcall	.-2944   	; 0x6cc <Task_Create_Period>
    124c:	9e 01       	movw	r18, r28
    124e:	21 50       	subi	r18, 0x01	; 1
    1250:	31 09       	sbc	r19, r1
		if(x >= MAXTHREAD && k != NULL){
    1252:	20 31       	cpi	r18, 0x10	; 16
    1254:	31 05       	cpc	r19, r1
    1256:	4c f0       	brlt	.+18     	; 0x126a <test_too_many_tasks+0x94>
    1258:	89 2b       	or	r24, r25
    125a:	39 f0       	breq	.+14     	; 0x126a <test_too_many_tasks+0x94>
			uart_write("Too many tasks created!");
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	92 e0       	ldi	r25, 0x02	; 2
    1260:	23 d0       	rcall	.+70     	; 0x12a8 <uart_write>
			uart_write("test_too_many_tasks                        FAILED");
    1262:	88 e1       	ldi	r24, 0x18	; 24
    1264:	92 e0       	ldi	r25, 0x02	; 2
    1266:	20 d0       	rcall	.+64     	; 0x12a8 <uart_write>
			Task_Terminate();
    1268:	68 d8       	rcall	.-3888   	; 0x33a <Task_Terminate>
			uart_write("test_too_many_tasks                        FAILED");
			Task_Terminate();
		}
	}
	Task_Next();
	for(x = 0; x < MAXTHREAD*2 ; x++){
    126a:	c0 32       	cpi	r28, 0x20	; 32
    126c:	d1 05       	cpc	r29, r1
    126e:	11 f7       	brne	.-60     	; 0x1234 <test_too_many_tasks+0x5e>
			uart_write("Too many tasks created!");
			uart_write("test_too_many_tasks                        FAILED");
			Task_Terminate();
		}
	}
	uart_write("test_too_many_tasks                        PASSED");
    1270:	8a e4       	ldi	r24, 0x4A	; 74
    1272:	92 e0       	ldi	r25, 0x02	; 2
    1274:	19 d0       	rcall	.+50     	; 0x12a8 <uart_write>
	Task_Terminate();
    1276:	61 d8       	rcall	.-3902   	; 0x33a <Task_Terminate>
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	08 95       	ret

00001282 <uart_start>:
 */ 

#include "uart.h"

void uart_start(void) {
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //transmit side of hardware
    1282:	e1 ec       	ldi	r30, 0xC1	; 193
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	88 61       	ori	r24, 0x18	; 24
    128a:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); //receive side of hardware
    128c:	a2 ec       	ldi	r26, 0xC2	; 194
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	8c 91       	ld	r24, X
    1292:	86 60       	ori	r24, 0x06	; 6
    1294:	8c 93       	st	X, r24

	UBRR0L = BAUD_PRESCALE; //set the baud to 9600, have to split it into the two registers
    1296:	87 e6       	ldi	r24, 0x67	; 103
    1298:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = (BAUD_PRESCALE >> 8); //high end of baud register
    129c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>

	UCSR0B |= (1 << RXCIE0); //recieve data interrupt, makes sure we don't loose data
    12a0:	80 81       	ld	r24, Z
    12a2:	80 68       	ori	r24, 0x80	; 128
    12a4:	80 83       	st	Z, r24
    12a6:	08 95       	ret

000012a8 <uart_write>:

}

void uart_write(char *data) {
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
    while (*data) {
    12ac:	fc 01       	movw	r30, r24
    12ae:	20 81       	ld	r18, Z
    12b0:	22 23       	and	r18, r18
    12b2:	69 f0       	breq	.+26     	; 0x12ce <uart_write+0x26>
    12b4:	dc 01       	movw	r26, r24
    12b6:	11 96       	adiw	r26, 0x01	; 1
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    12b8:	e0 ec       	ldi	r30, 0xC0	; 192
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
    12bc:	c6 ec       	ldi	r28, 0xC6	; 198
    12be:	d0 e0       	ldi	r29, 0x00	; 0
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
    while (*data) {
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    12c0:	90 81       	ld	r25, Z
    12c2:	95 ff       	sbrs	r25, 5
    12c4:	fd cf       	rjmp	.-6      	; 0x12c0 <uart_write+0x18>
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
    12c6:	28 83       	st	Y, r18
void uart_write(char *data) {
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
    while (*data) {
    12c8:	2d 91       	ld	r18, X+
    12ca:	21 11       	cpse	r18, r1
    12cc:	f9 cf       	rjmp	.-14     	; 0x12c0 <uart_write+0x18>
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
        data += 1;//go to new bit in string
    }
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    12ce:	e0 ec       	ldi	r30, 0xC0	; 192
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	85 ff       	sbrs	r24, 5
    12d6:	fd cf       	rjmp	.-6      	; 0x12d2 <uart_write+0x2a>
    UDR0 = '\n';//send a new line just to be sure
    12d8:	8a e0       	ldi	r24, 0x0A	; 10
    12da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	08 95       	ret

000012e4 <__tablejump2__>:
    12e4:	ee 0f       	add	r30, r30
    12e6:	ff 1f       	adc	r31, r31
    12e8:	88 1f       	adc	r24, r24
    12ea:	8b bf       	out	0x3b, r24	; 59
    12ec:	07 90       	elpm	r0, Z+
    12ee:	f6 91       	elpm	r31, Z
    12f0:	e0 2d       	mov	r30, r0
    12f2:	19 94       	eijmp

000012f4 <_exit>:
    12f4:	f8 94       	cli

000012f6 <__stop_program>:
    12f6:	ff cf       	rjmp	.-2      	; 0x12f6 <__stop_program>
