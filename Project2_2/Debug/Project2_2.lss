
Project2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000d0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c9a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001254  00800200  00800200  00000d0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000d80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002138  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011cd  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c72  00000000  00000000  000041dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003bc  00000000  00000000  00004e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000930  00000000  00000000  0000520c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010ce  00000000  00000000  00005b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00006c0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	ea c4       	rjmp	.+2516   	; 0xa1a <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1e c5       	rjmp	.+2620   	; 0xabe <__vector_32>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	24 e1       	ldi	r18, 0x14	; 20
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 35       	cpi	r26, 0x54	; 84
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	f3 d4       	rcall	.+2534   	; 0xaec <main>
 106:	c7 c5       	rjmp	.+2958   	; 0xc96 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 10a:	0f 92       	push	r0
 10c:	1f 92       	push	r1
 10e:	2f 92       	push	r2
 110:	3f 92       	push	r3
 112:	4f 92       	push	r4
 114:	5f 92       	push	r5
 116:	6f 92       	push	r6
 118:	7f 92       	push	r7
 11a:	8f 92       	push	r8
 11c:	9f 92       	push	r9
 11e:	af 92       	push	r10
 120:	bf 92       	push	r11
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
 14a:	0f b7       	in	r16, 0x3f	; 63
 14c:	0f 93       	push	r16
 14e:	fc b7       	in	r31, 0x3c	; 60
 150:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
 152:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 154:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
 156:	e0 93 32 14 	sts	0x1432, r30	; 0x801432 <KernelSp>
        sts  KernelSp+1, r31
 15a:	f0 93 33 14 	sts	0x1433, r31	; 0x801433 <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
 15e:	e0 91 f0 13 	lds	r30, 0x13F0	; 0x8013f0 <CurrentSp>
        lds  r31, CurrentSp+1
 162:	f0 91 f1 13 	lds	r31, 0x13F1	; 0x8013f1 <CurrentSp+0x1>
        out  SPL, r30
 166:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 168:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
 16a:	ff 91       	pop	r31
 16c:	fc bf       	out	0x3c, r31	; 60
 16e:	0f 91       	pop	r16
 170:	0f bf       	out	0x3f, r16	; 63
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	df 90       	pop	r13
 198:	cf 90       	pop	r12
 19a:	bf 90       	pop	r11
 19c:	af 90       	pop	r10
 19e:	9f 90       	pop	r9
 1a0:	8f 90       	pop	r8
 1a2:	7f 90       	pop	r7
 1a4:	6f 90       	pop	r6
 1a6:	5f 90       	pop	r5
 1a8:	4f 90       	pop	r4
 1aa:	3f 90       	pop	r3
 1ac:	2f 90       	pop	r2
 1ae:	1f 90       	pop	r1
 1b0:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
 1b2:	18 95       	reti

000001b4 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
 1b4:	0f 92       	push	r0
 1b6:	1f 92       	push	r1
 1b8:	2f 92       	push	r2
 1ba:	3f 92       	push	r3
 1bc:	4f 92       	push	r4
 1be:	5f 92       	push	r5
 1c0:	6f 92       	push	r6
 1c2:	7f 92       	push	r7
 1c4:	8f 92       	push	r8
 1c6:	9f 92       	push	r9
 1c8:	af 92       	push	r10
 1ca:	bf 92       	push	r11
 1cc:	cf 92       	push	r12
 1ce:	df 92       	push	r13
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
 1f4:	0f b7       	in	r16, 0x3f	; 63
 1f6:	0f 93       	push	r16
 1f8:	fc b7       	in	r31, 0x3c	; 60
 1fa:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
 1fc:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 1fe:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
 200:	e0 93 f0 13 	sts	0x13F0, r30	; 0x8013f0 <CurrentSp>
        sts  CurrentSp+1, r31
 204:	f0 93 f1 13 	sts	0x13F1, r31	; 0x8013f1 <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
 208:	e0 91 32 14 	lds	r30, 0x1432	; 0x801432 <KernelSp>
        lds  r31, KernelSp+1
 20c:	f0 91 33 14 	lds	r31, 0x1433	; 0x801433 <KernelSp+0x1>
        out  SPL, r30
 210:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 212:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
 214:	ff 91       	pop	r31
 216:	fc bf       	out	0x3c, r31	; 60
 218:	0f 91       	pop	r16
 21a:	0f bf       	out	0x3f, r16	; 63
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	df 90       	pop	r13
 242:	cf 90       	pop	r12
 244:	bf 90       	pop	r11
 246:	af 90       	pop	r10
 248:	9f 90       	pop	r9
 24a:	8f 90       	pop	r8
 24c:	7f 90       	pop	r7
 24e:	6f 90       	pop	r6
 250:	5f 90       	pop	r5
 252:	4f 90       	pop	r4
 254:	3f 90       	pop	r3
 256:	2f 90       	pop	r2
 258:	1f 90       	pop	r1
 25a:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
 25c:	08 95       	ret

0000025e <Task_WriteBluetooth>:
	Task_Terminate();
}


void Idle() {
    for(;;) {}
 25e:	0b 9a       	sbi	0x01, 3	; 1
 260:	13 98       	cbi	0x02, 3	; 2
 262:	fd cf       	rjmp	.-6      	; 0x25e <Task_WriteBluetooth>

00000264 <Task_ReadJoystick>:
 264:	0b 9a       	sbi	0x01, 3	; 1
 266:	13 9a       	sbi	0x02, 3	; 2
 268:	fd cf       	rjmp	.-6      	; 0x264 <Task_ReadJoystick>

0000026a <a_main>:
}

void a_main()
{
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
	
    // Initialize tasks
	//Task_Create(ASDF, SYSTEM, 0);
    Task_Create(Task_ReadJoystick, PERIODIC, 0, 0, 1, 3);
 272:	0f 2e       	mov	r0, r31
 274:	f3 e0       	ldi	r31, 0x03	; 3
 276:	ef 2e       	mov	r14, r31
 278:	f1 2c       	mov	r15, r1
 27a:	f0 2d       	mov	r31, r0
 27c:	01 e0       	ldi	r16, 0x01	; 1
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	62 e0       	ldi	r22, 0x02	; 2
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	82 e3       	ldi	r24, 0x32	; 50
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	78 d2       	rcall	.+1264   	; 0x782 <Task_Create>
    Task_Create(Task_WriteBluetooth, PERIODIC, 0, 1, 1, 3);
 292:	21 e0       	ldi	r18, 0x01	; 1
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	50 e0       	ldi	r21, 0x00	; 0
 29a:	62 e0       	ldi	r22, 0x02	; 2
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	8f e2       	ldi	r24, 0x2F	; 47
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	6f d2       	rcall	.+1246   	; 0x782 <Task_Create>

    //Task_Create(Idle, 10, 0);

    // Kill the initialization task
    Task_Terminate();
 2a4:	5a d0       	rcall	.+180    	; 0x35a <Task_Terminate>
}
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	08 95       	ret

000002b0 <idle>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <idle>

000002b2 <Dispatch>:
 2b2:	64 e0       	ldi	r22, 0x04	; 4
 2b4:	72 e0       	ldi	r23, 0x02	; 2
 2b6:	80 ed       	ldi	r24, 0xD0	; 208
 2b8:	93 e1       	ldi	r25, 0x13	; 19
 2ba:	58 d4       	rcall	.+2224   	; 0xb6c <dequeue>
 2bc:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Cp+0x1>
 2c0:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Cp>
 2c4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <PeriodicCount>
 2c8:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <PeriodicCount+0x1>
 2cc:	89 2b       	or	r24, r25
 2ce:	d9 f0       	breq	.+54     	; 0x306 <Dispatch+0x54>
 2d0:	62 e0       	ldi	r22, 0x02	; 2
 2d2:	72 e0       	ldi	r23, 0x02	; 2
 2d4:	82 e1       	ldi	r24, 0x12	; 18
 2d6:	94 e1       	ldi	r25, 0x14	; 20
 2d8:	ca d4       	rcall	.+2452   	; 0xc6e <peek>
 2da:	fc 01       	movw	r30, r24
 2dc:	e8 5e       	subi	r30, 0xE8	; 232
 2de:	fe 4f       	sbci	r31, 0xFE	; 254
 2e0:	80 81       	ld	r24, Z
 2e2:	91 81       	ldd	r25, Z+1	; 0x01
 2e4:	89 2b       	or	r24, r25
 2e6:	79 f4       	brne	.+30     	; 0x306 <Dispatch+0x54>
 2e8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Cp>
 2ec:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Cp+0x1>
 2f0:	89 2b       	or	r24, r25
 2f2:	49 f4       	brne	.+18     	; 0x306 <Dispatch+0x54>
 2f4:	62 e0       	ldi	r22, 0x02	; 2
 2f6:	72 e0       	ldi	r23, 0x02	; 2
 2f8:	82 e1       	ldi	r24, 0x12	; 18
 2fa:	94 e1       	ldi	r25, 0x14	; 20
 2fc:	37 d4       	rcall	.+2158   	; 0xb6c <dequeue>
 2fe:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Cp+0x1>
 302:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Cp>
 306:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Cp>
 30a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Cp+0x1>
 30e:	89 2b       	or	r24, r25
 310:	49 f4       	brne	.+18     	; 0x324 <Dispatch+0x72>
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	72 e0       	ldi	r23, 0x02	; 2
 316:	84 e3       	ldi	r24, 0x34	; 52
 318:	94 e1       	ldi	r25, 0x14	; 20
 31a:	28 d4       	rcall	.+2128   	; 0xb6c <dequeue>
 31c:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Cp+0x1>
 320:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Cp>
 324:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Cp>
 328:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Cp+0x1>
 32c:	89 2b       	or	r24, r25
 32e:	31 f4       	brne	.+12     	; 0x33c <Dispatch+0x8a>
 330:	80 e1       	ldi	r24, 0x10	; 16
 332:	92 e0       	ldi	r25, 0x02	; 2
 334:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Cp+0x1>
 338:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Cp>
 33c:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 340:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 344:	82 81       	ldd	r24, Z+2	; 0x02
 346:	93 81       	ldd	r25, Z+3	; 0x03
 348:	90 93 f1 13 	sts	0x13F1, r25	; 0x8013f1 <CurrentSp+0x1>
 34c:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <CurrentSp>
 350:	ec 5f       	subi	r30, 0xFC	; 252
 352:	fe 4f       	sbci	r31, 0xFE	; 254
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	80 83       	st	Z, r24
 358:	08 95       	ret

0000035a <Task_Terminate>:
 35a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <KernelActive>
 35e:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <KernelActive+0x1>
 362:	89 2b       	or	r24, r25
 364:	51 f0       	breq	.+20     	; 0x37a <Task_Terminate+0x20>
 366:	f8 94       	cli
 368:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 36c:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 370:	e5 5f       	subi	r30, 0xF5	; 245
 372:	fe 4f       	sbci	r31, 0xFE	; 254
 374:	86 e0       	ldi	r24, 0x06	; 6
 376:	80 83       	st	Z, r24
 378:	1d cf       	rjmp	.-454    	; 0x1b4 <Enter_Kernel>
 37a:	08 95       	ret

0000037c <Kernel_Create_Task_At>:
 37c:	8f 92       	push	r8
 37e:	9f 92       	push	r9
 380:	af 92       	push	r10
 382:	bf 92       	push	r11
 384:	cf 92       	push	r12
 386:	df 92       	push	r13
 388:	ef 92       	push	r14
 38a:	ff 92       	push	r15
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	1f 92       	push	r1
 396:	1f 92       	push	r1
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
 39c:	9a 83       	std	Y+2, r25	; 0x02
 39e:	89 83       	std	Y+1, r24	; 0x01
 3a0:	5c 01       	movw	r10, r24
 3a2:	a4 e0       	ldi	r26, 0x04	; 4
 3a4:	aa 0e       	add	r10, r26
 3a6:	b1 1c       	adc	r11, r1
 3a8:	81 2c       	mov	r8, r1
 3aa:	99 24       	eor	r9, r9
 3ac:	93 94       	inc	r9
 3ae:	f5 01       	movw	r30, r10
 3b0:	d4 01       	movw	r26, r8
 3b2:	11 92       	st	Z+, r1
 3b4:	11 97       	sbiw	r26, 0x01	; 1
 3b6:	e9 f7       	brne	.-6      	; 0x3b2 <Kernel_Create_Task_At+0x36>
 3b8:	dc 01       	movw	r26, r24
 3ba:	ad 5f       	subi	r26, 0xFD	; 253
 3bc:	be 4f       	sbci	r27, 0xFE	; 254
 3be:	ed ea       	ldi	r30, 0xAD	; 173
 3c0:	f1 e0       	ldi	r31, 0x01	; 1
 3c2:	ec 93       	st	X, r30
 3c4:	11 97       	sbiw	r26, 0x01	; 1
 3c6:	fc 93       	st	X, r31
 3c8:	fc 01       	movw	r30, r24
 3ca:	ef 5f       	subi	r30, 0xFF	; 255
 3cc:	fe 4f       	sbci	r31, 0xFE	; 254
 3ce:	60 83       	st	Z, r22
 3d0:	31 97       	sbiw	r30, 0x01	; 1
 3d2:	70 83       	st	Z, r23
 3d4:	31 97       	sbiw	r30, 0x01	; 1
 3d6:	10 82       	st	Z, r1
 3d8:	b3 97       	sbiw	r30, 0x23	; 35
 3da:	dc 01       	movw	r26, r24
 3dc:	13 96       	adiw	r26, 0x03	; 3
 3de:	fc 93       	st	X, r31
 3e0:	ee 93       	st	-X, r30
 3e2:	12 97       	sbiw	r26, 0x02	; 2
 3e4:	bd 96       	adiw	r30, 0x2d	; 45
 3e6:	71 83       	std	Z+1, r23	; 0x01
 3e8:	60 83       	st	Z, r22
 3ea:	32 96       	adiw	r30, 0x02	; 2
 3ec:	10 82       	st	Z, r1
 3ee:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <pCount>
 3f2:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <pCount+0x1>
 3f6:	fc 01       	movw	r30, r24
 3f8:	71 83       	std	Z+1, r23	; 0x01
 3fa:	60 83       	st	Z, r22
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	9a 81       	ldd	r25, Y+2	; 0x02
 400:	fc 01       	movw	r30, r24
 402:	eb 5f       	subi	r30, 0xFB	; 251
 404:	fe 4f       	sbci	r31, 0xFE	; 254
 406:	51 83       	std	Z+1, r21	; 0x01
 408:	40 83       	st	Z, r20
 40a:	32 96       	adiw	r30, 0x02	; 2
 40c:	31 83       	std	Z+1, r19	; 0x01
 40e:	20 83       	st	Z, r18
 410:	71 96       	adiw	r30, 0x11	; 17
 412:	2f ef       	ldi	r18, 0xFF	; 255
 414:	3f ef       	ldi	r19, 0xFF	; 255
 416:	31 83       	std	Z+1, r19	; 0x01
 418:	20 83       	st	Z, r18
 41a:	32 96       	adiw	r30, 0x02	; 2
 41c:	11 82       	std	Z+1, r1	; 0x01
 41e:	10 82       	st	Z, r1
 420:	34 97       	sbiw	r30, 0x04	; 4
 422:	11 83       	std	Z+1, r17	; 0x01
 424:	00 83       	st	Z, r16
 426:	34 97       	sbiw	r30, 0x04	; 4
 428:	d1 82       	std	Z+1, r13	; 0x01
 42a:	c0 82       	st	Z, r12
 42c:	32 96       	adiw	r30, 0x02	; 2
 42e:	f1 82       	std	Z+1, r15	; 0x01
 430:	e0 82       	st	Z, r14
 432:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Tasks>
 436:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Tasks+0x1>
 43a:	2f 5f       	subi	r18, 0xFF	; 255
 43c:	3f 4f       	sbci	r19, 0xFF	; 255
 43e:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <Tasks+0x1>
 442:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <Tasks>
 446:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <pCount>
 44a:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <pCount+0x1>
 44e:	2f 5f       	subi	r18, 0xFF	; 255
 450:	3f 4f       	sbci	r19, 0xFF	; 255
 452:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <pCount+0x1>
 456:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <pCount>
 45a:	70 97       	sbiw	r30, 0x10	; 16
 45c:	21 e0       	ldi	r18, 0x01	; 1
 45e:	20 83       	st	Z, r18
 460:	43 30       	cpi	r20, 0x03	; 3
 462:	51 05       	cpc	r21, r1
 464:	41 f4       	brne	.+16     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 466:	44 e0       	ldi	r20, 0x04	; 4
 468:	52 e0       	ldi	r21, 0x02	; 2
 46a:	60 ed       	ldi	r22, 0xD0	; 208
 46c:	73 e1       	ldi	r23, 0x13	; 19
 46e:	ce 01       	movw	r24, r28
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	4c d3       	rcall	.+1688   	; 0xb0c <enqueue>
 474:	1a c0       	rjmp	.+52     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 476:	42 30       	cpi	r20, 0x02	; 2
 478:	51 05       	cpc	r21, r1
 47a:	69 f4       	brne	.+26     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 47c:	fc 01       	movw	r30, r24
 47e:	e8 5e       	subi	r30, 0xE8	; 232
 480:	fe 4f       	sbci	r31, 0xFE	; 254
 482:	11 83       	std	Z+1, r17	; 0x01
 484:	00 83       	st	Z, r16
 486:	42 e0       	ldi	r20, 0x02	; 2
 488:	52 e0       	ldi	r21, 0x02	; 2
 48a:	62 e1       	ldi	r22, 0x12	; 18
 48c:	74 e1       	ldi	r23, 0x14	; 20
 48e:	ce 01       	movw	r24, r28
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	8a d3       	rcall	.+1812   	; 0xba8 <enqueuePeriodic>
 494:	0a c0       	rjmp	.+20     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 496:	41 30       	cpi	r20, 0x01	; 1
 498:	51 05       	cpc	r21, r1
 49a:	39 f4       	brne	.+14     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 49c:	40 e0       	ldi	r20, 0x00	; 0
 49e:	52 e0       	ldi	r21, 0x02	; 2
 4a0:	64 e3       	ldi	r22, 0x34	; 52
 4a2:	74 e1       	ldi	r23, 0x14	; 20
 4a4:	ce 01       	movw	r24, r28
 4a6:	01 96       	adiw	r24, 0x01	; 1
 4a8:	31 d3       	rcall	.+1634   	; 0xb0c <enqueue>
 4aa:	e9 81       	ldd	r30, Y+1	; 0x01
 4ac:	fa 81       	ldd	r31, Y+2	; 0x02
 4ae:	80 81       	ld	r24, Z
 4b0:	91 81       	ldd	r25, Z+1	; 0x01
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	1f 91       	pop	r17
 4bc:	0f 91       	pop	r16
 4be:	ff 90       	pop	r15
 4c0:	ef 90       	pop	r14
 4c2:	df 90       	pop	r13
 4c4:	cf 90       	pop	r12
 4c6:	bf 90       	pop	r11
 4c8:	af 90       	pop	r10
 4ca:	9f 90       	pop	r9
 4cc:	8f 90       	pop	r8
 4ce:	08 95       	ret

000004d0 <Kernel_Create_Task>:
 4d0:	cf 92       	push	r12
 4d2:	df 92       	push	r13
 4d4:	ef 92       	push	r14
 4d6:	ff 92       	push	r15
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	e9 01       	movw	r28, r18
 4e2:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Tasks>
 4e6:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Tasks+0x1>
 4ea:	20 31       	cpi	r18, 0x10	; 16
 4ec:	31 05       	cpc	r19, r1
 4ee:	41 f1       	breq	.+80     	; 0x540 <Kernel_Create_Task+0x70>
 4f0:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <Process+0x104>
 4f4:	22 23       	and	r18, r18
 4f6:	71 f0       	breq	.+28     	; 0x514 <Kernel_Create_Task+0x44>
 4f8:	a0 e3       	ldi	r26, 0x30	; 48
 4fa:	b4 e0       	ldi	r27, 0x04	; 4
 4fc:	e1 e0       	ldi	r30, 0x01	; 1
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	3c 91       	ld	r19, X
 502:	33 23       	and	r19, r19
 504:	49 f0       	breq	.+18     	; 0x518 <Kernel_Create_Task+0x48>
 506:	31 96       	adiw	r30, 0x01	; 1
 508:	a4 5e       	subi	r26, 0xE4	; 228
 50a:	be 4f       	sbci	r27, 0xFE	; 254
 50c:	e0 31       	cpi	r30, 0x10	; 16
 50e:	f1 05       	cpc	r31, r1
 510:	b9 f7       	brne	.-18     	; 0x500 <Kernel_Create_Task+0x30>
 512:	02 c0       	rjmp	.+4      	; 0x518 <Kernel_Create_Task+0x48>
 514:	e0 e0       	ldi	r30, 0x00	; 0
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	67 01       	movw	r12, r14
 51a:	78 01       	movw	r14, r16
 51c:	8e 01       	movw	r16, r28
 51e:	9a 01       	movw	r18, r20
 520:	ab 01       	movw	r20, r22
 522:	bc 01       	movw	r22, r24
 524:	8c e1       	ldi	r24, 0x1C	; 28
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	e8 9f       	mul	r30, r24
 52a:	d0 01       	movw	r26, r0
 52c:	e9 9f       	mul	r30, r25
 52e:	b0 0d       	add	r27, r0
 530:	f8 9f       	mul	r31, r24
 532:	b0 0d       	add	r27, r0
 534:	11 24       	eor	r1, r1
 536:	cd 01       	movw	r24, r26
 538:	80 5f       	subi	r24, 0xF0	; 240
 53a:	9d 4f       	sbci	r25, 0xFD	; 253
 53c:	1f df       	rcall	.-450    	; 0x37c <Kernel_Create_Task_At>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <Kernel_Create_Task+0x70>
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	1f 91       	pop	r17
 546:	0f 91       	pop	r16
 548:	ff 90       	pop	r15
 54a:	ef 90       	pop	r14
 54c:	df 90       	pop	r13
 54e:	cf 90       	pop	r12
 550:	08 95       	ret

00000552 <OS_Init>:
 552:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <Tasks+0x1>
 556:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <Tasks>
 55a:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <KernelActive+0x1>
 55e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <KernelActive>
 562:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <pCount+0x1>
 566:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <pCount>
 56a:	e0 e1       	ldi	r30, 0x10	; 16
 56c:	f2 e0       	ldi	r31, 0x02	; 2
 56e:	20 ed       	ldi	r18, 0xD0	; 208
 570:	33 e1       	ldi	r19, 0x13	; 19
 572:	8c e1       	ldi	r24, 0x1C	; 28
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	df 01       	movw	r26, r30
 578:	ac 01       	movw	r20, r24
 57a:	1d 92       	st	X+, r1
 57c:	41 50       	subi	r20, 0x01	; 1
 57e:	50 40       	sbci	r21, 0x00	; 0
 580:	e1 f7       	brne	.-8      	; 0x57a <OS_Init+0x28>
 582:	df 01       	movw	r26, r30
 584:	ac 5f       	subi	r26, 0xFC	; 252
 586:	be 4f       	sbci	r27, 0xFE	; 254
 588:	1c 92       	st	X, r1
 58a:	11 82       	std	Z+1, r1	; 0x01
 58c:	10 82       	st	Z, r1
 58e:	e4 5e       	subi	r30, 0xE4	; 228
 590:	fe 4f       	sbci	r31, 0xFE	; 254
 592:	e2 17       	cp	r30, r18
 594:	f3 07       	cpc	r31, r19
 596:	79 f7       	brne	.-34     	; 0x576 <OS_Init+0x24>
 598:	08 95       	ret

0000059a <OS_Start>:
 59a:	df 92       	push	r13
 59c:	ef 92       	push	r14
 59e:	ff 92       	push	r15
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <KernelActive>
 5ac:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <KernelActive+0x1>
 5b0:	89 2b       	or	r24, r25
 5b2:	09 f0       	breq	.+2      	; 0x5b6 <OS_Start+0x1c>
 5b4:	de c0       	rjmp	.+444    	; 0x772 <OS_Start+0x1d8>
 5b6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Tasks>
 5ba:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Tasks+0x1>
 5be:	89 2b       	or	r24, r25
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <OS_Start+0x2a>
 5c2:	d7 c0       	rjmp	.+430    	; 0x772 <OS_Start+0x1d8>
 5c4:	f8 94       	cli
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <KernelActive+0x1>
 5ce:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <KernelActive>
 5d2:	6f de       	rcall	.-802    	; 0x2b2 <Dispatch>
 5d4:	dd 24       	eor	r13, r13
 5d6:	d3 94       	inc	r13
 5d8:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 5dc:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 5e0:	df 01       	movw	r26, r30
 5e2:	a5 5f       	subi	r26, 0xF5	; 245
 5e4:	be 4f       	sbci	r27, 0xFE	; 254
 5e6:	1c 92       	st	X, r1
 5e8:	82 81       	ldd	r24, Z+2	; 0x02
 5ea:	93 81       	ldd	r25, Z+3	; 0x03
 5ec:	90 93 f1 13 	sts	0x13F1, r25	; 0x8013f1 <CurrentSp+0x1>
 5f0:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <CurrentSp>
 5f4:	8a dd       	rcall	.-1260   	; 0x10a <CSwitch>
 5f6:	c0 91 0e 02 	lds	r28, 0x020E	; 0x80020e <Cp>
 5fa:	d0 91 0f 02 	lds	r29, 0x020F	; 0x80020f <Cp+0x1>
 5fe:	80 91 f0 13 	lds	r24, 0x13F0	; 0x8013f0 <CurrentSp>
 602:	90 91 f1 13 	lds	r25, 0x13F1	; 0x8013f1 <CurrentSp+0x1>
 606:	9b 83       	std	Y+3, r25	; 0x03
 608:	8a 83       	std	Y+2, r24	; 0x02
 60a:	fe 01       	movw	r30, r28
 60c:	e5 5f       	subi	r30, 0xF5	; 245
 60e:	fe 4f       	sbci	r31, 0xFE	; 254
 610:	80 81       	ld	r24, Z
 612:	83 30       	cpi	r24, 0x03	; 3
 614:	09 f4       	brne	.+2      	; 0x618 <OS_Start+0x7e>
 616:	56 c0       	rjmp	.+172    	; 0x6c4 <OS_Start+0x12a>
 618:	28 f4       	brcc	.+10     	; 0x624 <OS_Start+0x8a>
 61a:	81 30       	cpi	r24, 0x01	; 1
 61c:	59 f0       	breq	.+22     	; 0x634 <OS_Start+0x9a>
 61e:	82 30       	cpi	r24, 0x02	; 2
 620:	09 f1       	breq	.+66     	; 0x664 <OS_Start+0xca>
 622:	da cf       	rjmp	.-76     	; 0x5d8 <OS_Start+0x3e>
 624:	85 30       	cpi	r24, 0x05	; 5
 626:	09 f4       	brne	.+2      	; 0x62a <OS_Start+0x90>
 628:	64 c0       	rjmp	.+200    	; 0x6f2 <OS_Start+0x158>
 62a:	98 f1       	brcs	.+102    	; 0x692 <OS_Start+0xf8>
 62c:	86 30       	cpi	r24, 0x06	; 6
 62e:	09 f4       	brne	.+2      	; 0x632 <OS_Start+0x98>
 630:	8f c0       	rjmp	.+286    	; 0x750 <OS_Start+0x1b6>
 632:	d2 cf       	rjmp	.-92     	; 0x5d8 <OS_Start+0x3e>
 634:	fe 01       	movw	r30, r28
 636:	e9 5f       	subi	r30, 0xF9	; 249
 638:	fe 4f       	sbci	r31, 0xFE	; 254
 63a:	40 81       	ld	r20, Z
 63c:	51 81       	ldd	r21, Z+1	; 0x01
 63e:	32 97       	sbiw	r30, 0x02	; 2
 640:	60 81       	ld	r22, Z
 642:	71 81       	ldd	r23, Z+1	; 0x01
 644:	34 96       	adiw	r30, 0x04	; 4
 646:	80 81       	ld	r24, Z
 648:	91 81       	ldd	r25, Z+1	; 0x01
 64a:	ee 24       	eor	r14, r14
 64c:	ea 94       	dec	r14
 64e:	fe 2c       	mov	r15, r14
 650:	0f ef       	ldi	r16, 0xFF	; 255
 652:	1f ef       	ldi	r17, 0xFF	; 255
 654:	2f ef       	ldi	r18, 0xFF	; 255
 656:	3f ef       	ldi	r19, 0xFF	; 255
 658:	3b df       	rcall	.-394    	; 0x4d0 <Kernel_Create_Task>
 65a:	c4 5f       	subi	r28, 0xF4	; 244
 65c:	de 4f       	sbci	r29, 0xFE	; 254
 65e:	99 83       	std	Y+1, r25	; 0x01
 660:	88 83       	st	Y, r24
 662:	ba cf       	rjmp	.-140    	; 0x5d8 <OS_Start+0x3e>
 664:	fe 01       	movw	r30, r28
 666:	e9 5f       	subi	r30, 0xF9	; 249
 668:	fe 4f       	sbci	r31, 0xFE	; 254
 66a:	40 81       	ld	r20, Z
 66c:	51 81       	ldd	r21, Z+1	; 0x01
 66e:	32 96       	adiw	r30, 0x02	; 2
 670:	80 81       	ld	r24, Z
 672:	91 81       	ldd	r25, Z+1	; 0x01
 674:	ee 24       	eor	r14, r14
 676:	ea 94       	dec	r14
 678:	fe 2c       	mov	r15, r14
 67a:	0f ef       	ldi	r16, 0xFF	; 255
 67c:	1f ef       	ldi	r17, 0xFF	; 255
 67e:	2f ef       	ldi	r18, 0xFF	; 255
 680:	3f ef       	ldi	r19, 0xFF	; 255
 682:	63 e0       	ldi	r22, 0x03	; 3
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	24 df       	rcall	.-440    	; 0x4d0 <Kernel_Create_Task>
 688:	c4 5f       	subi	r28, 0xF4	; 244
 68a:	de 4f       	sbci	r29, 0xFE	; 254
 68c:	99 83       	std	Y+1, r25	; 0x01
 68e:	88 83       	st	Y, r24
 690:	a3 cf       	rjmp	.-186    	; 0x5d8 <OS_Start+0x3e>
 692:	fe 01       	movw	r30, r28
 694:	ee 5e       	subi	r30, 0xEE	; 238
 696:	fe 4f       	sbci	r31, 0xFE	; 254
 698:	e0 80       	ld	r14, Z
 69a:	f1 80       	ldd	r15, Z+1	; 0x01
 69c:	32 96       	adiw	r30, 0x02	; 2
 69e:	00 81       	ld	r16, Z
 6a0:	11 81       	ldd	r17, Z+1	; 0x01
 6a2:	32 96       	adiw	r30, 0x02	; 2
 6a4:	20 81       	ld	r18, Z
 6a6:	31 81       	ldd	r19, Z+1	; 0x01
 6a8:	3f 97       	sbiw	r30, 0x0f	; 15
 6aa:	40 81       	ld	r20, Z
 6ac:	51 81       	ldd	r21, Z+1	; 0x01
 6ae:	32 96       	adiw	r30, 0x02	; 2
 6b0:	80 81       	ld	r24, Z
 6b2:	91 81       	ldd	r25, Z+1	; 0x01
 6b4:	62 e0       	ldi	r22, 0x02	; 2
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	0b df       	rcall	.-490    	; 0x4d0 <Kernel_Create_Task>
 6ba:	c4 5f       	subi	r28, 0xF4	; 244
 6bc:	de 4f       	sbci	r29, 0xFE	; 254
 6be:	99 83       	std	Y+1, r25	; 0x01
 6c0:	88 83       	st	Y, r24
 6c2:	8a cf       	rjmp	.-236    	; 0x5d8 <OS_Start+0x3e>
 6c4:	fe 01       	movw	r30, r28
 6c6:	e9 5f       	subi	r30, 0xF9	; 249
 6c8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ca:	40 81       	ld	r20, Z
 6cc:	51 81       	ldd	r21, Z+1	; 0x01
 6ce:	32 96       	adiw	r30, 0x02	; 2
 6d0:	80 81       	ld	r24, Z
 6d2:	91 81       	ldd	r25, Z+1	; 0x01
 6d4:	ee 24       	eor	r14, r14
 6d6:	ea 94       	dec	r14
 6d8:	fe 2c       	mov	r15, r14
 6da:	0f ef       	ldi	r16, 0xFF	; 255
 6dc:	1f ef       	ldi	r17, 0xFF	; 255
 6de:	2f ef       	ldi	r18, 0xFF	; 255
 6e0:	3f ef       	ldi	r19, 0xFF	; 255
 6e2:	61 e0       	ldi	r22, 0x01	; 1
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	f4 de       	rcall	.-536    	; 0x4d0 <Kernel_Create_Task>
 6e8:	c4 5f       	subi	r28, 0xF4	; 244
 6ea:	de 4f       	sbci	r29, 0xFE	; 254
 6ec:	99 83       	std	Y+1, r25	; 0x01
 6ee:	88 83       	st	Y, r24
 6f0:	73 cf       	rjmp	.-282    	; 0x5d8 <OS_Start+0x3e>
 6f2:	fe 01       	movw	r30, r28
 6f4:	ec 5f       	subi	r30, 0xFC	; 252
 6f6:	fe 4f       	sbci	r31, 0xFE	; 254
 6f8:	d0 82       	st	Z, r13
 6fa:	31 96       	adiw	r30, 0x01	; 1
 6fc:	80 81       	ld	r24, Z
 6fe:	91 81       	ldd	r25, Z+1	; 0x01
 700:	03 97       	sbiw	r24, 0x03	; 3
 702:	41 f4       	brne	.+16     	; 0x714 <OS_Start+0x17a>
 704:	44 e0       	ldi	r20, 0x04	; 4
 706:	52 e0       	ldi	r21, 0x02	; 2
 708:	60 ed       	ldi	r22, 0xD0	; 208
 70a:	73 e1       	ldi	r23, 0x13	; 19
 70c:	8e e0       	ldi	r24, 0x0E	; 14
 70e:	92 e0       	ldi	r25, 0x02	; 2
 710:	fd d1       	rcall	.+1018   	; 0xb0c <enqueue>
 712:	1c c0       	rjmp	.+56     	; 0x74c <OS_Start+0x1b2>
 714:	fe 01       	movw	r30, r28
 716:	eb 5f       	subi	r30, 0xFB	; 251
 718:	fe 4f       	sbci	r31, 0xFE	; 254
 71a:	80 81       	ld	r24, Z
 71c:	91 81       	ldd	r25, Z+1	; 0x01
 71e:	02 97       	sbiw	r24, 0x02	; 2
 720:	41 f4       	brne	.+16     	; 0x732 <OS_Start+0x198>
 722:	42 e0       	ldi	r20, 0x02	; 2
 724:	52 e0       	ldi	r21, 0x02	; 2
 726:	62 e1       	ldi	r22, 0x12	; 18
 728:	74 e1       	ldi	r23, 0x14	; 20
 72a:	8e e0       	ldi	r24, 0x0E	; 14
 72c:	92 e0       	ldi	r25, 0x02	; 2
 72e:	3c d2       	rcall	.+1144   	; 0xba8 <enqueuePeriodic>
 730:	0d c0       	rjmp	.+26     	; 0x74c <OS_Start+0x1b2>
 732:	cb 5f       	subi	r28, 0xFB	; 251
 734:	de 4f       	sbci	r29, 0xFE	; 254
 736:	88 81       	ld	r24, Y
 738:	99 81       	ldd	r25, Y+1	; 0x01
 73a:	01 97       	sbiw	r24, 0x01	; 1
 73c:	39 f4       	brne	.+14     	; 0x74c <OS_Start+0x1b2>
 73e:	40 e0       	ldi	r20, 0x00	; 0
 740:	52 e0       	ldi	r21, 0x02	; 2
 742:	64 e3       	ldi	r22, 0x34	; 52
 744:	74 e1       	ldi	r23, 0x14	; 20
 746:	8e e0       	ldi	r24, 0x0E	; 14
 748:	92 e0       	ldi	r25, 0x02	; 2
 74a:	e0 d1       	rcall	.+960    	; 0xb0c <enqueue>
 74c:	b2 dd       	rcall	.-1180   	; 0x2b2 <Dispatch>
 74e:	44 cf       	rjmp	.-376    	; 0x5d8 <OS_Start+0x3e>
 750:	fe 01       	movw	r30, r28
 752:	ec 5f       	subi	r30, 0xFC	; 252
 754:	fe 4f       	sbci	r31, 0xFE	; 254
 756:	10 82       	st	Z, r1
 758:	19 82       	std	Y+1, r1	; 0x01
 75a:	18 82       	st	Y, r1
 75c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Tasks>
 760:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Tasks+0x1>
 764:	01 97       	sbiw	r24, 0x01	; 1
 766:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <Tasks+0x1>
 76a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Tasks>
 76e:	a1 dd       	rcall	.-1214   	; 0x2b2 <Dispatch>
 770:	33 cf       	rjmp	.-410    	; 0x5d8 <OS_Start+0x3e>
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	1f 91       	pop	r17
 778:	0f 91       	pop	r16
 77a:	ff 90       	pop	r15
 77c:	ef 90       	pop	r14
 77e:	df 90       	pop	r13
 780:	08 95       	ret

00000782 <Task_Create>:
 782:	ef 92       	push	r14
 784:	ff 92       	push	r15
 786:	0f 93       	push	r16
 788:	1f 93       	push	r17
 78a:	cf 93       	push	r28
 78c:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <KernelActive>
 790:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <KernelActive+0x1>
 794:	ef 2b       	or	r30, r31
 796:	09 f4       	brne	.+2      	; 0x79a <Task_Create+0x18>
 798:	5d c0       	rjmp	.+186    	; 0x854 <Task_Create+0xd2>
 79a:	f8 94       	cli
 79c:	63 30       	cpi	r22, 0x03	; 3
 79e:	71 05       	cpc	r23, r1
 7a0:	49 f4       	brne	.+18     	; 0x7b4 <Task_Create+0x32>
 7a2:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 7a6:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 7aa:	e5 5f       	subi	r30, 0xF5	; 245
 7ac:	fe 4f       	sbci	r31, 0xFE	; 254
 7ae:	a2 e0       	ldi	r26, 0x02	; 2
 7b0:	a0 83       	st	Z, r26
 7b2:	28 c0       	rjmp	.+80     	; 0x804 <Task_Create+0x82>
 7b4:	62 30       	cpi	r22, 0x02	; 2
 7b6:	71 05       	cpc	r23, r1
 7b8:	89 f4       	brne	.+34     	; 0x7dc <Task_Create+0x5a>
 7ba:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 7be:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 7c2:	df 01       	movw	r26, r30
 7c4:	a5 5f       	subi	r26, 0xF5	; 245
 7c6:	be 4f       	sbci	r27, 0xFE	; 254
 7c8:	c4 e0       	ldi	r28, 0x04	; 4
 7ca:	cc 93       	st	X, r28
 7cc:	e8 5e       	subi	r30, 0xE8	; 232
 7ce:	fe 4f       	sbci	r31, 0xFE	; 254
 7d0:	d9 01       	movw	r26, r18
 7d2:	ae 0d       	add	r26, r14
 7d4:	bf 1d       	adc	r27, r15
 7d6:	b1 83       	std	Z+1, r27	; 0x01
 7d8:	a0 83       	st	Z, r26
 7da:	14 c0       	rjmp	.+40     	; 0x804 <Task_Create+0x82>
 7dc:	61 30       	cpi	r22, 0x01	; 1
 7de:	71 05       	cpc	r23, r1
 7e0:	49 f4       	brne	.+18     	; 0x7f4 <Task_Create+0x72>
 7e2:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 7e6:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 7ea:	e5 5f       	subi	r30, 0xF5	; 245
 7ec:	fe 4f       	sbci	r31, 0xFE	; 254
 7ee:	a3 e0       	ldi	r26, 0x03	; 3
 7f0:	a0 83       	st	Z, r26
 7f2:	08 c0       	rjmp	.+16     	; 0x804 <Task_Create+0x82>
 7f4:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 7f8:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 7fc:	e5 5f       	subi	r30, 0xF5	; 245
 7fe:	fe 4f       	sbci	r31, 0xFE	; 254
 800:	a1 e0       	ldi	r26, 0x01	; 1
 802:	a0 83       	st	Z, r26
 804:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 808:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 80c:	df 01       	movw	r26, r30
 80e:	a7 5f       	subi	r26, 0xF7	; 247
 810:	be 4f       	sbci	r27, 0xFE	; 254
 812:	11 96       	adiw	r26, 0x01	; 1
 814:	9c 93       	st	X, r25
 816:	8e 93       	st	-X, r24
 818:	14 97       	sbiw	r26, 0x04	; 4
 81a:	11 96       	adiw	r26, 0x01	; 1
 81c:	7c 93       	st	X, r23
 81e:	6e 93       	st	-X, r22
 820:	12 96       	adiw	r26, 0x02	; 2
 822:	11 96       	adiw	r26, 0x01	; 1
 824:	5c 93       	st	X, r21
 826:	4e 93       	st	-X, r20
 828:	1f 96       	adiw	r26, 0x0f	; 15
 82a:	11 96       	adiw	r26, 0x01	; 1
 82c:	3c 93       	st	X, r19
 82e:	2e 93       	st	-X, r18
 830:	12 97       	sbiw	r26, 0x02	; 2
 832:	11 96       	adiw	r26, 0x01	; 1
 834:	1c 93       	st	X, r17
 836:	0e 93       	st	-X, r16
 838:	ee 5e       	subi	r30, 0xEE	; 238
 83a:	fe 4f       	sbci	r31, 0xFE	; 254
 83c:	f1 82       	std	Z+1, r15	; 0x01
 83e:	e0 82       	st	Z, r14
 840:	b9 dc       	rcall	.-1678   	; 0x1b4 <Enter_Kernel>
 842:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 846:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 84a:	e4 5f       	subi	r30, 0xF4	; 244
 84c:	fe 4f       	sbci	r31, 0xFE	; 254
 84e:	80 81       	ld	r24, Z
 850:	91 81       	ldd	r25, Z+1	; 0x01
 852:	08 c0       	rjmp	.+16     	; 0x864 <Task_Create+0xe2>
 854:	ee 24       	eor	r14, r14
 856:	ea 94       	dec	r14
 858:	fe 2c       	mov	r15, r14
 85a:	0f ef       	ldi	r16, 0xFF	; 255
 85c:	1f ef       	ldi	r17, 0xFF	; 255
 85e:	2f ef       	ldi	r18, 0xFF	; 255
 860:	3f ef       	ldi	r19, 0xFF	; 255
 862:	36 de       	rcall	.-916    	; 0x4d0 <Kernel_Create_Task>
 864:	cf 91       	pop	r28
 866:	1f 91       	pop	r17
 868:	0f 91       	pop	r16
 86a:	ff 90       	pop	r15
 86c:	ef 90       	pop	r14
 86e:	08 95       	ret

00000870 <Task_Create_System>:
 870:	ef 92       	push	r14
 872:	ff 92       	push	r15
 874:	0f 93       	push	r16
 876:	1f 93       	push	r17
 878:	ab 01       	movw	r20, r22
 87a:	ee 24       	eor	r14, r14
 87c:	ea 94       	dec	r14
 87e:	fe 2c       	mov	r15, r14
 880:	0f ef       	ldi	r16, 0xFF	; 255
 882:	1f ef       	ldi	r17, 0xFF	; 255
 884:	2f ef       	ldi	r18, 0xFF	; 255
 886:	3f ef       	ldi	r19, 0xFF	; 255
 888:	63 e0       	ldi	r22, 0x03	; 3
 88a:	70 e0       	ldi	r23, 0x00	; 0
 88c:	7a df       	rcall	.-268    	; 0x782 <Task_Create>
 88e:	1f 91       	pop	r17
 890:	0f 91       	pop	r16
 892:	ff 90       	pop	r15
 894:	ef 90       	pop	r14
 896:	08 95       	ret

00000898 <Task_Create_Idle>:
 898:	ef 92       	push	r14
 89a:	ff 92       	push	r15
 89c:	0f 93       	push	r16
 89e:	1f 93       	push	r17
 8a0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <KernelActive>
 8a4:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <KernelActive+0x1>
 8a8:	89 2b       	or	r24, r25
 8aa:	f1 f0       	breq	.+60     	; 0x8e8 <Task_Create_Idle+0x50>
 8ac:	f8 94       	cli
 8ae:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Cp>
 8b2:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Cp+0x1>
 8b6:	fc 01       	movw	r30, r24
 8b8:	e7 5f       	subi	r30, 0xF7	; 247
 8ba:	fe 4f       	sbci	r31, 0xFE	; 254
 8bc:	28 e5       	ldi	r18, 0x58	; 88
 8be:	31 e0       	ldi	r19, 0x01	; 1
 8c0:	31 83       	std	Z+1, r19	; 0x01
 8c2:	20 83       	st	Z, r18
 8c4:	34 97       	sbiw	r30, 0x04	; 4
 8c6:	24 e0       	ldi	r18, 0x04	; 4
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	31 83       	std	Z+1, r19	; 0x01
 8cc:	20 83       	st	Z, r18
 8ce:	32 96       	adiw	r30, 0x02	; 2
 8d0:	11 82       	std	Z+1, r1	; 0x01
 8d2:	10 82       	st	Z, r1
 8d4:	6f dc       	rcall	.-1826   	; 0x1b4 <Enter_Kernel>
 8d6:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 8da:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 8de:	e4 5f       	subi	r30, 0xF4	; 244
 8e0:	fe 4f       	sbci	r31, 0xFE	; 254
 8e2:	80 81       	ld	r24, Z
 8e4:	91 81       	ldd	r25, Z+1	; 0x01
 8e6:	0e c0       	rjmp	.+28     	; 0x904 <Task_Create_Idle+0x6c>
 8e8:	ee 24       	eor	r14, r14
 8ea:	ea 94       	dec	r14
 8ec:	fe 2c       	mov	r15, r14
 8ee:	0f ef       	ldi	r16, 0xFF	; 255
 8f0:	1f ef       	ldi	r17, 0xFF	; 255
 8f2:	2f ef       	ldi	r18, 0xFF	; 255
 8f4:	3f ef       	ldi	r19, 0xFF	; 255
 8f6:	40 e0       	ldi	r20, 0x00	; 0
 8f8:	50 e0       	ldi	r21, 0x00	; 0
 8fa:	64 e0       	ldi	r22, 0x04	; 4
 8fc:	70 e0       	ldi	r23, 0x00	; 0
 8fe:	88 e5       	ldi	r24, 0x58	; 88
 900:	91 e0       	ldi	r25, 0x01	; 1
 902:	e6 dd       	rcall	.-1076   	; 0x4d0 <Kernel_Create_Task>
 904:	1f 91       	pop	r17
 906:	0f 91       	pop	r16
 908:	ff 90       	pop	r15
 90a:	ef 90       	pop	r14
 90c:	08 95       	ret

0000090e <Task_Next>:
 90e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <KernelActive>
 912:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <KernelActive+0x1>
 916:	89 2b       	or	r24, r25
 918:	09 f4       	brne	.+2      	; 0x91c <Task_Next+0xe>
 91a:	49 c0       	rjmp	.+146    	; 0x9ae <Task_Next+0xa0>
 91c:	f8 94       	cli
 91e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Cp>
 922:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Cp+0x1>
 926:	fc 01       	movw	r30, r24
 928:	eb 5f       	subi	r30, 0xFB	; 251
 92a:	fe 4f       	sbci	r31, 0xFE	; 254
 92c:	20 81       	ld	r18, Z
 92e:	31 81       	ldd	r19, Z+1	; 0x01
 930:	23 30       	cpi	r18, 0x03	; 3
 932:	31 05       	cpc	r19, r1
 934:	19 f4       	brne	.+6      	; 0x93c <Task_Next+0x2e>
 936:	36 96       	adiw	r30, 0x06	; 6
 938:	10 82       	st	Z, r1
 93a:	38 c0       	rjmp	.+112    	; 0x9ac <Task_Next+0x9e>
 93c:	fc 01       	movw	r30, r24
 93e:	eb 5f       	subi	r30, 0xFB	; 251
 940:	fe 4f       	sbci	r31, 0xFE	; 254
 942:	20 81       	ld	r18, Z
 944:	31 81       	ldd	r19, Z+1	; 0x01
 946:	22 30       	cpi	r18, 0x02	; 2
 948:	31 05       	cpc	r19, r1
 94a:	59 f5       	brne	.+86     	; 0x9a2 <Task_Next+0x94>
 94c:	75 96       	adiw	r30, 0x15	; 21
 94e:	40 81       	ld	r20, Z
 950:	51 81       	ldd	r21, Z+1	; 0x01
 952:	36 97       	sbiw	r30, 0x06	; 6
 954:	20 81       	ld	r18, Z
 956:	31 81       	ldd	r19, Z+1	; 0x01
 958:	42 17       	cp	r20, r18
 95a:	53 07       	cpc	r21, r19
 95c:	39 f0       	breq	.+14     	; 0x96c <Task_Next+0x5e>
 95e:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <SysCount>
 962:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <SysCount+0x1>
 966:	12 16       	cp	r1, r18
 968:	13 06       	cpc	r1, r19
 96a:	b4 f4       	brge	.+44     	; 0x998 <Task_Next+0x8a>
 96c:	fc 01       	movw	r30, r24
 96e:	ee 5e       	subi	r30, 0xEE	; 238
 970:	fe 4f       	sbci	r31, 0xFE	; 254
 972:	20 81       	ld	r18, Z
 974:	31 81       	ldd	r19, Z+1	; 0x01
 976:	38 96       	adiw	r30, 0x08	; 8
 978:	40 81       	ld	r20, Z
 97a:	51 81       	ldd	r21, Z+1	; 0x01
 97c:	24 1b       	sub	r18, r20
 97e:	35 0b       	sbc	r19, r21
 980:	dc 01       	movw	r26, r24
 982:	a8 5e       	subi	r26, 0xE8	; 232
 984:	be 4f       	sbci	r27, 0xFE	; 254
 986:	11 96       	adiw	r26, 0x01	; 1
 988:	3c 93       	st	X, r19
 98a:	2e 93       	st	-X, r18
 98c:	11 82       	std	Z+1, r1	; 0x01
 98e:	10 82       	st	Z, r1
 990:	3f 97       	sbiw	r30, 0x0f	; 15
 992:	85 e0       	ldi	r24, 0x05	; 5
 994:	80 83       	st	Z, r24
 996:	0a c0       	rjmp	.+20     	; 0x9ac <Task_Next+0x9e>
 998:	fc 01       	movw	r30, r24
 99a:	e5 5f       	subi	r30, 0xF5	; 245
 99c:	fe 4f       	sbci	r31, 0xFE	; 254
 99e:	10 82       	st	Z, r1
 9a0:	05 c0       	rjmp	.+10     	; 0x9ac <Task_Next+0x9e>
 9a2:	fc 01       	movw	r30, r24
 9a4:	e5 5f       	subi	r30, 0xF5	; 245
 9a6:	fe 4f       	sbci	r31, 0xFE	; 254
 9a8:	85 e0       	ldi	r24, 0x05	; 5
 9aa:	80 83       	st	Z, r24
 9ac:	03 cc       	rjmp	.-2042   	; 0x1b4 <Enter_Kernel>
 9ae:	08 95       	ret

000009b0 <setup>:
  */
void setup() {


	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
 9b0:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
 9b2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
 9b6:	e1 e8       	ldi	r30, 0x81	; 129
 9b8:	f0 e0       	ldi	r31, 0x00	; 0
 9ba:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
 9bc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 9c0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
 9c4:	80 e7       	ldi	r24, 0x70	; 112
 9c6:	92 e0       	ldi	r25, 0x02	; 2
 9c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 9cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
 9d0:	80 81       	ld	r24, Z
 9d2:	88 60       	ori	r24, 0x08	; 8
 9d4:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
 9d6:	80 81       	ld	r24, Z
 9d8:	84 60       	ori	r24, 0x04	; 4
 9da:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
 9dc:	ef e6       	ldi	r30, 0x6F	; 111
 9de:	f0 e0       	ldi	r31, 0x00	; 0
 9e0:	80 81       	ld	r24, Z
 9e2:	82 60       	ori	r24, 0x02	; 2
 9e4:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
 9e6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
 9ea:	e1 e9       	ldi	r30, 0x91	; 145
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
 9f0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 9f4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
 9f8:	83 e2       	ldi	r24, 0x23	; 35
 9fa:	94 ef       	ldi	r25, 0xF4	; 244
 9fc:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 a00:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
 a04:	80 81       	ld	r24, Z
 a06:	88 60       	ori	r24, 0x08	; 8
 a08:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
 a0a:	80 81       	ld	r24, Z
 a0c:	84 60       	ori	r24, 0x04	; 4
 a0e:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
 a10:	82 e0       	ldi	r24, 0x02	; 2
 a12:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>

	Enable_Interrupt();
 a16:	78 94       	sei
 a18:	08 95       	ret

00000a1a <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) { 
 a1a:	1f 92       	push	r1
 a1c:	0f 92       	push	r0
 a1e:	0f b6       	in	r0, 0x3f	; 63
 a20:	0f 92       	push	r0
 a22:	11 24       	eor	r1, r1
 a24:	0b b6       	in	r0, 0x3b	; 59
 a26:	0f 92       	push	r0
 a28:	2f 93       	push	r18
 a2a:	3f 93       	push	r19
 a2c:	4f 93       	push	r20
 a2e:	5f 93       	push	r21
 a30:	6f 93       	push	r22
 a32:	7f 93       	push	r23
 a34:	8f 93       	push	r24
 a36:	9f 93       	push	r25
 a38:	af 93       	push	r26
 a3a:	bf 93       	push	r27
 a3c:	ef 93       	push	r30
 a3e:	ff 93       	push	r31
	int i;
	if (Cp->priority == PERIODIC) {
 a40:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Cp>
 a44:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Cp+0x1>
 a48:	fc 01       	movw	r30, r24
 a4a:	eb 5f       	subi	r30, 0xFB	; 251
 a4c:	fe 4f       	sbci	r31, 0xFE	; 254
 a4e:	20 81       	ld	r18, Z
 a50:	31 81       	ldd	r19, Z+1	; 0x01
 a52:	22 30       	cpi	r18, 0x02	; 2
 a54:	31 05       	cpc	r19, r1
 a56:	31 f4       	brne	.+12     	; 0xa64 <__vector_17+0x4a>
		Cp->runningTime++;
 a58:	75 96       	adiw	r30, 0x15	; 21
 a5a:	80 81       	ld	r24, Z
 a5c:	91 81       	ldd	r25, Z+1	; 0x01
 a5e:	01 96       	adiw	r24, 0x01	; 1
 a60:	91 83       	std	Z+1, r25	; 0x01
 a62:	80 83       	st	Z, r24
	}

	for (i = PeriodicCount-1; i >= 0; i--) {
 a64:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <PeriodicCount>
 a68:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <PeriodicCount+0x1>
 a6c:	cd 01       	movw	r24, r26
 a6e:	01 97       	sbiw	r24, 0x01	; 1
 a70:	92 f0       	brmi	.+36     	; 0xa96 <__vector_17+0x7c>
 a72:	aa 0f       	add	r26, r26
 a74:	bb 1f       	adc	r27, r27
 a76:	ae 5e       	subi	r26, 0xEE	; 238
 a78:	bb 4e       	sbci	r27, 0xEB	; 235
 a7a:	22 e1       	ldi	r18, 0x12	; 18
 a7c:	34 e1       	ldi	r19, 0x14	; 20
		PeriodicQueue[i]->countdown -= 1;
 a7e:	fe 91       	ld	r31, -X
 a80:	ee 91       	ld	r30, -X
 a82:	e8 5e       	subi	r30, 0xE8	; 232
 a84:	fe 4f       	sbci	r31, 0xFE	; 254
 a86:	80 81       	ld	r24, Z
 a88:	91 81       	ldd	r25, Z+1	; 0x01
 a8a:	01 97       	sbiw	r24, 0x01	; 1
 a8c:	91 83       	std	Z+1, r25	; 0x01
 a8e:	80 83       	st	Z, r24
	int i;
	if (Cp->priority == PERIODIC) {
		Cp->runningTime++;
	}

	for (i = PeriodicCount-1; i >= 0; i--) {
 a90:	a2 17       	cp	r26, r18
 a92:	b3 07       	cpc	r27, r19
 a94:	a1 f7       	brne	.-24     	; 0xa7e <__vector_17+0x64>
		PeriodicQueue[i]->countdown -= 1;
	}

	Task_Next();
 a96:	3b df       	rcall	.-394    	; 0x90e <Task_Next>
}
 a98:	ff 91       	pop	r31
 a9a:	ef 91       	pop	r30
 a9c:	bf 91       	pop	r27
 a9e:	af 91       	pop	r26
 aa0:	9f 91       	pop	r25
 aa2:	8f 91       	pop	r24
 aa4:	7f 91       	pop	r23
 aa6:	6f 91       	pop	r22
 aa8:	5f 91       	pop	r21
 aaa:	4f 91       	pop	r20
 aac:	3f 91       	pop	r19
 aae:	2f 91       	pop	r18
 ab0:	0f 90       	pop	r0
 ab2:	0b be       	out	0x3b, r0	; 59
 ab4:	0f 90       	pop	r0
 ab6:	0f be       	out	0x3f, r0	; 63
 ab8:	0f 90       	pop	r0
 aba:	1f 90       	pop	r1
 abc:	18 95       	reti

00000abe <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) { // PERIOD: 1 s
 abe:	1f 92       	push	r1
 ac0:	0f 92       	push	r0
 ac2:	0f b6       	in	r0, 0x3f	; 63
 ac4:	0f 92       	push	r0
 ac6:	11 24       	eor	r1, r1
 ac8:	8f 93       	push	r24
 aca:	9f 93       	push	r25
	tickOverflowCount += 1;
 acc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <tickOverflowCount>
 ad0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <tickOverflowCount+0x1>
 ad4:	01 96       	adiw	r24, 0x01	; 1
 ad6:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <tickOverflowCount+0x1>
 ada:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <tickOverflowCount>
}
 ade:	9f 91       	pop	r25
 ae0:	8f 91       	pop	r24
 ae2:	0f 90       	pop	r0
 ae4:	0f be       	out	0x3f, r0	; 63
 ae6:	0f 90       	pop	r0
 ae8:	1f 90       	pop	r1
 aea:	18 95       	reti

00000aec <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
DDRA |= (1<<PA4);
 aec:	0c 9a       	sbi	0x01, 4	; 1
PORTA &= ~(1<<PA4);
 aee:	14 98       	cbi	0x02, 4	; 2

DDRA |= (1<<PA5);
 af0:	0d 9a       	sbi	0x01, 5	; 1
PORTA &= ~(1<<PA5);
 af2:	15 98       	cbi	0x02, 5	; 2

DDRA |= (1<<PA3);
 af4:	0b 9a       	sbi	0x01, 3	; 1
PORTA &= ~(1<<PA3);
 af6:	13 98       	cbi	0x02, 3	; 2
	setup();
 af8:	5b df       	rcall	.-330    	; 0x9b0 <setup>

	OS_Init();
 afa:	2b dd       	rcall	.-1450   	; 0x552 <OS_Init>
	Task_Create_Idle();
 afc:	cd de       	rcall	.-614    	; 0x898 <Task_Create_Idle>
	Task_Create_System(a_main, 1);
 afe:	61 e0       	ldi	r22, 0x01	; 1
 b00:	70 e0       	ldi	r23, 0x00	; 0
 b02:	85 e3       	ldi	r24, 0x35	; 53
 b04:	91 e0       	ldi	r25, 0x01	; 1
 b06:	b4 de       	rcall	.-664    	; 0x870 <Task_Create_System>
	OS_Start();
 b08:	48 cd       	rjmp	.-1392   	; 0x59a <OS_Start>
 b0a:	08 95       	ret

00000b0c <enqueue>:
}

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
 b0c:	cf 93       	push	r28
 b0e:	df 93       	push	r29
 b10:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
 b12:	28 81       	ld	r18, Y
 b14:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
 b16:	2f 30       	cpi	r18, 0x0F	; 15
 b18:	31 05       	cpc	r19, r1
 b1a:	29 f1       	breq	.+74     	; 0xb66 <enqueue+0x5a>
        return NULL;
    }

    int i = (*QCount) - 1;
 b1c:	e8 81       	ld	r30, Y
 b1e:	f9 81       	ldd	r31, Y+1	; 0x01
 b20:	9f 01       	movw	r18, r30
 b22:	21 50       	subi	r18, 0x01	; 1
 b24:	31 09       	sbc	r19, r1
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
 b26:	72 f0       	brmi	.+28     	; 0xb44 <enqueue+0x38>
 b28:	ee 0f       	add	r30, r30
 b2a:	ff 1f       	adc	r31, r31
 b2c:	e6 0f       	add	r30, r22
 b2e:	f7 1f       	adc	r31, r23
 b30:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
 b32:	32 91       	ld	r19, -Z
 b34:	22 91       	ld	r18, -Z
 b36:	33 83       	std	Z+3, r19	; 0x03
 b38:	22 83       	std	Z+2, r18	; 0x02

    int i = (*QCount) - 1;
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
 b3a:	ea 17       	cp	r30, r26
 b3c:	fb 07       	cpc	r31, r27
 b3e:	c9 f7       	brne	.-14     	; 0xb32 <enqueue+0x26>
        Queue[i+1] = Queue[i];
        i--;
 b40:	2f ef       	ldi	r18, 0xFF	; 255
 b42:	3f ef       	ldi	r19, 0xFF	; 255
        temp = Queue[i];
    }

    Queue[i+1] = *p;
 b44:	fc 01       	movw	r30, r24
 b46:	80 81       	ld	r24, Z
 b48:	91 81       	ldd	r25, Z+1	; 0x01
 b4a:	2f 5f       	subi	r18, 0xFF	; 255
 b4c:	3f 4f       	sbci	r19, 0xFF	; 255
 b4e:	22 0f       	add	r18, r18
 b50:	33 1f       	adc	r19, r19
 b52:	fb 01       	movw	r30, r22
 b54:	e2 0f       	add	r30, r18
 b56:	f3 1f       	adc	r31, r19
 b58:	91 83       	std	Z+1, r25	; 0x01
 b5a:	80 83       	st	Z, r24
    (*QCount)++;
 b5c:	88 81       	ld	r24, Y
 b5e:	99 81       	ldd	r25, Y+1	; 0x01
 b60:	01 96       	adiw	r24, 0x01	; 1
 b62:	99 83       	std	Y+1, r25	; 0x01
 b64:	88 83       	st	Y, r24
}
 b66:	df 91       	pop	r29
 b68:	cf 91       	pop	r28
 b6a:	08 95       	ret

00000b6c <dequeue>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
 b6c:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
 b6e:	2d 91       	ld	r18, X+
 b70:	3c 91       	ld	r19, X
 b72:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
 b74:	23 2b       	or	r18, r19
 b76:	a9 f0       	breq	.+42     	; 0xba2 <dequeue+0x36>
	   return NULL;
   }

   volatile PD *result = (Queue[(*QCount)-1]);
 b78:	2d 91       	ld	r18, X+
 b7a:	3c 91       	ld	r19, X
 b7c:	11 97       	sbiw	r26, 0x01	; 1
 b7e:	f9 01       	movw	r30, r18
 b80:	e1 50       	subi	r30, 0x01	; 1
 b82:	f0 48       	sbci	r31, 0x80	; 128
 b84:	ee 0f       	add	r30, r30
 b86:	ff 1f       	adc	r31, r31
 b88:	e8 0f       	add	r30, r24
 b8a:	f9 1f       	adc	r31, r25
 b8c:	80 81       	ld	r24, Z
 b8e:	91 81       	ldd	r25, Z+1	; 0x01
   (*QCount)--;
 b90:	2d 91       	ld	r18, X+
 b92:	3c 91       	ld	r19, X
 b94:	11 97       	sbiw	r26, 0x01	; 1
 b96:	21 50       	subi	r18, 0x01	; 1
 b98:	31 09       	sbc	r19, r1
 b9a:	11 96       	adiw	r26, 0x01	; 1
 b9c:	3c 93       	st	X, r19
 b9e:	2e 93       	st	-X, r18

   return result;
 ba0:	08 95       	ret
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
	   return NULL;
 ba2:	80 e0       	ldi	r24, 0x00	; 0
 ba4:	90 e0       	ldi	r25, 0x00	; 0

   volatile PD *result = (Queue[(*QCount)-1]);
   (*QCount)--;

   return result;
}
 ba6:	08 95       	ret

00000ba8 <enqueuePeriodic>:

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
 ba8:	cf 92       	push	r12
 baa:	df 92       	push	r13
 bac:	ef 92       	push	r14
 bae:	ff 92       	push	r15
 bb0:	0f 93       	push	r16
 bb2:	1f 93       	push	r17
 bb4:	cf 93       	push	r28
 bb6:	df 93       	push	r29
 bb8:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
 bba:	ea 01       	movw	r28, r20
 bbc:	28 81       	ld	r18, Y
 bbe:	39 81       	ldd	r19, Y+1	; 0x01

   return result;
}

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
	if(isFull(QCount)) {
 bc0:	2f 30       	cpi	r18, 0x0F	; 15
 bc2:	31 05       	cpc	r19, r1
 bc4:	09 f4       	brne	.+2      	; 0xbc8 <enqueuePeriodic+0x20>
 bc6:	4a c0       	rjmp	.+148    	; 0xc5c <enqueuePeriodic+0xb4>
		return;
	}

	int i = (*QCount) - 1;
 bc8:	28 81       	ld	r18, Y
 bca:	39 81       	ldd	r19, Y+1	; 0x01
 bcc:	21 50       	subi	r18, 0x01	; 1
 bce:	31 09       	sbc	r19, r1

	volatile PD *new = *p;
 bd0:	fc 01       	movw	r30, r24
 bd2:	00 81       	ld	r16, Z
 bd4:	11 81       	ldd	r17, Z+1	; 0x01

	volatile PD *temp = Queue[i];
 bd6:	f9 01       	movw	r30, r18
 bd8:	ee 0f       	add	r30, r30
 bda:	ff 1f       	adc	r31, r31
 bdc:	db 01       	movw	r26, r22
 bde:	ae 0f       	add	r26, r30
 be0:	bf 1f       	adc	r27, r31
 be2:	4d 91       	ld	r20, X+
 be4:	5c 91       	ld	r21, X

	while(i >= 0 && (new->countdown >= temp->countdown)) {
 be6:	33 23       	and	r19, r19
 be8:	3c f1       	brlt	.+78     	; 0xc38 <enqueuePeriodic+0x90>
 bea:	d8 01       	movw	r26, r16
 bec:	a8 5e       	subi	r26, 0xE8	; 232
 bee:	be 4f       	sbci	r27, 0xFE	; 254
 bf0:	ed 90       	ld	r14, X+
 bf2:	fc 90       	ld	r15, X
 bf4:	da 01       	movw	r26, r20
 bf6:	a8 5e       	subi	r26, 0xE8	; 232
 bf8:	be 4f       	sbci	r27, 0xFE	; 254
 bfa:	4d 91       	ld	r20, X+
 bfc:	5c 91       	ld	r21, X
 bfe:	e4 16       	cp	r14, r20
 c00:	f5 06       	cpc	r15, r21
 c02:	d4 f0       	brlt	.+52     	; 0xc38 <enqueuePeriodic+0x90>
 c04:	e6 0f       	add	r30, r22
 c06:	f7 1f       	adc	r31, r23
 c08:	08 5e       	subi	r16, 0xE8	; 232
 c0a:	1e 4f       	sbci	r17, 0xFE	; 254
		Queue[i+1] = Queue[i];
 c0c:	a0 81       	ld	r26, Z
 c0e:	b1 81       	ldd	r27, Z+1	; 0x01
 c10:	b3 83       	std	Z+3, r27	; 0x03
 c12:	a2 83       	std	Z+2, r26	; 0x02
		i--;
 c14:	21 50       	subi	r18, 0x01	; 1
 c16:	31 09       	sbc	r19, r1
		temp = Queue[i];
 c18:	b2 91       	ld	r27, -Z
 c1a:	a2 91       	ld	r26, -Z

	volatile PD *new = *p;

	volatile PD *temp = Queue[i];

	while(i >= 0 && (new->countdown >= temp->countdown)) {
 c1c:	2f 3f       	cpi	r18, 0xFF	; 255
 c1e:	4f ef       	ldi	r20, 0xFF	; 255
 c20:	34 07       	cpc	r19, r20
 c22:	51 f0       	breq	.+20     	; 0xc38 <enqueuePeriodic+0x90>
 c24:	e8 01       	movw	r28, r16
 c26:	e8 80       	ld	r14, Y
 c28:	f9 80       	ldd	r15, Y+1	; 0x01
 c2a:	a8 5e       	subi	r26, 0xE8	; 232
 c2c:	be 4f       	sbci	r27, 0xFE	; 254
 c2e:	4d 91       	ld	r20, X+
 c30:	5c 91       	ld	r21, X
 c32:	e4 16       	cp	r14, r20
 c34:	f5 06       	cpc	r15, r21
 c36:	54 f7       	brge	.-44     	; 0xc0c <enqueuePeriodic+0x64>
		Queue[i+1] = Queue[i];
		i--;
		temp = Queue[i];
	}

	Queue[i+1] = *p;
 c38:	fc 01       	movw	r30, r24
 c3a:	80 81       	ld	r24, Z
 c3c:	91 81       	ldd	r25, Z+1	; 0x01
 c3e:	2f 5f       	subi	r18, 0xFF	; 255
 c40:	3f 4f       	sbci	r19, 0xFF	; 255
 c42:	22 0f       	add	r18, r18
 c44:	33 1f       	adc	r19, r19
 c46:	fb 01       	movw	r30, r22
 c48:	e2 0f       	add	r30, r18
 c4a:	f3 1f       	adc	r31, r19
 c4c:	91 83       	std	Z+1, r25	; 0x01
 c4e:	80 83       	st	Z, r24
	(*QCount)++;
 c50:	e6 01       	movw	r28, r12
 c52:	88 81       	ld	r24, Y
 c54:	99 81       	ldd	r25, Y+1	; 0x01
 c56:	01 96       	adiw	r24, 0x01	; 1
 c58:	99 83       	std	Y+1, r25	; 0x01
 c5a:	88 83       	st	Y, r24
}
 c5c:	df 91       	pop	r29
 c5e:	cf 91       	pop	r28
 c60:	1f 91       	pop	r17
 c62:	0f 91       	pop	r16
 c64:	ff 90       	pop	r15
 c66:	ef 90       	pop	r14
 c68:	df 90       	pop	r13
 c6a:	cf 90       	pop	r12
 c6c:	08 95       	ret

00000c6e <peek>:

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
 c6e:	fb 01       	movw	r30, r22
 c70:	20 81       	ld	r18, Z
 c72:	31 81       	ldd	r19, Z+1	; 0x01
	Queue[i+1] = *p;
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
 c74:	23 2b       	or	r18, r19
 c76:	61 f0       	breq	.+24     	; 0xc90 <peek+0x22>
		return NULL;
	}
	volatile PD *result = (Queue[(*QCount)-1]);
 c78:	20 81       	ld	r18, Z
 c7a:	31 81       	ldd	r19, Z+1	; 0x01
 c7c:	f9 01       	movw	r30, r18
 c7e:	e1 50       	subi	r30, 0x01	; 1
 c80:	f0 48       	sbci	r31, 0x80	; 128
 c82:	ee 0f       	add	r30, r30
 c84:	ff 1f       	adc	r31, r31
 c86:	e8 0f       	add	r30, r24
 c88:	f9 1f       	adc	r31, r25
 c8a:	80 81       	ld	r24, Z
 c8c:	91 81       	ldd	r25, Z+1	; 0x01
	return result;
 c8e:	08 95       	ret
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
		return NULL;
 c90:	80 e0       	ldi	r24, 0x00	; 0
 c92:	90 e0       	ldi	r25, 0x00	; 0
	}
	volatile PD *result = (Queue[(*QCount)-1]);
	return result;
 c94:	08 95       	ret

00000c96 <_exit>:
 c96:	f8 94       	cli

00000c98 <__stop_program>:
 c98:	ff cf       	rjmp	.-2      	; 0xc98 <__stop_program>
