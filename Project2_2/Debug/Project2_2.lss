
Project2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000e7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e0a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000012b4  00800200  00800200  00000e7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002458  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ae  00000000  00000000  000034c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dc0  00000000  00000000  00004676  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  00005438  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c2  00000000  00000000  00005844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011f5  00000000  00000000  00006206  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000073fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	79 c0       	rjmp	.+242    	; 0xf4 <__ctors_end>
   2:	00 00       	nop
   4:	89 c0       	rjmp	.+274    	; 0x118 <__bad_interrupt>
   6:	00 00       	nop
   8:	87 c0       	rjmp	.+270    	; 0x118 <__bad_interrupt>
   a:	00 00       	nop
   c:	85 c0       	rjmp	.+266    	; 0x118 <__bad_interrupt>
   e:	00 00       	nop
  10:	83 c0       	rjmp	.+262    	; 0x118 <__bad_interrupt>
  12:	00 00       	nop
  14:	81 c0       	rjmp	.+258    	; 0x118 <__bad_interrupt>
  16:	00 00       	nop
  18:	7f c0       	rjmp	.+254    	; 0x118 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7d c0       	rjmp	.+250    	; 0x118 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7b c0       	rjmp	.+246    	; 0x118 <__bad_interrupt>
  22:	00 00       	nop
  24:	79 c0       	rjmp	.+242    	; 0x118 <__bad_interrupt>
  26:	00 00       	nop
  28:	77 c0       	rjmp	.+238    	; 0x118 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	75 c0       	rjmp	.+234    	; 0x118 <__bad_interrupt>
  2e:	00 00       	nop
  30:	73 c0       	rjmp	.+230    	; 0x118 <__bad_interrupt>
  32:	00 00       	nop
  34:	71 c0       	rjmp	.+226    	; 0x118 <__bad_interrupt>
  36:	00 00       	nop
  38:	6f c0       	rjmp	.+222    	; 0x118 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6d c0       	rjmp	.+218    	; 0x118 <__bad_interrupt>
  3e:	00 00       	nop
  40:	6b c0       	rjmp	.+214    	; 0x118 <__bad_interrupt>
  42:	00 00       	nop
  44:	31 c4       	rjmp	.+2146   	; 0x8a8 <__vector_17>
  46:	00 00       	nop
  48:	67 c0       	rjmp	.+206    	; 0x118 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	65 c0       	rjmp	.+202    	; 0x118 <__bad_interrupt>
  4e:	00 00       	nop
  50:	63 c0       	rjmp	.+198    	; 0x118 <__bad_interrupt>
  52:	00 00       	nop
  54:	61 c0       	rjmp	.+194    	; 0x118 <__bad_interrupt>
  56:	00 00       	nop
  58:	5f c0       	rjmp	.+190    	; 0x118 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5d c0       	rjmp	.+186    	; 0x118 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5b c0       	rjmp	.+182    	; 0x118 <__bad_interrupt>
  62:	00 00       	nop
  64:	59 c0       	rjmp	.+178    	; 0x118 <__bad_interrupt>
  66:	00 00       	nop
  68:	57 c0       	rjmp	.+174    	; 0x118 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	55 c0       	rjmp	.+170    	; 0x118 <__bad_interrupt>
  6e:	00 00       	nop
  70:	53 c0       	rjmp	.+166    	; 0x118 <__bad_interrupt>
  72:	00 00       	nop
  74:	51 c0       	rjmp	.+162    	; 0x118 <__bad_interrupt>
  76:	00 00       	nop
  78:	4f c0       	rjmp	.+158    	; 0x118 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4d c0       	rjmp	.+154    	; 0x118 <__bad_interrupt>
  7e:	00 00       	nop
  80:	65 c4       	rjmp	.+2250   	; 0x94c <__vector_32>
  82:	00 00       	nop
  84:	49 c0       	rjmp	.+146    	; 0x118 <__bad_interrupt>
  86:	00 00       	nop
  88:	47 c0       	rjmp	.+142    	; 0x118 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	45 c0       	rjmp	.+138    	; 0x118 <__bad_interrupt>
  8e:	00 00       	nop
  90:	43 c0       	rjmp	.+134    	; 0x118 <__bad_interrupt>
  92:	00 00       	nop
  94:	41 c0       	rjmp	.+130    	; 0x118 <__bad_interrupt>
  96:	00 00       	nop
  98:	3f c0       	rjmp	.+126    	; 0x118 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3d c0       	rjmp	.+122    	; 0x118 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3b c0       	rjmp	.+118    	; 0x118 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	39 c0       	rjmp	.+114    	; 0x118 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	37 c0       	rjmp	.+110    	; 0x118 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	35 c0       	rjmp	.+106    	; 0x118 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	33 c0       	rjmp	.+102    	; 0x118 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	31 c0       	rjmp	.+98     	; 0x118 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2f c0       	rjmp	.+94     	; 0x118 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2d c0       	rjmp	.+90     	; 0x118 <__bad_interrupt>
  be:	00 00       	nop
  c0:	2b c0       	rjmp	.+86     	; 0x118 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	29 c0       	rjmp	.+82     	; 0x118 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	27 c0       	rjmp	.+78     	; 0x118 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	25 c0       	rjmp	.+74     	; 0x118 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	23 c0       	rjmp	.+70     	; 0x118 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	21 c0       	rjmp	.+66     	; 0x118 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1f c0       	rjmp	.+62     	; 0x118 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1d c0       	rjmp	.+58     	; 0x118 <__bad_interrupt>
  de:	00 00       	nop
  e0:	1b c0       	rjmp	.+54     	; 0x118 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	7d 05       	cpc	r23, r13
  e6:	95 05       	cpc	r25, r5
  e8:	c5 05       	cpc	r28, r5
  ea:	ac 05       	cpc	r26, r12
  ec:	dc 05       	cpc	r29, r12
  ee:	0d 06       	cpc	r0, r29
  f0:	54 05       	cpc	r21, r4
  f2:	0b 06       	cpc	r0, r27

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	d1 e2       	ldi	r29, 0x21	; 33
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	0c bf       	out	0x3c, r16	; 60

00000104 <__do_clear_bss>:
 104:	24 e1       	ldi	r18, 0x14	; 20
 106:	a0 e0       	ldi	r26, 0x00	; 0
 108:	b2 e0       	ldi	r27, 0x02	; 2
 10a:	01 c0       	rjmp	.+2      	; 0x10e <.do_clear_bss_start>

0000010c <.do_clear_bss_loop>:
 10c:	1d 92       	st	X+, r1

0000010e <.do_clear_bss_start>:
 10e:	a4 3b       	cpi	r26, 0xB4	; 180
 110:	b2 07       	cpc	r27, r18
 112:	e1 f7       	brne	.-8      	; 0x10c <.do_clear_bss_loop>
 114:	9b d5       	rcall	.+2870   	; 0xc4c <main>
 116:	77 c6       	rjmp	.+3310   	; 0xe06 <_exit>

00000118 <__bad_interrupt>:
 118:	73 cf       	rjmp	.-282    	; 0x0 <__vectors>

0000011a <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 11a:	0f 92       	push	r0
 11c:	1f 92       	push	r1
 11e:	2f 92       	push	r2
 120:	3f 92       	push	r3
 122:	4f 92       	push	r4
 124:	5f 92       	push	r5
 126:	6f 92       	push	r6
 128:	7f 92       	push	r7
 12a:	8f 92       	push	r8
 12c:	9f 92       	push	r9
 12e:	af 92       	push	r10
 130:	bf 92       	push	r11
 132:	cf 92       	push	r12
 134:	df 92       	push	r13
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
 15a:	0f b7       	in	r16, 0x3f	; 63
 15c:	0f 93       	push	r16
 15e:	fc b7       	in	r31, 0x3c	; 60
 160:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
 162:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 164:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
 166:	e0 93 92 14 	sts	0x1492, r30	; 0x801492 <KernelSp>
        sts  KernelSp+1, r31
 16a:	f0 93 93 14 	sts	0x1493, r31	; 0x801493 <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
 16e:	e0 91 70 14 	lds	r30, 0x1470	; 0x801470 <CurrentSp>
        lds  r31, CurrentSp+1
 172:	f0 91 71 14 	lds	r31, 0x1471	; 0x801471 <CurrentSp+0x1>
        out  SPL, r30
 176:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 178:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
 17a:	ff 91       	pop	r31
 17c:	fc bf       	out	0x3c, r31	; 60
 17e:	0f 91       	pop	r16
 180:	0f bf       	out	0x3f, r16	; 63
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	ff 90       	pop	r15
 1a4:	ef 90       	pop	r14
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	bf 90       	pop	r11
 1ac:	af 90       	pop	r10
 1ae:	9f 90       	pop	r9
 1b0:	8f 90       	pop	r8
 1b2:	7f 90       	pop	r7
 1b4:	6f 90       	pop	r6
 1b6:	5f 90       	pop	r5
 1b8:	4f 90       	pop	r4
 1ba:	3f 90       	pop	r3
 1bc:	2f 90       	pop	r2
 1be:	1f 90       	pop	r1
 1c0:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
 1c2:	18 95       	reti

000001c4 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
 1c4:	0f 92       	push	r0
 1c6:	1f 92       	push	r1
 1c8:	2f 92       	push	r2
 1ca:	3f 92       	push	r3
 1cc:	4f 92       	push	r4
 1ce:	5f 92       	push	r5
 1d0:	6f 92       	push	r6
 1d2:	7f 92       	push	r7
 1d4:	8f 92       	push	r8
 1d6:	9f 92       	push	r9
 1d8:	af 92       	push	r10
 1da:	bf 92       	push	r11
 1dc:	cf 92       	push	r12
 1de:	df 92       	push	r13
 1e0:	ef 92       	push	r14
 1e2:	ff 92       	push	r15
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	2f 93       	push	r18
 1ea:	3f 93       	push	r19
 1ec:	4f 93       	push	r20
 1ee:	5f 93       	push	r21
 1f0:	6f 93       	push	r22
 1f2:	7f 93       	push	r23
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
 1f8:	af 93       	push	r26
 1fa:	bf 93       	push	r27
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
 204:	0f b7       	in	r16, 0x3f	; 63
 206:	0f 93       	push	r16
 208:	fc b7       	in	r31, 0x3c	; 60
 20a:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
 20c:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 20e:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
 210:	e0 93 70 14 	sts	0x1470, r30	; 0x801470 <CurrentSp>
        sts  CurrentSp+1, r31
 214:	f0 93 71 14 	sts	0x1471, r31	; 0x801471 <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
 218:	e0 91 92 14 	lds	r30, 0x1492	; 0x801492 <KernelSp>
        lds  r31, KernelSp+1
 21c:	f0 91 93 14 	lds	r31, 0x1493	; 0x801493 <KernelSp+0x1>
        out  SPL, r30
 220:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 222:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
 224:	ff 91       	pop	r31
 226:	fc bf       	out	0x3c, r31	; 60
 228:	0f 91       	pop	r16
 22a:	0f bf       	out	0x3f, r16	; 63
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	bf 91       	pop	r27
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	ff 90       	pop	r15
 24e:	ef 90       	pop	r14
 250:	df 90       	pop	r13
 252:	cf 90       	pop	r12
 254:	bf 90       	pop	r11
 256:	af 90       	pop	r10
 258:	9f 90       	pop	r9
 25a:	8f 90       	pop	r8
 25c:	7f 90       	pop	r7
 25e:	6f 90       	pop	r6
 260:	5f 90       	pop	r5
 262:	4f 90       	pop	r4
 264:	3f 90       	pop	r3
 266:	2f 90       	pop	r2
 268:	1f 90       	pop	r1
 26a:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
 26c:	08 95       	ret

0000026e <Task_WriteBluetooth>:

/***** Core System Tasks *****/
void Task_WriteBluetooth()
{
    for(;;){
		DDRA |= (1<<PA3);
 26e:	0b 9a       	sbi	0x01, 3	; 1
		PORTA &= ~(1<<PA3);
 270:	13 98       	cbi	0x02, 3	; 2
        //Task_Next();
    }
 272:	fd cf       	rjmp	.-6      	; 0x26e <Task_WriteBluetooth>

00000274 <Task_ReadJoystick>:

void Task_ReadJoystick()
{
    for(;;)
    {
        DDRA |= (1<<PA3);
 274:	0b 9a       	sbi	0x01, 3	; 1
        PORTA |= (1<<PA3);
 276:	13 9a       	sbi	0x02, 3	; 2
        //Task_Next();
    }
 278:	fd cf       	rjmp	.-6      	; 0x274 <Task_ReadJoystick>

0000027a <ASDF2>:
}

void ASDF2()
{
	for (;;) {
		PORTA |= (1<<PA4);
 27a:	14 9a       	sbi	0x02, 4	; 2
		PORTA &= ~(1<<PA4);
 27c:	14 98       	cbi	0x02, 4	; 2
	}
 27e:	fd cf       	rjmp	.-6      	; 0x27a <ASDF2>

00000280 <ASDF>:
        //Task_Next();
    }
}

void ASDF()
{
 280:	80 e1       	ldi	r24, 0x10	; 16
 282:	97 e2       	ldi	r25, 0x27	; 39
	
	int x = 0;
	for (;x < 10000;x++) {
		PORTA |= (1<<PA5);
 284:	15 9a       	sbi	0x02, 5	; 2
		PORTA &= ~(1<<PA5);
 286:	15 98       	cbi	0x02, 5	; 2
 288:	01 97       	sbiw	r24, 0x01	; 1

void ASDF()
{
	
	int x = 0;
	for (;x < 10000;x++) {
 28a:	e1 f7       	brne	.-8      	; 0x284 <ASDF+0x4>
		PORTA |= (1<<PA5);
		PORTA &= ~(1<<PA5);
	}
	Task_Terminate();
 28c:	8c c0       	rjmp	.+280    	; 0x3a6 <Task_Terminate>
 28e:	08 95       	ret

00000290 <a_main>:
	}
	
}

void a_main()
{
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
	
    // Initialize tasks
	//Task_Create(ASDF, SYSTEM, 0);
    Task_Create(Task_ReadJoystick, PERIODIC, 0, 0, 1, 3);
 298:	0f 2e       	mov	r0, r31
 29a:	f3 e0       	ldi	r31, 0x03	; 3
 29c:	ef 2e       	mov	r14, r31
 29e:	f1 2c       	mov	r15, r1
 2a0:	f0 2d       	mov	r31, r0
 2a2:	01 e0       	ldi	r16, 0x01	; 1
 2a4:	10 e0       	ldi	r17, 0x00	; 0
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	8a e3       	ldi	r24, 0x3A	; 58
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	ac d1       	rcall	.+856    	; 0x610 <Task_Create>
    Task_Create(Task_WriteBluetooth, PERIODIC, 0, 2, 1, 3);
 2b8:	22 e0       	ldi	r18, 0x02	; 2
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	62 e0       	ldi	r22, 0x02	; 2
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	87 e3       	ldi	r24, 0x37	; 55
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	a3 d1       	rcall	.+838    	; 0x610 <Task_Create>
	Task_Create(ASDF2, RR, 0, -1, -1, -1);
 2ca:	ee 24       	eor	r14, r14
 2cc:	ea 94       	dec	r14
 2ce:	fe 2c       	mov	r15, r14
 2d0:	0f ef       	ldi	r16, 0xFF	; 255
 2d2:	1f ef       	ldi	r17, 0xFF	; 255
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	3f ef       	ldi	r19, 0xFF	; 255
 2d8:	40 e0       	ldi	r20, 0x00	; 0
 2da:	50 e0       	ldi	r21, 0x00	; 0
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	8d e3       	ldi	r24, 0x3D	; 61
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	95 d1       	rcall	.+810    	; 0x610 <Task_Create>
	Task_Create(ASDF, SYSTEM, 0, -1, -1, -1);
 2e6:	2f ef       	ldi	r18, 0xFF	; 255
 2e8:	3f ef       	ldi	r19, 0xFF	; 255
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	63 e0       	ldi	r22, 0x03	; 3
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	80 e4       	ldi	r24, 0x40	; 64
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	8c d1       	rcall	.+792    	; 0x610 <Task_Create>

    // Kill the initialization task
    Task_Terminate();
 2f8:	56 d0       	rcall	.+172    	; 0x3a6 <Task_Terminate>
}
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	08 95       	ret

00000304 <idle>:
	if (Cp->priority == PERIODIC) OS_Abort(); // periodic tasks are not allowed to use csp 
	Cp->request = RECEIVE;
	Cp->receiverChannel = ch;
	Enter_Kernel();
	return Cp->retval;
}
 304:	ff cf       	rjmp	.-2      	; 0x304 <idle>

00000306 <Dispatch>:
 306:	64 e0       	ldi	r22, 0x04	; 4
 308:	72 e0       	ldi	r23, 0x02	; 2
 30a:	80 e3       	ldi	r24, 0x30	; 48
 30c:	94 e1       	ldi	r25, 0x14	; 20
 30e:	de d4       	rcall	.+2492   	; 0xccc <dequeue>
 310:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Cp+0x1>
 314:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Cp>
 318:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <PeriodicCount>
 31c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <PeriodicCount+0x1>
 320:	89 2b       	or	r24, r25
 322:	d9 f0       	breq	.+54     	; 0x35a <Dispatch+0x54>
 324:	62 e0       	ldi	r22, 0x02	; 2
 326:	72 e0       	ldi	r23, 0x02	; 2
 328:	82 e7       	ldi	r24, 0x72	; 114
 32a:	94 e1       	ldi	r25, 0x14	; 20
 32c:	50 d5       	rcall	.+2720   	; 0xdce <peek>
 32e:	fc 01       	movw	r30, r24
 330:	ea 5e       	subi	r30, 0xEA	; 234
 332:	fe 4f       	sbci	r31, 0xFE	; 254
 334:	80 81       	ld	r24, Z
 336:	91 81       	ldd	r25, Z+1	; 0x01
 338:	89 2b       	or	r24, r25
 33a:	79 f4       	brne	.+30     	; 0x35a <Dispatch+0x54>
 33c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Cp>
 340:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Cp+0x1>
 344:	89 2b       	or	r24, r25
 346:	01 f5       	brne	.+64     	; 0x388 <Dispatch+0x82>
 348:	62 e0       	ldi	r22, 0x02	; 2
 34a:	72 e0       	ldi	r23, 0x02	; 2
 34c:	82 e7       	ldi	r24, 0x72	; 114
 34e:	94 e1       	ldi	r25, 0x14	; 20
 350:	bd d4       	rcall	.+2426   	; 0xccc <dequeue>
 352:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Cp+0x1>
 356:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Cp>
 35a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Cp>
 35e:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Cp+0x1>
 362:	89 2b       	or	r24, r25
 364:	89 f4       	brne	.+34     	; 0x388 <Dispatch+0x82>
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	72 e0       	ldi	r23, 0x02	; 2
 36a:	84 e9       	ldi	r24, 0x94	; 148
 36c:	94 e1       	ldi	r25, 0x14	; 20
 36e:	ae d4       	rcall	.+2396   	; 0xccc <dequeue>
 370:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Cp+0x1>
 374:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Cp>
 378:	89 2b       	or	r24, r25
 37a:	31 f4       	brne	.+12     	; 0x388 <Dispatch+0x82>
 37c:	80 e1       	ldi	r24, 0x10	; 16
 37e:	92 e0       	ldi	r25, 0x02	; 2
 380:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Cp+0x1>
 384:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Cp>
 388:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 38c:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 390:	82 81       	ldd	r24, Z+2	; 0x02
 392:	93 81       	ldd	r25, Z+3	; 0x03
 394:	90 93 71 14 	sts	0x1471, r25	; 0x801471 <CurrentSp+0x1>
 398:	80 93 70 14 	sts	0x1470, r24	; 0x801470 <CurrentSp>
 39c:	ec 5f       	subi	r30, 0xFC	; 252
 39e:	fe 4f       	sbci	r31, 0xFE	; 254
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	80 83       	st	Z, r24
 3a4:	08 95       	ret

000003a6 <Task_Terminate>:
 3a6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <KernelActive>
 3aa:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <KernelActive+0x1>
 3ae:	89 2b       	or	r24, r25
 3b0:	51 f0       	breq	.+20     	; 0x3c6 <Task_Terminate+0x20>
 3b2:	f8 94       	cli
 3b4:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 3b8:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 3bc:	e5 5f       	subi	r30, 0xF5	; 245
 3be:	fe 4f       	sbci	r31, 0xFE	; 254
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	80 83       	st	Z, r24
 3c4:	ff ce       	rjmp	.-514    	; 0x1c4 <Enter_Kernel>
 3c6:	08 95       	ret

000003c8 <Kernel_Create_Task_At>:
 3c8:	8f 92       	push	r8
 3ca:	9f 92       	push	r9
 3cc:	af 92       	push	r10
 3ce:	bf 92       	push	r11
 3d0:	cf 92       	push	r12
 3d2:	df 92       	push	r13
 3d4:	ef 92       	push	r14
 3d6:	ff 92       	push	r15
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	1f 92       	push	r1
 3e2:	1f 92       	push	r1
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
 3e8:	9a 83       	std	Y+2, r25	; 0x02
 3ea:	89 83       	std	Y+1, r24	; 0x01
 3ec:	5c 01       	movw	r10, r24
 3ee:	a4 e0       	ldi	r26, 0x04	; 4
 3f0:	aa 0e       	add	r10, r26
 3f2:	b1 1c       	adc	r11, r1
 3f4:	81 2c       	mov	r8, r1
 3f6:	99 24       	eor	r9, r9
 3f8:	93 94       	inc	r9
 3fa:	f5 01       	movw	r30, r10
 3fc:	d4 01       	movw	r26, r8
 3fe:	11 92       	st	Z+, r1
 400:	11 97       	sbiw	r26, 0x01	; 1
 402:	e9 f7       	brne	.-6      	; 0x3fe <Kernel_Create_Task_At+0x36>
 404:	dc 01       	movw	r26, r24
 406:	ad 5f       	subi	r26, 0xFD	; 253
 408:	be 4f       	sbci	r27, 0xFE	; 254
 40a:	e3 ed       	ldi	r30, 0xD3	; 211
 40c:	f1 e0       	ldi	r31, 0x01	; 1
 40e:	ec 93       	st	X, r30
 410:	11 97       	sbiw	r26, 0x01	; 1
 412:	fc 93       	st	X, r31
 414:	fc 01       	movw	r30, r24
 416:	ef 5f       	subi	r30, 0xFF	; 255
 418:	fe 4f       	sbci	r31, 0xFE	; 254
 41a:	60 83       	st	Z, r22
 41c:	31 97       	sbiw	r30, 0x01	; 1
 41e:	70 83       	st	Z, r23
 420:	31 97       	sbiw	r30, 0x01	; 1
 422:	10 82       	st	Z, r1
 424:	b3 97       	sbiw	r30, 0x23	; 35
 426:	dc 01       	movw	r26, r24
 428:	13 96       	adiw	r26, 0x03	; 3
 42a:	fc 93       	st	X, r31
 42c:	ee 93       	st	-X, r30
 42e:	12 97       	sbiw	r26, 0x02	; 2
 430:	bd 96       	adiw	r30, 0x2d	; 45
 432:	71 83       	std	Z+1, r23	; 0x01
 434:	60 83       	st	Z, r22
 436:	32 96       	adiw	r30, 0x02	; 2
 438:	10 82       	st	Z, r1
 43a:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <pCount>
 43e:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <pCount+0x1>
 442:	fc 01       	movw	r30, r24
 444:	71 83       	std	Z+1, r23	; 0x01
 446:	60 83       	st	Z, r22
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	9a 81       	ldd	r25, Y+2	; 0x02
 44c:	fc 01       	movw	r30, r24
 44e:	eb 5f       	subi	r30, 0xFB	; 251
 450:	fe 4f       	sbci	r31, 0xFE	; 254
 452:	51 83       	std	Z+1, r21	; 0x01
 454:	40 83       	st	Z, r20
 456:	32 96       	adiw	r30, 0x02	; 2
 458:	31 83       	std	Z+1, r19	; 0x01
 45a:	20 83       	st	Z, r18
 45c:	3f 96       	adiw	r30, 0x0f	; 15
 45e:	2f ef       	ldi	r18, 0xFF	; 255
 460:	3f ef       	ldi	r19, 0xFF	; 255
 462:	31 83       	std	Z+1, r19	; 0x01
 464:	20 83       	st	Z, r18
 466:	32 96       	adiw	r30, 0x02	; 2
 468:	11 82       	std	Z+1, r1	; 0x01
 46a:	10 82       	st	Z, r1
 46c:	34 97       	sbiw	r30, 0x04	; 4
 46e:	11 83       	std	Z+1, r17	; 0x01
 470:	00 83       	st	Z, r16
 472:	34 97       	sbiw	r30, 0x04	; 4
 474:	d1 82       	std	Z+1, r13	; 0x01
 476:	c0 82       	st	Z, r12
 478:	32 96       	adiw	r30, 0x02	; 2
 47a:	f1 82       	std	Z+1, r15	; 0x01
 47c:	e0 82       	st	Z, r14
 47e:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Tasks>
 482:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Tasks+0x1>
 486:	2f 5f       	subi	r18, 0xFF	; 255
 488:	3f 4f       	sbci	r19, 0xFF	; 255
 48a:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <Tasks+0x1>
 48e:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <Tasks>
 492:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <pCount>
 496:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <pCount+0x1>
 49a:	2f 5f       	subi	r18, 0xFF	; 255
 49c:	3f 4f       	sbci	r19, 0xFF	; 255
 49e:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <pCount+0x1>
 4a2:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <pCount>
 4a6:	3e 97       	sbiw	r30, 0x0e	; 14
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	20 83       	st	Z, r18
 4ac:	43 30       	cpi	r20, 0x03	; 3
 4ae:	51 05       	cpc	r21, r1
 4b0:	41 f4       	brne	.+16     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4b2:	44 e0       	ldi	r20, 0x04	; 4
 4b4:	52 e0       	ldi	r21, 0x02	; 2
 4b6:	60 e3       	ldi	r22, 0x30	; 48
 4b8:	74 e1       	ldi	r23, 0x14	; 20
 4ba:	ce 01       	movw	r24, r28
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	d6 d3       	rcall	.+1964   	; 0xc6c <enqueue>
 4c0:	1a c0       	rjmp	.+52     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4c2:	42 30       	cpi	r20, 0x02	; 2
 4c4:	51 05       	cpc	r21, r1
 4c6:	69 f4       	brne	.+26     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4c8:	fc 01       	movw	r30, r24
 4ca:	ea 5e       	subi	r30, 0xEA	; 234
 4cc:	fe 4f       	sbci	r31, 0xFE	; 254
 4ce:	11 83       	std	Z+1, r17	; 0x01
 4d0:	00 83       	st	Z, r16
 4d2:	42 e0       	ldi	r20, 0x02	; 2
 4d4:	52 e0       	ldi	r21, 0x02	; 2
 4d6:	62 e7       	ldi	r22, 0x72	; 114
 4d8:	74 e1       	ldi	r23, 0x14	; 20
 4da:	ce 01       	movw	r24, r28
 4dc:	01 96       	adiw	r24, 0x01	; 1
 4de:	14 d4       	rcall	.+2088   	; 0xd08 <enqueuePeriodic>
 4e0:	0a c0       	rjmp	.+20     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4e2:	41 30       	cpi	r20, 0x01	; 1
 4e4:	51 05       	cpc	r21, r1
 4e6:	39 f4       	brne	.+14     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	52 e0       	ldi	r21, 0x02	; 2
 4ec:	64 e9       	ldi	r22, 0x94	; 148
 4ee:	74 e1       	ldi	r23, 0x14	; 20
 4f0:	ce 01       	movw	r24, r28
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	bb d3       	rcall	.+1910   	; 0xc6c <enqueue>
 4f6:	e9 81       	ldd	r30, Y+1	; 0x01
 4f8:	fa 81       	ldd	r31, Y+2	; 0x02
 4fa:	80 81       	ld	r24, Z
 4fc:	91 81       	ldd	r25, Z+1	; 0x01
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	1f 91       	pop	r17
 508:	0f 91       	pop	r16
 50a:	ff 90       	pop	r15
 50c:	ef 90       	pop	r14
 50e:	df 90       	pop	r13
 510:	cf 90       	pop	r12
 512:	bf 90       	pop	r11
 514:	af 90       	pop	r10
 516:	9f 90       	pop	r9
 518:	8f 90       	pop	r8
 51a:	08 95       	ret

0000051c <Kernel_Create_Task>:
 51c:	cf 92       	push	r12
 51e:	df 92       	push	r13
 520:	ef 92       	push	r14
 522:	ff 92       	push	r15
 524:	0f 93       	push	r16
 526:	1f 93       	push	r17
 528:	cf 93       	push	r28
 52a:	df 93       	push	r29
 52c:	e9 01       	movw	r28, r18
 52e:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <Tasks>
 532:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <Tasks+0x1>
 536:	20 31       	cpi	r18, 0x10	; 16
 538:	31 05       	cpc	r19, r1
 53a:	41 f1       	breq	.+80     	; 0x58c <Kernel_Create_Task+0x70>
 53c:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <Process+0x104>
 540:	22 23       	and	r18, r18
 542:	71 f0       	breq	.+28     	; 0x560 <Kernel_Create_Task+0x44>
 544:	a6 e3       	ldi	r26, 0x36	; 54
 546:	b4 e0       	ldi	r27, 0x04	; 4
 548:	e1 e0       	ldi	r30, 0x01	; 1
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	3c 91       	ld	r19, X
 54e:	33 23       	and	r19, r19
 550:	49 f0       	breq	.+18     	; 0x564 <Kernel_Create_Task+0x48>
 552:	31 96       	adiw	r30, 0x01	; 1
 554:	ae 5d       	subi	r26, 0xDE	; 222
 556:	be 4f       	sbci	r27, 0xFE	; 254
 558:	e0 31       	cpi	r30, 0x10	; 16
 55a:	f1 05       	cpc	r31, r1
 55c:	b9 f7       	brne	.-18     	; 0x54c <Kernel_Create_Task+0x30>
 55e:	02 c0       	rjmp	.+4      	; 0x564 <Kernel_Create_Task+0x48>
 560:	e0 e0       	ldi	r30, 0x00	; 0
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	67 01       	movw	r12, r14
 566:	78 01       	movw	r14, r16
 568:	8e 01       	movw	r16, r28
 56a:	9a 01       	movw	r18, r20
 56c:	ab 01       	movw	r20, r22
 56e:	bc 01       	movw	r22, r24
 570:	82 e2       	ldi	r24, 0x22	; 34
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	e8 9f       	mul	r30, r24
 576:	d0 01       	movw	r26, r0
 578:	e9 9f       	mul	r30, r25
 57a:	b0 0d       	add	r27, r0
 57c:	f8 9f       	mul	r31, r24
 57e:	b0 0d       	add	r27, r0
 580:	11 24       	eor	r1, r1
 582:	cd 01       	movw	r24, r26
 584:	80 5f       	subi	r24, 0xF0	; 240
 586:	9d 4f       	sbci	r25, 0xFD	; 253
 588:	1f df       	rcall	.-450    	; 0x3c8 <Kernel_Create_Task_At>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <Kernel_Create_Task+0x70>
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	1f 91       	pop	r17
 592:	0f 91       	pop	r16
 594:	ff 90       	pop	r15
 596:	ef 90       	pop	r14
 598:	df 90       	pop	r13
 59a:	cf 90       	pop	r12
 59c:	08 95       	ret

0000059e <OS_Init>:
 59e:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <Tasks+0x1>
 5a2:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <Tasks>
 5a6:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <KernelActive+0x1>
 5aa:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <KernelActive>
 5ae:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <pCount+0x1>
 5b2:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <pCount>
 5b6:	e0 e1       	ldi	r30, 0x10	; 16
 5b8:	f2 e0       	ldi	r31, 0x02	; 2
 5ba:	20 e3       	ldi	r18, 0x30	; 48
 5bc:	34 e1       	ldi	r19, 0x14	; 20
 5be:	82 e2       	ldi	r24, 0x22	; 34
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	df 01       	movw	r26, r30
 5c4:	ac 01       	movw	r20, r24
 5c6:	1d 92       	st	X+, r1
 5c8:	41 50       	subi	r20, 0x01	; 1
 5ca:	50 40       	sbci	r21, 0x00	; 0
 5cc:	e1 f7       	brne	.-8      	; 0x5c6 <OS_Init+0x28>
 5ce:	df 01       	movw	r26, r30
 5d0:	ac 5f       	subi	r26, 0xFC	; 252
 5d2:	be 4f       	sbci	r27, 0xFE	; 254
 5d4:	1c 92       	st	X, r1
 5d6:	11 82       	std	Z+1, r1	; 0x01
 5d8:	10 82       	st	Z, r1
 5da:	ee 5d       	subi	r30, 0xDE	; 222
 5dc:	fe 4f       	sbci	r31, 0xFE	; 254
 5de:	e2 17       	cp	r30, r18
 5e0:	f3 07       	cpc	r31, r19
 5e2:	79 f7       	brne	.-34     	; 0x5c2 <OS_Init+0x24>
 5e4:	e0 e5       	ldi	r30, 0x50	; 80
 5e6:	f4 e1       	ldi	r31, 0x14	; 20
 5e8:	20 e7       	ldi	r18, 0x70	; 112
 5ea:	34 e1       	ldi	r19, 0x14	; 20
 5ec:	89 e2       	ldi	r24, 0x29	; 41
 5ee:	df 01       	movw	r26, r30
 5f0:	48 2f       	mov	r20, r24
 5f2:	1d 92       	st	X+, r1
 5f4:	4a 95       	dec	r20
 5f6:	e9 f7       	brne	.-6      	; 0x5f2 <OS_Init+0x54>
 5f8:	a1 91       	ld	r26, Z+
 5fa:	b1 91       	ld	r27, Z+
 5fc:	96 96       	adiw	r26, 0x26	; 38
 5fe:	1c 92       	st	X, r1
 600:	96 97       	sbiw	r26, 0x26	; 38
 602:	11 96       	adiw	r26, 0x01	; 1
 604:	1c 92       	st	X, r1
 606:	1e 92       	st	-X, r1
 608:	e2 17       	cp	r30, r18
 60a:	f3 07       	cpc	r31, r19
 60c:	81 f7       	brne	.-32     	; 0x5ee <OS_Init+0x50>
 60e:	08 95       	ret

00000610 <Task_Create>:
 610:	ef 92       	push	r14
 612:	ff 92       	push	r15
 614:	0f 93       	push	r16
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <KernelActive>
 61e:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <KernelActive+0x1>
 622:	ef 2b       	or	r30, r31
 624:	09 f4       	brne	.+2      	; 0x628 <Task_Create+0x18>
 626:	5d c0       	rjmp	.+186    	; 0x6e2 <Task_Create+0xd2>
 628:	f8 94       	cli
 62a:	63 30       	cpi	r22, 0x03	; 3
 62c:	71 05       	cpc	r23, r1
 62e:	49 f4       	brne	.+18     	; 0x642 <Task_Create+0x32>
 630:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 634:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 638:	e5 5f       	subi	r30, 0xF5	; 245
 63a:	fe 4f       	sbci	r31, 0xFE	; 254
 63c:	a2 e0       	ldi	r26, 0x02	; 2
 63e:	a0 83       	st	Z, r26
 640:	28 c0       	rjmp	.+80     	; 0x692 <Task_Create+0x82>
 642:	62 30       	cpi	r22, 0x02	; 2
 644:	71 05       	cpc	r23, r1
 646:	89 f4       	brne	.+34     	; 0x66a <Task_Create+0x5a>
 648:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 64c:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 650:	df 01       	movw	r26, r30
 652:	a5 5f       	subi	r26, 0xF5	; 245
 654:	be 4f       	sbci	r27, 0xFE	; 254
 656:	c4 e0       	ldi	r28, 0x04	; 4
 658:	cc 93       	st	X, r28
 65a:	ea 5e       	subi	r30, 0xEA	; 234
 65c:	fe 4f       	sbci	r31, 0xFE	; 254
 65e:	d9 01       	movw	r26, r18
 660:	ae 0d       	add	r26, r14
 662:	bf 1d       	adc	r27, r15
 664:	b1 83       	std	Z+1, r27	; 0x01
 666:	a0 83       	st	Z, r26
 668:	14 c0       	rjmp	.+40     	; 0x692 <Task_Create+0x82>
 66a:	61 30       	cpi	r22, 0x01	; 1
 66c:	71 05       	cpc	r23, r1
 66e:	49 f4       	brne	.+18     	; 0x682 <Task_Create+0x72>
 670:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 674:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 678:	e5 5f       	subi	r30, 0xF5	; 245
 67a:	fe 4f       	sbci	r31, 0xFE	; 254
 67c:	a3 e0       	ldi	r26, 0x03	; 3
 67e:	a0 83       	st	Z, r26
 680:	08 c0       	rjmp	.+16     	; 0x692 <Task_Create+0x82>
 682:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 686:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 68a:	e5 5f       	subi	r30, 0xF5	; 245
 68c:	fe 4f       	sbci	r31, 0xFE	; 254
 68e:	a1 e0       	ldi	r26, 0x01	; 1
 690:	a0 83       	st	Z, r26
 692:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 696:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 69a:	df 01       	movw	r26, r30
 69c:	a7 5f       	subi	r26, 0xF7	; 247
 69e:	be 4f       	sbci	r27, 0xFE	; 254
 6a0:	11 96       	adiw	r26, 0x01	; 1
 6a2:	9c 93       	st	X, r25
 6a4:	8e 93       	st	-X, r24
 6a6:	14 97       	sbiw	r26, 0x04	; 4
 6a8:	11 96       	adiw	r26, 0x01	; 1
 6aa:	7c 93       	st	X, r23
 6ac:	6e 93       	st	-X, r22
 6ae:	12 96       	adiw	r26, 0x02	; 2
 6b0:	11 96       	adiw	r26, 0x01	; 1
 6b2:	5c 93       	st	X, r21
 6b4:	4e 93       	st	-X, r20
 6b6:	1d 96       	adiw	r26, 0x0d	; 13
 6b8:	11 96       	adiw	r26, 0x01	; 1
 6ba:	3c 93       	st	X, r19
 6bc:	2e 93       	st	-X, r18
 6be:	12 97       	sbiw	r26, 0x02	; 2
 6c0:	11 96       	adiw	r26, 0x01	; 1
 6c2:	1c 93       	st	X, r17
 6c4:	0e 93       	st	-X, r16
 6c6:	e0 5f       	subi	r30, 0xF0	; 240
 6c8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ca:	f1 82       	std	Z+1, r15	; 0x01
 6cc:	e0 82       	st	Z, r14
 6ce:	7a dd       	rcall	.-1292   	; 0x1c4 <Enter_Kernel>
 6d0:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 6d4:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 6d8:	e4 5f       	subi	r30, 0xF4	; 244
 6da:	fe 4f       	sbci	r31, 0xFE	; 254
 6dc:	80 81       	ld	r24, Z
 6de:	91 81       	ldd	r25, Z+1	; 0x01
 6e0:	08 c0       	rjmp	.+16     	; 0x6f2 <Task_Create+0xe2>
 6e2:	ee 24       	eor	r14, r14
 6e4:	ea 94       	dec	r14
 6e6:	fe 2c       	mov	r15, r14
 6e8:	0f ef       	ldi	r16, 0xFF	; 255
 6ea:	1f ef       	ldi	r17, 0xFF	; 255
 6ec:	2f ef       	ldi	r18, 0xFF	; 255
 6ee:	3f ef       	ldi	r19, 0xFF	; 255
 6f0:	15 df       	rcall	.-470    	; 0x51c <Kernel_Create_Task>
 6f2:	cf 91       	pop	r28
 6f4:	1f 91       	pop	r17
 6f6:	0f 91       	pop	r16
 6f8:	ff 90       	pop	r15
 6fa:	ef 90       	pop	r14
 6fc:	08 95       	ret

000006fe <Task_Create_System>:
 6fe:	ef 92       	push	r14
 700:	ff 92       	push	r15
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	ab 01       	movw	r20, r22
 708:	ee 24       	eor	r14, r14
 70a:	ea 94       	dec	r14
 70c:	fe 2c       	mov	r15, r14
 70e:	0f ef       	ldi	r16, 0xFF	; 255
 710:	1f ef       	ldi	r17, 0xFF	; 255
 712:	2f ef       	ldi	r18, 0xFF	; 255
 714:	3f ef       	ldi	r19, 0xFF	; 255
 716:	63 e0       	ldi	r22, 0x03	; 3
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	7a df       	rcall	.-268    	; 0x610 <Task_Create>
 71c:	1f 91       	pop	r17
 71e:	0f 91       	pop	r16
 720:	ff 90       	pop	r15
 722:	ef 90       	pop	r14
 724:	08 95       	ret

00000726 <Task_Create_Idle>:
 726:	ef 92       	push	r14
 728:	ff 92       	push	r15
 72a:	0f 93       	push	r16
 72c:	1f 93       	push	r17
 72e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <KernelActive>
 732:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <KernelActive+0x1>
 736:	89 2b       	or	r24, r25
 738:	f1 f0       	breq	.+60     	; 0x776 <Task_Create_Idle+0x50>
 73a:	f8 94       	cli
 73c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Cp>
 740:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Cp+0x1>
 744:	fc 01       	movw	r30, r24
 746:	e7 5f       	subi	r30, 0xF7	; 247
 748:	fe 4f       	sbci	r31, 0xFE	; 254
 74a:	22 e8       	ldi	r18, 0x82	; 130
 74c:	31 e0       	ldi	r19, 0x01	; 1
 74e:	31 83       	std	Z+1, r19	; 0x01
 750:	20 83       	st	Z, r18
 752:	34 97       	sbiw	r30, 0x04	; 4
 754:	24 e0       	ldi	r18, 0x04	; 4
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	31 83       	std	Z+1, r19	; 0x01
 75a:	20 83       	st	Z, r18
 75c:	32 96       	adiw	r30, 0x02	; 2
 75e:	11 82       	std	Z+1, r1	; 0x01
 760:	10 82       	st	Z, r1
 762:	30 dd       	rcall	.-1440   	; 0x1c4 <Enter_Kernel>
 764:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 768:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 76c:	e4 5f       	subi	r30, 0xF4	; 244
 76e:	fe 4f       	sbci	r31, 0xFE	; 254
 770:	80 81       	ld	r24, Z
 772:	91 81       	ldd	r25, Z+1	; 0x01
 774:	0e c0       	rjmp	.+28     	; 0x792 <Task_Create_Idle+0x6c>
 776:	ee 24       	eor	r14, r14
 778:	ea 94       	dec	r14
 77a:	fe 2c       	mov	r15, r14
 77c:	0f ef       	ldi	r16, 0xFF	; 255
 77e:	1f ef       	ldi	r17, 0xFF	; 255
 780:	2f ef       	ldi	r18, 0xFF	; 255
 782:	3f ef       	ldi	r19, 0xFF	; 255
 784:	40 e0       	ldi	r20, 0x00	; 0
 786:	50 e0       	ldi	r21, 0x00	; 0
 788:	64 e0       	ldi	r22, 0x04	; 4
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	82 e8       	ldi	r24, 0x82	; 130
 78e:	91 e0       	ldi	r25, 0x01	; 1
 790:	c5 de       	rcall	.-630    	; 0x51c <Kernel_Create_Task>
 792:	1f 91       	pop	r17
 794:	0f 91       	pop	r16
 796:	ff 90       	pop	r15
 798:	ef 90       	pop	r14
 79a:	08 95       	ret

0000079c <Run_Next>:
 79c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <KernelActive>
 7a0:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <KernelActive+0x1>
 7a4:	89 2b       	or	r24, r25
 7a6:	09 f4       	brne	.+2      	; 0x7aa <Run_Next+0xe>
 7a8:	49 c0       	rjmp	.+146    	; 0x83c <Run_Next+0xa0>
 7aa:	f8 94       	cli
 7ac:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Cp>
 7b0:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Cp+0x1>
 7b4:	fc 01       	movw	r30, r24
 7b6:	eb 5f       	subi	r30, 0xFB	; 251
 7b8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ba:	20 81       	ld	r18, Z
 7bc:	31 81       	ldd	r19, Z+1	; 0x01
 7be:	23 30       	cpi	r18, 0x03	; 3
 7c0:	31 05       	cpc	r19, r1
 7c2:	19 f4       	brne	.+6      	; 0x7ca <Run_Next+0x2e>
 7c4:	36 96       	adiw	r30, 0x06	; 6
 7c6:	10 82       	st	Z, r1
 7c8:	38 c0       	rjmp	.+112    	; 0x83a <Run_Next+0x9e>
 7ca:	fc 01       	movw	r30, r24
 7cc:	eb 5f       	subi	r30, 0xFB	; 251
 7ce:	fe 4f       	sbci	r31, 0xFE	; 254
 7d0:	20 81       	ld	r18, Z
 7d2:	31 81       	ldd	r19, Z+1	; 0x01
 7d4:	22 30       	cpi	r18, 0x02	; 2
 7d6:	31 05       	cpc	r19, r1
 7d8:	59 f5       	brne	.+86     	; 0x830 <Run_Next+0x94>
 7da:	73 96       	adiw	r30, 0x13	; 19
 7dc:	40 81       	ld	r20, Z
 7de:	51 81       	ldd	r21, Z+1	; 0x01
 7e0:	36 97       	sbiw	r30, 0x06	; 6
 7e2:	20 81       	ld	r18, Z
 7e4:	31 81       	ldd	r19, Z+1	; 0x01
 7e6:	42 17       	cp	r20, r18
 7e8:	53 07       	cpc	r21, r19
 7ea:	39 f0       	breq	.+14     	; 0x7fa <Run_Next+0x5e>
 7ec:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <SysCount>
 7f0:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <SysCount+0x1>
 7f4:	12 16       	cp	r1, r18
 7f6:	13 06       	cpc	r1, r19
 7f8:	b4 f4       	brge	.+44     	; 0x826 <Run_Next+0x8a>
 7fa:	fc 01       	movw	r30, r24
 7fc:	e0 5f       	subi	r30, 0xF0	; 240
 7fe:	fe 4f       	sbci	r31, 0xFE	; 254
 800:	20 81       	ld	r18, Z
 802:	31 81       	ldd	r19, Z+1	; 0x01
 804:	38 96       	adiw	r30, 0x08	; 8
 806:	40 81       	ld	r20, Z
 808:	51 81       	ldd	r21, Z+1	; 0x01
 80a:	24 1b       	sub	r18, r20
 80c:	35 0b       	sbc	r19, r21
 80e:	dc 01       	movw	r26, r24
 810:	aa 5e       	subi	r26, 0xEA	; 234
 812:	be 4f       	sbci	r27, 0xFE	; 254
 814:	11 96       	adiw	r26, 0x01	; 1
 816:	3c 93       	st	X, r19
 818:	2e 93       	st	-X, r18
 81a:	11 82       	std	Z+1, r1	; 0x01
 81c:	10 82       	st	Z, r1
 81e:	3d 97       	sbiw	r30, 0x0d	; 13
 820:	85 e0       	ldi	r24, 0x05	; 5
 822:	80 83       	st	Z, r24
 824:	0a c0       	rjmp	.+20     	; 0x83a <Run_Next+0x9e>
 826:	fc 01       	movw	r30, r24
 828:	e5 5f       	subi	r30, 0xF5	; 245
 82a:	fe 4f       	sbci	r31, 0xFE	; 254
 82c:	10 82       	st	Z, r1
 82e:	05 c0       	rjmp	.+10     	; 0x83a <Run_Next+0x9e>
 830:	fc 01       	movw	r30, r24
 832:	e5 5f       	subi	r30, 0xF5	; 245
 834:	fe 4f       	sbci	r31, 0xFE	; 254
 836:	85 e0       	ldi	r24, 0x05	; 5
 838:	80 83       	st	Z, r24
 83a:	c4 cc       	rjmp	.-1656   	; 0x1c4 <Enter_Kernel>
 83c:	08 95       	ret

0000083e <setup>:
 83e:	f8 94       	cli
 840:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 844:	e1 e8       	ldi	r30, 0x81	; 129
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	10 82       	st	Z, r1
 84a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 84e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 852:	80 e7       	ldi	r24, 0x70	; 112
 854:	92 e0       	ldi	r25, 0x02	; 2
 856:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 85a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 85e:	80 81       	ld	r24, Z
 860:	88 60       	ori	r24, 0x08	; 8
 862:	80 83       	st	Z, r24
 864:	80 81       	ld	r24, Z
 866:	84 60       	ori	r24, 0x04	; 4
 868:	80 83       	st	Z, r24
 86a:	ef e6       	ldi	r30, 0x6F	; 111
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	80 81       	ld	r24, Z
 870:	82 60       	ori	r24, 0x02	; 2
 872:	80 83       	st	Z, r24
 874:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
 878:	e1 e9       	ldi	r30, 0x91	; 145
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	10 82       	st	Z, r1
 87e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 882:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
 886:	83 e2       	ldi	r24, 0x23	; 35
 888:	94 ef       	ldi	r25, 0xF4	; 244
 88a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 88e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
 892:	80 81       	ld	r24, Z
 894:	88 60       	ori	r24, 0x08	; 8
 896:	80 83       	st	Z, r24
 898:	80 81       	ld	r24, Z
 89a:	84 60       	ori	r24, 0x04	; 4
 89c:	80 83       	st	Z, r24
 89e:	82 e0       	ldi	r24, 0x02	; 2
 8a0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
 8a4:	78 94       	sei
 8a6:	08 95       	ret

000008a8 <__vector_17>:
 8a8:	1f 92       	push	r1
 8aa:	0f 92       	push	r0
 8ac:	0f b6       	in	r0, 0x3f	; 63
 8ae:	0f 92       	push	r0
 8b0:	11 24       	eor	r1, r1
 8b2:	0b b6       	in	r0, 0x3b	; 59
 8b4:	0f 92       	push	r0
 8b6:	2f 93       	push	r18
 8b8:	3f 93       	push	r19
 8ba:	4f 93       	push	r20
 8bc:	5f 93       	push	r21
 8be:	6f 93       	push	r22
 8c0:	7f 93       	push	r23
 8c2:	8f 93       	push	r24
 8c4:	9f 93       	push	r25
 8c6:	af 93       	push	r26
 8c8:	bf 93       	push	r27
 8ca:	ef 93       	push	r30
 8cc:	ff 93       	push	r31
 8ce:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Cp>
 8d2:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Cp+0x1>
 8d6:	fc 01       	movw	r30, r24
 8d8:	eb 5f       	subi	r30, 0xFB	; 251
 8da:	fe 4f       	sbci	r31, 0xFE	; 254
 8dc:	20 81       	ld	r18, Z
 8de:	31 81       	ldd	r19, Z+1	; 0x01
 8e0:	22 30       	cpi	r18, 0x02	; 2
 8e2:	31 05       	cpc	r19, r1
 8e4:	31 f4       	brne	.+12     	; 0x8f2 <__vector_17+0x4a>
 8e6:	73 96       	adiw	r30, 0x13	; 19
 8e8:	80 81       	ld	r24, Z
 8ea:	91 81       	ldd	r25, Z+1	; 0x01
 8ec:	01 96       	adiw	r24, 0x01	; 1
 8ee:	91 83       	std	Z+1, r25	; 0x01
 8f0:	80 83       	st	Z, r24
 8f2:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <PeriodicCount>
 8f6:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <PeriodicCount+0x1>
 8fa:	cd 01       	movw	r24, r26
 8fc:	01 97       	sbiw	r24, 0x01	; 1
 8fe:	92 f0       	brmi	.+36     	; 0x924 <__vector_17+0x7c>
 900:	aa 0f       	add	r26, r26
 902:	bb 1f       	adc	r27, r27
 904:	ae 58       	subi	r26, 0x8E	; 142
 906:	bb 4e       	sbci	r27, 0xEB	; 235
 908:	22 e7       	ldi	r18, 0x72	; 114
 90a:	34 e1       	ldi	r19, 0x14	; 20
 90c:	fe 91       	ld	r31, -X
 90e:	ee 91       	ld	r30, -X
 910:	ea 5e       	subi	r30, 0xEA	; 234
 912:	fe 4f       	sbci	r31, 0xFE	; 254
 914:	80 81       	ld	r24, Z
 916:	91 81       	ldd	r25, Z+1	; 0x01
 918:	01 97       	sbiw	r24, 0x01	; 1
 91a:	91 83       	std	Z+1, r25	; 0x01
 91c:	80 83       	st	Z, r24
 91e:	a2 17       	cp	r26, r18
 920:	b3 07       	cpc	r27, r19
 922:	a1 f7       	brne	.-24     	; 0x90c <__vector_17+0x64>
 924:	3b df       	rcall	.-394    	; 0x79c <Run_Next>
 926:	ff 91       	pop	r31
 928:	ef 91       	pop	r30
 92a:	bf 91       	pop	r27
 92c:	af 91       	pop	r26
 92e:	9f 91       	pop	r25
 930:	8f 91       	pop	r24
 932:	7f 91       	pop	r23
 934:	6f 91       	pop	r22
 936:	5f 91       	pop	r21
 938:	4f 91       	pop	r20
 93a:	3f 91       	pop	r19
 93c:	2f 91       	pop	r18
 93e:	0f 90       	pop	r0
 940:	0b be       	out	0x3b, r0	; 59
 942:	0f 90       	pop	r0
 944:	0f be       	out	0x3f, r0	; 63
 946:	0f 90       	pop	r0
 948:	1f 90       	pop	r1
 94a:	18 95       	reti

0000094c <__vector_32>:
 94c:	1f 92       	push	r1
 94e:	0f 92       	push	r0
 950:	0f b6       	in	r0, 0x3f	; 63
 952:	0f 92       	push	r0
 954:	11 24       	eor	r1, r1
 956:	8f 93       	push	r24
 958:	9f 93       	push	r25
 95a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <tickOverflowCount>
 95e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <tickOverflowCount+0x1>
 962:	01 96       	adiw	r24, 0x01	; 1
 964:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <tickOverflowCount+0x1>
 968:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <tickOverflowCount>
 96c:	9f 91       	pop	r25
 96e:	8f 91       	pop	r24
 970:	0f 90       	pop	r0
 972:	0f be       	out	0x3f, r0	; 63
 974:	0f 90       	pop	r0
 976:	1f 90       	pop	r1
 978:	18 95       	reti

0000097a <kernel_receive>:

void kernel_receive() {
	if (ChannelArray[Cp->receiverChannel]->sender == NULL) { // no sender waiting
 97a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Cp>
 97e:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Cp+0x1>
 982:	fc 01       	movw	r30, r24
 984:	e2 5e       	subi	r30, 0xE2	; 226
 986:	fe 4f       	sbci	r31, 0xFE	; 254
 988:	01 90       	ld	r0, Z+
 98a:	f0 81       	ld	r31, Z
 98c:	e0 2d       	mov	r30, r0
 98e:	ee 0f       	add	r30, r30
 990:	ff 1f       	adc	r31, r31
 992:	e0 5b       	subi	r30, 0xB0	; 176
 994:	fb 4e       	sbci	r31, 0xEB	; 235
 996:	01 90       	ld	r0, Z+
 998:	f0 81       	ld	r31, Z
 99a:	e0 2d       	mov	r30, r0
 99c:	22 81       	ldd	r18, Z+2	; 0x02
 99e:	33 81       	ldd	r19, Z+3	; 0x03
 9a0:	23 2b       	or	r18, r19
 9a2:	01 f5       	brne	.+64     	; 0x9e4 <kernel_receive+0x6a>
		Cp->state = BLOCKED;
 9a4:	fc 01       	movw	r30, r24
 9a6:	ec 5f       	subi	r30, 0xFC	; 252
 9a8:	fe 4f       	sbci	r31, 0xFE	; 254
 9aa:	23 e0       	ldi	r18, 0x03	; 3
 9ac:	20 83       	st	Z, r18
		enqueue(&Cp, &ChannelArray[Cp->receiverChannel]->receivers, &ChannelArray[Cp->receiverChannel]->numberReceivers);
 9ae:	7a 96       	adiw	r30, 0x1a	; 26
 9b0:	a0 81       	ld	r26, Z
 9b2:	b1 81       	ldd	r27, Z+1	; 0x01
 9b4:	01 90       	ld	r0, Z+
 9b6:	f0 81       	ld	r31, Z
 9b8:	e0 2d       	mov	r30, r0
 9ba:	aa 0f       	add	r26, r26
 9bc:	bb 1f       	adc	r27, r27
 9be:	a0 5b       	subi	r26, 0xB0	; 176
 9c0:	bb 4e       	sbci	r27, 0xEB	; 235
 9c2:	4d 91       	ld	r20, X+
 9c4:	5c 91       	ld	r21, X
 9c6:	4c 5d       	subi	r20, 0xDC	; 220
 9c8:	5f 4f       	sbci	r21, 0xFF	; 255
 9ca:	ee 0f       	add	r30, r30
 9cc:	ff 1f       	adc	r31, r31
 9ce:	e0 5b       	subi	r30, 0xB0	; 176
 9d0:	fb 4e       	sbci	r31, 0xEB	; 235
 9d2:	60 81       	ld	r22, Z
 9d4:	71 81       	ldd	r23, Z+1	; 0x01
 9d6:	6c 5f       	subi	r22, 0xFC	; 252
 9d8:	7f 4f       	sbci	r23, 0xFF	; 255
 9da:	8e e0       	ldi	r24, 0x0E	; 14
 9dc:	92 e0       	ldi	r25, 0x02	; 2
 9de:	46 d1       	rcall	.+652    	; 0xc6c <enqueue>
		Dispatch();
 9e0:	92 cc       	rjmp	.-1756   	; 0x306 <Dispatch>
 9e2:	08 95       	ret
	} else { // sender is waiting
		Cp->val = ChannelArray[Cp->receiverChannel]->val;
 9e4:	fc 01       	movw	r30, r24
 9e6:	e2 5e       	subi	r30, 0xE2	; 226
 9e8:	fe 4f       	sbci	r31, 0xFE	; 254
 9ea:	01 90       	ld	r0, Z+
 9ec:	f0 81       	ld	r31, Z
 9ee:	e0 2d       	mov	r30, r0
 9f0:	ee 0f       	add	r30, r30
 9f2:	ff 1f       	adc	r31, r31
 9f4:	e0 5b       	subi	r30, 0xB0	; 176
 9f6:	fb 4e       	sbci	r31, 0xEB	; 235
 9f8:	01 90       	ld	r0, Z+
 9fa:	f0 81       	ld	r31, Z
 9fc:	e0 2d       	mov	r30, r0
 9fe:	27 a1       	ldd	r18, Z+39	; 0x27
 a00:	30 a5       	ldd	r19, Z+40	; 0x28
 a02:	fc 01       	movw	r30, r24
 a04:	e0 5e       	subi	r30, 0xE0	; 224
 a06:	fe 4f       	sbci	r31, 0xFE	; 254
 a08:	31 83       	std	Z+1, r19	; 0x01
 a0a:	20 83       	st	Z, r18
		if (Cp->priority == SYSTEM) {
 a0c:	7b 97       	sbiw	r30, 0x1b	; 27
 a0e:	20 81       	ld	r18, Z
 a10:	31 81       	ldd	r19, Z+1	; 0x01
 a12:	23 30       	cpi	r18, 0x03	; 3
 a14:	31 05       	cpc	r19, r1
 a16:	41 f4       	brne	.+16     	; 0xa28 <kernel_receive+0xae>
			enqueue(&Cp, &SysQueue, &SysCount);
 a18:	44 e0       	ldi	r20, 0x04	; 4
 a1a:	52 e0       	ldi	r21, 0x02	; 2
 a1c:	60 e3       	ldi	r22, 0x30	; 48
 a1e:	74 e1       	ldi	r23, 0x14	; 20
 a20:	8e e0       	ldi	r24, 0x0E	; 14
 a22:	92 e0       	ldi	r25, 0x02	; 2
 a24:	23 d1       	rcall	.+582    	; 0xc6c <enqueue>
 a26:	0e c0       	rjmp	.+28     	; 0xa44 <kernel_receive+0xca>
		} else if (Cp->priority == RR) {
 a28:	fc 01       	movw	r30, r24
 a2a:	eb 5f       	subi	r30, 0xFB	; 251
 a2c:	fe 4f       	sbci	r31, 0xFE	; 254
 a2e:	80 81       	ld	r24, Z
 a30:	91 81       	ldd	r25, Z+1	; 0x01
 a32:	01 97       	sbiw	r24, 0x01	; 1
 a34:	39 f4       	brne	.+14     	; 0xa44 <kernel_receive+0xca>
			enqueue(&Cp, &RRQueue, &RRCount);
 a36:	40 e0       	ldi	r20, 0x00	; 0
 a38:	52 e0       	ldi	r21, 0x02	; 2
 a3a:	64 e9       	ldi	r22, 0x94	; 148
 a3c:	74 e1       	ldi	r23, 0x14	; 20
 a3e:	8e e0       	ldi	r24, 0x0E	; 14
 a40:	92 e0       	ldi	r25, 0x02	; 2
 a42:	14 d1       	rcall	.+552    	; 0xc6c <enqueue>
		}
		ChannelArray[Cp->receiverChannel]->sender = NULL;
 a44:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 a48:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 a4c:	e2 5e       	subi	r30, 0xE2	; 226
 a4e:	fe 4f       	sbci	r31, 0xFE	; 254
 a50:	01 90       	ld	r0, Z+
 a52:	f0 81       	ld	r31, Z
 a54:	e0 2d       	mov	r30, r0
 a56:	ee 0f       	add	r30, r30
 a58:	ff 1f       	adc	r31, r31
 a5a:	e0 5b       	subi	r30, 0xB0	; 176
 a5c:	fb 4e       	sbci	r31, 0xEB	; 235
 a5e:	01 90       	ld	r0, Z+
 a60:	f0 81       	ld	r31, Z
 a62:	e0 2d       	mov	r30, r0
 a64:	13 82       	std	Z+3, r1	; 0x03
 a66:	12 82       	std	Z+2, r1	; 0x02
 a68:	08 95       	ret

00000a6a <OS_Start>:
}

/**
  * This function starts the RTOS after creating a_main
  */
void OS_Start() {   
 a6a:	df 92       	push	r13
 a6c:	ef 92       	push	r14
 a6e:	ff 92       	push	r15
 a70:	0f 93       	push	r16
 a72:	1f 93       	push	r17
 a74:	cf 93       	push	r28
 a76:	df 93       	push	r29
	if ( (! KernelActive) && (Tasks > 0)) {
 a78:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <KernelActive>
 a7c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <KernelActive+0x1>
 a80:	89 2b       	or	r24, r25
 a82:	09 f0       	breq	.+2      	; 0xa86 <OS_Start+0x1c>
 a84:	db c0       	rjmp	.+438    	; 0xc3c <OS_Start+0x1d2>
 a86:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Tasks>
 a8a:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Tasks+0x1>
 a8e:	89 2b       	or	r24, r25
 a90:	09 f4       	brne	.+2      	; 0xa94 <OS_Start+0x2a>
 a92:	d4 c0       	rjmp	.+424    	; 0xc3c <OS_Start+0x1d2>
		Disable_Interrupt();
 a94:	f8 94       	cli

		KernelActive = 1;
 a96:	81 e0       	ldi	r24, 0x01	; 1
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <KernelActive+0x1>
 a9e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <KernelActive>
  * corresponding kernel function on its behalf.
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */
 aa2:	31 dc       	rcall	.-1950   	; 0x306 <Dispatch>
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
			break;
		case NEXT:
			Cp->state = READY;
 aa4:	dd 24       	eor	r13, r13
 aa6:	d3 94       	inc	r13
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */

	while(1) {
		Cp->request = NONE; /* clear its request */
 aa8:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Cp>
 aac:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Cp+0x1>
 ab0:	df 01       	movw	r26, r30
 ab2:	a5 5f       	subi	r26, 0xF5	; 245
 ab4:	be 4f       	sbci	r27, 0xFE	; 254
 ab6:	1c 92       	st	X, r1

		/* activate this newly selected task */
		CurrentSp = Cp->sp;
 ab8:	82 81       	ldd	r24, Z+2	; 0x02
 aba:	93 81       	ldd	r25, Z+3	; 0x03
 abc:	90 93 71 14 	sts	0x1471, r25	; 0x801471 <CurrentSp+0x1>
 ac0:	80 93 70 14 	sts	0x1470, r24	; 0x801470 <CurrentSp>

		Exit_Kernel();    /* or CSwitch() */
 ac4:	2a db       	rcall	.-2476   	; 0x11a <CSwitch>

		/* if this task makes a system call, it will return to here! */

		/* save the Cp's stack pointer */
		Cp->sp = CurrentSp;
 ac6:	c0 91 0e 02 	lds	r28, 0x020E	; 0x80020e <Cp>
 aca:	d0 91 0f 02 	lds	r29, 0x020F	; 0x80020f <Cp+0x1>
 ace:	80 91 70 14 	lds	r24, 0x1470	; 0x801470 <CurrentSp>
 ad2:	90 91 71 14 	lds	r25, 0x1471	; 0x801471 <CurrentSp+0x1>
 ad6:	9b 83       	std	Y+3, r25	; 0x03
 ad8:	8a 83       	std	Y+2, r24	; 0x02

		switch(Cp->request){
 ada:	fe 01       	movw	r30, r28
 adc:	e5 5f       	subi	r30, 0xF5	; 245
 ade:	fe 4f       	sbci	r31, 0xFE	; 254
 ae0:	e0 81       	ld	r30, Z
 ae2:	8e 2f       	mov	r24, r30
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	fc 01       	movw	r30, r24
 ae8:	31 97       	sbiw	r30, 0x01	; 1
 aea:	e8 30       	cpi	r30, 0x08	; 8
 aec:	f1 05       	cpc	r31, r1
 aee:	e0 f6       	brcc	.-72     	; 0xaa8 <OS_Start+0x3e>
 af0:	88 27       	eor	r24, r24
 af2:	ee 58       	subi	r30, 0x8E	; 142
 af4:	ff 4f       	sbci	r31, 0xFF	; 255
 af6:	8f 4f       	sbci	r24, 0xFF	; 255
 af8:	7e c1       	rjmp	.+764    	; 0xdf6 <__tablejump2__>
		case CREATE:
			Cp->response = Kernel_Create_Task( Cp->code, Cp->priority, Cp->arg, -1, -1, -1);
 afa:	fe 01       	movw	r30, r28
 afc:	e9 5f       	subi	r30, 0xF9	; 249
 afe:	fe 4f       	sbci	r31, 0xFE	; 254
 b00:	40 81       	ld	r20, Z
 b02:	51 81       	ldd	r21, Z+1	; 0x01
 b04:	32 97       	sbiw	r30, 0x02	; 2
 b06:	60 81       	ld	r22, Z
 b08:	71 81       	ldd	r23, Z+1	; 0x01
 b0a:	34 96       	adiw	r30, 0x04	; 4
 b0c:	80 81       	ld	r24, Z
 b0e:	91 81       	ldd	r25, Z+1	; 0x01
 b10:	ee 24       	eor	r14, r14
 b12:	ea 94       	dec	r14
 b14:	fe 2c       	mov	r15, r14
 b16:	0f ef       	ldi	r16, 0xFF	; 255
 b18:	1f ef       	ldi	r17, 0xFF	; 255
 b1a:	2f ef       	ldi	r18, 0xFF	; 255
 b1c:	3f ef       	ldi	r19, 0xFF	; 255
 b1e:	fe dc       	rcall	.-1540   	; 0x51c <Kernel_Create_Task>
 b20:	c4 5f       	subi	r28, 0xF4	; 244
 b22:	de 4f       	sbci	r29, 0xFE	; 254
 b24:	99 83       	std	Y+1, r25	; 0x01
 b26:	88 83       	st	Y, r24
 b28:	bf cf       	rjmp	.-130    	; 0xaa8 <OS_Start+0x3e>
			break;
		case CREATE_SYS:
			Cp->response = Kernel_Create_Task( Cp->code, SYSTEM, Cp->arg, -1, -1, -1);
 b2a:	fe 01       	movw	r30, r28
 b2c:	e9 5f       	subi	r30, 0xF9	; 249
 b2e:	fe 4f       	sbci	r31, 0xFE	; 254
 b30:	40 81       	ld	r20, Z
 b32:	51 81       	ldd	r21, Z+1	; 0x01
 b34:	32 96       	adiw	r30, 0x02	; 2
 b36:	80 81       	ld	r24, Z
 b38:	91 81       	ldd	r25, Z+1	; 0x01
 b3a:	ee 24       	eor	r14, r14
 b3c:	ea 94       	dec	r14
 b3e:	fe 2c       	mov	r15, r14
 b40:	0f ef       	ldi	r16, 0xFF	; 255
 b42:	1f ef       	ldi	r17, 0xFF	; 255
 b44:	2f ef       	ldi	r18, 0xFF	; 255
 b46:	3f ef       	ldi	r19, 0xFF	; 255
 b48:	63 e0       	ldi	r22, 0x03	; 3
 b4a:	70 e0       	ldi	r23, 0x00	; 0
 b4c:	e7 dc       	rcall	.-1586   	; 0x51c <Kernel_Create_Task>
 b4e:	c4 5f       	subi	r28, 0xF4	; 244
 b50:	de 4f       	sbci	r29, 0xFE	; 254
 b52:	99 83       	std	Y+1, r25	; 0x01
 b54:	88 83       	st	Y, r24
 b56:	a8 cf       	rjmp	.-176    	; 0xaa8 <OS_Start+0x3e>
			break;
		case CREATE_PERIODIC:
			Cp->response = Kernel_Create_Task( Cp->code, PERIODIC, Cp->arg, Cp->offset, Cp->wcet, Cp->period);
 b58:	fe 01       	movw	r30, r28
 b5a:	e0 5f       	subi	r30, 0xF0	; 240
 b5c:	fe 4f       	sbci	r31, 0xFE	; 254
 b5e:	e0 80       	ld	r14, Z
 b60:	f1 80       	ldd	r15, Z+1	; 0x01
 b62:	32 96       	adiw	r30, 0x02	; 2
 b64:	00 81       	ld	r16, Z
 b66:	11 81       	ldd	r17, Z+1	; 0x01
 b68:	32 96       	adiw	r30, 0x02	; 2
 b6a:	20 81       	ld	r18, Z
 b6c:	31 81       	ldd	r19, Z+1	; 0x01
 b6e:	3d 97       	sbiw	r30, 0x0d	; 13
 b70:	40 81       	ld	r20, Z
 b72:	51 81       	ldd	r21, Z+1	; 0x01
 b74:	32 96       	adiw	r30, 0x02	; 2
 b76:	80 81       	ld	r24, Z
 b78:	91 81       	ldd	r25, Z+1	; 0x01
 b7a:	62 e0       	ldi	r22, 0x02	; 2
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	ce dc       	rcall	.-1636   	; 0x51c <Kernel_Create_Task>
 b80:	c4 5f       	subi	r28, 0xF4	; 244
 b82:	de 4f       	sbci	r29, 0xFE	; 254
 b84:	99 83       	std	Y+1, r25	; 0x01
 b86:	88 83       	st	Y, r24
 b88:	8f cf       	rjmp	.-226    	; 0xaa8 <OS_Start+0x3e>
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
 b8a:	fe 01       	movw	r30, r28
 b8c:	e9 5f       	subi	r30, 0xF9	; 249
 b8e:	fe 4f       	sbci	r31, 0xFE	; 254
 b90:	40 81       	ld	r20, Z
 b92:	51 81       	ldd	r21, Z+1	; 0x01
 b94:	32 96       	adiw	r30, 0x02	; 2
 b96:	80 81       	ld	r24, Z
 b98:	91 81       	ldd	r25, Z+1	; 0x01
 b9a:	ee 24       	eor	r14, r14
 b9c:	ea 94       	dec	r14
 b9e:	fe 2c       	mov	r15, r14
 ba0:	0f ef       	ldi	r16, 0xFF	; 255
 ba2:	1f ef       	ldi	r17, 0xFF	; 255
 ba4:	2f ef       	ldi	r18, 0xFF	; 255
 ba6:	3f ef       	ldi	r19, 0xFF	; 255
 ba8:	61 e0       	ldi	r22, 0x01	; 1
 baa:	70 e0       	ldi	r23, 0x00	; 0
 bac:	b7 dc       	rcall	.-1682   	; 0x51c <Kernel_Create_Task>
 bae:	c4 5f       	subi	r28, 0xF4	; 244
 bb0:	de 4f       	sbci	r29, 0xFE	; 254
 bb2:	99 83       	std	Y+1, r25	; 0x01
 bb4:	88 83       	st	Y, r24
 bb6:	78 cf       	rjmp	.-272    	; 0xaa8 <OS_Start+0x3e>
			break;
		case NEXT:
			Cp->state = READY;
 bb8:	fe 01       	movw	r30, r28
 bba:	ec 5f       	subi	r30, 0xFC	; 252
 bbc:	fe 4f       	sbci	r31, 0xFE	; 254
 bbe:	d0 82       	st	Z, r13
			if (Cp->priority == SYSTEM) {
 bc0:	31 96       	adiw	r30, 0x01	; 1
 bc2:	80 81       	ld	r24, Z
 bc4:	91 81       	ldd	r25, Z+1	; 0x01
 bc6:	03 97       	sbiw	r24, 0x03	; 3
 bc8:	41 f4       	brne	.+16     	; 0xbda <OS_Start+0x170>
				enqueue(&Cp, &SysQueue, &SysCount);
 bca:	44 e0       	ldi	r20, 0x04	; 4
 bcc:	52 e0       	ldi	r21, 0x02	; 2
 bce:	60 e3       	ldi	r22, 0x30	; 48
 bd0:	74 e1       	ldi	r23, 0x14	; 20
 bd2:	8e e0       	ldi	r24, 0x0E	; 14
 bd4:	92 e0       	ldi	r25, 0x02	; 2
 bd6:	4a d0       	rcall	.+148    	; 0xc6c <enqueue>
 bd8:	1c c0       	rjmp	.+56     	; 0xc12 <OS_Start+0x1a8>
			} else if (Cp->priority == PERIODIC) {
 bda:	fe 01       	movw	r30, r28
 bdc:	eb 5f       	subi	r30, 0xFB	; 251
 bde:	fe 4f       	sbci	r31, 0xFE	; 254
 be0:	80 81       	ld	r24, Z
 be2:	91 81       	ldd	r25, Z+1	; 0x01
 be4:	02 97       	sbiw	r24, 0x02	; 2
 be6:	41 f4       	brne	.+16     	; 0xbf8 <OS_Start+0x18e>
				enqueuePeriodic(&Cp, &PeriodicQueue, &PeriodicCount);
 be8:	42 e0       	ldi	r20, 0x02	; 2
 bea:	52 e0       	ldi	r21, 0x02	; 2
 bec:	62 e7       	ldi	r22, 0x72	; 114
 bee:	74 e1       	ldi	r23, 0x14	; 20
 bf0:	8e e0       	ldi	r24, 0x0E	; 14
 bf2:	92 e0       	ldi	r25, 0x02	; 2
 bf4:	89 d0       	rcall	.+274    	; 0xd08 <enqueuePeriodic>
 bf6:	0d c0       	rjmp	.+26     	; 0xc12 <OS_Start+0x1a8>
			} else if (Cp->priority == RR) {
 bf8:	cb 5f       	subi	r28, 0xFB	; 251
 bfa:	de 4f       	sbci	r29, 0xFE	; 254
 bfc:	88 81       	ld	r24, Y
 bfe:	99 81       	ldd	r25, Y+1	; 0x01
 c00:	01 97       	sbiw	r24, 0x01	; 1
 c02:	39 f4       	brne	.+14     	; 0xc12 <OS_Start+0x1a8>
				enqueue(&Cp, &RRQueue, &RRCount);
 c04:	40 e0       	ldi	r20, 0x00	; 0
 c06:	52 e0       	ldi	r21, 0x02	; 2
 c08:	64 e9       	ldi	r22, 0x94	; 148
 c0a:	74 e1       	ldi	r23, 0x14	; 20
 c0c:	8e e0       	ldi	r24, 0x0E	; 14
 c0e:	92 e0       	ldi	r25, 0x02	; 2
 c10:	2d d0       	rcall	.+90     	; 0xc6c <enqueue>
			}
			Dispatch();
 c12:	79 db       	rcall	.-2318   	; 0x306 <Dispatch>
 c14:	49 cf       	rjmp	.-366    	; 0xaa8 <OS_Start+0x3e>
		case NONE:
			break;
		case SEND:
			break;
		case RECEIVE:
			kernel_receive();
 c16:	b1 de       	rcall	.-670    	; 0x97a <kernel_receive>
 c18:	47 cf       	rjmp	.-370    	; 0xaa8 <OS_Start+0x3e>

/**
  *  Terminate a task
  */
static void Kernel_Terminate_Task() {
	Cp->state = DEAD;
 c1a:	fe 01       	movw	r30, r28
 c1c:	ec 5f       	subi	r30, 0xFC	; 252
 c1e:	fe 4f       	sbci	r31, 0xFE	; 254
 c20:	10 82       	st	Z, r1
	Cp->processID = 0;
 c22:	19 82       	std	Y+1, r1	; 0x01
 c24:	18 82       	st	Y, r1
	Tasks--;
 c26:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Tasks>
 c2a:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Tasks+0x1>
 c2e:	01 97       	sbiw	r24, 0x01	; 1
 c30:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <Tasks+0x1>
 c34:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Tasks>
			kernel_receive();
			break;
		case TERMINATE:
			/* deallocate all resources used by this task */
			Kernel_Terminate_Task();
			Dispatch();
 c38:	66 db       	rcall	.-2356   	; 0x306 <Dispatch>
 c3a:	36 cf       	rjmp	.-404    	; 0xaa8 <OS_Start+0x3e>

		KernelActive = 1;
		Next_Kernel_Request();
		/* SHOULD NEVER GET HERE!!! */
	}
}
 c3c:	df 91       	pop	r29
 c3e:	cf 91       	pop	r28
 c40:	1f 91       	pop	r17
 c42:	0f 91       	pop	r16
 c44:	ff 90       	pop	r15
 c46:	ef 90       	pop	r14
 c48:	df 90       	pop	r13
 c4a:	08 95       	ret

00000c4c <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	DDRA |= (1<<PA4);
 c4c:	0c 9a       	sbi	0x01, 4	; 1
	PORTA &= ~(1<<PA4);
 c4e:	14 98       	cbi	0x02, 4	; 2

	DDRA |= (1<<PA5);
 c50:	0d 9a       	sbi	0x01, 5	; 1
	PORTA &= ~(1<<PA5);
 c52:	15 98       	cbi	0x02, 5	; 2

	DDRA |= (1<<PA3);
 c54:	0b 9a       	sbi	0x01, 3	; 1
	PORTA &= ~(1<<PA3);
 c56:	13 98       	cbi	0x02, 3	; 2

	setup();
 c58:	f2 dd       	rcall	.-1052   	; 0x83e <setup>

	OS_Init();
 c5a:	a1 dc       	rcall	.-1726   	; 0x59e <OS_Init>
	Task_Create_Idle();
 c5c:	64 dd       	rcall	.-1336   	; 0x726 <Task_Create_Idle>
	Task_Create_System(a_main, 1);
 c5e:	61 e0       	ldi	r22, 0x01	; 1
 c60:	70 e0       	ldi	r23, 0x00	; 0
 c62:	88 e4       	ldi	r24, 0x48	; 72
 c64:	91 e0       	ldi	r25, 0x01	; 1
 c66:	4b dd       	rcall	.-1386   	; 0x6fe <Task_Create_System>
	OS_Start();
 c68:	00 cf       	rjmp	.-512    	; 0xa6a <OS_Start>
 c6a:	08 95       	ret

00000c6c <enqueue>:
}

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
 c6c:	cf 93       	push	r28
 c6e:	df 93       	push	r29
 c70:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
 c72:	28 81       	ld	r18, Y
 c74:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
 c76:	2f 30       	cpi	r18, 0x0F	; 15
 c78:	31 05       	cpc	r19, r1
 c7a:	29 f1       	breq	.+74     	; 0xcc6 <enqueue+0x5a>
        return NULL;
    }

    int i = (*QCount) - 1;
 c7c:	e8 81       	ld	r30, Y
 c7e:	f9 81       	ldd	r31, Y+1	; 0x01
 c80:	9f 01       	movw	r18, r30
 c82:	21 50       	subi	r18, 0x01	; 1
 c84:	31 09       	sbc	r19, r1
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
 c86:	72 f0       	brmi	.+28     	; 0xca4 <enqueue+0x38>
 c88:	ee 0f       	add	r30, r30
 c8a:	ff 1f       	adc	r31, r31
 c8c:	e6 0f       	add	r30, r22
 c8e:	f7 1f       	adc	r31, r23
 c90:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
 c92:	32 91       	ld	r19, -Z
 c94:	22 91       	ld	r18, -Z
 c96:	33 83       	std	Z+3, r19	; 0x03
 c98:	22 83       	std	Z+2, r18	; 0x02

    int i = (*QCount) - 1;
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
 c9a:	ea 17       	cp	r30, r26
 c9c:	fb 07       	cpc	r31, r27
 c9e:	c9 f7       	brne	.-14     	; 0xc92 <enqueue+0x26>
        Queue[i+1] = Queue[i];
        i--;
 ca0:	2f ef       	ldi	r18, 0xFF	; 255
 ca2:	3f ef       	ldi	r19, 0xFF	; 255
        temp = Queue[i];
    }

    Queue[i+1] = *p;
 ca4:	fc 01       	movw	r30, r24
 ca6:	80 81       	ld	r24, Z
 ca8:	91 81       	ldd	r25, Z+1	; 0x01
 caa:	2f 5f       	subi	r18, 0xFF	; 255
 cac:	3f 4f       	sbci	r19, 0xFF	; 255
 cae:	22 0f       	add	r18, r18
 cb0:	33 1f       	adc	r19, r19
 cb2:	fb 01       	movw	r30, r22
 cb4:	e2 0f       	add	r30, r18
 cb6:	f3 1f       	adc	r31, r19
 cb8:	91 83       	std	Z+1, r25	; 0x01
 cba:	80 83       	st	Z, r24
    (*QCount)++;
 cbc:	88 81       	ld	r24, Y
 cbe:	99 81       	ldd	r25, Y+1	; 0x01
 cc0:	01 96       	adiw	r24, 0x01	; 1
 cc2:	99 83       	std	Y+1, r25	; 0x01
 cc4:	88 83       	st	Y, r24
}
 cc6:	df 91       	pop	r29
 cc8:	cf 91       	pop	r28
 cca:	08 95       	ret

00000ccc <dequeue>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
 ccc:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
 cce:	2d 91       	ld	r18, X+
 cd0:	3c 91       	ld	r19, X
 cd2:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
 cd4:	23 2b       	or	r18, r19
 cd6:	a9 f0       	breq	.+42     	; 0xd02 <dequeue+0x36>
	   return NULL;
   }

   volatile PD *result = (Queue[(*QCount)-1]);
 cd8:	2d 91       	ld	r18, X+
 cda:	3c 91       	ld	r19, X
 cdc:	11 97       	sbiw	r26, 0x01	; 1
 cde:	f9 01       	movw	r30, r18
 ce0:	e1 50       	subi	r30, 0x01	; 1
 ce2:	f0 48       	sbci	r31, 0x80	; 128
 ce4:	ee 0f       	add	r30, r30
 ce6:	ff 1f       	adc	r31, r31
 ce8:	e8 0f       	add	r30, r24
 cea:	f9 1f       	adc	r31, r25
 cec:	80 81       	ld	r24, Z
 cee:	91 81       	ldd	r25, Z+1	; 0x01
   (*QCount)--;
 cf0:	2d 91       	ld	r18, X+
 cf2:	3c 91       	ld	r19, X
 cf4:	11 97       	sbiw	r26, 0x01	; 1
 cf6:	21 50       	subi	r18, 0x01	; 1
 cf8:	31 09       	sbc	r19, r1
 cfa:	11 96       	adiw	r26, 0x01	; 1
 cfc:	3c 93       	st	X, r19
 cfe:	2e 93       	st	-X, r18

   return result;
 d00:	08 95       	ret
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
	   return NULL;
 d02:	80 e0       	ldi	r24, 0x00	; 0
 d04:	90 e0       	ldi	r25, 0x00	; 0

   volatile PD *result = (Queue[(*QCount)-1]);
   (*QCount)--;

   return result;
}
 d06:	08 95       	ret

00000d08 <enqueuePeriodic>:

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
 d08:	cf 92       	push	r12
 d0a:	df 92       	push	r13
 d0c:	ef 92       	push	r14
 d0e:	ff 92       	push	r15
 d10:	0f 93       	push	r16
 d12:	1f 93       	push	r17
 d14:	cf 93       	push	r28
 d16:	df 93       	push	r29
 d18:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
 d1a:	ea 01       	movw	r28, r20
 d1c:	28 81       	ld	r18, Y
 d1e:	39 81       	ldd	r19, Y+1	; 0x01

   return result;
}

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
	if(isFull(QCount)) {
 d20:	2f 30       	cpi	r18, 0x0F	; 15
 d22:	31 05       	cpc	r19, r1
 d24:	09 f4       	brne	.+2      	; 0xd28 <enqueuePeriodic+0x20>
 d26:	4a c0       	rjmp	.+148    	; 0xdbc <enqueuePeriodic+0xb4>
		return;
	}

	int i = (*QCount) - 1;
 d28:	28 81       	ld	r18, Y
 d2a:	39 81       	ldd	r19, Y+1	; 0x01
 d2c:	21 50       	subi	r18, 0x01	; 1
 d2e:	31 09       	sbc	r19, r1

	volatile PD *new = *p;
 d30:	fc 01       	movw	r30, r24
 d32:	00 81       	ld	r16, Z
 d34:	11 81       	ldd	r17, Z+1	; 0x01

	volatile PD *temp = Queue[i];
 d36:	f9 01       	movw	r30, r18
 d38:	ee 0f       	add	r30, r30
 d3a:	ff 1f       	adc	r31, r31
 d3c:	db 01       	movw	r26, r22
 d3e:	ae 0f       	add	r26, r30
 d40:	bf 1f       	adc	r27, r31
 d42:	4d 91       	ld	r20, X+
 d44:	5c 91       	ld	r21, X

	while(i >= 0 && (new->countdown >= temp->countdown)) {
 d46:	33 23       	and	r19, r19
 d48:	3c f1       	brlt	.+78     	; 0xd98 <enqueuePeriodic+0x90>
 d4a:	d8 01       	movw	r26, r16
 d4c:	aa 5e       	subi	r26, 0xEA	; 234
 d4e:	be 4f       	sbci	r27, 0xFE	; 254
 d50:	ed 90       	ld	r14, X+
 d52:	fc 90       	ld	r15, X
 d54:	da 01       	movw	r26, r20
 d56:	aa 5e       	subi	r26, 0xEA	; 234
 d58:	be 4f       	sbci	r27, 0xFE	; 254
 d5a:	4d 91       	ld	r20, X+
 d5c:	5c 91       	ld	r21, X
 d5e:	e4 16       	cp	r14, r20
 d60:	f5 06       	cpc	r15, r21
 d62:	d4 f0       	brlt	.+52     	; 0xd98 <enqueuePeriodic+0x90>
 d64:	e6 0f       	add	r30, r22
 d66:	f7 1f       	adc	r31, r23
 d68:	0a 5e       	subi	r16, 0xEA	; 234
 d6a:	1e 4f       	sbci	r17, 0xFE	; 254
		Queue[i+1] = Queue[i];
 d6c:	a0 81       	ld	r26, Z
 d6e:	b1 81       	ldd	r27, Z+1	; 0x01
 d70:	b3 83       	std	Z+3, r27	; 0x03
 d72:	a2 83       	std	Z+2, r26	; 0x02
		i--;
 d74:	21 50       	subi	r18, 0x01	; 1
 d76:	31 09       	sbc	r19, r1
		temp = Queue[i];
 d78:	b2 91       	ld	r27, -Z
 d7a:	a2 91       	ld	r26, -Z

	volatile PD *new = *p;

	volatile PD *temp = Queue[i];

	while(i >= 0 && (new->countdown >= temp->countdown)) {
 d7c:	2f 3f       	cpi	r18, 0xFF	; 255
 d7e:	4f ef       	ldi	r20, 0xFF	; 255
 d80:	34 07       	cpc	r19, r20
 d82:	51 f0       	breq	.+20     	; 0xd98 <enqueuePeriodic+0x90>
 d84:	e8 01       	movw	r28, r16
 d86:	e8 80       	ld	r14, Y
 d88:	f9 80       	ldd	r15, Y+1	; 0x01
 d8a:	aa 5e       	subi	r26, 0xEA	; 234
 d8c:	be 4f       	sbci	r27, 0xFE	; 254
 d8e:	4d 91       	ld	r20, X+
 d90:	5c 91       	ld	r21, X
 d92:	e4 16       	cp	r14, r20
 d94:	f5 06       	cpc	r15, r21
 d96:	54 f7       	brge	.-44     	; 0xd6c <enqueuePeriodic+0x64>
		Queue[i+1] = Queue[i];
		i--;
		temp = Queue[i];
	}

	Queue[i+1] = *p;
 d98:	fc 01       	movw	r30, r24
 d9a:	80 81       	ld	r24, Z
 d9c:	91 81       	ldd	r25, Z+1	; 0x01
 d9e:	2f 5f       	subi	r18, 0xFF	; 255
 da0:	3f 4f       	sbci	r19, 0xFF	; 255
 da2:	22 0f       	add	r18, r18
 da4:	33 1f       	adc	r19, r19
 da6:	fb 01       	movw	r30, r22
 da8:	e2 0f       	add	r30, r18
 daa:	f3 1f       	adc	r31, r19
 dac:	91 83       	std	Z+1, r25	; 0x01
 dae:	80 83       	st	Z, r24
	(*QCount)++;
 db0:	e6 01       	movw	r28, r12
 db2:	88 81       	ld	r24, Y
 db4:	99 81       	ldd	r25, Y+1	; 0x01
 db6:	01 96       	adiw	r24, 0x01	; 1
 db8:	99 83       	std	Y+1, r25	; 0x01
 dba:	88 83       	st	Y, r24
}
 dbc:	df 91       	pop	r29
 dbe:	cf 91       	pop	r28
 dc0:	1f 91       	pop	r17
 dc2:	0f 91       	pop	r16
 dc4:	ff 90       	pop	r15
 dc6:	ef 90       	pop	r14
 dc8:	df 90       	pop	r13
 dca:	cf 90       	pop	r12
 dcc:	08 95       	ret

00000dce <peek>:

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
 dce:	fb 01       	movw	r30, r22
 dd0:	20 81       	ld	r18, Z
 dd2:	31 81       	ldd	r19, Z+1	; 0x01
	Queue[i+1] = *p;
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
 dd4:	23 2b       	or	r18, r19
 dd6:	61 f0       	breq	.+24     	; 0xdf0 <peek+0x22>
		return NULL;
	}
	volatile PD *result = (Queue[(*QCount)-1]);
 dd8:	20 81       	ld	r18, Z
 dda:	31 81       	ldd	r19, Z+1	; 0x01
 ddc:	f9 01       	movw	r30, r18
 dde:	e1 50       	subi	r30, 0x01	; 1
 de0:	f0 48       	sbci	r31, 0x80	; 128
 de2:	ee 0f       	add	r30, r30
 de4:	ff 1f       	adc	r31, r31
 de6:	e8 0f       	add	r30, r24
 de8:	f9 1f       	adc	r31, r25
 dea:	80 81       	ld	r24, Z
 dec:	91 81       	ldd	r25, Z+1	; 0x01
	return result;
 dee:	08 95       	ret
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
		return NULL;
 df0:	80 e0       	ldi	r24, 0x00	; 0
 df2:	90 e0       	ldi	r25, 0x00	; 0
	}
	volatile PD *result = (Queue[(*QCount)-1]);
	return result;
 df4:	08 95       	ret

00000df6 <__tablejump2__>:
 df6:	ee 0f       	add	r30, r30
 df8:	ff 1f       	adc	r31, r31
 dfa:	88 1f       	adc	r24, r24
 dfc:	8b bf       	out	0x3b, r24	; 59
 dfe:	07 90       	elpm	r0, Z+
 e00:	f6 91       	elpm	r31, Z
 e02:	e0 2d       	mov	r30, r0
 e04:	19 94       	eijmp

00000e06 <_exit>:
 e06:	f8 94       	cli

00000e08 <__stop_program>:
 e08:	ff cf       	rjmp	.-2      	; 0xe08 <__stop_program>
