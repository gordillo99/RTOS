
Project2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800200  00001844  000018d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001844  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001526  0080024e  0080024e  00001926  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001926  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001998  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ce7  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001401  00000000  00000000  0000487f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013dc  00000000  00000000  00005c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000578  00000000  00000000  0000705c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aa5  00000000  00000000  000075d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018a3  00000000  00000000  00008079  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000991c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
       2:	00 00       	nop
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	00 00       	nop
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
       e:	00 00       	nop
      10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
      12:	00 00       	nop
      14:	92 c0       	rjmp	.+292    	; 0x13a <__bad_interrupt>
      16:	00 00       	nop
      18:	90 c0       	rjmp	.+288    	; 0x13a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	9f c4       	rjmp	.+2366   	; 0x984 <__vector_17>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	6a c0       	rjmp	.+212    	; 0x13a <__bad_interrupt>
      66:	00 00       	nop
      68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
      6e:	00 00       	nop
      70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
      72:	00 00       	nop
      74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
      76:	00 00       	nop
      78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
      7e:	00 00       	nop
      80:	e2 c4       	rjmp	.+2500   	; 0xa46 <__vector_32>
      82:	00 00       	nop
      84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
      86:	00 00       	nop
      88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
      8e:	00 00       	nop
      90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
      92:	00 00       	nop
      94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
      96:	00 00       	nop
      98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	48 c0       	rjmp	.+144    	; 0x13a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	46 c0       	rjmp	.+140    	; 0x13a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	44 c0       	rjmp	.+136    	; 0x13a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	42 c0       	rjmp	.+132    	; 0x13a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	40 c0       	rjmp	.+128    	; 0x13a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c0       	rjmp	.+124    	; 0x13a <__bad_interrupt>
      be:	00 00       	nop
      c0:	3c c0       	rjmp	.+120    	; 0x13a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3a c0       	rjmp	.+116    	; 0x13a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	38 c0       	rjmp	.+112    	; 0x13a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	36 c0       	rjmp	.+108    	; 0x13a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	34 c0       	rjmp	.+104    	; 0x13a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	32 c0       	rjmp	.+100    	; 0x13a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	30 c0       	rjmp	.+96     	; 0x13a <__bad_interrupt>
      da:	00 00       	nop
      dc:	2e c0       	rjmp	.+92     	; 0x13a <__bad_interrupt>
      de:	00 00       	nop
      e0:	2c c0       	rjmp	.+88     	; 0x13a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc 09       	sbc	r27, r12
      e6:	1a 0a       	sbc	r1, r26
      e8:	02 0a       	sbc	r0, r18
      ea:	d4 09       	sbc	r29, r4
      ec:	40 0a       	sbc	r4, r16
      ee:	7e 0a       	sbc	r7, r30
      f0:	78 0a       	sbc	r7, r24
      f2:	7a 0a       	sbc	r7, r26
      f4:	7c 0a       	sbc	r7, r28
      f6:	76 0a       	sbc	r7, r22

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d1 e2       	ldi	r29, 0x21	; 33
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
     108:	12 e0       	ldi	r17, 0x02	; 2
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	e4 e4       	ldi	r30, 0x44	; 68
     110:	f8 e1       	ldi	r31, 0x18	; 24
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	ae 34       	cpi	r26, 0x4E	; 78
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	27 e1       	ldi	r18, 0x17	; 23
     124:	ae e4       	ldi	r26, 0x4E	; 78
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	a4 37       	cpi	r26, 0x74	; 116
     12e:	b2 07       	cpc	r27, r18
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 98 0a 	call	0x1530	; 0x1530 <main>
     136:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     13c:	0f 92       	push	r0
     13e:	1f 92       	push	r1
     140:	2f 92       	push	r2
     142:	3f 92       	push	r3
     144:	4f 92       	push	r4
     146:	5f 92       	push	r5
     148:	6f 92       	push	r6
     14a:	7f 92       	push	r7
     14c:	8f 92       	push	r8
     14e:	9f 92       	push	r9
     150:	af 92       	push	r10
     152:	bf 92       	push	r11
     154:	cf 92       	push	r12
     156:	df 92       	push	r13
     158:	ef 92       	push	r14
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	2f 93       	push	r18
     162:	3f 93       	push	r19
     164:	4f 93       	push	r20
     166:	5f 93       	push	r21
     168:	6f 93       	push	r22
     16a:	7f 93       	push	r23
     16c:	8f 93       	push	r24
     16e:	9f 93       	push	r25
     170:	af 93       	push	r26
     172:	bf 93       	push	r27
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	ef 93       	push	r30
     17a:	ff 93       	push	r31
     17c:	0f b7       	in	r16, 0x3f	; 63
     17e:	0f 93       	push	r16
     180:	fc b7       	in	r31, 0x3c	; 60
     182:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     184:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     186:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     188:	e0 93 52 17 	sts	0x1752, r30	; 0x801752 <KernelSp>
        sts  KernelSp+1, r31
     18c:	f0 93 53 17 	sts	0x1753, r31	; 0x801753 <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     190:	e0 91 30 17 	lds	r30, 0x1730	; 0x801730 <CurrentSp>
        lds  r31, CurrentSp+1
     194:	f0 91 31 17 	lds	r31, 0x1731	; 0x801731 <CurrentSp+0x1>
        out  SPL, r30
     198:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     19a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     19c:	ff 91       	pop	r31
     19e:	fc bf       	out	0x3c, r31	; 60
     1a0:	0f 91       	pop	r16
     1a2:	0f bf       	out	0x3f, r16	; 63
     1a4:	ff 91       	pop	r31
     1a6:	ef 91       	pop	r30
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	bf 91       	pop	r27
     1ae:	af 91       	pop	r26
     1b0:	9f 91       	pop	r25
     1b2:	8f 91       	pop	r24
     1b4:	7f 91       	pop	r23
     1b6:	6f 91       	pop	r22
     1b8:	5f 91       	pop	r21
     1ba:	4f 91       	pop	r20
     1bc:	3f 91       	pop	r19
     1be:	2f 91       	pop	r18
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	cf 90       	pop	r12
     1cc:	bf 90       	pop	r11
     1ce:	af 90       	pop	r10
     1d0:	9f 90       	pop	r9
     1d2:	8f 90       	pop	r8
     1d4:	7f 90       	pop	r7
     1d6:	6f 90       	pop	r6
     1d8:	5f 90       	pop	r5
     1da:	4f 90       	pop	r4
     1dc:	3f 90       	pop	r3
     1de:	2f 90       	pop	r2
     1e0:	1f 90       	pop	r1
     1e2:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1e4:	18 95       	reti

000001e6 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1e6:	0f 92       	push	r0
     1e8:	1f 92       	push	r1
     1ea:	2f 92       	push	r2
     1ec:	3f 92       	push	r3
     1ee:	4f 92       	push	r4
     1f0:	5f 92       	push	r5
     1f2:	6f 92       	push	r6
     1f4:	7f 92       	push	r7
     1f6:	8f 92       	push	r8
     1f8:	9f 92       	push	r9
     1fa:	af 92       	push	r10
     1fc:	bf 92       	push	r11
     1fe:	cf 92       	push	r12
     200:	df 92       	push	r13
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
     20a:	2f 93       	push	r18
     20c:	3f 93       	push	r19
     20e:	4f 93       	push	r20
     210:	5f 93       	push	r21
     212:	6f 93       	push	r22
     214:	7f 93       	push	r23
     216:	8f 93       	push	r24
     218:	9f 93       	push	r25
     21a:	af 93       	push	r26
     21c:	bf 93       	push	r27
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	ef 93       	push	r30
     224:	ff 93       	push	r31
     226:	0f b7       	in	r16, 0x3f	; 63
     228:	0f 93       	push	r16
     22a:	fc b7       	in	r31, 0x3c	; 60
     22c:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     22e:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     230:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     232:	e0 93 30 17 	sts	0x1730, r30	; 0x801730 <CurrentSp>
        sts  CurrentSp+1, r31
     236:	f0 93 31 17 	sts	0x1731, r31	; 0x801731 <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     23a:	e0 91 52 17 	lds	r30, 0x1752	; 0x801752 <KernelSp>
        lds  r31, KernelSp+1
     23e:	f0 91 53 17 	lds	r31, 0x1753	; 0x801753 <KernelSp+0x1>
        out  SPL, r30
     242:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     244:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     246:	ff 91       	pop	r31
     248:	fc bf       	out	0x3c, r31	; 60
     24a:	0f 91       	pop	r16
     24c:	0f bf       	out	0x3f, r16	; 63
     24e:	ff 91       	pop	r31
     250:	ef 91       	pop	r30
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	bf 91       	pop	r27
     258:	af 91       	pop	r26
     25a:	9f 91       	pop	r25
     25c:	8f 91       	pop	r24
     25e:	7f 91       	pop	r23
     260:	6f 91       	pop	r22
     262:	5f 91       	pop	r21
     264:	4f 91       	pop	r20
     266:	3f 91       	pop	r19
     268:	2f 91       	pop	r18
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	ff 90       	pop	r15
     270:	ef 90       	pop	r14
     272:	df 90       	pop	r13
     274:	cf 90       	pop	r12
     276:	bf 90       	pop	r11
     278:	af 90       	pop	r10
     27a:	9f 90       	pop	r9
     27c:	8f 90       	pop	r8
     27e:	7f 90       	pop	r7
     280:	6f 90       	pop	r6
     282:	5f 90       	pop	r5
     284:	4f 90       	pop	r4
     286:	3f 90       	pop	r3
     288:	2f 90       	pop	r2
     28a:	1f 90       	pop	r1
     28c:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     28e:	08 95       	ret

00000290 <a_main>:
	Task_Create_RR(ASDF4,5);
	Task_Create_System(ASDF5,6);
	Task_Create_System(ASDF3,3);
	Task_Create_RR(ASDF4,4);
	*/
	Task_Create_System(test_too_many_tasks, 0);
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	8b e7       	ldi	r24, 0x7B	; 123
     296:	9b e0       	ldi	r25, 0x0B	; 11
     298:	53 c2       	rjmp	.+1190   	; 0x740 <Task_Create_System>
     29a:	08 95       	ret

0000029c <idle>:
void Write(CHAN ch, int v) {
	if (ChannelArray[ch - 1].state == UNITIALIZED) OS_Abort(6); // trying to use unitialized channel
	Cp->request = ASYNC_SEND;
	Cp->senderChannel = ch;
	Cp->val = v;
	Enter_Kernel();
     29c:	ff cf       	rjmp	.-2      	; 0x29c <idle>

0000029e <Task_Terminate>:
     29e:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <KernelActive>
     2a2:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <KernelActive+0x1>
     2a6:	89 2b       	or	r24, r25
     2a8:	51 f0       	breq	.+20     	; 0x2be <Task_Terminate+0x20>
     2aa:	f8 94       	cli
     2ac:	e0 91 ec 04 	lds	r30, 0x04EC	; 0x8004ec <Cp>
     2b0:	f0 91 ed 04 	lds	r31, 0x04ED	; 0x8004ed <Cp+0x1>
     2b4:	e5 5f       	subi	r30, 0xF5	; 245
     2b6:	fe 4f       	sbci	r31, 0xFE	; 254
     2b8:	86 e0       	ldi	r24, 0x06	; 6
     2ba:	80 83       	st	Z, r24
     2bc:	94 cf       	rjmp	.-216    	; 0x1e6 <Enter_Kernel>
     2be:	08 95       	ret

000002c0 <Kernel_Create_Task_At>:
     2c0:	8f 92       	push	r8
     2c2:	9f 92       	push	r9
     2c4:	af 92       	push	r10
     2c6:	bf 92       	push	r11
     2c8:	cf 92       	push	r12
     2ca:	df 92       	push	r13
     2cc:	ef 92       	push	r14
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	1f 92       	push	r1
     2da:	1f 92       	push	r1
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	9a 83       	std	Y+2, r25	; 0x02
     2e2:	89 83       	std	Y+1, r24	; 0x01
     2e4:	5c 01       	movw	r10, r24
     2e6:	a4 e0       	ldi	r26, 0x04	; 4
     2e8:	aa 0e       	add	r10, r26
     2ea:	b1 1c       	adc	r11, r1
     2ec:	81 2c       	mov	r8, r1
     2ee:	99 24       	eor	r9, r9
     2f0:	93 94       	inc	r9
     2f2:	f5 01       	movw	r30, r10
     2f4:	d4 01       	movw	r26, r8
     2f6:	11 92       	st	Z+, r1
     2f8:	11 97       	sbiw	r26, 0x01	; 1
     2fa:	e9 f7       	brne	.-6      	; 0x2f6 <Kernel_Create_Task_At+0x36>
     2fc:	dc 01       	movw	r26, r24
     2fe:	ad 5f       	subi	r26, 0xFD	; 253
     300:	be 4f       	sbci	r27, 0xFE	; 254
     302:	ef e4       	ldi	r30, 0x4F	; 79
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	ec 93       	st	X, r30
     308:	11 97       	sbiw	r26, 0x01	; 1
     30a:	fc 93       	st	X, r31
     30c:	fc 01       	movw	r30, r24
     30e:	ef 5f       	subi	r30, 0xFF	; 255
     310:	fe 4f       	sbci	r31, 0xFE	; 254
     312:	10 82       	st	Z, r1
     314:	31 97       	sbiw	r30, 0x01	; 1
     316:	60 83       	st	Z, r22
     318:	31 97       	sbiw	r30, 0x01	; 1
     31a:	70 83       	st	Z, r23
     31c:	31 97       	sbiw	r30, 0x01	; 1
     31e:	10 82       	st	Z, r1
     320:	b3 97       	sbiw	r30, 0x23	; 35
     322:	dc 01       	movw	r26, r24
     324:	13 96       	adiw	r26, 0x03	; 3
     326:	fc 93       	st	X, r31
     328:	ee 93       	st	-X, r30
     32a:	12 97       	sbiw	r26, 0x02	; 2
     32c:	be 96       	adiw	r30, 0x2e	; 46
     32e:	71 83       	std	Z+1, r23	; 0x01
     330:	60 83       	st	Z, r22
     332:	32 96       	adiw	r30, 0x02	; 2
     334:	10 82       	st	Z, r1
     336:	60 91 e6 04 	lds	r22, 0x04E6	; 0x8004e6 <pCount>
     33a:	70 91 e7 04 	lds	r23, 0x04E7	; 0x8004e7 <pCount+0x1>
     33e:	fc 01       	movw	r30, r24
     340:	71 83       	std	Z+1, r23	; 0x01
     342:	60 83       	st	Z, r22
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	9a 81       	ldd	r25, Y+2	; 0x02
     348:	fc 01       	movw	r30, r24
     34a:	eb 5f       	subi	r30, 0xFB	; 251
     34c:	fe 4f       	sbci	r31, 0xFE	; 254
     34e:	51 83       	std	Z+1, r21	; 0x01
     350:	40 83       	st	Z, r20
     352:	32 96       	adiw	r30, 0x02	; 2
     354:	31 83       	std	Z+1, r19	; 0x01
     356:	20 83       	st	Z, r18
     358:	3f 96       	adiw	r30, 0x0f	; 15
     35a:	2f ef       	ldi	r18, 0xFF	; 255
     35c:	3f ef       	ldi	r19, 0xFF	; 255
     35e:	31 83       	std	Z+1, r19	; 0x01
     360:	20 83       	st	Z, r18
     362:	32 96       	adiw	r30, 0x02	; 2
     364:	11 82       	std	Z+1, r1	; 0x01
     366:	10 82       	st	Z, r1
     368:	34 97       	sbiw	r30, 0x04	; 4
     36a:	11 83       	std	Z+1, r17	; 0x01
     36c:	00 83       	st	Z, r16
     36e:	34 97       	sbiw	r30, 0x04	; 4
     370:	d1 82       	std	Z+1, r13	; 0x01
     372:	c0 82       	st	Z, r12
     374:	32 96       	adiw	r30, 0x02	; 2
     376:	f1 82       	std	Z+1, r15	; 0x01
     378:	e0 82       	st	Z, r14
     37a:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <Tasks>
     37e:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <Tasks+0x1>
     382:	2f 5f       	subi	r18, 0xFF	; 255
     384:	3f 4f       	sbci	r19, 0xFF	; 255
     386:	30 93 e9 04 	sts	0x04E9, r19	; 0x8004e9 <Tasks+0x1>
     38a:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <Tasks>
     38e:	20 91 e6 04 	lds	r18, 0x04E6	; 0x8004e6 <pCount>
     392:	30 91 e7 04 	lds	r19, 0x04E7	; 0x8004e7 <pCount+0x1>
     396:	2f 5f       	subi	r18, 0xFF	; 255
     398:	3f 4f       	sbci	r19, 0xFF	; 255
     39a:	30 93 e7 04 	sts	0x04E7, r19	; 0x8004e7 <pCount+0x1>
     39e:	20 93 e6 04 	sts	0x04E6, r18	; 0x8004e6 <pCount>
     3a2:	3e 97       	sbiw	r30, 0x0e	; 14
     3a4:	21 e0       	ldi	r18, 0x01	; 1
     3a6:	20 83       	st	Z, r18
     3a8:	43 30       	cpi	r20, 0x03	; 3
     3aa:	51 05       	cpc	r21, r1
     3ac:	49 f4       	brne	.+18     	; 0x3c0 <Kernel_Create_Task_At+0x100>
     3ae:	42 ee       	ldi	r20, 0xE2	; 226
     3b0:	54 e0       	ldi	r21, 0x04	; 4
     3b2:	6e e0       	ldi	r22, 0x0E	; 14
     3b4:	77 e1       	ldi	r23, 0x17	; 23
     3b6:	ce 01       	movw	r24, r28
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	0e 94 af 0a 	call	0x155e	; 0x155e <enqueue>
     3be:	1c c0       	rjmp	.+56     	; 0x3f8 <Kernel_Create_Task_At+0x138>
     3c0:	42 30       	cpi	r20, 0x02	; 2
     3c2:	51 05       	cpc	r21, r1
     3c4:	71 f4       	brne	.+28     	; 0x3e2 <Kernel_Create_Task_At+0x122>
     3c6:	fc 01       	movw	r30, r24
     3c8:	ea 5e       	subi	r30, 0xEA	; 234
     3ca:	fe 4f       	sbci	r31, 0xFE	; 254
     3cc:	11 83       	std	Z+1, r17	; 0x01
     3ce:	00 83       	st	Z, r16
     3d0:	40 ee       	ldi	r20, 0xE0	; 224
     3d2:	54 e0       	ldi	r21, 0x04	; 4
     3d4:	62 e3       	ldi	r22, 0x32	; 50
     3d6:	77 e1       	ldi	r23, 0x17	; 23
     3d8:	ce 01       	movw	r24, r28
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	0e 94 01 0b 	call	0x1602	; 0x1602 <enqueuePeriodic>
     3e0:	0b c0       	rjmp	.+22     	; 0x3f8 <Kernel_Create_Task_At+0x138>
     3e2:	41 30       	cpi	r20, 0x01	; 1
     3e4:	51 05       	cpc	r21, r1
     3e6:	41 f4       	brne	.+16     	; 0x3f8 <Kernel_Create_Task_At+0x138>
     3e8:	4e ed       	ldi	r20, 0xDE	; 222
     3ea:	54 e0       	ldi	r21, 0x04	; 4
     3ec:	64 e5       	ldi	r22, 0x54	; 84
     3ee:	77 e1       	ldi	r23, 0x17	; 23
     3f0:	ce 01       	movw	r24, r28
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	0e 94 af 0a 	call	0x155e	; 0x155e <enqueue>
     3f8:	e9 81       	ldd	r30, Y+1	; 0x01
     3fa:	fa 81       	ldd	r31, Y+2	; 0x02
     3fc:	80 81       	ld	r24, Z
     3fe:	91 81       	ldd	r25, Z+1	; 0x01
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	df 90       	pop	r13
     412:	cf 90       	pop	r12
     414:	bf 90       	pop	r11
     416:	af 90       	pop	r10
     418:	9f 90       	pop	r9
     41a:	8f 90       	pop	r8
     41c:	08 95       	ret

0000041e <Kernel_Create_Task>:
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	e9 01       	movw	r28, r18
     430:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <Tasks>
     434:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <Tasks+0x1>
     438:	20 31       	cpi	r18, 0x10	; 16
     43a:	31 05       	cpc	r19, r1
     43c:	41 f1       	breq	.+80     	; 0x48e <Kernel_Create_Task+0x70>
     43e:	20 91 f2 05 	lds	r18, 0x05F2	; 0x8005f2 <Process+0x104>
     442:	22 23       	and	r18, r18
     444:	71 f0       	breq	.+28     	; 0x462 <Kernel_Create_Task+0x44>
     446:	a4 e1       	ldi	r26, 0x14	; 20
     448:	b7 e0       	ldi	r27, 0x07	; 7
     44a:	e1 e0       	ldi	r30, 0x01	; 1
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	3c 91       	ld	r19, X
     450:	33 23       	and	r19, r19
     452:	49 f0       	breq	.+18     	; 0x466 <Kernel_Create_Task+0x48>
     454:	31 96       	adiw	r30, 0x01	; 1
     456:	ae 5d       	subi	r26, 0xDE	; 222
     458:	be 4f       	sbci	r27, 0xFE	; 254
     45a:	e0 31       	cpi	r30, 0x10	; 16
     45c:	f1 05       	cpc	r31, r1
     45e:	b9 f7       	brne	.-18     	; 0x44e <Kernel_Create_Task+0x30>
     460:	02 c0       	rjmp	.+4      	; 0x466 <Kernel_Create_Task+0x48>
     462:	e0 e0       	ldi	r30, 0x00	; 0
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	67 01       	movw	r12, r14
     468:	78 01       	movw	r14, r16
     46a:	8e 01       	movw	r16, r28
     46c:	9a 01       	movw	r18, r20
     46e:	ab 01       	movw	r20, r22
     470:	bc 01       	movw	r22, r24
     472:	82 e2       	ldi	r24, 0x22	; 34
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	e8 9f       	mul	r30, r24
     478:	d0 01       	movw	r26, r0
     47a:	e9 9f       	mul	r30, r25
     47c:	b0 0d       	add	r27, r0
     47e:	f8 9f       	mul	r31, r24
     480:	b0 0d       	add	r27, r0
     482:	11 24       	eor	r1, r1
     484:	cd 01       	movw	r24, r26
     486:	82 51       	subi	r24, 0x12	; 18
     488:	9b 4f       	sbci	r25, 0xFB	; 251
     48a:	1a df       	rcall	.-460    	; 0x2c0 <Kernel_Create_Task_At>
     48c:	02 c0       	rjmp	.+4      	; 0x492 <Kernel_Create_Task+0x74>
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	ff 90       	pop	r15
     49c:	ef 90       	pop	r14
     49e:	df 90       	pop	r13
     4a0:	cf 90       	pop	r12
     4a2:	08 95       	ret

000004a4 <OS_Init>:
     4a4:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <Tasks+0x1>
     4a8:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <Tasks>
     4ac:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <KernelActive+0x1>
     4b0:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <KernelActive>
     4b4:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <pCount+0x1>
     4b8:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <pCount>
     4bc:	ee ee       	ldi	r30, 0xEE	; 238
     4be:	f4 e0       	ldi	r31, 0x04	; 4
     4c0:	2e e0       	ldi	r18, 0x0E	; 14
     4c2:	37 e1       	ldi	r19, 0x17	; 23
     4c4:	82 e2       	ldi	r24, 0x22	; 34
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	df 01       	movw	r26, r30
     4ca:	ac 01       	movw	r20, r24
     4cc:	1d 92       	st	X+, r1
     4ce:	41 50       	subi	r20, 0x01	; 1
     4d0:	50 40       	sbci	r21, 0x00	; 0
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <OS_Init+0x28>
     4d4:	df 01       	movw	r26, r30
     4d6:	ac 5f       	subi	r26, 0xFC	; 252
     4d8:	be 4f       	sbci	r27, 0xFE	; 254
     4da:	1c 92       	st	X, r1
     4dc:	11 82       	std	Z+1, r1	; 0x01
     4de:	10 82       	st	Z, r1
     4e0:	ee 5d       	subi	r30, 0xDE	; 222
     4e2:	fe 4f       	sbci	r31, 0xFE	; 254
     4e4:	e2 17       	cp	r30, r18
     4e6:	f3 07       	cpc	r31, r19
     4e8:	79 f7       	brne	.-34     	; 0x4c8 <OS_Init+0x24>
     4ea:	ae e4       	ldi	r26, 0x4E	; 78
     4ec:	b2 e0       	ldi	r27, 0x02	; 2
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	29 e2       	ldi	r18, 0x29	; 41
     4f4:	fd 01       	movw	r30, r26
     4f6:	32 2f       	mov	r19, r18
     4f8:	11 92       	st	Z+, r1
     4fa:	3a 95       	dec	r19
     4fc:	e9 f7       	brne	.-6      	; 0x4f8 <OS_Init+0x54>
     4fe:	28 9f       	mul	r18, r24
     500:	f0 01       	movw	r30, r0
     502:	29 9f       	mul	r18, r25
     504:	f0 0d       	add	r31, r0
     506:	11 24       	eor	r1, r1
     508:	e2 5b       	subi	r30, 0xB2	; 178
     50a:	fd 4f       	sbci	r31, 0xFD	; 253
     50c:	16 a2       	std	Z+38, r1	; 0x26
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	91 83       	std	Z+1, r25	; 0x01
     512:	80 83       	st	Z, r24
     514:	99 96       	adiw	r26, 0x29	; 41
     516:	80 31       	cpi	r24, 0x10	; 16
     518:	91 05       	cpc	r25, r1
     51a:	61 f7       	brne	.-40     	; 0x4f4 <OS_Init+0x50>
     51c:	08 95       	ret

0000051e <OS_Abort>:
     51e:	47 9a       	sbi	0x08, 7	; 8
     520:	47 98       	cbi	0x08, 7	; 8
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 20 0c 	call	0x1840	; 0x1840 <_exit>

0000052a <CheckTimingViolation>:
     52a:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <PeriodicCount>
     52e:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <PeriodicCount+0x1>
     532:	cd 01       	movw	r24, r26
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	da f0       	brmi	.+54     	; 0x56e <CheckTimingViolation+0x44>
     538:	aa 0f       	add	r26, r26
     53a:	bb 1f       	adc	r27, r27
     53c:	ae 5c       	subi	r26, 0xCE	; 206
     53e:	b8 4e       	sbci	r27, 0xE8	; 232
     540:	42 e3       	ldi	r20, 0x32	; 50
     542:	57 e1       	ldi	r21, 0x17	; 23
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	fe 91       	ld	r31, -X
     54a:	ee 91       	ld	r30, -X
     54c:	ea 5e       	subi	r30, 0xEA	; 234
     54e:	fe 4f       	sbci	r31, 0xFE	; 254
     550:	80 81       	ld	r24, Z
     552:	91 81       	ldd	r25, Z+1	; 0x01
     554:	89 2b       	or	r24, r25
     556:	11 f4       	brne	.+4      	; 0x55c <CheckTimingViolation+0x32>
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	a4 17       	cp	r26, r20
     55e:	b5 07       	cpc	r27, r21
     560:	99 f7       	brne	.-26     	; 0x548 <CheckTimingViolation+0x1e>
     562:	22 30       	cpi	r18, 0x02	; 2
     564:	31 05       	cpc	r19, r1
     566:	1c f0       	brlt	.+6      	; 0x56e <CheckTimingViolation+0x44>
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	d8 cf       	rjmp	.-80     	; 0x51e <OS_Abort>
     56e:	08 95       	ret

00000570 <Dispatch>:
     570:	dc df       	rcall	.-72     	; 0x52a <CheckTimingViolation>
     572:	62 ee       	ldi	r22, 0xE2	; 226
     574:	74 e0       	ldi	r23, 0x04	; 4
     576:	8e e0       	ldi	r24, 0x0E	; 14
     578:	97 e1       	ldi	r25, 0x17	; 23
     57a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <dequeue>
     57e:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <Cp+0x1>
     582:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <Cp>
     586:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <PeriodicCount>
     58a:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <PeriodicCount+0x1>
     58e:	89 2b       	or	r24, r25
     590:	e1 f0       	breq	.+56     	; 0x5ca <Dispatch+0x5a>
     592:	60 ee       	ldi	r22, 0xE0	; 224
     594:	74 e0       	ldi	r23, 0x04	; 4
     596:	82 e3       	ldi	r24, 0x32	; 50
     598:	97 e1       	ldi	r25, 0x17	; 23
     59a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <peek>
     59e:	fc 01       	movw	r30, r24
     5a0:	ea 5e       	subi	r30, 0xEA	; 234
     5a2:	fe 4f       	sbci	r31, 0xFE	; 254
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	89 2b       	or	r24, r25
     5aa:	79 f4       	brne	.+30     	; 0x5ca <Dispatch+0x5a>
     5ac:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <Cp>
     5b0:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <Cp+0x1>
     5b4:	89 2b       	or	r24, r25
     5b6:	01 f5       	brne	.+64     	; 0x5f8 <Dispatch+0x88>
     5b8:	60 ee       	ldi	r22, 0xE0	; 224
     5ba:	74 e0       	ldi	r23, 0x04	; 4
     5bc:	82 e3       	ldi	r24, 0x32	; 50
     5be:	97 e1       	ldi	r25, 0x17	; 23
     5c0:	f6 d7       	rcall	.+4076   	; 0x15ae <dequeue>
     5c2:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <Cp+0x1>
     5c6:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <Cp>
     5ca:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <Cp>
     5ce:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <Cp+0x1>
     5d2:	89 2b       	or	r24, r25
     5d4:	89 f4       	brne	.+34     	; 0x5f8 <Dispatch+0x88>
     5d6:	6e ed       	ldi	r22, 0xDE	; 222
     5d8:	74 e0       	ldi	r23, 0x04	; 4
     5da:	84 e5       	ldi	r24, 0x54	; 84
     5dc:	97 e1       	ldi	r25, 0x17	; 23
     5de:	e7 d7       	rcall	.+4046   	; 0x15ae <dequeue>
     5e0:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <Cp+0x1>
     5e4:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <Cp>
     5e8:	89 2b       	or	r24, r25
     5ea:	31 f4       	brne	.+12     	; 0x5f8 <Dispatch+0x88>
     5ec:	8e ee       	ldi	r24, 0xEE	; 238
     5ee:	94 e0       	ldi	r25, 0x04	; 4
     5f0:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <Cp+0x1>
     5f4:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <Cp>
     5f8:	e0 91 ec 04 	lds	r30, 0x04EC	; 0x8004ec <Cp>
     5fc:	f0 91 ed 04 	lds	r31, 0x04ED	; 0x8004ed <Cp+0x1>
     600:	82 81       	ldd	r24, Z+2	; 0x02
     602:	93 81       	ldd	r25, Z+3	; 0x03
     604:	90 93 31 17 	sts	0x1731, r25	; 0x801731 <CurrentSp+0x1>
     608:	80 93 30 17 	sts	0x1730, r24	; 0x801730 <CurrentSp>
     60c:	ec 5f       	subi	r30, 0xFC	; 252
     60e:	fe 4f       	sbci	r31, 0xFE	; 254
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	80 83       	st	Z, r24
     614:	08 95       	ret

00000616 <Task_Create>:
     616:	6f 92       	push	r6
     618:	7f 92       	push	r7
     61a:	8f 92       	push	r8
     61c:	9f 92       	push	r9
     61e:	af 92       	push	r10
     620:	bf 92       	push	r11
     622:	cf 92       	push	r12
     624:	df 92       	push	r13
     626:	ef 92       	push	r14
     628:	ff 92       	push	r15
     62a:	0f 93       	push	r16
     62c:	1f 93       	push	r17
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	e0 91 ea 04 	lds	r30, 0x04EA	; 0x8004ea <KernelActive>
     636:	f0 91 eb 04 	lds	r31, 0x04EB	; 0x8004eb <KernelActive+0x1>
     63a:	ef 2b       	or	r30, r31
     63c:	09 f4       	brne	.+2      	; 0x640 <Task_Create+0x2a>
     63e:	69 c0       	rjmp	.+210    	; 0x712 <Task_Create+0xfc>
     640:	f8 94       	cli
     642:	63 30       	cpi	r22, 0x03	; 3
     644:	71 05       	cpc	r23, r1
     646:	49 f4       	brne	.+18     	; 0x65a <Task_Create+0x44>
     648:	e0 91 ec 04 	lds	r30, 0x04EC	; 0x8004ec <Cp>
     64c:	f0 91 ed 04 	lds	r31, 0x04ED	; 0x8004ed <Cp+0x1>
     650:	e5 5f       	subi	r30, 0xF5	; 245
     652:	fe 4f       	sbci	r31, 0xFE	; 254
     654:	62 e0       	ldi	r22, 0x02	; 2
     656:	60 83       	st	Z, r22
     658:	22 c0       	rjmp	.+68     	; 0x69e <Task_Create+0x88>
     65a:	62 30       	cpi	r22, 0x02	; 2
     65c:	71 05       	cpc	r23, r1
     65e:	81 f4       	brne	.+32     	; 0x680 <Task_Create+0x6a>
     660:	60 91 ec 04 	lds	r22, 0x04EC	; 0x8004ec <Cp>
     664:	70 91 ed 04 	lds	r23, 0x04ED	; 0x8004ed <Cp+0x1>
     668:	fb 01       	movw	r30, r22
     66a:	e5 5f       	subi	r30, 0xF5	; 245
     66c:	fe 4f       	sbci	r31, 0xFE	; 254
     66e:	a4 e0       	ldi	r26, 0x04	; 4
     670:	a0 83       	st	Z, r26
     672:	3b 96       	adiw	r30, 0x0b	; 11
     674:	b9 01       	movw	r22, r18
     676:	6e 0d       	add	r22, r14
     678:	7f 1d       	adc	r23, r15
     67a:	71 83       	std	Z+1, r23	; 0x01
     67c:	60 83       	st	Z, r22
     67e:	0f c0       	rjmp	.+30     	; 0x69e <Task_Create+0x88>
     680:	61 30       	cpi	r22, 0x01	; 1
     682:	71 05       	cpc	r23, r1
     684:	49 f4       	brne	.+18     	; 0x698 <Task_Create+0x82>
     686:	e0 91 ec 04 	lds	r30, 0x04EC	; 0x8004ec <Cp>
     68a:	f0 91 ed 04 	lds	r31, 0x04ED	; 0x8004ed <Cp+0x1>
     68e:	e5 5f       	subi	r30, 0xF5	; 245
     690:	fe 4f       	sbci	r31, 0xFE	; 254
     692:	63 e0       	ldi	r22, 0x03	; 3
     694:	60 83       	st	Z, r22
     696:	03 c0       	rjmp	.+6      	; 0x69e <Task_Create+0x88>
     698:	82 e0       	ldi	r24, 0x02	; 2
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	40 df       	rcall	.-384    	; 0x51e <OS_Abort>
     69e:	60 91 ec 04 	lds	r22, 0x04EC	; 0x8004ec <Cp>
     6a2:	70 91 ed 04 	lds	r23, 0x04ED	; 0x8004ed <Cp+0x1>
     6a6:	fb 01       	movw	r30, r22
     6a8:	e7 5f       	subi	r30, 0xF7	; 247
     6aa:	fe 4f       	sbci	r31, 0xFE	; 254
     6ac:	91 83       	std	Z+1, r25	; 0x01
     6ae:	80 83       	st	Z, r24
     6b0:	32 97       	sbiw	r30, 0x02	; 2
     6b2:	60 80       	ld	r6, Z
     6b4:	71 80       	ldd	r7, Z+1	; 0x01
     6b6:	51 83       	std	Z+1, r21	; 0x01
     6b8:	40 83       	st	Z, r20
     6ba:	db 01       	movw	r26, r22
     6bc:	ac 5e       	subi	r26, 0xEC	; 236
     6be:	be 4f       	sbci	r27, 0xFE	; 254
     6c0:	ad 90       	ld	r10, X+
     6c2:	bc 90       	ld	r11, X
     6c4:	11 97       	sbiw	r26, 0x01	; 1
     6c6:	3b 96       	adiw	r30, 0x0b	; 11
     6c8:	c0 80       	ld	r12, Z
     6ca:	d1 80       	ldd	r13, Z+1	; 0x01
     6cc:	60 5f       	subi	r22, 0xF0	; 240
     6ce:	7e 4f       	sbci	r23, 0xFE	; 254
     6d0:	eb 01       	movw	r28, r22
     6d2:	88 80       	ld	r8, Y
     6d4:	99 80       	ldd	r9, Y+1	; 0x01
     6d6:	11 96       	adiw	r26, 0x01	; 1
     6d8:	3c 93       	st	X, r19
     6da:	2e 93       	st	-X, r18
     6dc:	11 83       	std	Z+1, r17	; 0x01
     6de:	00 83       	st	Z, r16
     6e0:	f9 82       	std	Y+1, r15	; 0x01
     6e2:	e8 82       	st	Y, r14
     6e4:	80 dd       	rcall	.-1280   	; 0x1e6 <Enter_Kernel>
     6e6:	20 91 ec 04 	lds	r18, 0x04EC	; 0x8004ec <Cp>
     6ea:	30 91 ed 04 	lds	r19, 0x04ED	; 0x8004ed <Cp+0x1>
     6ee:	f9 01       	movw	r30, r18
     6f0:	e4 5f       	subi	r30, 0xF4	; 244
     6f2:	fe 4f       	sbci	r31, 0xFE	; 254
     6f4:	80 81       	ld	r24, Z
     6f6:	91 81       	ldd	r25, Z+1	; 0x01
     6f8:	38 96       	adiw	r30, 0x08	; 8
     6fa:	b1 82       	std	Z+1, r11	; 0x01
     6fc:	a0 82       	st	Z, r10
     6fe:	32 97       	sbiw	r30, 0x02	; 2
     700:	d1 82       	std	Z+1, r13	; 0x01
     702:	c0 82       	st	Z, r12
     704:	32 97       	sbiw	r30, 0x02	; 2
     706:	91 82       	std	Z+1, r9	; 0x01
     708:	80 82       	st	Z, r8
     70a:	39 97       	sbiw	r30, 0x09	; 9
     70c:	71 82       	std	Z+1, r7	; 0x01
     70e:	60 82       	st	Z, r6
     710:	08 c0       	rjmp	.+16     	; 0x722 <Task_Create+0x10c>
     712:	ee 24       	eor	r14, r14
     714:	ea 94       	dec	r14
     716:	fe 2c       	mov	r15, r14
     718:	0f ef       	ldi	r16, 0xFF	; 255
     71a:	1f ef       	ldi	r17, 0xFF	; 255
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	3f ef       	ldi	r19, 0xFF	; 255
     720:	7e de       	rcall	.-772    	; 0x41e <Kernel_Create_Task>
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	ff 90       	pop	r15
     72c:	ef 90       	pop	r14
     72e:	df 90       	pop	r13
     730:	cf 90       	pop	r12
     732:	bf 90       	pop	r11
     734:	af 90       	pop	r10
     736:	9f 90       	pop	r9
     738:	8f 90       	pop	r8
     73a:	7f 90       	pop	r7
     73c:	6f 90       	pop	r6
     73e:	08 95       	ret

00000740 <Task_Create_System>:
     740:	ef 92       	push	r14
     742:	ff 92       	push	r15
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	ab 01       	movw	r20, r22
     74a:	ee 24       	eor	r14, r14
     74c:	ea 94       	dec	r14
     74e:	fe 2c       	mov	r15, r14
     750:	0f ef       	ldi	r16, 0xFF	; 255
     752:	1f ef       	ldi	r17, 0xFF	; 255
     754:	2f ef       	ldi	r18, 0xFF	; 255
     756:	3f ef       	ldi	r19, 0xFF	; 255
     758:	63 e0       	ldi	r22, 0x03	; 3
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	5c df       	rcall	.-328    	; 0x616 <Task_Create>
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	08 95       	ret

00000768 <Task_Create_RR>:
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	ab 01       	movw	r20, r22
     772:	ee 24       	eor	r14, r14
     774:	ea 94       	dec	r14
     776:	fe 2c       	mov	r15, r14
     778:	0f ef       	ldi	r16, 0xFF	; 255
     77a:	1f ef       	ldi	r17, 0xFF	; 255
     77c:	2f ef       	ldi	r18, 0xFF	; 255
     77e:	3f ef       	ldi	r19, 0xFF	; 255
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	70 e0       	ldi	r23, 0x00	; 0
     784:	48 df       	rcall	.-368    	; 0x616 <Task_Create>
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	08 95       	ret

00000790 <Task_Create_Period>:
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	7a 01       	movw	r14, r20
     79a:	a8 01       	movw	r20, r16
     79c:	2e 15       	cp	r18, r14
     79e:	3f 05       	cpc	r19, r15
     7a0:	18 f0       	brcs	.+6      	; 0x7a8 <Task_Create_Period+0x18>
     7a2:	83 e0       	ldi	r24, 0x03	; 3
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	bb de       	rcall	.-650    	; 0x51e <OS_Abort>
     7a8:	89 01       	movw	r16, r18
     7aa:	9a 01       	movw	r18, r20
     7ac:	ab 01       	movw	r20, r22
     7ae:	62 e0       	ldi	r22, 0x02	; 2
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	31 df       	rcall	.-414    	; 0x616 <Task_Create>
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	ff 90       	pop	r15
     7ba:	ef 90       	pop	r14
     7bc:	08 95       	ret

000007be <Task_Create_Idle>:
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <KernelActive>
     7ca:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <KernelActive+0x1>
     7ce:	89 2b       	or	r24, r25
     7d0:	f1 f0       	breq	.+60     	; 0x80e <Task_Create_Idle+0x50>
     7d2:	f8 94       	cli
     7d4:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <Cp>
     7d8:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <Cp+0x1>
     7dc:	fc 01       	movw	r30, r24
     7de:	e7 5f       	subi	r30, 0xF7	; 247
     7e0:	fe 4f       	sbci	r31, 0xFE	; 254
     7e2:	2e e4       	ldi	r18, 0x4E	; 78
     7e4:	31 e0       	ldi	r19, 0x01	; 1
     7e6:	31 83       	std	Z+1, r19	; 0x01
     7e8:	20 83       	st	Z, r18
     7ea:	34 97       	sbiw	r30, 0x04	; 4
     7ec:	24 e0       	ldi	r18, 0x04	; 4
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	31 83       	std	Z+1, r19	; 0x01
     7f2:	20 83       	st	Z, r18
     7f4:	32 96       	adiw	r30, 0x02	; 2
     7f6:	11 82       	std	Z+1, r1	; 0x01
     7f8:	10 82       	st	Z, r1
     7fa:	f5 dc       	rcall	.-1558   	; 0x1e6 <Enter_Kernel>
     7fc:	e0 91 ec 04 	lds	r30, 0x04EC	; 0x8004ec <Cp>
     800:	f0 91 ed 04 	lds	r31, 0x04ED	; 0x8004ed <Cp+0x1>
     804:	e4 5f       	subi	r30, 0xF4	; 244
     806:	fe 4f       	sbci	r31, 0xFE	; 254
     808:	80 81       	ld	r24, Z
     80a:	91 81       	ldd	r25, Z+1	; 0x01
     80c:	0e c0       	rjmp	.+28     	; 0x82a <Task_Create_Idle+0x6c>
     80e:	ee 24       	eor	r14, r14
     810:	ea 94       	dec	r14
     812:	fe 2c       	mov	r15, r14
     814:	0f ef       	ldi	r16, 0xFF	; 255
     816:	1f ef       	ldi	r17, 0xFF	; 255
     818:	2f ef       	ldi	r18, 0xFF	; 255
     81a:	3f ef       	ldi	r19, 0xFF	; 255
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	64 e0       	ldi	r22, 0x04	; 4
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	8e e4       	ldi	r24, 0x4E	; 78
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	fa dd       	rcall	.-1036   	; 0x41e <Kernel_Create_Task>
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	08 95       	ret

00000834 <Task_Next>:
     834:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <KernelActive>
     838:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <KernelActive+0x1>
     83c:	89 2b       	or	r24, r25
     83e:	19 f1       	breq	.+70     	; 0x886 <Task_Next+0x52>
     840:	f8 94       	cli
     842:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <Cp>
     846:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <Cp+0x1>
     84a:	fc 01       	movw	r30, r24
     84c:	eb 5f       	subi	r30, 0xFB	; 251
     84e:	fe 4f       	sbci	r31, 0xFE	; 254
     850:	20 81       	ld	r18, Z
     852:	31 81       	ldd	r19, Z+1	; 0x01
     854:	22 30       	cpi	r18, 0x02	; 2
     856:	31 05       	cpc	r19, r1
     858:	81 f4       	brne	.+32     	; 0x87a <Task_Next+0x46>
     85a:	3b 96       	adiw	r30, 0x0b	; 11
     85c:	20 81       	ld	r18, Z
     85e:	31 81       	ldd	r19, Z+1	; 0x01
     860:	38 96       	adiw	r30, 0x08	; 8
     862:	40 81       	ld	r20, Z
     864:	51 81       	ldd	r21, Z+1	; 0x01
     866:	24 1b       	sub	r18, r20
     868:	35 0b       	sbc	r19, r21
     86a:	dc 01       	movw	r26, r24
     86c:	aa 5e       	subi	r26, 0xEA	; 234
     86e:	be 4f       	sbci	r27, 0xFE	; 254
     870:	11 96       	adiw	r26, 0x01	; 1
     872:	3c 93       	st	X, r19
     874:	2e 93       	st	-X, r18
     876:	11 82       	std	Z+1, r1	; 0x01
     878:	10 82       	st	Z, r1
     87a:	fc 01       	movw	r30, r24
     87c:	e5 5f       	subi	r30, 0xF5	; 245
     87e:	fe 4f       	sbci	r31, 0xFE	; 254
     880:	85 e0       	ldi	r24, 0x05	; 5
     882:	80 83       	st	Z, r24
     884:	b0 cc       	rjmp	.-1696   	; 0x1e6 <Enter_Kernel>
     886:	08 95       	ret

00000888 <Run_Next>:
     888:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <KernelActive>
     88c:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <KernelActive+0x1>
     890:	89 2b       	or	r24, r25
     892:	09 f4       	brne	.+2      	; 0x896 <Run_Next+0xe>
     894:	41 c0       	rjmp	.+130    	; 0x918 <Run_Next+0x90>
     896:	f8 94       	cli
     898:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <Cp>
     89c:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <Cp+0x1>
     8a0:	fc 01       	movw	r30, r24
     8a2:	eb 5f       	subi	r30, 0xFB	; 251
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	20 81       	ld	r18, Z
     8a8:	31 81       	ldd	r19, Z+1	; 0x01
     8aa:	23 30       	cpi	r18, 0x03	; 3
     8ac:	31 05       	cpc	r19, r1
     8ae:	21 f4       	brne	.+8      	; 0x8b8 <Run_Next+0x30>
     8b0:	36 96       	adiw	r30, 0x06	; 6
     8b2:	8a e0       	ldi	r24, 0x0A	; 10
     8b4:	80 83       	st	Z, r24
     8b6:	2f c0       	rjmp	.+94     	; 0x916 <Run_Next+0x8e>
     8b8:	fc 01       	movw	r30, r24
     8ba:	eb 5f       	subi	r30, 0xFB	; 251
     8bc:	fe 4f       	sbci	r31, 0xFE	; 254
     8be:	20 81       	ld	r18, Z
     8c0:	31 81       	ldd	r19, Z+1	; 0x01
     8c2:	22 30       	cpi	r18, 0x02	; 2
     8c4:	31 05       	cpc	r19, r1
     8c6:	11 f5       	brne	.+68     	; 0x90c <Run_Next+0x84>
     8c8:	73 96       	adiw	r30, 0x13	; 19
     8ca:	40 81       	ld	r20, Z
     8cc:	51 81       	ldd	r21, Z+1	; 0x01
     8ce:	36 97       	sbiw	r30, 0x06	; 6
     8d0:	20 81       	ld	r18, Z
     8d2:	31 81       	ldd	r19, Z+1	; 0x01
     8d4:	42 17       	cp	r20, r18
     8d6:	53 07       	cpc	r21, r19
     8d8:	18 f0       	brcs	.+6      	; 0x8e0 <Run_Next+0x58>
     8da:	84 e0       	ldi	r24, 0x04	; 4
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	1f de       	rcall	.-962    	; 0x51e <OS_Abort>
     8e0:	20 91 e2 04 	lds	r18, 0x04E2	; 0x8004e2 <SysCount>
     8e4:	30 91 e3 04 	lds	r19, 0x04E3	; 0x8004e3 <SysCount+0x1>
     8e8:	12 16       	cp	r1, r18
     8ea:	13 06       	cpc	r1, r19
     8ec:	4c f4       	brge	.+18     	; 0x900 <Run_Next+0x78>
     8ee:	fc 01       	movw	r30, r24
     8f0:	ea 5e       	subi	r30, 0xEA	; 234
     8f2:	fe 4f       	sbci	r31, 0xFE	; 254
     8f4:	11 82       	std	Z+1, r1	; 0x01
     8f6:	10 82       	st	Z, r1
     8f8:	3b 97       	sbiw	r30, 0x0b	; 11
     8fa:	85 e0       	ldi	r24, 0x05	; 5
     8fc:	80 83       	st	Z, r24
     8fe:	0b c0       	rjmp	.+22     	; 0x916 <Run_Next+0x8e>
     900:	fc 01       	movw	r30, r24
     902:	e5 5f       	subi	r30, 0xF5	; 245
     904:	fe 4f       	sbci	r31, 0xFE	; 254
     906:	8a e0       	ldi	r24, 0x0A	; 10
     908:	80 83       	st	Z, r24
     90a:	05 c0       	rjmp	.+10     	; 0x916 <Run_Next+0x8e>
     90c:	fc 01       	movw	r30, r24
     90e:	e5 5f       	subi	r30, 0xF5	; 245
     910:	fe 4f       	sbci	r31, 0xFE	; 254
     912:	85 e0       	ldi	r24, 0x05	; 5
     914:	80 83       	st	Z, r24
     916:	67 cc       	rjmp	.-1842   	; 0x1e6 <Enter_Kernel>
     918:	08 95       	ret

0000091a <setup>:
     91a:	f8 94       	cli
     91c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     920:	e1 e8       	ldi	r30, 0x81	; 129
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	10 82       	st	Z, r1
     926:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     92a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     92e:	80 e7       	ldi	r24, 0x70	; 112
     930:	92 e0       	ldi	r25, 0x02	; 2
     932:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     936:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     93a:	80 81       	ld	r24, Z
     93c:	88 60       	ori	r24, 0x08	; 8
     93e:	80 83       	st	Z, r24
     940:	80 81       	ld	r24, Z
     942:	84 60       	ori	r24, 0x04	; 4
     944:	80 83       	st	Z, r24
     946:	ef e6       	ldi	r30, 0x6F	; 111
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	82 60       	ori	r24, 0x02	; 2
     94e:	80 83       	st	Z, r24
     950:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     954:	e1 e9       	ldi	r30, 0x91	; 145
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	10 82       	st	Z, r1
     95a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     95e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     962:	83 e2       	ldi	r24, 0x23	; 35
     964:	94 ef       	ldi	r25, 0xF4	; 244
     966:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     96a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     96e:	80 81       	ld	r24, Z
     970:	88 60       	ori	r24, 0x08	; 8
     972:	80 83       	st	Z, r24
     974:	80 81       	ld	r24, Z
     976:	84 60       	ori	r24, 0x04	; 4
     978:	80 83       	st	Z, r24
     97a:	82 e0       	ldi	r24, 0x02	; 2
     97c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     980:	78 94       	sei
     982:	08 95       	ret

00000984 <__vector_17>:
     984:	1f 92       	push	r1
     986:	0f 92       	push	r0
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	0f 92       	push	r0
     98c:	11 24       	eor	r1, r1
     98e:	0b b6       	in	r0, 0x3b	; 59
     990:	0f 92       	push	r0
     992:	2f 93       	push	r18
     994:	3f 93       	push	r19
     996:	4f 93       	push	r20
     998:	5f 93       	push	r21
     99a:	6f 93       	push	r22
     99c:	7f 93       	push	r23
     99e:	8f 93       	push	r24
     9a0:	9f 93       	push	r25
     9a2:	af 93       	push	r26
     9a4:	bf 93       	push	r27
     9a6:	ef 93       	push	r30
     9a8:	ff 93       	push	r31
     9aa:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <Cp>
     9ae:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <Cp+0x1>
     9b2:	fc 01       	movw	r30, r24
     9b4:	eb 5f       	subi	r30, 0xFB	; 251
     9b6:	fe 4f       	sbci	r31, 0xFE	; 254
     9b8:	20 81       	ld	r18, Z
     9ba:	31 81       	ldd	r19, Z+1	; 0x01
     9bc:	22 30       	cpi	r18, 0x02	; 2
     9be:	31 05       	cpc	r19, r1
     9c0:	31 f4       	brne	.+12     	; 0x9ce <__vector_17+0x4a>
     9c2:	73 96       	adiw	r30, 0x13	; 19
     9c4:	80 81       	ld	r24, Z
     9c6:	91 81       	ldd	r25, Z+1	; 0x01
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	91 83       	std	Z+1, r25	; 0x01
     9cc:	80 83       	st	Z, r24
     9ce:	80 91 2e 17 	lds	r24, 0x172E	; 0x80172e <time_since_system_start>
     9d2:	90 91 2f 17 	lds	r25, 0x172F	; 0x80172f <time_since_system_start+0x1>
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	90 93 2f 17 	sts	0x172F, r25	; 0x80172f <time_since_system_start+0x1>
     9dc:	80 93 2e 17 	sts	0x172E, r24	; 0x80172e <time_since_system_start>
     9e0:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <PeriodicCount>
     9e4:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <PeriodicCount+0x1>
     9e8:	cd 01       	movw	r24, r26
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	c2 f0       	brmi	.+48     	; 0xa1e <__vector_17+0x9a>
     9ee:	aa 0f       	add	r26, r26
     9f0:	bb 1f       	adc	r27, r27
     9f2:	ae 5c       	subi	r26, 0xCE	; 206
     9f4:	b8 4e       	sbci	r27, 0xE8	; 232
     9f6:	42 e3       	ldi	r20, 0x32	; 50
     9f8:	57 e1       	ldi	r21, 0x17	; 23
     9fa:	9e 91       	ld	r25, -X
     9fc:	8e 91       	ld	r24, -X
     9fe:	fc 01       	movw	r30, r24
     a00:	ea 5e       	subi	r30, 0xEA	; 234
     a02:	fe 4f       	sbci	r31, 0xFE	; 254
     a04:	20 81       	ld	r18, Z
     a06:	31 81       	ldd	r19, Z+1	; 0x01
     a08:	12 16       	cp	r1, r18
     a0a:	13 06       	cpc	r1, r19
     a0c:	2c f4       	brge	.+10     	; 0xa18 <__vector_17+0x94>
     a0e:	80 81       	ld	r24, Z
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	91 83       	std	Z+1, r25	; 0x01
     a16:	80 83       	st	Z, r24
     a18:	a4 17       	cp	r26, r20
     a1a:	b5 07       	cpc	r27, r21
     a1c:	71 f7       	brne	.-36     	; 0x9fa <__vector_17+0x76>
     a1e:	34 df       	rcall	.-408    	; 0x888 <Run_Next>
     a20:	ff 91       	pop	r31
     a22:	ef 91       	pop	r30
     a24:	bf 91       	pop	r27
     a26:	af 91       	pop	r26
     a28:	9f 91       	pop	r25
     a2a:	8f 91       	pop	r24
     a2c:	7f 91       	pop	r23
     a2e:	6f 91       	pop	r22
     a30:	5f 91       	pop	r21
     a32:	4f 91       	pop	r20
     a34:	3f 91       	pop	r19
     a36:	2f 91       	pop	r18
     a38:	0f 90       	pop	r0
     a3a:	0b be       	out	0x3b, r0	; 59
     a3c:	0f 90       	pop	r0
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	0f 90       	pop	r0
     a42:	1f 90       	pop	r1
     a44:	18 95       	reti

00000a46 <__vector_32>:
     a46:	1f 92       	push	r1
     a48:	0f 92       	push	r0
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	0f 92       	push	r0
     a4e:	11 24       	eor	r1, r1
     a50:	8f 93       	push	r24
     a52:	9f 93       	push	r25
     a54:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <tickOverflowCount>
     a58:	90 91 e5 04 	lds	r25, 0x04E5	; 0x8004e5 <tickOverflowCount+0x1>
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	90 93 e5 04 	sts	0x04E5, r25	; 0x8004e5 <tickOverflowCount+0x1>
     a62:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <tickOverflowCount>
     a66:	9f 91       	pop	r25
     a68:	8f 91       	pop	r24
     a6a:	0f 90       	pop	r0
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	0f 90       	pop	r0
     a70:	1f 90       	pop	r1
     a72:	18 95       	reti

00000a74 <kernel_send>:
     a74:	cf 92       	push	r12
     a76:	df 92       	push	r13
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <Cp>
     a88:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <Cp+0x1>
     a8c:	fc 01       	movw	r30, r24
     a8e:	e4 5e       	subi	r30, 0xE4	; 228
     a90:	fe 4f       	sbci	r31, 0xFE	; 254
     a92:	20 81       	ld	r18, Z
     a94:	31 81       	ldd	r19, Z+1	; 0x01
     a96:	21 50       	subi	r18, 0x01	; 1
     a98:	31 09       	sbc	r19, r1
     a9a:	49 e2       	ldi	r20, 0x29	; 41
     a9c:	42 9f       	mul	r20, r18
     a9e:	f0 01       	movw	r30, r0
     aa0:	43 9f       	mul	r20, r19
     aa2:	f0 0d       	add	r31, r0
     aa4:	11 24       	eor	r1, r1
     aa6:	e2 5b       	subi	r30, 0xB2	; 178
     aa8:	fd 4f       	sbci	r31, 0xFD	; 253
     aaa:	24 a1       	ldd	r18, Z+36	; 0x24
     aac:	35 a1       	ldd	r19, Z+37	; 0x25
     aae:	23 2b       	or	r18, r19
     ab0:	09 f0       	breq	.+2      	; 0xab4 <kernel_send+0x40>
     ab2:	3d c0       	rjmp	.+122    	; 0xb2e <kernel_send+0xba>
     ab4:	fc 01       	movw	r30, r24
     ab6:	e4 5e       	subi	r30, 0xE4	; 228
     ab8:	fe 4f       	sbci	r31, 0xFE	; 254
     aba:	20 81       	ld	r18, Z
     abc:	31 81       	ldd	r19, Z+1	; 0x01
     abe:	21 50       	subi	r18, 0x01	; 1
     ac0:	31 09       	sbc	r19, r1
     ac2:	42 9f       	mul	r20, r18
     ac4:	f0 01       	movw	r30, r0
     ac6:	43 9f       	mul	r20, r19
     ac8:	f0 0d       	add	r31, r0
     aca:	11 24       	eor	r1, r1
     acc:	e2 5b       	subi	r30, 0xB2	; 178
     ace:	fd 4f       	sbci	r31, 0xFD	; 253
     ad0:	22 81       	ldd	r18, Z+2	; 0x02
     ad2:	33 81       	ldd	r19, Z+3	; 0x03
     ad4:	23 2b       	or	r18, r19
     ad6:	41 f5       	brne	.+80     	; 0xb28 <kernel_send+0xb4>
     ad8:	dc 01       	movw	r26, r24
     ada:	a4 5e       	subi	r26, 0xE4	; 228
     adc:	be 4f       	sbci	r27, 0xFE	; 254
     ade:	2d 91       	ld	r18, X+
     ae0:	3c 91       	ld	r19, X
     ae2:	11 97       	sbiw	r26, 0x01	; 1
     ae4:	21 50       	subi	r18, 0x01	; 1
     ae6:	31 09       	sbc	r19, r1
     ae8:	42 9f       	mul	r20, r18
     aea:	f0 01       	movw	r30, r0
     aec:	43 9f       	mul	r20, r19
     aee:	f0 0d       	add	r31, r0
     af0:	11 24       	eor	r1, r1
     af2:	e2 5b       	subi	r30, 0xB2	; 178
     af4:	fd 4f       	sbci	r31, 0xFD	; 253
     af6:	93 83       	std	Z+3, r25	; 0x03
     af8:	82 83       	std	Z+2, r24	; 0x02
     afa:	fc 01       	movw	r30, r24
     afc:	ec 5f       	subi	r30, 0xFC	; 252
     afe:	fe 4f       	sbci	r31, 0xFE	; 254
     b00:	23 e0       	ldi	r18, 0x03	; 3
     b02:	20 83       	st	Z, r18
     b04:	2d 91       	ld	r18, X+
     b06:	3c 91       	ld	r19, X
     b08:	21 50       	subi	r18, 0x01	; 1
     b0a:	31 09       	sbc	r19, r1
     b0c:	7c 96       	adiw	r30, 0x1c	; 28
     b0e:	80 81       	ld	r24, Z
     b10:	91 81       	ldd	r25, Z+1	; 0x01
     b12:	42 9f       	mul	r20, r18
     b14:	f0 01       	movw	r30, r0
     b16:	43 9f       	mul	r20, r19
     b18:	f0 0d       	add	r31, r0
     b1a:	11 24       	eor	r1, r1
     b1c:	e2 5b       	subi	r30, 0xB2	; 178
     b1e:	fd 4f       	sbci	r31, 0xFD	; 253
     b20:	90 a7       	std	Z+40, r25	; 0x28
     b22:	87 a3       	std	Z+39, r24	; 0x27
     b24:	25 dd       	rcall	.-1462   	; 0x570 <Dispatch>
     b26:	37 c1       	rjmp	.+622    	; 0xd96 <kernel_send+0x322>
     b28:	86 e0       	ldi	r24, 0x06	; 6
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	f8 dc       	rcall	.-1552   	; 0x51e <OS_Abort>
     b2e:	fc 01       	movw	r30, r24
     b30:	e4 5e       	subi	r30, 0xE4	; 228
     b32:	fe 4f       	sbci	r31, 0xFE	; 254
     b34:	20 81       	ld	r18, Z
     b36:	31 81       	ldd	r19, Z+1	; 0x01
     b38:	21 50       	subi	r18, 0x01	; 1
     b3a:	31 09       	sbc	r19, r1
     b3c:	49 e2       	ldi	r20, 0x29	; 41
     b3e:	42 9f       	mul	r20, r18
     b40:	f0 01       	movw	r30, r0
     b42:	43 9f       	mul	r20, r19
     b44:	f0 0d       	add	r31, r0
     b46:	11 24       	eor	r1, r1
     b48:	e2 5b       	subi	r30, 0xB2	; 178
     b4a:	fd 4f       	sbci	r31, 0xFD	; 253
     b4c:	22 81       	ldd	r18, Z+2	; 0x02
     b4e:	33 81       	ldd	r19, Z+3	; 0x03
     b50:	23 2b       	or	r18, r19
     b52:	19 f0       	breq	.+6      	; 0xb5a <kernel_send+0xe6>
     b54:	86 e0       	ldi	r24, 0x06	; 6
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	e2 dc       	rcall	.-1596   	; 0x51e <OS_Abort>
     b5a:	fc 01       	movw	r30, r24
     b5c:	e4 5e       	subi	r30, 0xE4	; 228
     b5e:	fe 4f       	sbci	r31, 0xFE	; 254
     b60:	20 81       	ld	r18, Z
     b62:	31 81       	ldd	r19, Z+1	; 0x01
     b64:	21 50       	subi	r18, 0x01	; 1
     b66:	31 09       	sbc	r19, r1
     b68:	49 e2       	ldi	r20, 0x29	; 41
     b6a:	42 9f       	mul	r20, r18
     b6c:	f0 01       	movw	r30, r0
     b6e:	43 9f       	mul	r20, r19
     b70:	f0 0d       	add	r31, r0
     b72:	11 24       	eor	r1, r1
     b74:	e2 5b       	subi	r30, 0xB2	; 178
     b76:	fd 4f       	sbci	r31, 0xFD	; 253
     b78:	c4 a1       	ldd	r28, Z+36	; 0x24
     b7a:	d5 a1       	ldd	r29, Z+37	; 0x25
     b7c:	21 97       	sbiw	r28, 0x01	; 1
     b7e:	0a f4       	brpl	.+2      	; 0xb82 <kernel_send+0x10e>
     b80:	fa c0       	rjmp	.+500    	; 0xd76 <kernel_send+0x302>
     b82:	e1 2c       	mov	r14, r1
     b84:	f1 2c       	mov	r15, r1
     b86:	19 e2       	ldi	r17, 0x29	; 41
     b88:	01 e0       	ldi	r16, 0x01	; 1
     b8a:	cc 24       	eor	r12, r12
     b8c:	c3 94       	inc	r12
     b8e:	d1 2c       	mov	r13, r1
     b90:	20 91 ec 04 	lds	r18, 0x04EC	; 0x8004ec <Cp>
     b94:	30 91 ed 04 	lds	r19, 0x04ED	; 0x8004ed <Cp+0x1>
     b98:	c9 01       	movw	r24, r18
     b9a:	84 5e       	subi	r24, 0xE4	; 228
     b9c:	9e 4f       	sbci	r25, 0xFE	; 254
     b9e:	dc 01       	movw	r26, r24
     ba0:	4d 91       	ld	r20, X+
     ba2:	5c 91       	ld	r21, X
     ba4:	41 50       	subi	r20, 0x01	; 1
     ba6:	51 09       	sbc	r21, r1
     ba8:	fe 01       	movw	r30, r28
     baa:	32 96       	adiw	r30, 0x02	; 2
     bac:	ee 0f       	add	r30, r30
     bae:	ff 1f       	adc	r31, r31
     bb0:	14 9f       	mul	r17, r20
     bb2:	d0 01       	movw	r26, r0
     bb4:	15 9f       	mul	r17, r21
     bb6:	b0 0d       	add	r27, r0
     bb8:	11 24       	eor	r1, r1
     bba:	ae 0f       	add	r26, r30
     bbc:	bf 1f       	adc	r27, r31
     bbe:	a2 5b       	subi	r26, 0xB2	; 178
     bc0:	bd 4f       	sbci	r27, 0xFD	; 253
     bc2:	0d 90       	ld	r0, X+
     bc4:	bc 91       	ld	r27, X
     bc6:	a0 2d       	mov	r26, r0
     bc8:	ac 5f       	subi	r26, 0xFC	; 252
     bca:	be 4f       	sbci	r27, 0xFE	; 254
     bcc:	0c 93       	st	X, r16
     bce:	dc 01       	movw	r26, r24
     bd0:	4d 91       	ld	r20, X+
     bd2:	5c 91       	ld	r21, X
     bd4:	41 50       	subi	r20, 0x01	; 1
     bd6:	51 09       	sbc	r21, r1
     bd8:	14 9f       	mul	r17, r20
     bda:	d0 01       	movw	r26, r0
     bdc:	15 9f       	mul	r17, r21
     bde:	b0 0d       	add	r27, r0
     be0:	11 24       	eor	r1, r1
     be2:	ae 0f       	add	r26, r30
     be4:	bf 1f       	adc	r27, r31
     be6:	a2 5b       	subi	r26, 0xB2	; 178
     be8:	bd 4f       	sbci	r27, 0xFD	; 253
     bea:	6d 91       	ld	r22, X+
     bec:	7c 91       	ld	r23, X
     bee:	a9 01       	movw	r20, r18
     bf0:	40 5e       	subi	r20, 0xE0	; 224
     bf2:	5e 4f       	sbci	r21, 0xFE	; 254
     bf4:	da 01       	movw	r26, r20
     bf6:	4d 91       	ld	r20, X+
     bf8:	5c 91       	ld	r21, X
     bfa:	db 01       	movw	r26, r22
     bfc:	a0 5e       	subi	r26, 0xE0	; 224
     bfe:	be 4f       	sbci	r27, 0xFE	; 254
     c00:	4d 93       	st	X+, r20
     c02:	5c 93       	st	X, r21
     c04:	dc 01       	movw	r26, r24
     c06:	4d 91       	ld	r20, X+
     c08:	5c 91       	ld	r21, X
     c0a:	11 97       	sbiw	r26, 0x01	; 1
     c0c:	41 50       	subi	r20, 0x01	; 1
     c0e:	51 09       	sbc	r21, r1
     c10:	14 9f       	mul	r17, r20
     c12:	c0 01       	movw	r24, r0
     c14:	15 9f       	mul	r17, r21
     c16:	90 0d       	add	r25, r0
     c18:	11 24       	eor	r1, r1
     c1a:	e8 0f       	add	r30, r24
     c1c:	f9 1f       	adc	r31, r25
     c1e:	e2 5b       	subi	r30, 0xB2	; 178
     c20:	fd 4f       	sbci	r31, 0xFD	; 253
     c22:	01 90       	ld	r0, Z+
     c24:	f0 81       	ld	r31, Z
     c26:	e0 2d       	mov	r30, r0
     c28:	eb 5f       	subi	r30, 0xFB	; 251
     c2a:	fe 4f       	sbci	r31, 0xFE	; 254
     c2c:	80 81       	ld	r24, Z
     c2e:	91 81       	ldd	r25, Z+1	; 0x01
     c30:	03 97       	sbiw	r24, 0x03	; 3
     c32:	d1 f4       	brne	.+52     	; 0xc68 <kernel_send+0x1f4>
     c34:	fd 01       	movw	r30, r26
     c36:	40 81       	ld	r20, Z
     c38:	51 81       	ldd	r21, Z+1	; 0x01
     c3a:	ce 01       	movw	r24, r28
     c3c:	02 96       	adiw	r24, 0x02	; 2
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	41 50       	subi	r20, 0x01	; 1
     c44:	51 09       	sbc	r21, r1
     c46:	14 9f       	mul	r17, r20
     c48:	90 01       	movw	r18, r0
     c4a:	15 9f       	mul	r17, r21
     c4c:	30 0d       	add	r19, r0
     c4e:	11 24       	eor	r1, r1
     c50:	82 0f       	add	r24, r18
     c52:	93 1f       	adc	r25, r19
     c54:	42 ee       	ldi	r20, 0xE2	; 226
     c56:	54 e0       	ldi	r21, 0x04	; 4
     c58:	6e e0       	ldi	r22, 0x0E	; 14
     c5a:	77 e1       	ldi	r23, 0x17	; 23
     c5c:	82 5b       	subi	r24, 0xB2	; 178
     c5e:	9d 4f       	sbci	r25, 0xFD	; 253
     c60:	7e d4       	rcall	.+2300   	; 0x155e <enqueue>
     c62:	ec 2c       	mov	r14, r12
     c64:	fd 2c       	mov	r15, r13
     c66:	36 c0       	rjmp	.+108    	; 0xcd4 <kernel_send+0x260>
     c68:	f9 01       	movw	r30, r18
     c6a:	e4 5e       	subi	r30, 0xE4	; 228
     c6c:	fe 4f       	sbci	r31, 0xFE	; 254
     c6e:	40 81       	ld	r20, Z
     c70:	51 81       	ldd	r21, Z+1	; 0x01
     c72:	41 50       	subi	r20, 0x01	; 1
     c74:	51 09       	sbc	r21, r1
     c76:	fe 01       	movw	r30, r28
     c78:	32 96       	adiw	r30, 0x02	; 2
     c7a:	ee 0f       	add	r30, r30
     c7c:	ff 1f       	adc	r31, r31
     c7e:	14 9f       	mul	r17, r20
     c80:	c0 01       	movw	r24, r0
     c82:	15 9f       	mul	r17, r21
     c84:	90 0d       	add	r25, r0
     c86:	11 24       	eor	r1, r1
     c88:	e8 0f       	add	r30, r24
     c8a:	f9 1f       	adc	r31, r25
     c8c:	e2 5b       	subi	r30, 0xB2	; 178
     c8e:	fd 4f       	sbci	r31, 0xFD	; 253
     c90:	01 90       	ld	r0, Z+
     c92:	f0 81       	ld	r31, Z
     c94:	e0 2d       	mov	r30, r0
     c96:	eb 5f       	subi	r30, 0xFB	; 251
     c98:	fe 4f       	sbci	r31, 0xFE	; 254
     c9a:	80 81       	ld	r24, Z
     c9c:	91 81       	ldd	r25, Z+1	; 0x01
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	c9 f4       	brne	.+50     	; 0xcd4 <kernel_send+0x260>
     ca2:	f9 01       	movw	r30, r18
     ca4:	e4 5e       	subi	r30, 0xE4	; 228
     ca6:	fe 4f       	sbci	r31, 0xFE	; 254
     ca8:	40 81       	ld	r20, Z
     caa:	51 81       	ldd	r21, Z+1	; 0x01
     cac:	ce 01       	movw	r24, r28
     cae:	02 96       	adiw	r24, 0x02	; 2
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	41 50       	subi	r20, 0x01	; 1
     cb6:	51 09       	sbc	r21, r1
     cb8:	14 9f       	mul	r17, r20
     cba:	90 01       	movw	r18, r0
     cbc:	15 9f       	mul	r17, r21
     cbe:	30 0d       	add	r19, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	82 0f       	add	r24, r18
     cc4:	93 1f       	adc	r25, r19
     cc6:	4e ed       	ldi	r20, 0xDE	; 222
     cc8:	54 e0       	ldi	r21, 0x04	; 4
     cca:	64 e5       	ldi	r22, 0x54	; 84
     ccc:	77 e1       	ldi	r23, 0x17	; 23
     cce:	82 5b       	subi	r24, 0xB2	; 178
     cd0:	9d 4f       	sbci	r25, 0xFD	; 253
     cd2:	45 d4       	rcall	.+2186   	; 0x155e <enqueue>
     cd4:	a0 91 ec 04 	lds	r26, 0x04EC	; 0x8004ec <Cp>
     cd8:	b0 91 ed 04 	lds	r27, 0x04ED	; 0x8004ed <Cp+0x1>
     cdc:	a4 5e       	subi	r26, 0xE4	; 228
     cde:	be 4f       	sbci	r27, 0xFE	; 254
     ce0:	2d 91       	ld	r18, X+
     ce2:	3c 91       	ld	r19, X
     ce4:	11 97       	sbiw	r26, 0x01	; 1
     ce6:	21 50       	subi	r18, 0x01	; 1
     ce8:	31 09       	sbc	r19, r1
     cea:	fe 01       	movw	r30, r28
     cec:	32 96       	adiw	r30, 0x02	; 2
     cee:	ee 0f       	add	r30, r30
     cf0:	ff 1f       	adc	r31, r31
     cf2:	12 9f       	mul	r17, r18
     cf4:	c0 01       	movw	r24, r0
     cf6:	13 9f       	mul	r17, r19
     cf8:	90 0d       	add	r25, r0
     cfa:	11 24       	eor	r1, r1
     cfc:	e8 0f       	add	r30, r24
     cfe:	f9 1f       	adc	r31, r25
     d00:	e2 5b       	subi	r30, 0xB2	; 178
     d02:	fd 4f       	sbci	r31, 0xFD	; 253
     d04:	11 82       	std	Z+1, r1	; 0x01
     d06:	10 82       	st	Z, r1
     d08:	8d 91       	ld	r24, X+
     d0a:	9c 91       	ld	r25, X
     d0c:	11 97       	sbiw	r26, 0x01	; 1
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	18 9f       	mul	r17, r24
     d12:	f0 01       	movw	r30, r0
     d14:	19 9f       	mul	r17, r25
     d16:	f0 0d       	add	r31, r0
     d18:	11 24       	eor	r1, r1
     d1a:	e2 5b       	subi	r30, 0xB2	; 178
     d1c:	fd 4f       	sbci	r31, 0xFD	; 253
     d1e:	84 a1       	ldd	r24, Z+36	; 0x24
     d20:	95 a1       	ldd	r25, Z+37	; 0x25
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	95 a3       	std	Z+37, r25	; 0x25
     d26:	84 a3       	std	Z+36, r24	; 0x24
     d28:	21 97       	sbiw	r28, 0x01	; 1
     d2a:	0a f0       	brmi	.+2      	; 0xd2e <kernel_send+0x2ba>
     d2c:	31 cf       	rjmp	.-414    	; 0xb90 <kernel_send+0x11c>
     d2e:	20 91 ec 04 	lds	r18, 0x04EC	; 0x8004ec <Cp>
     d32:	30 91 ed 04 	lds	r19, 0x04ED	; 0x8004ed <Cp+0x1>
     d36:	fd 01       	movw	r30, r26
     d38:	80 81       	ld	r24, Z
     d3a:	91 81       	ldd	r25, Z+1	; 0x01
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	49 e2       	ldi	r20, 0x29	; 41
     d40:	48 9f       	mul	r20, r24
     d42:	f0 01       	movw	r30, r0
     d44:	49 9f       	mul	r20, r25
     d46:	f0 0d       	add	r31, r0
     d48:	11 24       	eor	r1, r1
     d4a:	e2 5b       	subi	r30, 0xB2	; 178
     d4c:	fd 4f       	sbci	r31, 0xFD	; 253
     d4e:	10 a6       	std	Z+40, r1	; 0x28
     d50:	17 a2       	std	Z+39, r1	; 0x27
     d52:	ef 28       	or	r14, r15
     d54:	01 f1       	breq	.+64     	; 0xd96 <kernel_send+0x322>
     d56:	f9 01       	movw	r30, r18
     d58:	eb 5f       	subi	r30, 0xFB	; 251
     d5a:	fe 4f       	sbci	r31, 0xFE	; 254
     d5c:	80 81       	ld	r24, Z
     d5e:	91 81       	ldd	r25, Z+1	; 0x01
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	c9 f4       	brne	.+50     	; 0xd96 <kernel_send+0x322>
     d64:	4e ed       	ldi	r20, 0xDE	; 222
     d66:	54 e0       	ldi	r21, 0x04	; 4
     d68:	64 e5       	ldi	r22, 0x54	; 84
     d6a:	77 e1       	ldi	r23, 0x17	; 23
     d6c:	8c ee       	ldi	r24, 0xEC	; 236
     d6e:	94 e0       	ldi	r25, 0x04	; 4
     d70:	f6 d3       	rcall	.+2028   	; 0x155e <enqueue>
     d72:	fe db       	rcall	.-2052   	; 0x570 <Dispatch>
     d74:	10 c0       	rjmp	.+32     	; 0xd96 <kernel_send+0x322>
     d76:	fc 01       	movw	r30, r24
     d78:	e4 5e       	subi	r30, 0xE4	; 228
     d7a:	fe 4f       	sbci	r31, 0xFE	; 254
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	29 e2       	ldi	r18, 0x29	; 41
     d84:	28 9f       	mul	r18, r24
     d86:	f0 01       	movw	r30, r0
     d88:	29 9f       	mul	r18, r25
     d8a:	f0 0d       	add	r31, r0
     d8c:	11 24       	eor	r1, r1
     d8e:	e2 5b       	subi	r30, 0xB2	; 178
     d90:	fd 4f       	sbci	r31, 0xFD	; 253
     d92:	10 a6       	std	Z+40, r1	; 0x28
     d94:	17 a2       	std	Z+39, r1	; 0x27
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	ff 90       	pop	r15
     da0:	ef 90       	pop	r14
     da2:	df 90       	pop	r13
     da4:	cf 90       	pop	r12
     da6:	08 95       	ret

00000da8 <kernel_receive>:
     da8:	cf 93       	push	r28
     daa:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <Cp>
     dae:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <Cp+0x1>
     db2:	fc 01       	movw	r30, r24
     db4:	e2 5e       	subi	r30, 0xE2	; 226
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	20 81       	ld	r18, Z
     dba:	31 81       	ldd	r19, Z+1	; 0x01
     dbc:	21 50       	subi	r18, 0x01	; 1
     dbe:	31 09       	sbc	r19, r1
     dc0:	49 e2       	ldi	r20, 0x29	; 41
     dc2:	42 9f       	mul	r20, r18
     dc4:	f0 01       	movw	r30, r0
     dc6:	43 9f       	mul	r20, r19
     dc8:	f0 0d       	add	r31, r0
     dca:	11 24       	eor	r1, r1
     dcc:	e2 5b       	subi	r30, 0xB2	; 178
     dce:	fd 4f       	sbci	r31, 0xFD	; 253
     dd0:	22 81       	ldd	r18, Z+2	; 0x02
     dd2:	33 81       	ldd	r19, Z+3	; 0x03
     dd4:	23 2b       	or	r18, r19
     dd6:	09 f5       	brne	.+66     	; 0xe1a <kernel_receive+0x72>
     dd8:	fc 01       	movw	r30, r24
     dda:	ec 5f       	subi	r30, 0xFC	; 252
     ddc:	fe 4f       	sbci	r31, 0xFE	; 254
     dde:	23 e0       	ldi	r18, 0x03	; 3
     de0:	20 83       	st	Z, r18
     de2:	7a 96       	adiw	r30, 0x1a	; 26
     de4:	20 81       	ld	r18, Z
     de6:	31 81       	ldd	r19, Z+1	; 0x01
     de8:	80 81       	ld	r24, Z
     dea:	91 81       	ldd	r25, Z+1	; 0x01
     dec:	21 50       	subi	r18, 0x01	; 1
     dee:	31 09       	sbc	r19, r1
     df0:	e9 e2       	ldi	r30, 0x29	; 41
     df2:	e2 9f       	mul	r30, r18
     df4:	a0 01       	movw	r20, r0
     df6:	e3 9f       	mul	r30, r19
     df8:	50 0d       	add	r21, r0
     dfa:	11 24       	eor	r1, r1
     dfc:	4e 58       	subi	r20, 0x8E	; 142
     dfe:	5d 4f       	sbci	r21, 0xFD	; 253
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	e8 9f       	mul	r30, r24
     e04:	b0 01       	movw	r22, r0
     e06:	e9 9f       	mul	r30, r25
     e08:	70 0d       	add	r23, r0
     e0a:	11 24       	eor	r1, r1
     e0c:	6e 5a       	subi	r22, 0xAE	; 174
     e0e:	7d 4f       	sbci	r23, 0xFD	; 253
     e10:	8c ee       	ldi	r24, 0xEC	; 236
     e12:	94 e0       	ldi	r25, 0x04	; 4
     e14:	a4 d3       	rcall	.+1864   	; 0x155e <enqueue>
     e16:	ac db       	rcall	.-2216   	; 0x570 <Dispatch>
     e18:	dd c0       	rjmp	.+442    	; 0xfd4 <kernel_receive+0x22c>
     e1a:	fc 01       	movw	r30, r24
     e1c:	e2 5e       	subi	r30, 0xE2	; 226
     e1e:	fe 4f       	sbci	r31, 0xFE	; 254
     e20:	20 81       	ld	r18, Z
     e22:	31 81       	ldd	r19, Z+1	; 0x01
     e24:	21 50       	subi	r18, 0x01	; 1
     e26:	31 09       	sbc	r19, r1
     e28:	49 e2       	ldi	r20, 0x29	; 41
     e2a:	42 9f       	mul	r20, r18
     e2c:	d0 01       	movw	r26, r0
     e2e:	43 9f       	mul	r20, r19
     e30:	b0 0d       	add	r27, r0
     e32:	11 24       	eor	r1, r1
     e34:	a2 5b       	subi	r26, 0xB2	; 178
     e36:	bd 4f       	sbci	r27, 0xFD	; 253
     e38:	12 96       	adiw	r26, 0x02	; 2
     e3a:	0d 90       	ld	r0, X+
     e3c:	bc 91       	ld	r27, X
     e3e:	a0 2d       	mov	r26, r0
     e40:	ac 5f       	subi	r26, 0xFC	; 252
     e42:	be 4f       	sbci	r27, 0xFE	; 254
     e44:	21 e0       	ldi	r18, 0x01	; 1
     e46:	2c 93       	st	X, r18
     e48:	20 81       	ld	r18, Z
     e4a:	31 81       	ldd	r19, Z+1	; 0x01
     e4c:	21 50       	subi	r18, 0x01	; 1
     e4e:	31 09       	sbc	r19, r1
     e50:	42 9f       	mul	r20, r18
     e52:	d0 01       	movw	r26, r0
     e54:	43 9f       	mul	r20, r19
     e56:	b0 0d       	add	r27, r0
     e58:	11 24       	eor	r1, r1
     e5a:	a2 5b       	subi	r26, 0xB2	; 178
     e5c:	bd 4f       	sbci	r27, 0xFD	; 253
     e5e:	97 96       	adiw	r26, 0x27	; 39
     e60:	2d 91       	ld	r18, X+
     e62:	3c 91       	ld	r19, X
     e64:	98 97       	sbiw	r26, 0x28	; 40
     e66:	dc 01       	movw	r26, r24
     e68:	a0 5e       	subi	r26, 0xE0	; 224
     e6a:	be 4f       	sbci	r27, 0xFE	; 254
     e6c:	11 96       	adiw	r26, 0x01	; 1
     e6e:	3c 93       	st	X, r19
     e70:	2e 93       	st	-X, r18
     e72:	20 81       	ld	r18, Z
     e74:	31 81       	ldd	r19, Z+1	; 0x01
     e76:	21 50       	subi	r18, 0x01	; 1
     e78:	31 09       	sbc	r19, r1
     e7a:	42 9f       	mul	r20, r18
     e7c:	f0 01       	movw	r30, r0
     e7e:	43 9f       	mul	r20, r19
     e80:	f0 0d       	add	r31, r0
     e82:	11 24       	eor	r1, r1
     e84:	e2 5b       	subi	r30, 0xB2	; 178
     e86:	fd 4f       	sbci	r31, 0xFD	; 253
     e88:	02 80       	ldd	r0, Z+2	; 0x02
     e8a:	f3 81       	ldd	r31, Z+3	; 0x03
     e8c:	e0 2d       	mov	r30, r0
     e8e:	eb 5f       	subi	r30, 0xFB	; 251
     e90:	fe 4f       	sbci	r31, 0xFE	; 254
     e92:	20 81       	ld	r18, Z
     e94:	31 81       	ldd	r19, Z+1	; 0x01
     e96:	23 30       	cpi	r18, 0x03	; 3
     e98:	31 05       	cpc	r19, r1
     e9a:	09 f0       	breq	.+2      	; 0xe9e <kernel_receive+0xf6>
     e9c:	41 c0       	rjmp	.+130    	; 0xf20 <kernel_receive+0x178>
     e9e:	fc 01       	movw	r30, r24
     ea0:	e2 5e       	subi	r30, 0xE2	; 226
     ea2:	fe 4f       	sbci	r31, 0xFE	; 254
     ea4:	20 81       	ld	r18, Z
     ea6:	31 81       	ldd	r19, Z+1	; 0x01
     ea8:	21 50       	subi	r18, 0x01	; 1
     eaa:	31 09       	sbc	r19, r1
     eac:	c9 e2       	ldi	r28, 0x29	; 41
     eae:	c2 9f       	mul	r28, r18
     eb0:	c0 01       	movw	r24, r0
     eb2:	c3 9f       	mul	r28, r19
     eb4:	90 0d       	add	r25, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	42 ee       	ldi	r20, 0xE2	; 226
     eba:	54 e0       	ldi	r21, 0x04	; 4
     ebc:	6e e0       	ldi	r22, 0x0E	; 14
     ebe:	77 e1       	ldi	r23, 0x17	; 23
     ec0:	80 5b       	subi	r24, 0xB0	; 176
     ec2:	9d 4f       	sbci	r25, 0xFD	; 253
     ec4:	4c d3       	rcall	.+1688   	; 0x155e <enqueue>
     ec6:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <Cp>
     eca:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <Cp+0x1>
     ece:	fc 01       	movw	r30, r24
     ed0:	e2 5e       	subi	r30, 0xE2	; 226
     ed2:	fe 4f       	sbci	r31, 0xFE	; 254
     ed4:	20 81       	ld	r18, Z
     ed6:	31 81       	ldd	r19, Z+1	; 0x01
     ed8:	21 50       	subi	r18, 0x01	; 1
     eda:	31 09       	sbc	r19, r1
     edc:	c2 9f       	mul	r28, r18
     ede:	f0 01       	movw	r30, r0
     ee0:	c3 9f       	mul	r28, r19
     ee2:	f0 0d       	add	r31, r0
     ee4:	11 24       	eor	r1, r1
     ee6:	e2 5b       	subi	r30, 0xB2	; 178
     ee8:	fd 4f       	sbci	r31, 0xFD	; 253
     eea:	13 82       	std	Z+3, r1	; 0x03
     eec:	12 82       	std	Z+2, r1	; 0x02
     eee:	fc 01       	movw	r30, r24
     ef0:	e4 5e       	subi	r30, 0xE4	; 228
     ef2:	fe 4f       	sbci	r31, 0xFE	; 254
     ef4:	20 81       	ld	r18, Z
     ef6:	31 81       	ldd	r19, Z+1	; 0x01
     ef8:	21 50       	subi	r18, 0x01	; 1
     efa:	31 09       	sbc	r19, r1
     efc:	c2 9f       	mul	r28, r18
     efe:	f0 01       	movw	r30, r0
     f00:	c3 9f       	mul	r28, r19
     f02:	f0 0d       	add	r31, r0
     f04:	11 24       	eor	r1, r1
     f06:	e2 5b       	subi	r30, 0xB2	; 178
     f08:	fd 4f       	sbci	r31, 0xFD	; 253
     f0a:	10 a6       	std	Z+40, r1	; 0x28
     f0c:	17 a2       	std	Z+39, r1	; 0x27
     f0e:	fc 01       	movw	r30, r24
     f10:	eb 5f       	subi	r30, 0xFB	; 251
     f12:	fe 4f       	sbci	r31, 0xFE	; 254
     f14:	80 81       	ld	r24, Z
     f16:	91 81       	ldd	r25, Z+1	; 0x01
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	09 f0       	breq	.+2      	; 0xf1e <kernel_receive+0x176>
     f1c:	5b c0       	rjmp	.+182    	; 0xfd4 <kernel_receive+0x22c>
     f1e:	2d c0       	rjmp	.+90     	; 0xf7a <kernel_receive+0x1d2>
     f20:	fc 01       	movw	r30, r24
     f22:	e2 5e       	subi	r30, 0xE2	; 226
     f24:	fe 4f       	sbci	r31, 0xFE	; 254
     f26:	20 81       	ld	r18, Z
     f28:	31 81       	ldd	r19, Z+1	; 0x01
     f2a:	21 50       	subi	r18, 0x01	; 1
     f2c:	31 09       	sbc	r19, r1
     f2e:	49 e2       	ldi	r20, 0x29	; 41
     f30:	42 9f       	mul	r20, r18
     f32:	f0 01       	movw	r30, r0
     f34:	43 9f       	mul	r20, r19
     f36:	f0 0d       	add	r31, r0
     f38:	11 24       	eor	r1, r1
     f3a:	e2 5b       	subi	r30, 0xB2	; 178
     f3c:	fd 4f       	sbci	r31, 0xFD	; 253
     f3e:	02 80       	ldd	r0, Z+2	; 0x02
     f40:	f3 81       	ldd	r31, Z+3	; 0x03
     f42:	e0 2d       	mov	r30, r0
     f44:	eb 5f       	subi	r30, 0xFB	; 251
     f46:	fe 4f       	sbci	r31, 0xFE	; 254
     f48:	20 81       	ld	r18, Z
     f4a:	31 81       	ldd	r19, Z+1	; 0x01
     f4c:	21 30       	cpi	r18, 0x01	; 1
     f4e:	31 05       	cpc	r19, r1
     f50:	e9 f4       	brne	.+58     	; 0xf8c <kernel_receive+0x1e4>
     f52:	fc 01       	movw	r30, r24
     f54:	e2 5e       	subi	r30, 0xE2	; 226
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	20 81       	ld	r18, Z
     f5a:	31 81       	ldd	r19, Z+1	; 0x01
     f5c:	21 50       	subi	r18, 0x01	; 1
     f5e:	31 09       	sbc	r19, r1
     f60:	42 9f       	mul	r20, r18
     f62:	c0 01       	movw	r24, r0
     f64:	43 9f       	mul	r20, r19
     f66:	90 0d       	add	r25, r0
     f68:	11 24       	eor	r1, r1
     f6a:	4e ed       	ldi	r20, 0xDE	; 222
     f6c:	54 e0       	ldi	r21, 0x04	; 4
     f6e:	64 e5       	ldi	r22, 0x54	; 84
     f70:	77 e1       	ldi	r23, 0x17	; 23
     f72:	80 5b       	subi	r24, 0xB0	; 176
     f74:	9d 4f       	sbci	r25, 0xFD	; 253
     f76:	f3 d2       	rcall	.+1510   	; 0x155e <enqueue>
     f78:	09 c0       	rjmp	.+18     	; 0xf8c <kernel_receive+0x1e4>
     f7a:	4e ed       	ldi	r20, 0xDE	; 222
     f7c:	54 e0       	ldi	r21, 0x04	; 4
     f7e:	64 e5       	ldi	r22, 0x54	; 84
     f80:	77 e1       	ldi	r23, 0x17	; 23
     f82:	8c ee       	ldi	r24, 0xEC	; 236
     f84:	94 e0       	ldi	r25, 0x04	; 4
     f86:	eb d2       	rcall	.+1494   	; 0x155e <enqueue>
     f88:	f3 da       	rcall	.-2586   	; 0x570 <Dispatch>
     f8a:	24 c0       	rjmp	.+72     	; 0xfd4 <kernel_receive+0x22c>
     f8c:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <Cp>
     f90:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <Cp+0x1>
     f94:	fc 01       	movw	r30, r24
     f96:	e2 5e       	subi	r30, 0xE2	; 226
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	20 81       	ld	r18, Z
     f9c:	31 81       	ldd	r19, Z+1	; 0x01
     f9e:	21 50       	subi	r18, 0x01	; 1
     fa0:	31 09       	sbc	r19, r1
     fa2:	49 e2       	ldi	r20, 0x29	; 41
     fa4:	42 9f       	mul	r20, r18
     fa6:	f0 01       	movw	r30, r0
     fa8:	43 9f       	mul	r20, r19
     faa:	f0 0d       	add	r31, r0
     fac:	11 24       	eor	r1, r1
     fae:	e2 5b       	subi	r30, 0xB2	; 178
     fb0:	fd 4f       	sbci	r31, 0xFD	; 253
     fb2:	13 82       	std	Z+3, r1	; 0x03
     fb4:	12 82       	std	Z+2, r1	; 0x02
     fb6:	fc 01       	movw	r30, r24
     fb8:	e4 5e       	subi	r30, 0xE4	; 228
     fba:	fe 4f       	sbci	r31, 0xFE	; 254
     fbc:	80 81       	ld	r24, Z
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	48 9f       	mul	r20, r24
     fc4:	f0 01       	movw	r30, r0
     fc6:	49 9f       	mul	r20, r25
     fc8:	f0 0d       	add	r31, r0
     fca:	11 24       	eor	r1, r1
     fcc:	e2 5b       	subi	r30, 0xB2	; 178
     fce:	fd 4f       	sbci	r31, 0xFD	; 253
     fd0:	10 a6       	std	Z+40, r1	; 0x28
     fd2:	17 a2       	std	Z+39, r1	; 0x27
     fd4:	cf 91       	pop	r28
     fd6:	08 95       	ret

00000fd8 <kernel_async_send>:
}

/*
 *	pretty much the same as kernel_send() except process is not blocked if no receivers are waiting
 */
void kernel_async_send() {
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
	BOOL sys_task_ready = FALSE;

	if (ChannelArray[Cp->senderChannel - 1].numberReceivers == 0) { // no receivers waiting
     fe8:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <Cp>
     fec:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <Cp+0x1>
     ff0:	fc 01       	movw	r30, r24
     ff2:	e4 5e       	subi	r30, 0xE4	; 228
     ff4:	fe 4f       	sbci	r31, 0xFE	; 254
     ff6:	20 81       	ld	r18, Z
     ff8:	31 81       	ldd	r19, Z+1	; 0x01
     ffa:	21 50       	subi	r18, 0x01	; 1
     ffc:	31 09       	sbc	r19, r1
     ffe:	49 e2       	ldi	r20, 0x29	; 41
    1000:	42 9f       	mul	r20, r18
    1002:	f0 01       	movw	r30, r0
    1004:	43 9f       	mul	r20, r19
    1006:	f0 0d       	add	r31, r0
    1008:	11 24       	eor	r1, r1
    100a:	e2 5b       	subi	r30, 0xB2	; 178
    100c:	fd 4f       	sbci	r31, 0xFD	; 253
    100e:	24 a1       	ldd	r18, Z+36	; 0x24
    1010:	35 a1       	ldd	r19, Z+37	; 0x25
    1012:	23 2b       	or	r18, r19
    1014:	31 f5       	brne	.+76     	; 0x1062 <kernel_async_send+0x8a>
		if (ChannelArray[Cp->senderChannel - 1].sender == NULL) ChannelArray[Cp->senderChannel - 1].sender = Cp;
    1016:	fc 01       	movw	r30, r24
    1018:	e4 5e       	subi	r30, 0xE4	; 228
    101a:	fe 4f       	sbci	r31, 0xFE	; 254
    101c:	20 81       	ld	r18, Z
    101e:	31 81       	ldd	r19, Z+1	; 0x01
    1020:	21 50       	subi	r18, 0x01	; 1
    1022:	31 09       	sbc	r19, r1
    1024:	42 9f       	mul	r20, r18
    1026:	f0 01       	movw	r30, r0
    1028:	43 9f       	mul	r20, r19
    102a:	f0 0d       	add	r31, r0
    102c:	11 24       	eor	r1, r1
    102e:	e2 5b       	subi	r30, 0xB2	; 178
    1030:	fd 4f       	sbci	r31, 0xFD	; 253
    1032:	22 81       	ldd	r18, Z+2	; 0x02
    1034:	33 81       	ldd	r19, Z+3	; 0x03
    1036:	23 2b       	or	r18, r19
    1038:	89 f4       	brne	.+34     	; 0x105c <kernel_async_send+0x84>
    103a:	fc 01       	movw	r30, r24
    103c:	e4 5e       	subi	r30, 0xE4	; 228
    103e:	fe 4f       	sbci	r31, 0xFE	; 254
    1040:	20 81       	ld	r18, Z
    1042:	31 81       	ldd	r19, Z+1	; 0x01
    1044:	21 50       	subi	r18, 0x01	; 1
    1046:	31 09       	sbc	r19, r1
    1048:	42 9f       	mul	r20, r18
    104a:	f0 01       	movw	r30, r0
    104c:	43 9f       	mul	r20, r19
    104e:	f0 0d       	add	r31, r0
    1050:	11 24       	eor	r1, r1
    1052:	e2 5b       	subi	r30, 0xB2	; 178
    1054:	fd 4f       	sbci	r31, 0xFD	; 253
    1056:	93 83       	std	Z+3, r25	; 0x03
    1058:	82 83       	std	Z+2, r24	; 0x02
    105a:	37 c1       	rjmp	.+622    	; 0x12ca <kernel_async_send+0x2f2>
		else OS_Abort(6); // cant have more than 1 sender
    105c:	86 e0       	ldi	r24, 0x06	; 6
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	5e da       	rcall	.-2884   	; 0x51e <OS_Abort>
		return; // return without blocking
	} else { //receivers are waiting
		// do the same as kernel_send
		// probably should be abstracted into a separate function to avoid code duplication, but who has time for that
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(6); // cant have more than 1 sender
    1062:	fc 01       	movw	r30, r24
    1064:	e4 5e       	subi	r30, 0xE4	; 228
    1066:	fe 4f       	sbci	r31, 0xFE	; 254
    1068:	20 81       	ld	r18, Z
    106a:	31 81       	ldd	r19, Z+1	; 0x01
    106c:	21 50       	subi	r18, 0x01	; 1
    106e:	31 09       	sbc	r19, r1
    1070:	49 e2       	ldi	r20, 0x29	; 41
    1072:	42 9f       	mul	r20, r18
    1074:	f0 01       	movw	r30, r0
    1076:	43 9f       	mul	r20, r19
    1078:	f0 0d       	add	r31, r0
    107a:	11 24       	eor	r1, r1
    107c:	e2 5b       	subi	r30, 0xB2	; 178
    107e:	fd 4f       	sbci	r31, 0xFD	; 253
    1080:	22 81       	ldd	r18, Z+2	; 0x02
    1082:	33 81       	ldd	r19, Z+3	; 0x03
    1084:	23 2b       	or	r18, r19
    1086:	19 f0       	breq	.+6      	; 0x108e <kernel_async_send+0xb6>
    1088:	86 e0       	ldi	r24, 0x06	; 6
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	48 da       	rcall	.-2928   	; 0x51e <OS_Abort>
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
    108e:	fc 01       	movw	r30, r24
    1090:	e4 5e       	subi	r30, 0xE4	; 228
    1092:	fe 4f       	sbci	r31, 0xFE	; 254
    1094:	20 81       	ld	r18, Z
    1096:	31 81       	ldd	r19, Z+1	; 0x01
    1098:	21 50       	subi	r18, 0x01	; 1
    109a:	31 09       	sbc	r19, r1
    109c:	49 e2       	ldi	r20, 0x29	; 41
    109e:	42 9f       	mul	r20, r18
    10a0:	f0 01       	movw	r30, r0
    10a2:	43 9f       	mul	r20, r19
    10a4:	f0 0d       	add	r31, r0
    10a6:	11 24       	eor	r1, r1
    10a8:	e2 5b       	subi	r30, 0xB2	; 178
    10aa:	fd 4f       	sbci	r31, 0xFD	; 253
    10ac:	c4 a1       	ldd	r28, Z+36	; 0x24
    10ae:	d5 a1       	ldd	r29, Z+37	; 0x25
    10b0:	21 97       	sbiw	r28, 0x01	; 1
    10b2:	0a f4       	brpl	.+2      	; 0x10b6 <kernel_async_send+0xde>
    10b4:	fa c0       	rjmp	.+500    	; 0x12aa <kernel_async_send+0x2d2>
    10b6:	e1 2c       	mov	r14, r1
    10b8:	f1 2c       	mov	r15, r1
			ChannelArray[Cp->senderChannel - 1].receivers[l]->state = READY;
    10ba:	19 e2       	ldi	r17, 0x29	; 41
    10bc:	01 e0       	ldi	r16, 0x01	; 1
			ChannelArray[Cp->senderChannel - 1].receivers[l]->val = Cp->val;

			if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == SYSTEM) {
				sys_task_ready = TRUE;
    10be:	cc 24       	eor	r12, r12
    10c0:	c3 94       	inc	r12
    10c2:	d1 2c       	mov	r13, r1
		// do the same as kernel_send
		// probably should be abstracted into a separate function to avoid code duplication, but who has time for that
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(6); // cant have more than 1 sender
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
			ChannelArray[Cp->senderChannel - 1].receivers[l]->state = READY;
    10c4:	20 91 ec 04 	lds	r18, 0x04EC	; 0x8004ec <Cp>
    10c8:	30 91 ed 04 	lds	r19, 0x04ED	; 0x8004ed <Cp+0x1>
    10cc:	c9 01       	movw	r24, r18
    10ce:	84 5e       	subi	r24, 0xE4	; 228
    10d0:	9e 4f       	sbci	r25, 0xFE	; 254
    10d2:	dc 01       	movw	r26, r24
    10d4:	4d 91       	ld	r20, X+
    10d6:	5c 91       	ld	r21, X
    10d8:	41 50       	subi	r20, 0x01	; 1
    10da:	51 09       	sbc	r21, r1
    10dc:	fe 01       	movw	r30, r28
    10de:	32 96       	adiw	r30, 0x02	; 2
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	14 9f       	mul	r17, r20
    10e6:	d0 01       	movw	r26, r0
    10e8:	15 9f       	mul	r17, r21
    10ea:	b0 0d       	add	r27, r0
    10ec:	11 24       	eor	r1, r1
    10ee:	ae 0f       	add	r26, r30
    10f0:	bf 1f       	adc	r27, r31
    10f2:	a2 5b       	subi	r26, 0xB2	; 178
    10f4:	bd 4f       	sbci	r27, 0xFD	; 253
    10f6:	0d 90       	ld	r0, X+
    10f8:	bc 91       	ld	r27, X
    10fa:	a0 2d       	mov	r26, r0
    10fc:	ac 5f       	subi	r26, 0xFC	; 252
    10fe:	be 4f       	sbci	r27, 0xFE	; 254
    1100:	0c 93       	st	X, r16
			ChannelArray[Cp->senderChannel - 1].receivers[l]->val = Cp->val;
    1102:	dc 01       	movw	r26, r24
    1104:	4d 91       	ld	r20, X+
    1106:	5c 91       	ld	r21, X
    1108:	41 50       	subi	r20, 0x01	; 1
    110a:	51 09       	sbc	r21, r1
    110c:	14 9f       	mul	r17, r20
    110e:	d0 01       	movw	r26, r0
    1110:	15 9f       	mul	r17, r21
    1112:	b0 0d       	add	r27, r0
    1114:	11 24       	eor	r1, r1
    1116:	ae 0f       	add	r26, r30
    1118:	bf 1f       	adc	r27, r31
    111a:	a2 5b       	subi	r26, 0xB2	; 178
    111c:	bd 4f       	sbci	r27, 0xFD	; 253
    111e:	6d 91       	ld	r22, X+
    1120:	7c 91       	ld	r23, X
    1122:	a9 01       	movw	r20, r18
    1124:	40 5e       	subi	r20, 0xE0	; 224
    1126:	5e 4f       	sbci	r21, 0xFE	; 254
    1128:	da 01       	movw	r26, r20
    112a:	4d 91       	ld	r20, X+
    112c:	5c 91       	ld	r21, X
    112e:	db 01       	movw	r26, r22
    1130:	a0 5e       	subi	r26, 0xE0	; 224
    1132:	be 4f       	sbci	r27, 0xFE	; 254
    1134:	4d 93       	st	X+, r20
    1136:	5c 93       	st	X, r21

			if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == SYSTEM) {
    1138:	dc 01       	movw	r26, r24
    113a:	4d 91       	ld	r20, X+
    113c:	5c 91       	ld	r21, X
    113e:	11 97       	sbiw	r26, 0x01	; 1
    1140:	41 50       	subi	r20, 0x01	; 1
    1142:	51 09       	sbc	r21, r1
    1144:	14 9f       	mul	r17, r20
    1146:	c0 01       	movw	r24, r0
    1148:	15 9f       	mul	r17, r21
    114a:	90 0d       	add	r25, r0
    114c:	11 24       	eor	r1, r1
    114e:	e8 0f       	add	r30, r24
    1150:	f9 1f       	adc	r31, r25
    1152:	e2 5b       	subi	r30, 0xB2	; 178
    1154:	fd 4f       	sbci	r31, 0xFD	; 253
    1156:	01 90       	ld	r0, Z+
    1158:	f0 81       	ld	r31, Z
    115a:	e0 2d       	mov	r30, r0
    115c:	eb 5f       	subi	r30, 0xFB	; 251
    115e:	fe 4f       	sbci	r31, 0xFE	; 254
    1160:	80 81       	ld	r24, Z
    1162:	91 81       	ldd	r25, Z+1	; 0x01
    1164:	03 97       	sbiw	r24, 0x03	; 3
    1166:	d1 f4       	brne	.+52     	; 0x119c <kernel_async_send+0x1c4>
				sys_task_ready = TRUE;
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &SysQueue, &SysCount);
    1168:	fd 01       	movw	r30, r26
    116a:	40 81       	ld	r20, Z
    116c:	51 81       	ldd	r21, Z+1	; 0x01
    116e:	ce 01       	movw	r24, r28
    1170:	02 96       	adiw	r24, 0x02	; 2
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	41 50       	subi	r20, 0x01	; 1
    1178:	51 09       	sbc	r21, r1
    117a:	14 9f       	mul	r17, r20
    117c:	90 01       	movw	r18, r0
    117e:	15 9f       	mul	r17, r21
    1180:	30 0d       	add	r19, r0
    1182:	11 24       	eor	r1, r1
    1184:	82 0f       	add	r24, r18
    1186:	93 1f       	adc	r25, r19
    1188:	42 ee       	ldi	r20, 0xE2	; 226
    118a:	54 e0       	ldi	r21, 0x04	; 4
    118c:	6e e0       	ldi	r22, 0x0E	; 14
    118e:	77 e1       	ldi	r23, 0x17	; 23
    1190:	82 5b       	subi	r24, 0xB2	; 178
    1192:	9d 4f       	sbci	r25, 0xFD	; 253
    1194:	e4 d1       	rcall	.+968    	; 0x155e <enqueue>
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
			ChannelArray[Cp->senderChannel - 1].receivers[l]->state = READY;
			ChannelArray[Cp->senderChannel - 1].receivers[l]->val = Cp->val;

			if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == SYSTEM) {
				sys_task_ready = TRUE;
    1196:	ec 2c       	mov	r14, r12
    1198:	fd 2c       	mov	r15, r13
    119a:	36 c0       	rjmp	.+108    	; 0x1208 <kernel_async_send+0x230>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &SysQueue, &SysCount);
			} else if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == RR) {
    119c:	f9 01       	movw	r30, r18
    119e:	e4 5e       	subi	r30, 0xE4	; 228
    11a0:	fe 4f       	sbci	r31, 0xFE	; 254
    11a2:	40 81       	ld	r20, Z
    11a4:	51 81       	ldd	r21, Z+1	; 0x01
    11a6:	41 50       	subi	r20, 0x01	; 1
    11a8:	51 09       	sbc	r21, r1
    11aa:	fe 01       	movw	r30, r28
    11ac:	32 96       	adiw	r30, 0x02	; 2
    11ae:	ee 0f       	add	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	14 9f       	mul	r17, r20
    11b4:	c0 01       	movw	r24, r0
    11b6:	15 9f       	mul	r17, r21
    11b8:	90 0d       	add	r25, r0
    11ba:	11 24       	eor	r1, r1
    11bc:	e8 0f       	add	r30, r24
    11be:	f9 1f       	adc	r31, r25
    11c0:	e2 5b       	subi	r30, 0xB2	; 178
    11c2:	fd 4f       	sbci	r31, 0xFD	; 253
    11c4:	01 90       	ld	r0, Z+
    11c6:	f0 81       	ld	r31, Z
    11c8:	e0 2d       	mov	r30, r0
    11ca:	eb 5f       	subi	r30, 0xFB	; 251
    11cc:	fe 4f       	sbci	r31, 0xFE	; 254
    11ce:	80 81       	ld	r24, Z
    11d0:	91 81       	ldd	r25, Z+1	; 0x01
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	c9 f4       	brne	.+50     	; 0x1208 <kernel_async_send+0x230>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
    11d6:	f9 01       	movw	r30, r18
    11d8:	e4 5e       	subi	r30, 0xE4	; 228
    11da:	fe 4f       	sbci	r31, 0xFE	; 254
    11dc:	40 81       	ld	r20, Z
    11de:	51 81       	ldd	r21, Z+1	; 0x01
    11e0:	ce 01       	movw	r24, r28
    11e2:	02 96       	adiw	r24, 0x02	; 2
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	41 50       	subi	r20, 0x01	; 1
    11ea:	51 09       	sbc	r21, r1
    11ec:	14 9f       	mul	r17, r20
    11ee:	90 01       	movw	r18, r0
    11f0:	15 9f       	mul	r17, r21
    11f2:	30 0d       	add	r19, r0
    11f4:	11 24       	eor	r1, r1
    11f6:	82 0f       	add	r24, r18
    11f8:	93 1f       	adc	r25, r19
    11fa:	4e ed       	ldi	r20, 0xDE	; 222
    11fc:	54 e0       	ldi	r21, 0x04	; 4
    11fe:	64 e5       	ldi	r22, 0x54	; 84
    1200:	77 e1       	ldi	r23, 0x17	; 23
    1202:	82 5b       	subi	r24, 0xB2	; 178
    1204:	9d 4f       	sbci	r25, 0xFD	; 253
    1206:	ab d1       	rcall	.+854    	; 0x155e <enqueue>
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
    1208:	a0 91 ec 04 	lds	r26, 0x04EC	; 0x8004ec <Cp>
    120c:	b0 91 ed 04 	lds	r27, 0x04ED	; 0x8004ed <Cp+0x1>
    1210:	a4 5e       	subi	r26, 0xE4	; 228
    1212:	be 4f       	sbci	r27, 0xFE	; 254
    1214:	2d 91       	ld	r18, X+
    1216:	3c 91       	ld	r19, X
    1218:	11 97       	sbiw	r26, 0x01	; 1
    121a:	21 50       	subi	r18, 0x01	; 1
    121c:	31 09       	sbc	r19, r1
    121e:	fe 01       	movw	r30, r28
    1220:	32 96       	adiw	r30, 0x02	; 2
    1222:	ee 0f       	add	r30, r30
    1224:	ff 1f       	adc	r31, r31
    1226:	12 9f       	mul	r17, r18
    1228:	c0 01       	movw	r24, r0
    122a:	13 9f       	mul	r17, r19
    122c:	90 0d       	add	r25, r0
    122e:	11 24       	eor	r1, r1
    1230:	e8 0f       	add	r30, r24
    1232:	f9 1f       	adc	r31, r25
    1234:	e2 5b       	subi	r30, 0xB2	; 178
    1236:	fd 4f       	sbci	r31, 0xFD	; 253
    1238:	11 82       	std	Z+1, r1	; 0x01
    123a:	10 82       	st	Z, r1
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
    123c:	8d 91       	ld	r24, X+
    123e:	9c 91       	ld	r25, X
    1240:	11 97       	sbiw	r26, 0x01	; 1
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	18 9f       	mul	r17, r24
    1246:	f0 01       	movw	r30, r0
    1248:	19 9f       	mul	r17, r25
    124a:	f0 0d       	add	r31, r0
    124c:	11 24       	eor	r1, r1
    124e:	e2 5b       	subi	r30, 0xB2	; 178
    1250:	fd 4f       	sbci	r31, 0xFD	; 253
    1252:	84 a1       	ldd	r24, Z+36	; 0x24
    1254:	95 a1       	ldd	r25, Z+37	; 0x25
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	95 a3       	std	Z+37, r25	; 0x25
    125a:	84 a3       	std	Z+36, r24	; 0x24
	} else { //receivers are waiting
		// do the same as kernel_send
		// probably should be abstracted into a separate function to avoid code duplication, but who has time for that
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(6); // cant have more than 1 sender
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
    125c:	21 97       	sbiw	r28, 0x01	; 1
    125e:	0a f0       	brmi	.+2      	; 0x1262 <kernel_async_send+0x28a>
    1260:	31 cf       	rjmp	.-414    	; 0x10c4 <kernel_async_send+0xec>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
		}
		ChannelArray[Cp->senderChannel - 1].val = NULL;
    1262:	20 91 ec 04 	lds	r18, 0x04EC	; 0x8004ec <Cp>
    1266:	30 91 ed 04 	lds	r19, 0x04ED	; 0x8004ed <Cp+0x1>
    126a:	fd 01       	movw	r30, r26
    126c:	80 81       	ld	r24, Z
    126e:	91 81       	ldd	r25, Z+1	; 0x01
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	49 e2       	ldi	r20, 0x29	; 41
    1274:	48 9f       	mul	r20, r24
    1276:	f0 01       	movw	r30, r0
    1278:	49 9f       	mul	r20, r25
    127a:	f0 0d       	add	r31, r0
    127c:	11 24       	eor	r1, r1
    127e:	e2 5b       	subi	r30, 0xB2	; 178
    1280:	fd 4f       	sbci	r31, 0xFD	; 253
    1282:	10 a6       	std	Z+40, r1	; 0x28
    1284:	17 a2       	std	Z+39, r1	; 0x27
		if (sys_task_ready && Cp->priority == RR) {
    1286:	ef 28       	or	r14, r15
    1288:	01 f1       	breq	.+64     	; 0x12ca <kernel_async_send+0x2f2>
    128a:	f9 01       	movw	r30, r18
    128c:	eb 5f       	subi	r30, 0xFB	; 251
    128e:	fe 4f       	sbci	r31, 0xFE	; 254
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	c9 f4       	brne	.+50     	; 0x12ca <kernel_async_send+0x2f2>
			enqueue(&Cp, &RRQueue, &RRCount);
    1298:	4e ed       	ldi	r20, 0xDE	; 222
    129a:	54 e0       	ldi	r21, 0x04	; 4
    129c:	64 e5       	ldi	r22, 0x54	; 84
    129e:	77 e1       	ldi	r23, 0x17	; 23
    12a0:	8c ee       	ldi	r24, 0xEC	; 236
    12a2:	94 e0       	ldi	r25, 0x04	; 4
    12a4:	5c d1       	rcall	.+696    	; 0x155e <enqueue>
			Dispatch();
    12a6:	64 d9       	rcall	.-3384   	; 0x570 <Dispatch>
    12a8:	10 c0       	rjmp	.+32     	; 0x12ca <kernel_async_send+0x2f2>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
		}
		ChannelArray[Cp->senderChannel - 1].val = NULL;
    12aa:	fc 01       	movw	r30, r24
    12ac:	e4 5e       	subi	r30, 0xE4	; 228
    12ae:	fe 4f       	sbci	r31, 0xFE	; 254
    12b0:	80 81       	ld	r24, Z
    12b2:	91 81       	ldd	r25, Z+1	; 0x01
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	29 e2       	ldi	r18, 0x29	; 41
    12b8:	28 9f       	mul	r18, r24
    12ba:	f0 01       	movw	r30, r0
    12bc:	29 9f       	mul	r18, r25
    12be:	f0 0d       	add	r31, r0
    12c0:	11 24       	eor	r1, r1
    12c2:	e2 5b       	subi	r30, 0xB2	; 178
    12c4:	fd 4f       	sbci	r31, 0xFD	; 253
    12c6:	10 a6       	std	Z+40, r1	; 0x28
    12c8:	17 a2       	std	Z+39, r1	; 0x27
		if (sys_task_ready && Cp->priority == RR) {
			enqueue(&Cp, &RRQueue, &RRCount);
			Dispatch();
		}
	}
}
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	df 90       	pop	r13
    12d8:	cf 90       	pop	r12
    12da:	08 95       	ret

000012dc <OS_Start>:
}

/**
  * This function starts the RTOS after creating a_main
  */
void OS_Start() {   
    12dc:	cf 92       	push	r12
    12de:	df 92       	push	r13
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
	if ( (! KernelActive) && (Tasks > 0)) {
    12ec:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <KernelActive>
    12f0:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <KernelActive+0x1>
    12f4:	89 2b       	or	r24, r25
    12f6:	09 f0       	breq	.+2      	; 0x12fa <OS_Start+0x1e>
    12f8:	12 c1       	rjmp	.+548    	; 0x151e <OS_Start+0x242>
    12fa:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <Tasks>
    12fe:	90 91 e9 04 	lds	r25, 0x04E9	; 0x8004e9 <Tasks+0x1>
    1302:	89 2b       	or	r24, r25
    1304:	09 f4       	brne	.+2      	; 0x1308 <OS_Start+0x2c>
    1306:	0b c1       	rjmp	.+534    	; 0x151e <OS_Start+0x242>
		Disable_Interrupt();
    1308:	f8 94       	cli

		KernelActive = 1;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <KernelActive+0x1>
    1312:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <KernelActive>
  * corresponding kernel function on its behalf.
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */
    1316:	2c d9       	rcall	.-3496   	; 0x570 <Dispatch>
			if(Cp->priority == SYSTEM)
				break;
			else
				Cp->request = NEXT;
cnext:	case NEXT:
			Cp->state = READY; // set process to be enqueued as ready to run
    1318:	dd 24       	eor	r13, r13
    131a:	d3 94       	inc	r13
		case CREATE_SYS: // creates new system task
			Cp->response = Kernel_Create_Task( Cp->code, SYSTEM, Cp->arg, -1, -1, -1);
			if(Cp->priority == SYSTEM)
				break;
			else
				Cp->request = NEXT;
    131c:	0f 2e       	mov	r0, r31
    131e:	f5 e0       	ldi	r31, 0x05	; 5
    1320:	cf 2e       	mov	r12, r31
    1322:	f0 2d       	mov	r31, r0
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */

	while(1) {
		Cp->request = NONE; /* clear its request */
    1324:	e0 91 ec 04 	lds	r30, 0x04EC	; 0x8004ec <Cp>
    1328:	f0 91 ed 04 	lds	r31, 0x04ED	; 0x8004ed <Cp+0x1>
    132c:	df 01       	movw	r26, r30
    132e:	a5 5f       	subi	r26, 0xF5	; 245
    1330:	be 4f       	sbci	r27, 0xFE	; 254
    1332:	1c 92       	st	X, r1

		/* activate this newly selected task */
		CurrentSp = Cp->sp;
    1334:	82 81       	ldd	r24, Z+2	; 0x02
    1336:	93 81       	ldd	r25, Z+3	; 0x03
    1338:	90 93 31 17 	sts	0x1731, r25	; 0x801731 <CurrentSp+0x1>
    133c:	80 93 30 17 	sts	0x1730, r24	; 0x801730 <CurrentSp>

		Exit_Kernel();    /* or CSwitch() */
    1340:	0e 94 9e 00 	call	0x13c	; 0x13c <CSwitch>

		/* if this task makes a system call, it will return to here! */

		/* save the Cp's stack pointer */
		Cp->sp = CurrentSp;
    1344:	c0 91 ec 04 	lds	r28, 0x04EC	; 0x8004ec <Cp>
    1348:	d0 91 ed 04 	lds	r29, 0x04ED	; 0x8004ed <Cp+0x1>
    134c:	80 91 30 17 	lds	r24, 0x1730	; 0x801730 <CurrentSp>
    1350:	90 91 31 17 	lds	r25, 0x1731	; 0x801731 <CurrentSp+0x1>
    1354:	9b 83       	std	Y+3, r25	; 0x03
    1356:	8a 83       	std	Y+2, r24	; 0x02

		switch(Cp->request){
    1358:	fe 01       	movw	r30, r28
    135a:	e5 5f       	subi	r30, 0xF5	; 245
    135c:	fe 4f       	sbci	r31, 0xFE	; 254
    135e:	e0 81       	ld	r30, Z
    1360:	8e 2f       	mov	r24, r30
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	fc 01       	movw	r30, r24
    1366:	31 97       	sbiw	r30, 0x01	; 1
    1368:	ea 30       	cpi	r30, 0x0A	; 10
    136a:	f1 05       	cpc	r31, r1
    136c:	d8 f6       	brcc	.-74     	; 0x1324 <OS_Start+0x48>
    136e:	88 27       	eor	r24, r24
    1370:	ee 58       	subi	r30, 0x8E	; 142
    1372:	ff 4f       	sbci	r31, 0xFF	; 255
    1374:	8f 4f       	sbci	r24, 0xFF	; 255
    1376:	5c c2       	rjmp	.+1208   	; 0x1830 <__tablejump2__>
		case CREATE: // should not be needed
			Cp->response = Kernel_Create_Task( Cp->code, Cp->priority, Cp->arg, -1, -1, -1);
    1378:	fe 01       	movw	r30, r28
    137a:	e9 5f       	subi	r30, 0xF9	; 249
    137c:	fe 4f       	sbci	r31, 0xFE	; 254
    137e:	40 81       	ld	r20, Z
    1380:	51 81       	ldd	r21, Z+1	; 0x01
    1382:	32 97       	sbiw	r30, 0x02	; 2
    1384:	60 81       	ld	r22, Z
    1386:	71 81       	ldd	r23, Z+1	; 0x01
    1388:	34 96       	adiw	r30, 0x04	; 4
    138a:	80 81       	ld	r24, Z
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	ee 24       	eor	r14, r14
    1390:	ea 94       	dec	r14
    1392:	fe 2c       	mov	r15, r14
    1394:	0f ef       	ldi	r16, 0xFF	; 255
    1396:	1f ef       	ldi	r17, 0xFF	; 255
    1398:	2f ef       	ldi	r18, 0xFF	; 255
    139a:	3f ef       	ldi	r19, 0xFF	; 255
    139c:	40 d8       	rcall	.-3968   	; 0x41e <Kernel_Create_Task>
    139e:	c4 5f       	subi	r28, 0xF4	; 244
    13a0:	de 4f       	sbci	r29, 0xFE	; 254
    13a2:	99 83       	std	Y+1, r25	; 0x01
    13a4:	88 83       	st	Y, r24
    13a6:	be cf       	rjmp	.-132    	; 0x1324 <OS_Start+0x48>
			break;
		case CREATE_PERIODIC: // creates new periodic task
			Cp->response = Kernel_Create_Task( Cp->code, PERIODIC, Cp->arg, Cp->offset, Cp->wcet, Cp->period);
    13a8:	fe 01       	movw	r30, r28
    13aa:	e0 5f       	subi	r30, 0xF0	; 240
    13ac:	fe 4f       	sbci	r31, 0xFE	; 254
    13ae:	e0 80       	ld	r14, Z
    13b0:	f1 80       	ldd	r15, Z+1	; 0x01
    13b2:	32 96       	adiw	r30, 0x02	; 2
    13b4:	00 81       	ld	r16, Z
    13b6:	11 81       	ldd	r17, Z+1	; 0x01
    13b8:	32 96       	adiw	r30, 0x02	; 2
    13ba:	20 81       	ld	r18, Z
    13bc:	31 81       	ldd	r19, Z+1	; 0x01
    13be:	3d 97       	sbiw	r30, 0x0d	; 13
    13c0:	40 81       	ld	r20, Z
    13c2:	51 81       	ldd	r21, Z+1	; 0x01
    13c4:	32 96       	adiw	r30, 0x02	; 2
    13c6:	80 81       	ld	r24, Z
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	62 e0       	ldi	r22, 0x02	; 2
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	27 d8       	rcall	.-4018   	; 0x41e <Kernel_Create_Task>
    13d0:	c4 5f       	subi	r28, 0xF4	; 244
    13d2:	de 4f       	sbci	r29, 0xFE	; 254
    13d4:	99 83       	std	Y+1, r25	; 0x01
    13d6:	88 83       	st	Y, r24
			if(Cp->priority == RR && Cp->offset == 0){
    13d8:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <Cp>
    13dc:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <Cp+0x1>
    13e0:	fc 01       	movw	r30, r24
    13e2:	eb 5f       	subi	r30, 0xFB	; 251
    13e4:	fe 4f       	sbci	r31, 0xFE	; 254
    13e6:	20 81       	ld	r18, Z
    13e8:	31 81       	ldd	r19, Z+1	; 0x01
    13ea:	21 30       	cpi	r18, 0x01	; 1
    13ec:	31 05       	cpc	r19, r1
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <OS_Start+0x116>
    13f0:	99 cf       	rjmp	.-206    	; 0x1324 <OS_Start+0x48>
    13f2:	3f 96       	adiw	r30, 0x0f	; 15
    13f4:	20 81       	ld	r18, Z
    13f6:	31 81       	ldd	r19, Z+1	; 0x01
    13f8:	23 2b       	or	r18, r19
    13fa:	09 f0       	breq	.+2      	; 0x13fe <OS_Start+0x122>
    13fc:	93 cf       	rjmp	.-218    	; 0x1324 <OS_Start+0x48>
				Cp->request = NEXT;
    13fe:	39 97       	sbiw	r30, 0x09	; 9
    1400:	c0 82       	st	Z, r12
    1402:	3e c0       	rjmp	.+124    	; 0x1480 <OS_Start+0x1a4>
				goto cnext;
			}
			break;
		case CREATE_RR: // creates new rr task
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
    1404:	fe 01       	movw	r30, r28
    1406:	e9 5f       	subi	r30, 0xF9	; 249
    1408:	fe 4f       	sbci	r31, 0xFE	; 254
    140a:	40 81       	ld	r20, Z
    140c:	51 81       	ldd	r21, Z+1	; 0x01
    140e:	32 96       	adiw	r30, 0x02	; 2
    1410:	80 81       	ld	r24, Z
    1412:	91 81       	ldd	r25, Z+1	; 0x01
    1414:	ee 24       	eor	r14, r14
    1416:	ea 94       	dec	r14
    1418:	fe 2c       	mov	r15, r14
    141a:	0f ef       	ldi	r16, 0xFF	; 255
    141c:	1f ef       	ldi	r17, 0xFF	; 255
    141e:	2f ef       	ldi	r18, 0xFF	; 255
    1420:	3f ef       	ldi	r19, 0xFF	; 255
    1422:	61 e0       	ldi	r22, 0x01	; 1
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	0e 94 0f 02 	call	0x41e	; 0x41e <Kernel_Create_Task>
    142a:	c4 5f       	subi	r28, 0xF4	; 244
    142c:	de 4f       	sbci	r29, 0xFE	; 254
    142e:	99 83       	std	Y+1, r25	; 0x01
    1430:	88 83       	st	Y, r24
    1432:	78 cf       	rjmp	.-272    	; 0x1324 <OS_Start+0x48>
			break;
		case CREATE_SYS: // creates new system task
			Cp->response = Kernel_Create_Task( Cp->code, SYSTEM, Cp->arg, -1, -1, -1);
    1434:	fe 01       	movw	r30, r28
    1436:	e9 5f       	subi	r30, 0xF9	; 249
    1438:	fe 4f       	sbci	r31, 0xFE	; 254
    143a:	40 81       	ld	r20, Z
    143c:	51 81       	ldd	r21, Z+1	; 0x01
    143e:	32 96       	adiw	r30, 0x02	; 2
    1440:	80 81       	ld	r24, Z
    1442:	91 81       	ldd	r25, Z+1	; 0x01
    1444:	ee 24       	eor	r14, r14
    1446:	ea 94       	dec	r14
    1448:	fe 2c       	mov	r15, r14
    144a:	0f ef       	ldi	r16, 0xFF	; 255
    144c:	1f ef       	ldi	r17, 0xFF	; 255
    144e:	2f ef       	ldi	r18, 0xFF	; 255
    1450:	3f ef       	ldi	r19, 0xFF	; 255
    1452:	63 e0       	ldi	r22, 0x03	; 3
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	0e 94 0f 02 	call	0x41e	; 0x41e <Kernel_Create_Task>
    145a:	c4 5f       	subi	r28, 0xF4	; 244
    145c:	de 4f       	sbci	r29, 0xFE	; 254
    145e:	99 83       	std	Y+1, r25	; 0x01
    1460:	88 83       	st	Y, r24
			if(Cp->priority == SYSTEM)
    1462:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <Cp>
    1466:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <Cp+0x1>
    146a:	fc 01       	movw	r30, r24
    146c:	eb 5f       	subi	r30, 0xFB	; 251
    146e:	fe 4f       	sbci	r31, 0xFE	; 254
    1470:	20 81       	ld	r18, Z
    1472:	31 81       	ldd	r19, Z+1	; 0x01
    1474:	23 30       	cpi	r18, 0x03	; 3
    1476:	31 05       	cpc	r19, r1
    1478:	09 f4       	brne	.+2      	; 0x147c <OS_Start+0x1a0>
    147a:	54 cf       	rjmp	.-344    	; 0x1324 <OS_Start+0x48>
				break;
			else
				Cp->request = NEXT;
    147c:	36 96       	adiw	r30, 0x06	; 6
    147e:	c0 82       	st	Z, r12
cnext:	case NEXT:
			Cp->state = READY; // set process to be enqueued as ready to run
    1480:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <Cp>
    1484:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <Cp+0x1>
    1488:	fc 01       	movw	r30, r24
    148a:	ec 5f       	subi	r30, 0xFC	; 252
    148c:	fe 4f       	sbci	r31, 0xFE	; 254
    148e:	d0 82       	st	Z, r13
			// enqueue in appropriate queue
			if (Cp->priority == SYSTEM) {
    1490:	31 96       	adiw	r30, 0x01	; 1
    1492:	20 81       	ld	r18, Z
    1494:	31 81       	ldd	r19, Z+1	; 0x01
    1496:	23 30       	cpi	r18, 0x03	; 3
    1498:	31 05       	cpc	r19, r1
    149a:	41 f4       	brne	.+16     	; 0x14ac <OS_Start+0x1d0>
				enqueue(&Cp, &SysQueue, &SysCount);
    149c:	42 ee       	ldi	r20, 0xE2	; 226
    149e:	54 e0       	ldi	r21, 0x04	; 4
    14a0:	6e e0       	ldi	r22, 0x0E	; 14
    14a2:	77 e1       	ldi	r23, 0x17	; 23
    14a4:	8c ee       	ldi	r24, 0xEC	; 236
    14a6:	94 e0       	ldi	r25, 0x04	; 4
    14a8:	5a d0       	rcall	.+180    	; 0x155e <enqueue>
    14aa:	1e c0       	rjmp	.+60     	; 0x14e8 <OS_Start+0x20c>
			} else if (Cp->priority == PERIODIC) {
    14ac:	fc 01       	movw	r30, r24
    14ae:	eb 5f       	subi	r30, 0xFB	; 251
    14b0:	fe 4f       	sbci	r31, 0xFE	; 254
    14b2:	20 81       	ld	r18, Z
    14b4:	31 81       	ldd	r19, Z+1	; 0x01
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	31 05       	cpc	r19, r1
    14ba:	41 f4       	brne	.+16     	; 0x14cc <OS_Start+0x1f0>
				enqueuePeriodic(&Cp, &PeriodicQueue, &PeriodicCount);
    14bc:	40 ee       	ldi	r20, 0xE0	; 224
    14be:	54 e0       	ldi	r21, 0x04	; 4
    14c0:	62 e3       	ldi	r22, 0x32	; 50
    14c2:	77 e1       	ldi	r23, 0x17	; 23
    14c4:	8c ee       	ldi	r24, 0xEC	; 236
    14c6:	94 e0       	ldi	r25, 0x04	; 4
    14c8:	9c d0       	rcall	.+312    	; 0x1602 <enqueuePeriodic>
    14ca:	0e c0       	rjmp	.+28     	; 0x14e8 <OS_Start+0x20c>
			} else if (Cp->priority == RR) {
    14cc:	fc 01       	movw	r30, r24
    14ce:	eb 5f       	subi	r30, 0xFB	; 251
    14d0:	fe 4f       	sbci	r31, 0xFE	; 254
    14d2:	80 81       	ld	r24, Z
    14d4:	91 81       	ldd	r25, Z+1	; 0x01
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	39 f4       	brne	.+14     	; 0x14e8 <OS_Start+0x20c>
				enqueue(&Cp, &RRQueue, &RRCount);
    14da:	4e ed       	ldi	r20, 0xDE	; 222
    14dc:	54 e0       	ldi	r21, 0x04	; 4
    14de:	64 e5       	ldi	r22, 0x54	; 84
    14e0:	77 e1       	ldi	r23, 0x17	; 23
    14e2:	8c ee       	ldi	r24, 0xEC	; 236
    14e4:	94 e0       	ldi	r25, 0x04	; 4
    14e6:	3b d0       	rcall	.+118    	; 0x155e <enqueue>
			}
			Dispatch(); // get next task to run
    14e8:	43 d8       	rcall	.-3962   	; 0x570 <Dispatch>
    14ea:	1c cf       	rjmp	.-456    	; 0x1324 <OS_Start+0x48>
			break;
		case NONE:
			break;
		case CHECK_TIME_VIOLATION:
			CheckTimingViolation(); //check for timing violations
    14ec:	1e d8       	rcall	.-4036   	; 0x52a <CheckTimingViolation>
    14ee:	1a cf       	rjmp	.-460    	; 0x1324 <OS_Start+0x48>
			break;
		case SEND:
			kernel_send(); // send info via CSP
    14f0:	c1 da       	rcall	.-2686   	; 0xa74 <kernel_send>
    14f2:	18 cf       	rjmp	.-464    	; 0x1324 <OS_Start+0x48>
			break;
		case ASYNC_SEND:
			kernel_async_send(); // send info async via CSP
    14f4:	71 dd       	rcall	.-1310   	; 0xfd8 <kernel_async_send>
    14f6:	16 cf       	rjmp	.-468    	; 0x1324 <OS_Start+0x48>
			break;
		case RECEIVE:
			kernel_receive(); // receive info via CSP
    14f8:	57 dc       	rcall	.-1874   	; 0xda8 <kernel_receive>
    14fa:	14 cf       	rjmp	.-472    	; 0x1324 <OS_Start+0x48>

/**
  *  Terminate a task
  */
static void Kernel_Terminate_Task() {
	Cp->state = DEAD;
    14fc:	fe 01       	movw	r30, r28
    14fe:	ec 5f       	subi	r30, 0xFC	; 252
    1500:	fe 4f       	sbci	r31, 0xFE	; 254
    1502:	10 82       	st	Z, r1
	Cp->processID = 0;
    1504:	19 82       	std	Y+1, r1	; 0x01
    1506:	18 82       	st	Y, r1
	Tasks--;
    1508:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <Tasks>
    150c:	90 91 e9 04 	lds	r25, 0x04E9	; 0x8004e9 <Tasks+0x1>
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <Tasks+0x1>
    1516:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <Tasks>
			kernel_receive(); // receive info via CSP
			break;
		case TERMINATE:
			/* deallocate all resources used by this task */
			Kernel_Terminate_Task();
			Dispatch(); // get next task to run
    151a:	2a d8       	rcall	.-4012   	; 0x570 <Dispatch>
    151c:	03 cf       	rjmp	.-506    	; 0x1324 <OS_Start+0x48>

		KernelActive = 1;
		Next_Kernel_Request();
		/* SHOULD NEVER GET HERE!!! */
	}
}
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	0f 91       	pop	r16
    1526:	ff 90       	pop	r15
    1528:	ef 90       	pop	r14
    152a:	df 90       	pop	r13
    152c:	cf 90       	pop	r12
    152e:	08 95       	ret

00001530 <main>:
/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	//pin 25
	DDRA |= (1<<PA3);
    1530:	0b 9a       	sbi	0x01, 3	; 1
	PORTA &= ~(1<<PA3);
    1532:	13 98       	cbi	0x02, 3	; 2

	//pin 26
	DDRA |= (1<<PA4);
    1534:	0c 9a       	sbi	0x01, 4	; 1
	PORTA &= ~(1<<PA4);
    1536:	14 98       	cbi	0x02, 4	; 2

	//pin 27
	DDRA |= (1<<PA5);
    1538:	0d 9a       	sbi	0x01, 5	; 1
	PORTA &= ~(1<<PA5);
    153a:	15 98       	cbi	0x02, 5	; 2

	//pin 28
	DDRA |= (1<<PA6);
    153c:	0e 9a       	sbi	0x01, 6	; 1
	PORTA &= ~(1<<PA6);
    153e:	16 98       	cbi	0x02, 6	; 2

	//pin 29
	DDRA |= (1<<PA7);
    1540:	0f 9a       	sbi	0x01, 7	; 1
	PORTA &= ~(1<<PA7);
    1542:	17 98       	cbi	0x02, 7	; 2

	//pin 30
	DDRC |= (1<<PC7);
    1544:	3f 9a       	sbi	0x07, 7	; 7
	PORTC &= ~(1<<PC7);
    1546:	47 98       	cbi	0x08, 7	; 8

	setup();
    1548:	e8 d9       	rcall	.-3120   	; 0x91a <setup>
	OS_Init();
    154a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <OS_Init>
	Task_Create_Idle();
    154e:	37 d9       	rcall	.-3474   	; 0x7be <Task_Create_Idle>
	Task_Create_System(a_main, 42);
    1550:	6a e2       	ldi	r22, 0x2A	; 42
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	88 e4       	ldi	r24, 0x48	; 72
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	f3 d8       	rcall	.-3610   	; 0x740 <Task_Create_System>
	OS_Start();
    155a:	c0 ce       	rjmp	.-640    	; 0x12dc <OS_Start>
    155c:	08 95       	ret

0000155e <enqueue>:
}

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1564:	28 81       	ld	r18, Y
    1566:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    1568:	2f 30       	cpi	r18, 0x0F	; 15
    156a:	31 05       	cpc	r19, r1
    156c:	e9 f0       	breq	.+58     	; 0x15a8 <enqueue+0x4a>
        return NULL;
    }

    int i = (*QCount) - 1;
    156e:	e8 81       	ld	r30, Y
    1570:	f9 81       	ldd	r31, Y+1	; 0x01
    1572:	9f 01       	movw	r18, r30
    1574:	21 50       	subi	r18, 0x01	; 1
    1576:	31 09       	sbc	r19, r1
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    1578:	62 f0       	brmi	.+24     	; 0x1592 <enqueue+0x34>
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	e6 0f       	add	r30, r22
    1580:	f7 1f       	adc	r31, r23
    1582:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    1584:	32 91       	ld	r19, -Z
    1586:	22 91       	ld	r18, -Z
    1588:	33 83       	std	Z+3, r19	; 0x03
    158a:	22 83       	std	Z+2, r18	; 0x02

    int i = (*QCount) - 1;
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    158c:	ea 17       	cp	r30, r26
    158e:	fb 07       	cpc	r31, r27
    1590:	c9 f7       	brne	.-14     	; 0x1584 <enqueue+0x26>
        i--;
        temp = Queue[i];
    }

    //Queue[i+1] = *p; //original code
	Queue[0] = *p;
    1592:	fc 01       	movw	r30, r24
    1594:	80 81       	ld	r24, Z
    1596:	91 81       	ldd	r25, Z+1	; 0x01
    1598:	fb 01       	movw	r30, r22
    159a:	91 83       	std	Z+1, r25	; 0x01
    159c:	80 83       	st	Z, r24
    (*QCount)++;
    159e:	88 81       	ld	r24, Y
    15a0:	99 81       	ldd	r25, Y+1	; 0x01
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	99 83       	std	Y+1, r25	; 0x01
    15a6:	88 83       	st	Y, r24
}
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	08 95       	ret

000015ae <dequeue>:


/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    15ae:	ac 01       	movw	r20, r24
    15b0:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    15b2:	8d 91       	ld	r24, X+
    15b4:	9c 91       	ld	r25, X
    15b6:	11 97       	sbiw	r26, 0x01	; 1

/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
   if(isEmpty(QCount)) {
    15b8:	89 2b       	or	r24, r25
    15ba:	01 f1       	breq	.+64     	; 0x15fc <dequeue+0x4e>
	   return NULL;
   }

   volatile PD *result = (Queue[(*QCount)-1]);
    15bc:	ed 91       	ld	r30, X+
    15be:	fc 91       	ld	r31, X
    15c0:	11 97       	sbiw	r26, 0x01	; 1
    15c2:	e1 50       	subi	r30, 0x01	; 1
    15c4:	f0 48       	sbci	r31, 0x80	; 128
    15c6:	ee 0f       	add	r30, r30
    15c8:	ff 1f       	adc	r31, r31
    15ca:	e4 0f       	add	r30, r20
    15cc:	f5 1f       	adc	r31, r21
    15ce:	80 81       	ld	r24, Z
    15d0:	91 81       	ldd	r25, Z+1	; 0x01
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
    15d2:	2d 91       	ld	r18, X+
    15d4:	3c 91       	ld	r19, X
    15d6:	11 97       	sbiw	r26, 0x01	; 1
    15d8:	f9 01       	movw	r30, r18
    15da:	e1 50       	subi	r30, 0x01	; 1
    15dc:	f0 48       	sbci	r31, 0x80	; 128
    15de:	ee 0f       	add	r30, r30
    15e0:	ff 1f       	adc	r31, r31
    15e2:	e4 0f       	add	r30, r20
    15e4:	f5 1f       	adc	r31, r21
    15e6:	11 82       	std	Z+1, r1	; 0x01
    15e8:	10 82       	st	Z, r1
   (*QCount)--;
    15ea:	2d 91       	ld	r18, X+
    15ec:	3c 91       	ld	r19, X
    15ee:	11 97       	sbiw	r26, 0x01	; 1
    15f0:	21 50       	subi	r18, 0x01	; 1
    15f2:	31 09       	sbc	r19, r1
    15f4:	11 96       	adiw	r26, 0x01	; 1
    15f6:	3c 93       	st	X, r19
    15f8:	2e 93       	st	-X, r18

   return result;
    15fa:	08 95       	ret
/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
   if(isEmpty(QCount)) {
	   return NULL;
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
   volatile PD *result = (Queue[(*QCount)-1]);
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
   (*QCount)--;

   return result;
}
    1600:	08 95       	ret

00001602 <enqueuePeriodic>:

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1602:	cf 92       	push	r12
    1604:	df 92       	push	r13
    1606:	ef 92       	push	r14
    1608:	ff 92       	push	r15
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1614:	ea 01       	movw	r28, r20
    1616:	28 81       	ld	r18, Y
    1618:	39 81       	ldd	r19, Y+1	; 0x01

   return result;
}

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
	if(isFull(QCount)) {
    161a:	2f 30       	cpi	r18, 0x0F	; 15
    161c:	31 05       	cpc	r19, r1
    161e:	09 f4       	brne	.+2      	; 0x1622 <enqueuePeriodic+0x20>
    1620:	4a c0       	rjmp	.+148    	; 0x16b6 <enqueuePeriodic+0xb4>
		return;
	}

	int i = (*QCount) - 1;
    1622:	28 81       	ld	r18, Y
    1624:	39 81       	ldd	r19, Y+1	; 0x01
    1626:	21 50       	subi	r18, 0x01	; 1
    1628:	31 09       	sbc	r19, r1

	volatile PD *new = *p;
    162a:	fc 01       	movw	r30, r24
    162c:	00 81       	ld	r16, Z
    162e:	11 81       	ldd	r17, Z+1	; 0x01

	volatile PD *temp = Queue[i];
    1630:	f9 01       	movw	r30, r18
    1632:	ee 0f       	add	r30, r30
    1634:	ff 1f       	adc	r31, r31
    1636:	db 01       	movw	r26, r22
    1638:	ae 0f       	add	r26, r30
    163a:	bf 1f       	adc	r27, r31
    163c:	4d 91       	ld	r20, X+
    163e:	5c 91       	ld	r21, X

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    1640:	33 23       	and	r19, r19
    1642:	3c f1       	brlt	.+78     	; 0x1692 <enqueuePeriodic+0x90>
    1644:	d8 01       	movw	r26, r16
    1646:	aa 5e       	subi	r26, 0xEA	; 234
    1648:	be 4f       	sbci	r27, 0xFE	; 254
    164a:	ed 90       	ld	r14, X+
    164c:	fc 90       	ld	r15, X
    164e:	da 01       	movw	r26, r20
    1650:	aa 5e       	subi	r26, 0xEA	; 234
    1652:	be 4f       	sbci	r27, 0xFE	; 254
    1654:	4d 91       	ld	r20, X+
    1656:	5c 91       	ld	r21, X
    1658:	e4 16       	cp	r14, r20
    165a:	f5 06       	cpc	r15, r21
    165c:	d4 f0       	brlt	.+52     	; 0x1692 <enqueuePeriodic+0x90>
    165e:	e6 0f       	add	r30, r22
    1660:	f7 1f       	adc	r31, r23
    1662:	0a 5e       	subi	r16, 0xEA	; 234
    1664:	1e 4f       	sbci	r17, 0xFE	; 254
		Queue[i+1] = Queue[i];
    1666:	a0 81       	ld	r26, Z
    1668:	b1 81       	ldd	r27, Z+1	; 0x01
    166a:	b3 83       	std	Z+3, r27	; 0x03
    166c:	a2 83       	std	Z+2, r26	; 0x02
		i--;
    166e:	21 50       	subi	r18, 0x01	; 1
    1670:	31 09       	sbc	r19, r1
		temp = Queue[i];
    1672:	b2 91       	ld	r27, -Z
    1674:	a2 91       	ld	r26, -Z

	volatile PD *new = *p;

	volatile PD *temp = Queue[i];

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    1676:	2f 3f       	cpi	r18, 0xFF	; 255
    1678:	4f ef       	ldi	r20, 0xFF	; 255
    167a:	34 07       	cpc	r19, r20
    167c:	51 f0       	breq	.+20     	; 0x1692 <enqueuePeriodic+0x90>
    167e:	e8 01       	movw	r28, r16
    1680:	e8 80       	ld	r14, Y
    1682:	f9 80       	ldd	r15, Y+1	; 0x01
    1684:	aa 5e       	subi	r26, 0xEA	; 234
    1686:	be 4f       	sbci	r27, 0xFE	; 254
    1688:	4d 91       	ld	r20, X+
    168a:	5c 91       	ld	r21, X
    168c:	e4 16       	cp	r14, r20
    168e:	f5 06       	cpc	r15, r21
    1690:	54 f7       	brge	.-44     	; 0x1666 <enqueuePeriodic+0x64>
		Queue[i+1] = Queue[i];
		i--;
		temp = Queue[i];
	}

	Queue[i+1] = *p;
    1692:	fc 01       	movw	r30, r24
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	2f 5f       	subi	r18, 0xFF	; 255
    169a:	3f 4f       	sbci	r19, 0xFF	; 255
    169c:	22 0f       	add	r18, r18
    169e:	33 1f       	adc	r19, r19
    16a0:	fb 01       	movw	r30, r22
    16a2:	e2 0f       	add	r30, r18
    16a4:	f3 1f       	adc	r31, r19
    16a6:	91 83       	std	Z+1, r25	; 0x01
    16a8:	80 83       	st	Z, r24
	(*QCount)++;
    16aa:	e6 01       	movw	r28, r12
    16ac:	88 81       	ld	r24, Y
    16ae:	99 81       	ldd	r25, Y+1	; 0x01
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	99 83       	std	Y+1, r25	; 0x01
    16b4:	88 83       	st	Y, r24
}
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	ff 90       	pop	r15
    16c0:	ef 90       	pop	r14
    16c2:	df 90       	pop	r13
    16c4:	cf 90       	pop	r12
    16c6:	08 95       	ret

000016c8 <peek>:

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    16c8:	fb 01       	movw	r30, r22
    16ca:	20 81       	ld	r18, Z
    16cc:	31 81       	ldd	r19, Z+1	; 0x01
	Queue[i+1] = *p;
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
    16ce:	23 2b       	or	r18, r19
    16d0:	61 f0       	breq	.+24     	; 0x16ea <peek+0x22>
		return NULL;
	}
	volatile PD *result = (Queue[(*QCount)-1]);
    16d2:	20 81       	ld	r18, Z
    16d4:	31 81       	ldd	r19, Z+1	; 0x01
    16d6:	f9 01       	movw	r30, r18
    16d8:	e1 50       	subi	r30, 0x01	; 1
    16da:	f0 48       	sbci	r31, 0x80	; 128
    16dc:	ee 0f       	add	r30, r30
    16de:	ff 1f       	adc	r31, r31
    16e0:	e8 0f       	add	r30, r24
    16e2:	f9 1f       	adc	r31, r25
    16e4:	80 81       	ld	r24, Z
    16e6:	91 81       	ldd	r25, Z+1	; 0x01
	return result;
    16e8:	08 95       	ret
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
		return NULL;
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
	}
	volatile PD *result = (Queue[(*QCount)-1]);
	return result;
    16ee:	08 95       	ret

000016f0 <Test_Task>:
//Test whether too many tasks can be created;
#include "TEST_too_many_tasks.h"

void Test_Task(){
	Task_Terminate();
    16f0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <Task_Terminate>
    16f4:	08 95       	ret

000016f6 <test_too_many_tasks>:
}

void test_too_many_tasks(void){
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
	uart_start();
    16fe:	6b d0       	rcall	.+214    	; 0x17d6 <uart_start>
	int x; 
	PID k;
	for(x = 0; x < MAXTHREAD*2 ; x++){
		k = Task_Create_System(Test_Task, x);
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	88 e7       	ldi	r24, 0x78	; 120
    1706:	9b e0       	ldi	r25, 0x0B	; 11
    1708:	1b d8       	rcall	.-4042   	; 0x740 <Task_Create_System>

void test_too_many_tasks(void){
	uart_start();
	int x; 
	PID k;
	for(x = 0; x < MAXTHREAD*2 ; x++){
    170a:	c0 e0       	ldi	r28, 0x00	; 0
    170c:	d0 e0       	ldi	r29, 0x00	; 0
    170e:	11 c0       	rjmp	.+34     	; 0x1732 <test_too_many_tasks+0x3c>
		k = Task_Create_System(Test_Task, x);
    1710:	be 01       	movw	r22, r28
    1712:	88 e7       	ldi	r24, 0x78	; 120
    1714:	9b e0       	ldi	r25, 0x0B	; 11
    1716:	14 d8       	rcall	.-4056   	; 0x740 <Task_Create_System>
		if(x >= MAXTHREAD && k != NULL){
    1718:	c0 31       	cpi	r28, 0x10	; 16
    171a:	d1 05       	cpc	r29, r1
    171c:	54 f0       	brlt	.+20     	; 0x1732 <test_too_many_tasks+0x3c>
    171e:	89 2b       	or	r24, r25
    1720:	41 f0       	breq	.+16     	; 0x1732 <test_too_many_tasks+0x3c>
			uart_write("Too many tasks created!");
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	92 e0       	ldi	r25, 0x02	; 2
    1726:	64 d0       	rcall	.+200    	; 0x17f0 <uart_write>
			uart_write("test_too_many_tasks FAILED");
    1728:	88 e1       	ldi	r24, 0x18	; 24
    172a:	92 e0       	ldi	r25, 0x02	; 2
    172c:	61 d0       	rcall	.+194    	; 0x17f0 <uart_write>
			Task_Terminate();
    172e:	0e 94 4f 01 	call	0x29e	; 0x29e <Task_Terminate>

void test_too_many_tasks(void){
	uart_start();
	int x; 
	PID k;
	for(x = 0; x < MAXTHREAD*2 ; x++){
    1732:	21 96       	adiw	r28, 0x01	; 1
    1734:	c0 32       	cpi	r28, 0x20	; 32
    1736:	d1 05       	cpc	r29, r1
    1738:	59 f7       	brne	.-42     	; 0x1710 <test_too_many_tasks+0x1a>
			uart_write("Too many tasks created!");
			uart_write("test_too_many_tasks FAILED");
			Task_Terminate();
		}
	}
	Task_Next();
    173a:	7c d8       	rcall	.-3848   	; 0x834 <Task_Next>
	for(x = 0; x < MAXTHREAD*2 ; x++){
		k = Task_Create_System(Test_Task, x);
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	88 e7       	ldi	r24, 0x78	; 120
    1742:	9b e0       	ldi	r25, 0x0B	; 11
    1744:	0e 94 a0 03 	call	0x740	; 0x740 <Task_Create_System>
			uart_write("test_too_many_tasks FAILED");
			Task_Terminate();
		}
	}
	Task_Next();
	for(x = 0; x < MAXTHREAD*2 ; x++){
    1748:	c0 e0       	ldi	r28, 0x00	; 0
    174a:	d0 e0       	ldi	r29, 0x00	; 0
    174c:	12 c0       	rjmp	.+36     	; 0x1772 <test_too_many_tasks+0x7c>
		k = Task_Create_System(Test_Task, x);
    174e:	be 01       	movw	r22, r28
    1750:	88 e7       	ldi	r24, 0x78	; 120
    1752:	9b e0       	ldi	r25, 0x0B	; 11
    1754:	0e 94 a0 03 	call	0x740	; 0x740 <Task_Create_System>
		if(x >= MAXTHREAD && k != NULL){
    1758:	c0 31       	cpi	r28, 0x10	; 16
    175a:	d1 05       	cpc	r29, r1
    175c:	54 f0       	brlt	.+20     	; 0x1772 <test_too_many_tasks+0x7c>
    175e:	89 2b       	or	r24, r25
    1760:	41 f0       	breq	.+16     	; 0x1772 <test_too_many_tasks+0x7c>
			uart_write("Too many tasks created!");
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	92 e0       	ldi	r25, 0x02	; 2
    1766:	44 d0       	rcall	.+136    	; 0x17f0 <uart_write>
			uart_write("test_too_many_tasks FAILED");
    1768:	88 e1       	ldi	r24, 0x18	; 24
    176a:	92 e0       	ldi	r25, 0x02	; 2
    176c:	41 d0       	rcall	.+130    	; 0x17f0 <uart_write>
			Task_Terminate();
    176e:	0e 94 4f 01 	call	0x29e	; 0x29e <Task_Terminate>
			uart_write("test_too_many_tasks FAILED");
			Task_Terminate();
		}
	}
	Task_Next();
	for(x = 0; x < MAXTHREAD*2 ; x++){
    1772:	21 96       	adiw	r28, 0x01	; 1
    1774:	c0 32       	cpi	r28, 0x20	; 32
    1776:	d1 05       	cpc	r29, r1
    1778:	51 f7       	brne	.-44     	; 0x174e <test_too_many_tasks+0x58>
			uart_write("Too many tasks created!");
			uart_write("test_too_many_tasks FAILED");
			Task_Terminate();
		}
	}
	Task_Next();
    177a:	5c d8       	rcall	.-3912   	; 0x834 <Task_Next>
	for(x = 0; x < MAXTHREAD*2 ; x++){
    177c:	c0 e0       	ldi	r28, 0x00	; 0
    177e:	d0 e0       	ldi	r29, 0x00	; 0
		if(x%2 == 0)
    1780:	c0 fd       	sbrc	r28, 0
    1782:	0b c0       	rjmp	.+22     	; 0x179a <test_too_many_tasks+0xa4>
			k = Task_Create_Period(Test_Task, x, 15, 1, x);
    1784:	8e 01       	movw	r16, r28
    1786:	21 e0       	ldi	r18, 0x01	; 1
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	4f e0       	ldi	r20, 0x0F	; 15
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	be 01       	movw	r22, r28
    1790:	88 e7       	ldi	r24, 0x78	; 120
    1792:	9b e0       	ldi	r25, 0x0B	; 11
    1794:	0e 94 c8 03 	call	0x790	; 0x790 <Task_Create_Period>
    1798:	05 c0       	rjmp	.+10     	; 0x17a4 <test_too_many_tasks+0xae>
		else
			k = Task_Create_RR(Test_Task, x);
    179a:	be 01       	movw	r22, r28
    179c:	88 e7       	ldi	r24, 0x78	; 120
    179e:	9b e0       	ldi	r25, 0x0B	; 11
    17a0:	0e 94 b4 03 	call	0x768	; 0x768 <Task_Create_RR>
		if(x >= MAXTHREAD && k != NULL){
    17a4:	c0 31       	cpi	r28, 0x10	; 16
    17a6:	d1 05       	cpc	r29, r1
    17a8:	54 f0       	brlt	.+20     	; 0x17be <test_too_many_tasks+0xc8>
    17aa:	89 2b       	or	r24, r25
    17ac:	41 f0       	breq	.+16     	; 0x17be <test_too_many_tasks+0xc8>
			uart_write("Too many tasks created!");
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	92 e0       	ldi	r25, 0x02	; 2
    17b2:	1e d0       	rcall	.+60     	; 0x17f0 <uart_write>
			uart_write("test_too_many_tasks FAILED");
    17b4:	88 e1       	ldi	r24, 0x18	; 24
    17b6:	92 e0       	ldi	r25, 0x02	; 2
    17b8:	1b d0       	rcall	.+54     	; 0x17f0 <uart_write>
			Task_Terminate();
    17ba:	0e 94 4f 01 	call	0x29e	; 0x29e <Task_Terminate>
			uart_write("test_too_many_tasks FAILED");
			Task_Terminate();
		}
	}
	Task_Next();
	for(x = 0; x < MAXTHREAD*2 ; x++){
    17be:	21 96       	adiw	r28, 0x01	; 1
    17c0:	c0 32       	cpi	r28, 0x20	; 32
    17c2:	d1 05       	cpc	r29, r1
    17c4:	e9 f6       	brne	.-70     	; 0x1780 <test_too_many_tasks+0x8a>
			uart_write("Too many tasks created!");
			uart_write("test_too_many_tasks FAILED");
			Task_Terminate();
		}
	}
	uart_write("test_too_many_tasks PASSED");
    17c6:	83 e3       	ldi	r24, 0x33	; 51
    17c8:	92 e0       	ldi	r25, 0x02	; 2
    17ca:	12 d0       	rcall	.+36     	; 0x17f0 <uart_write>
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	08 95       	ret

000017d6 <uart_start>:
#include "uart.h"
#include "os.h"

void uart_start(void) {
	Disable_Interrupt();
    17d6:	f8 94       	cli
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); 
    17d8:	e1 ec       	ldi	r30, 0xC1	; 193
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	88 61       	ori	r24, 0x18	; 24
    17e0:	80 83       	st	Z, r24

	UBRR0L = PRESCALE; 
    17e2:	87 e6       	ldi	r24, 0x67	; 103
    17e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = (PRESCALE >> 8); 
    17e8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>

	Enable_Interrupt();
    17ec:	78 94       	sei
    17ee:	08 95       	ret

000017f0 <uart_write>:
}

void uart_write(char *data) {
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
	Disable_Interrupt();
    17f4:	f8 94       	cli
    while (*data) {
    17f6:	fc 01       	movw	r30, r24
    17f8:	20 81       	ld	r18, Z
    17fa:	22 23       	and	r18, r18
    17fc:	69 f0       	breq	.+26     	; 0x1818 <uart_write+0x28>
    17fe:	dc 01       	movw	r26, r24
    1800:	11 96       	adiw	r26, 0x01	; 1
        while ((UCSR0A & (1 << UDRE0)) == 0);
    1802:	e0 ec       	ldi	r30, 0xC0	; 192
    1804:	f0 e0       	ldi	r31, 0x00	; 0
        UDR0 = *data; 
    1806:	c6 ec       	ldi	r28, 0xC6	; 198
    1808:	d0 e0       	ldi	r29, 0x00	; 0
}

void uart_write(char *data) {
	Disable_Interrupt();
    while (*data) {
        while ((UCSR0A & (1 << UDRE0)) == 0);
    180a:	90 81       	ld	r25, Z
    180c:	95 ff       	sbrs	r25, 5
    180e:	fd cf       	rjmp	.-6      	; 0x180a <uart_write+0x1a>
        UDR0 = *data; 
    1810:	28 83       	st	Y, r18
	Enable_Interrupt();
}

void uart_write(char *data) {
	Disable_Interrupt();
    while (*data) {
    1812:	2d 91       	ld	r18, X+
    1814:	21 11       	cpse	r18, r1
    1816:	f9 cf       	rjmp	.-14     	; 0x180a <uart_write+0x1a>
        while ((UCSR0A & (1 << UDRE0)) == 0);
        UDR0 = *data; 
        data++;
    }
    while ((UCSR0A & (1 << UDRE0)) == 0);
    1818:	e0 ec       	ldi	r30, 0xC0	; 192
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	85 ff       	sbrs	r24, 5
    1820:	fd cf       	rjmp	.-6      	; 0x181c <uart_write+0x2c>
    UDR0 = '\n';
    1822:	8a e0       	ldi	r24, 0x0A	; 10
    1824:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	Enable_Interrupt();
    1828:	78 94       	sei
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	08 95       	ret

00001830 <__tablejump2__>:
    1830:	ee 0f       	add	r30, r30
    1832:	ff 1f       	adc	r31, r31
    1834:	88 1f       	adc	r24, r24
    1836:	8b bf       	out	0x3b, r24	; 59
    1838:	07 90       	elpm	r0, Z+
    183a:	f6 91       	elpm	r31, Z
    183c:	e0 2d       	mov	r30, r0
    183e:	19 94       	eijmp

00001840 <_exit>:
    1840:	f8 94       	cli

00001842 <__stop_program>:
    1842:	ff cf       	rjmp	.-2      	; 0x1842 <__stop_program>
