
Project2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  000017dc  00001870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001549  00800236  00800236  000018a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001918  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000336b  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015e5  00000000  00000000  00004ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001438  00000000  00000000  000064b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005cc  00000000  00000000  000078e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b28  00000000  00000000  00007eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016af  00000000  00000000  000089dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0000a08b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
       2:	00 00       	nop
       4:	9a c0       	rjmp	.+308    	; 0x13a <__bad_interrupt>
       6:	00 00       	nop
       8:	98 c0       	rjmp	.+304    	; 0x13a <__bad_interrupt>
       a:	00 00       	nop
       c:	96 c0       	rjmp	.+300    	; 0x13a <__bad_interrupt>
       e:	00 00       	nop
      10:	94 c0       	rjmp	.+296    	; 0x13a <__bad_interrupt>
      12:	00 00       	nop
      14:	92 c0       	rjmp	.+292    	; 0x13a <__bad_interrupt>
      16:	00 00       	nop
      18:	90 c0       	rjmp	.+288    	; 0x13a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8e c0       	rjmp	.+284    	; 0x13a <__bad_interrupt>
      1e:	00 00       	nop
      20:	8c c0       	rjmp	.+280    	; 0x13a <__bad_interrupt>
      22:	00 00       	nop
      24:	8a c0       	rjmp	.+276    	; 0x13a <__bad_interrupt>
      26:	00 00       	nop
      28:	88 c0       	rjmp	.+272    	; 0x13a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	86 c0       	rjmp	.+268    	; 0x13a <__bad_interrupt>
      2e:	00 00       	nop
      30:	84 c0       	rjmp	.+264    	; 0x13a <__bad_interrupt>
      32:	00 00       	nop
      34:	82 c0       	rjmp	.+260    	; 0x13a <__bad_interrupt>
      36:	00 00       	nop
      38:	80 c0       	rjmp	.+256    	; 0x13a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7e c0       	rjmp	.+252    	; 0x13a <__bad_interrupt>
      3e:	00 00       	nop
      40:	7c c0       	rjmp	.+248    	; 0x13a <__bad_interrupt>
      42:	00 00       	nop
      44:	92 c4       	rjmp	.+2340   	; 0x96a <__vector_17>
      46:	00 00       	nop
      48:	78 c0       	rjmp	.+240    	; 0x13a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	76 c0       	rjmp	.+236    	; 0x13a <__bad_interrupt>
      4e:	00 00       	nop
      50:	74 c0       	rjmp	.+232    	; 0x13a <__bad_interrupt>
      52:	00 00       	nop
      54:	72 c0       	rjmp	.+228    	; 0x13a <__bad_interrupt>
      56:	00 00       	nop
      58:	70 c0       	rjmp	.+224    	; 0x13a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6e c0       	rjmp	.+220    	; 0x13a <__bad_interrupt>
      5e:	00 00       	nop
      60:	6c c0       	rjmp	.+216    	; 0x13a <__bad_interrupt>
      62:	00 00       	nop
      64:	6a c0       	rjmp	.+212    	; 0x13a <__bad_interrupt>
      66:	00 00       	nop
      68:	68 c0       	rjmp	.+208    	; 0x13a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	66 c0       	rjmp	.+204    	; 0x13a <__bad_interrupt>
      6e:	00 00       	nop
      70:	64 c0       	rjmp	.+200    	; 0x13a <__bad_interrupt>
      72:	00 00       	nop
      74:	62 c0       	rjmp	.+196    	; 0x13a <__bad_interrupt>
      76:	00 00       	nop
      78:	60 c0       	rjmp	.+192    	; 0x13a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5e c0       	rjmp	.+188    	; 0x13a <__bad_interrupt>
      7e:	00 00       	nop
      80:	d5 c4       	rjmp	.+2474   	; 0xa2c <__vector_32>
      82:	00 00       	nop
      84:	5a c0       	rjmp	.+180    	; 0x13a <__bad_interrupt>
      86:	00 00       	nop
      88:	58 c0       	rjmp	.+176    	; 0x13a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 c0       	rjmp	.+172    	; 0x13a <__bad_interrupt>
      8e:	00 00       	nop
      90:	54 c0       	rjmp	.+168    	; 0x13a <__bad_interrupt>
      92:	00 00       	nop
      94:	52 c0       	rjmp	.+164    	; 0x13a <__bad_interrupt>
      96:	00 00       	nop
      98:	50 c0       	rjmp	.+160    	; 0x13a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4e c0       	rjmp	.+156    	; 0x13a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4c c0       	rjmp	.+152    	; 0x13a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4a c0       	rjmp	.+148    	; 0x13a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	48 c0       	rjmp	.+144    	; 0x13a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	46 c0       	rjmp	.+140    	; 0x13a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	44 c0       	rjmp	.+136    	; 0x13a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	42 c0       	rjmp	.+132    	; 0x13a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	40 c0       	rjmp	.+128    	; 0x13a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3e c0       	rjmp	.+124    	; 0x13a <__bad_interrupt>
      be:	00 00       	nop
      c0:	3c c0       	rjmp	.+120    	; 0x13a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3a c0       	rjmp	.+116    	; 0x13a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	38 c0       	rjmp	.+112    	; 0x13a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	36 c0       	rjmp	.+108    	; 0x13a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	34 c0       	rjmp	.+104    	; 0x13a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	32 c0       	rjmp	.+100    	; 0x13a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	30 c0       	rjmp	.+96     	; 0x13a <__bad_interrupt>
      da:	00 00       	nop
      dc:	2e c0       	rjmp	.+92     	; 0x13a <__bad_interrupt>
      de:	00 00       	nop
      e0:	2c c0       	rjmp	.+88     	; 0x13a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	11 09       	sbc	r17, r1
      e6:	6e 09       	sbc	r22, r14
      e8:	57 09       	sbc	r21, r7
      ea:	29 09       	sbc	r18, r9
      ec:	93 09       	sbc	r25, r3
      ee:	d1 09       	sbc	r29, r1
      f0:	cb 09       	sbc	r28, r11
      f2:	cd 09       	sbc	r28, r13
      f4:	cf 09       	sbc	r28, r15
      f6:	c9 09       	sbc	r28, r9

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d1 e2       	ldi	r29, 0x21	; 33
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	0c bf       	out	0x3c, r16	; 60

00000108 <__do_copy_data>:
     108:	12 e0       	ldi	r17, 0x02	; 2
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b2 e0       	ldi	r27, 0x02	; 2
     10e:	ec ed       	ldi	r30, 0xDC	; 220
     110:	f7 e1       	ldi	r31, 0x17	; 23
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	0b bf       	out	0x3b, r16	; 59
     116:	02 c0       	rjmp	.+4      	; 0x11c <__do_copy_data+0x14>
     118:	07 90       	elpm	r0, Z+
     11a:	0d 92       	st	X+, r0
     11c:	a6 33       	cpi	r26, 0x36	; 54
     11e:	b1 07       	cpc	r27, r17
     120:	d9 f7       	brne	.-10     	; 0x118 <__do_copy_data+0x10>

00000122 <__do_clear_bss>:
     122:	27 e1       	ldi	r18, 0x17	; 23
     124:	a6 e3       	ldi	r26, 0x36	; 54
     126:	b2 e0       	ldi	r27, 0x02	; 2
     128:	01 c0       	rjmp	.+2      	; 0x12c <.do_clear_bss_start>

0000012a <.do_clear_bss_loop>:
     12a:	1d 92       	st	X+, r1

0000012c <.do_clear_bss_start>:
     12c:	af 37       	cpi	r26, 0x7F	; 127
     12e:	b2 07       	cpc	r27, r18
     130:	e1 f7       	brne	.-8      	; 0x12a <.do_clear_bss_loop>
     132:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <main>
     136:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <_exit>

0000013a <__bad_interrupt>:
     13a:	62 cf       	rjmp	.-316    	; 0x0 <__vectors>

0000013c <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     13c:	0f 92       	push	r0
     13e:	1f 92       	push	r1
     140:	2f 92       	push	r2
     142:	3f 92       	push	r3
     144:	4f 92       	push	r4
     146:	5f 92       	push	r5
     148:	6f 92       	push	r6
     14a:	7f 92       	push	r7
     14c:	8f 92       	push	r8
     14e:	9f 92       	push	r9
     150:	af 92       	push	r10
     152:	bf 92       	push	r11
     154:	cf 92       	push	r12
     156:	df 92       	push	r13
     158:	ef 92       	push	r14
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	2f 93       	push	r18
     162:	3f 93       	push	r19
     164:	4f 93       	push	r20
     166:	5f 93       	push	r21
     168:	6f 93       	push	r22
     16a:	7f 93       	push	r23
     16c:	8f 93       	push	r24
     16e:	9f 93       	push	r25
     170:	af 93       	push	r26
     172:	bf 93       	push	r27
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	ef 93       	push	r30
     17a:	ff 93       	push	r31
     17c:	0f b7       	in	r16, 0x3f	; 63
     17e:	0f 93       	push	r16
     180:	fc b7       	in	r31, 0x3c	; 60
     182:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     184:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     186:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     188:	e0 93 5d 17 	sts	0x175D, r30	; 0x80175d <KernelSp>
        sts  KernelSp+1, r31
     18c:	f0 93 5e 17 	sts	0x175E, r31	; 0x80175e <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     190:	e0 91 3b 17 	lds	r30, 0x173B	; 0x80173b <CurrentSp>
        lds  r31, CurrentSp+1
     194:	f0 91 3c 17 	lds	r31, 0x173C	; 0x80173c <CurrentSp+0x1>
        out  SPL, r30
     198:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     19a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     19c:	ff 91       	pop	r31
     19e:	fc bf       	out	0x3c, r31	; 60
     1a0:	0f 91       	pop	r16
     1a2:	0f bf       	out	0x3f, r16	; 63
     1a4:	ff 91       	pop	r31
     1a6:	ef 91       	pop	r30
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	bf 91       	pop	r27
     1ae:	af 91       	pop	r26
     1b0:	9f 91       	pop	r25
     1b2:	8f 91       	pop	r24
     1b4:	7f 91       	pop	r23
     1b6:	6f 91       	pop	r22
     1b8:	5f 91       	pop	r21
     1ba:	4f 91       	pop	r20
     1bc:	3f 91       	pop	r19
     1be:	2f 91       	pop	r18
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	df 90       	pop	r13
     1ca:	cf 90       	pop	r12
     1cc:	bf 90       	pop	r11
     1ce:	af 90       	pop	r10
     1d0:	9f 90       	pop	r9
     1d2:	8f 90       	pop	r8
     1d4:	7f 90       	pop	r7
     1d6:	6f 90       	pop	r6
     1d8:	5f 90       	pop	r5
     1da:	4f 90       	pop	r4
     1dc:	3f 90       	pop	r3
     1de:	2f 90       	pop	r2
     1e0:	1f 90       	pop	r1
     1e2:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1e4:	18 95       	reti

000001e6 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1e6:	0f 92       	push	r0
     1e8:	1f 92       	push	r1
     1ea:	2f 92       	push	r2
     1ec:	3f 92       	push	r3
     1ee:	4f 92       	push	r4
     1f0:	5f 92       	push	r5
     1f2:	6f 92       	push	r6
     1f4:	7f 92       	push	r7
     1f6:	8f 92       	push	r8
     1f8:	9f 92       	push	r9
     1fa:	af 92       	push	r10
     1fc:	bf 92       	push	r11
     1fe:	cf 92       	push	r12
     200:	df 92       	push	r13
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
     20a:	2f 93       	push	r18
     20c:	3f 93       	push	r19
     20e:	4f 93       	push	r20
     210:	5f 93       	push	r21
     212:	6f 93       	push	r22
     214:	7f 93       	push	r23
     216:	8f 93       	push	r24
     218:	9f 93       	push	r25
     21a:	af 93       	push	r26
     21c:	bf 93       	push	r27
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	ef 93       	push	r30
     224:	ff 93       	push	r31
     226:	0f b7       	in	r16, 0x3f	; 63
     228:	0f 93       	push	r16
     22a:	fc b7       	in	r31, 0x3c	; 60
     22c:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     22e:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     230:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     232:	e0 93 3b 17 	sts	0x173B, r30	; 0x80173b <CurrentSp>
        sts  CurrentSp+1, r31
     236:	f0 93 3c 17 	sts	0x173C, r31	; 0x80173c <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     23a:	e0 91 5d 17 	lds	r30, 0x175D	; 0x80175d <KernelSp>
        lds  r31, KernelSp+1
     23e:	f0 91 5e 17 	lds	r31, 0x175E	; 0x80175e <KernelSp+0x1>
        out  SPL, r30
     242:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     244:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     246:	ff 91       	pop	r31
     248:	fc bf       	out	0x3c, r31	; 60
     24a:	0f 91       	pop	r16
     24c:	0f bf       	out	0x3f, r16	; 63
     24e:	ff 91       	pop	r31
     250:	ef 91       	pop	r30
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	bf 91       	pop	r27
     258:	af 91       	pop	r26
     25a:	9f 91       	pop	r25
     25c:	8f 91       	pop	r24
     25e:	7f 91       	pop	r23
     260:	6f 91       	pop	r22
     262:	5f 91       	pop	r21
     264:	4f 91       	pop	r20
     266:	3f 91       	pop	r19
     268:	2f 91       	pop	r18
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	ff 90       	pop	r15
     270:	ef 90       	pop	r14
     272:	df 90       	pop	r13
     274:	cf 90       	pop	r12
     276:	bf 90       	pop	r11
     278:	af 90       	pop	r10
     27a:	9f 90       	pop	r9
     27c:	8f 90       	pop	r8
     27e:	7f 90       	pop	r7
     280:	6f 90       	pop	r6
     282:	5f 90       	pop	r5
     284:	4f 90       	pop	r4
     286:	3f 90       	pop	r3
     288:	2f 90       	pop	r2
     28a:	1f 90       	pop	r1
     28c:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     28e:	08 95       	ret

00000290 <a_main>:
	Task_Create_RR(ASDF4,5);
	Task_Create_System(ASDF5,6);
	Task_Create_System(ASDF3,3);
	Task_Create_RR(ASDF4,4);
	*/
	Task_Create_System(test_periodic_task_scheduling, 0);
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	81 ef       	ldi	r24, 0xF1	; 241
     296:	9a e0       	ldi	r25, 0x0A	; 10
     298:	51 c2       	rjmp	.+1186   	; 0x73c <Task_Create_System>
     29a:	08 95       	ret

0000029c <idle>:
void Write(CHAN ch, int v) {
	if (Cp->priority == PERIODIC) OS_Abort(5); // periodic tasks are not allowed to use csp
	Cp->request = ASYNC_SEND;
	Cp->senderChannel = ch;
	Cp->val = v;
	Enter_Kernel();
     29c:	ff cf       	rjmp	.-2      	; 0x29c <idle>

0000029e <Task_Terminate>:
     29e:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <KernelActive>
     2a2:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <KernelActive+0x1>
     2a6:	89 2b       	or	r24, r25
     2a8:	51 f0       	breq	.+20     	; 0x2be <Task_Terminate+0x20>
     2aa:	f8 94       	cli
     2ac:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <Cp>
     2b0:	f0 91 d5 04 	lds	r31, 0x04D5	; 0x8004d5 <Cp+0x1>
     2b4:	e5 5f       	subi	r30, 0xF5	; 245
     2b6:	fe 4f       	sbci	r31, 0xFE	; 254
     2b8:	86 e0       	ldi	r24, 0x06	; 6
     2ba:	80 83       	st	Z, r24
     2bc:	94 cf       	rjmp	.-216    	; 0x1e6 <Enter_Kernel>
     2be:	08 95       	ret

000002c0 <Kernel_Create_Task_At>:
     2c0:	8f 92       	push	r8
     2c2:	9f 92       	push	r9
     2c4:	af 92       	push	r10
     2c6:	bf 92       	push	r11
     2c8:	cf 92       	push	r12
     2ca:	df 92       	push	r13
     2cc:	ef 92       	push	r14
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	1f 92       	push	r1
     2da:	1f 92       	push	r1
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	9a 83       	std	Y+2, r25	; 0x02
     2e2:	89 83       	std	Y+1, r24	; 0x01
     2e4:	5c 01       	movw	r10, r24
     2e6:	a4 e0       	ldi	r26, 0x04	; 4
     2e8:	aa 0e       	add	r10, r26
     2ea:	b1 1c       	adc	r11, r1
     2ec:	81 2c       	mov	r8, r1
     2ee:	99 24       	eor	r9, r9
     2f0:	93 94       	inc	r9
     2f2:	f5 01       	movw	r30, r10
     2f4:	d4 01       	movw	r26, r8
     2f6:	11 92       	st	Z+, r1
     2f8:	11 97       	sbiw	r26, 0x01	; 1
     2fa:	e9 f7       	brne	.-6      	; 0x2f6 <Kernel_Create_Task_At+0x36>
     2fc:	dc 01       	movw	r26, r24
     2fe:	ad 5f       	subi	r26, 0xFD	; 253
     300:	be 4f       	sbci	r27, 0xFE	; 254
     302:	ef e4       	ldi	r30, 0x4F	; 79
     304:	f1 e0       	ldi	r31, 0x01	; 1
     306:	ec 93       	st	X, r30
     308:	11 97       	sbiw	r26, 0x01	; 1
     30a:	fc 93       	st	X, r31
     30c:	fc 01       	movw	r30, r24
     30e:	ef 5f       	subi	r30, 0xFF	; 255
     310:	fe 4f       	sbci	r31, 0xFE	; 254
     312:	10 82       	st	Z, r1
     314:	31 97       	sbiw	r30, 0x01	; 1
     316:	60 83       	st	Z, r22
     318:	31 97       	sbiw	r30, 0x01	; 1
     31a:	70 83       	st	Z, r23
     31c:	31 97       	sbiw	r30, 0x01	; 1
     31e:	10 82       	st	Z, r1
     320:	b3 97       	sbiw	r30, 0x23	; 35
     322:	dc 01       	movw	r26, r24
     324:	13 96       	adiw	r26, 0x03	; 3
     326:	fc 93       	st	X, r31
     328:	ee 93       	st	-X, r30
     32a:	12 97       	sbiw	r26, 0x02	; 2
     32c:	be 96       	adiw	r30, 0x2e	; 46
     32e:	71 83       	std	Z+1, r23	; 0x01
     330:	60 83       	st	Z, r22
     332:	32 96       	adiw	r30, 0x02	; 2
     334:	10 82       	st	Z, r1
     336:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <pCount>
     33a:	70 91 cf 04 	lds	r23, 0x04CF	; 0x8004cf <pCount+0x1>
     33e:	fc 01       	movw	r30, r24
     340:	71 83       	std	Z+1, r23	; 0x01
     342:	60 83       	st	Z, r22
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	9a 81       	ldd	r25, Y+2	; 0x02
     348:	fc 01       	movw	r30, r24
     34a:	eb 5f       	subi	r30, 0xFB	; 251
     34c:	fe 4f       	sbci	r31, 0xFE	; 254
     34e:	51 83       	std	Z+1, r21	; 0x01
     350:	40 83       	st	Z, r20
     352:	32 96       	adiw	r30, 0x02	; 2
     354:	31 83       	std	Z+1, r19	; 0x01
     356:	20 83       	st	Z, r18
     358:	3f 96       	adiw	r30, 0x0f	; 15
     35a:	2f ef       	ldi	r18, 0xFF	; 255
     35c:	3f ef       	ldi	r19, 0xFF	; 255
     35e:	31 83       	std	Z+1, r19	; 0x01
     360:	20 83       	st	Z, r18
     362:	32 96       	adiw	r30, 0x02	; 2
     364:	11 82       	std	Z+1, r1	; 0x01
     366:	10 82       	st	Z, r1
     368:	34 97       	sbiw	r30, 0x04	; 4
     36a:	11 83       	std	Z+1, r17	; 0x01
     36c:	00 83       	st	Z, r16
     36e:	34 97       	sbiw	r30, 0x04	; 4
     370:	d1 82       	std	Z+1, r13	; 0x01
     372:	c0 82       	st	Z, r12
     374:	32 96       	adiw	r30, 0x02	; 2
     376:	f1 82       	std	Z+1, r15	; 0x01
     378:	e0 82       	st	Z, r14
     37a:	20 91 d0 04 	lds	r18, 0x04D0	; 0x8004d0 <Tasks>
     37e:	30 91 d1 04 	lds	r19, 0x04D1	; 0x8004d1 <Tasks+0x1>
     382:	2f 5f       	subi	r18, 0xFF	; 255
     384:	3f 4f       	sbci	r19, 0xFF	; 255
     386:	30 93 d1 04 	sts	0x04D1, r19	; 0x8004d1 <Tasks+0x1>
     38a:	20 93 d0 04 	sts	0x04D0, r18	; 0x8004d0 <Tasks>
     38e:	20 91 ce 04 	lds	r18, 0x04CE	; 0x8004ce <pCount>
     392:	30 91 cf 04 	lds	r19, 0x04CF	; 0x8004cf <pCount+0x1>
     396:	2f 5f       	subi	r18, 0xFF	; 255
     398:	3f 4f       	sbci	r19, 0xFF	; 255
     39a:	30 93 cf 04 	sts	0x04CF, r19	; 0x8004cf <pCount+0x1>
     39e:	20 93 ce 04 	sts	0x04CE, r18	; 0x8004ce <pCount>
     3a2:	3e 97       	sbiw	r30, 0x0e	; 14
     3a4:	21 e0       	ldi	r18, 0x01	; 1
     3a6:	20 83       	st	Z, r18
     3a8:	43 30       	cpi	r20, 0x03	; 3
     3aa:	51 05       	cpc	r21, r1
     3ac:	49 f4       	brne	.+18     	; 0x3c0 <Kernel_Create_Task_At+0x100>
     3ae:	4a ec       	ldi	r20, 0xCA	; 202
     3b0:	54 e0       	ldi	r21, 0x04	; 4
     3b2:	69 e1       	ldi	r22, 0x19	; 25
     3b4:	77 e1       	ldi	r23, 0x17	; 23
     3b6:	ce 01       	movw	r24, r28
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	0e 94 01 0a 	call	0x1402	; 0x1402 <enqueue>
     3be:	1c c0       	rjmp	.+56     	; 0x3f8 <Kernel_Create_Task_At+0x138>
     3c0:	42 30       	cpi	r20, 0x02	; 2
     3c2:	51 05       	cpc	r21, r1
     3c4:	71 f4       	brne	.+28     	; 0x3e2 <Kernel_Create_Task_At+0x122>
     3c6:	fc 01       	movw	r30, r24
     3c8:	ea 5e       	subi	r30, 0xEA	; 234
     3ca:	fe 4f       	sbci	r31, 0xFE	; 254
     3cc:	11 83       	std	Z+1, r17	; 0x01
     3ce:	00 83       	st	Z, r16
     3d0:	48 ec       	ldi	r20, 0xC8	; 200
     3d2:	54 e0       	ldi	r21, 0x04	; 4
     3d4:	6d e3       	ldi	r22, 0x3D	; 61
     3d6:	77 e1       	ldi	r23, 0x17	; 23
     3d8:	ce 01       	movw	r24, r28
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <enqueuePeriodic>
     3e0:	0b c0       	rjmp	.+22     	; 0x3f8 <Kernel_Create_Task_At+0x138>
     3e2:	41 30       	cpi	r20, 0x01	; 1
     3e4:	51 05       	cpc	r21, r1
     3e6:	41 f4       	brne	.+16     	; 0x3f8 <Kernel_Create_Task_At+0x138>
     3e8:	46 ec       	ldi	r20, 0xC6	; 198
     3ea:	54 e0       	ldi	r21, 0x04	; 4
     3ec:	6f e5       	ldi	r22, 0x5F	; 95
     3ee:	77 e1       	ldi	r23, 0x17	; 23
     3f0:	ce 01       	movw	r24, r28
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	0e 94 01 0a 	call	0x1402	; 0x1402 <enqueue>
     3f8:	e9 81       	ldd	r30, Y+1	; 0x01
     3fa:	fa 81       	ldd	r31, Y+2	; 0x02
     3fc:	80 81       	ld	r24, Z
     3fe:	91 81       	ldd	r25, Z+1	; 0x01
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	df 90       	pop	r13
     412:	cf 90       	pop	r12
     414:	bf 90       	pop	r11
     416:	af 90       	pop	r10
     418:	9f 90       	pop	r9
     41a:	8f 90       	pop	r8
     41c:	08 95       	ret

0000041e <Kernel_Create_Task>:
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	e9 01       	movw	r28, r18
     430:	20 91 d0 04 	lds	r18, 0x04D0	; 0x8004d0 <Tasks>
     434:	30 91 d1 04 	lds	r19, 0x04D1	; 0x8004d1 <Tasks+0x1>
     438:	20 31       	cpi	r18, 0x10	; 16
     43a:	31 05       	cpc	r19, r1
     43c:	41 f1       	breq	.+80     	; 0x48e <Kernel_Create_Task+0x70>
     43e:	20 91 da 05 	lds	r18, 0x05DA	; 0x8005da <Process+0x104>
     442:	22 23       	and	r18, r18
     444:	71 f0       	breq	.+28     	; 0x462 <Kernel_Create_Task+0x44>
     446:	ac ef       	ldi	r26, 0xFC	; 252
     448:	b6 e0       	ldi	r27, 0x06	; 6
     44a:	e1 e0       	ldi	r30, 0x01	; 1
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	3c 91       	ld	r19, X
     450:	33 23       	and	r19, r19
     452:	49 f0       	breq	.+18     	; 0x466 <Kernel_Create_Task+0x48>
     454:	31 96       	adiw	r30, 0x01	; 1
     456:	ae 5d       	subi	r26, 0xDE	; 222
     458:	be 4f       	sbci	r27, 0xFE	; 254
     45a:	e0 31       	cpi	r30, 0x10	; 16
     45c:	f1 05       	cpc	r31, r1
     45e:	b9 f7       	brne	.-18     	; 0x44e <Kernel_Create_Task+0x30>
     460:	02 c0       	rjmp	.+4      	; 0x466 <Kernel_Create_Task+0x48>
     462:	e0 e0       	ldi	r30, 0x00	; 0
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	67 01       	movw	r12, r14
     468:	78 01       	movw	r14, r16
     46a:	8e 01       	movw	r16, r28
     46c:	9a 01       	movw	r18, r20
     46e:	ab 01       	movw	r20, r22
     470:	bc 01       	movw	r22, r24
     472:	82 e2       	ldi	r24, 0x22	; 34
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	e8 9f       	mul	r30, r24
     478:	d0 01       	movw	r26, r0
     47a:	e9 9f       	mul	r30, r25
     47c:	b0 0d       	add	r27, r0
     47e:	f8 9f       	mul	r31, r24
     480:	b0 0d       	add	r27, r0
     482:	11 24       	eor	r1, r1
     484:	cd 01       	movw	r24, r26
     486:	8a 52       	subi	r24, 0x2A	; 42
     488:	9b 4f       	sbci	r25, 0xFB	; 251
     48a:	1a df       	rcall	.-460    	; 0x2c0 <Kernel_Create_Task_At>
     48c:	02 c0       	rjmp	.+4      	; 0x492 <Kernel_Create_Task+0x74>
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	ff 90       	pop	r15
     49c:	ef 90       	pop	r14
     49e:	df 90       	pop	r13
     4a0:	cf 90       	pop	r12
     4a2:	08 95       	ret

000004a4 <OS_Init>:
     4a4:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <Tasks+0x1>
     4a8:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <Tasks>
     4ac:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <KernelActive+0x1>
     4b0:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <KernelActive>
     4b4:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <pCount+0x1>
     4b8:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <pCount>
     4bc:	e6 ed       	ldi	r30, 0xD6	; 214
     4be:	f4 e0       	ldi	r31, 0x04	; 4
     4c0:	26 ef       	ldi	r18, 0xF6	; 246
     4c2:	36 e1       	ldi	r19, 0x16	; 22
     4c4:	82 e2       	ldi	r24, 0x22	; 34
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	df 01       	movw	r26, r30
     4ca:	ac 01       	movw	r20, r24
     4cc:	1d 92       	st	X+, r1
     4ce:	41 50       	subi	r20, 0x01	; 1
     4d0:	50 40       	sbci	r21, 0x00	; 0
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <OS_Init+0x28>
     4d4:	df 01       	movw	r26, r30
     4d6:	ac 5f       	subi	r26, 0xFC	; 252
     4d8:	be 4f       	sbci	r27, 0xFE	; 254
     4da:	1c 92       	st	X, r1
     4dc:	11 82       	std	Z+1, r1	; 0x01
     4de:	10 82       	st	Z, r1
     4e0:	ee 5d       	subi	r30, 0xDE	; 222
     4e2:	fe 4f       	sbci	r31, 0xFE	; 254
     4e4:	e2 17       	cp	r30, r18
     4e6:	f3 07       	cpc	r31, r19
     4e8:	79 f7       	brne	.-34     	; 0x4c8 <OS_Init+0x24>
     4ea:	a6 e3       	ldi	r26, 0x36	; 54
     4ec:	b2 e0       	ldi	r27, 0x02	; 2
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	29 e2       	ldi	r18, 0x29	; 41
     4f4:	fd 01       	movw	r30, r26
     4f6:	32 2f       	mov	r19, r18
     4f8:	11 92       	st	Z+, r1
     4fa:	3a 95       	dec	r19
     4fc:	e9 f7       	brne	.-6      	; 0x4f8 <OS_Init+0x54>
     4fe:	28 9f       	mul	r18, r24
     500:	f0 01       	movw	r30, r0
     502:	29 9f       	mul	r18, r25
     504:	f0 0d       	add	r31, r0
     506:	11 24       	eor	r1, r1
     508:	ea 5c       	subi	r30, 0xCA	; 202
     50a:	fd 4f       	sbci	r31, 0xFD	; 253
     50c:	16 a2       	std	Z+38, r1	; 0x26
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	91 83       	std	Z+1, r25	; 0x01
     512:	80 83       	st	Z, r24
     514:	99 96       	adiw	r26, 0x29	; 41
     516:	80 31       	cpi	r24, 0x10	; 16
     518:	91 05       	cpc	r25, r1
     51a:	61 f7       	brne	.-40     	; 0x4f4 <OS_Init+0x50>
     51c:	08 95       	ret

0000051e <OS_Abort>:
     51e:	47 9a       	sbi	0x08, 7	; 8
     520:	47 98       	cbi	0x08, 7	; 8
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_exit>

0000052a <CheckTimingViolation>:
     52a:	a0 91 c8 04 	lds	r26, 0x04C8	; 0x8004c8 <PeriodicCount>
     52e:	b0 91 c9 04 	lds	r27, 0x04C9	; 0x8004c9 <PeriodicCount+0x1>
     532:	cd 01       	movw	r24, r26
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	da f0       	brmi	.+54     	; 0x56e <CheckTimingViolation+0x44>
     538:	aa 0f       	add	r26, r26
     53a:	bb 1f       	adc	r27, r27
     53c:	a3 5c       	subi	r26, 0xC3	; 195
     53e:	b8 4e       	sbci	r27, 0xE8	; 232
     540:	4d e3       	ldi	r20, 0x3D	; 61
     542:	57 e1       	ldi	r21, 0x17	; 23
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	fe 91       	ld	r31, -X
     54a:	ee 91       	ld	r30, -X
     54c:	ea 5e       	subi	r30, 0xEA	; 234
     54e:	fe 4f       	sbci	r31, 0xFE	; 254
     550:	80 81       	ld	r24, Z
     552:	91 81       	ldd	r25, Z+1	; 0x01
     554:	89 2b       	or	r24, r25
     556:	11 f4       	brne	.+4      	; 0x55c <CheckTimingViolation+0x32>
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	a4 17       	cp	r26, r20
     55e:	b5 07       	cpc	r27, r21
     560:	99 f7       	brne	.-26     	; 0x548 <CheckTimingViolation+0x1e>
     562:	22 30       	cpi	r18, 0x02	; 2
     564:	31 05       	cpc	r19, r1
     566:	1c f0       	brlt	.+6      	; 0x56e <CheckTimingViolation+0x44>
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	d8 cf       	rjmp	.-80     	; 0x51e <OS_Abort>
     56e:	08 95       	ret

00000570 <Dispatch>:
     570:	dc df       	rcall	.-72     	; 0x52a <CheckTimingViolation>
     572:	6a ec       	ldi	r22, 0xCA	; 202
     574:	74 e0       	ldi	r23, 0x04	; 4
     576:	89 e1       	ldi	r24, 0x19	; 25
     578:	97 e1       	ldi	r25, 0x17	; 23
     57a:	6b d7       	rcall	.+3798   	; 0x1452 <dequeue>
     57c:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <Cp+0x1>
     580:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <Cp>
     584:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <PeriodicCount>
     588:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <PeriodicCount+0x1>
     58c:	89 2b       	or	r24, r25
     58e:	d9 f0       	breq	.+54     	; 0x5c6 <Dispatch+0x56>
     590:	68 ec       	ldi	r22, 0xC8	; 200
     592:	74 e0       	ldi	r23, 0x04	; 4
     594:	8d e3       	ldi	r24, 0x3D	; 61
     596:	97 e1       	ldi	r25, 0x17	; 23
     598:	e9 d7       	rcall	.+4050   	; 0x156c <peek>
     59a:	fc 01       	movw	r30, r24
     59c:	ea 5e       	subi	r30, 0xEA	; 234
     59e:	fe 4f       	sbci	r31, 0xFE	; 254
     5a0:	80 81       	ld	r24, Z
     5a2:	91 81       	ldd	r25, Z+1	; 0x01
     5a4:	89 2b       	or	r24, r25
     5a6:	79 f4       	brne	.+30     	; 0x5c6 <Dispatch+0x56>
     5a8:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <Cp>
     5ac:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <Cp+0x1>
     5b0:	89 2b       	or	r24, r25
     5b2:	01 f5       	brne	.+64     	; 0x5f4 <Dispatch+0x84>
     5b4:	68 ec       	ldi	r22, 0xC8	; 200
     5b6:	74 e0       	ldi	r23, 0x04	; 4
     5b8:	8d e3       	ldi	r24, 0x3D	; 61
     5ba:	97 e1       	ldi	r25, 0x17	; 23
     5bc:	4a d7       	rcall	.+3732   	; 0x1452 <dequeue>
     5be:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <Cp+0x1>
     5c2:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <Cp>
     5c6:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <Cp>
     5ca:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <Cp+0x1>
     5ce:	89 2b       	or	r24, r25
     5d0:	89 f4       	brne	.+34     	; 0x5f4 <Dispatch+0x84>
     5d2:	66 ec       	ldi	r22, 0xC6	; 198
     5d4:	74 e0       	ldi	r23, 0x04	; 4
     5d6:	8f e5       	ldi	r24, 0x5F	; 95
     5d8:	97 e1       	ldi	r25, 0x17	; 23
     5da:	3b d7       	rcall	.+3702   	; 0x1452 <dequeue>
     5dc:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <Cp+0x1>
     5e0:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <Cp>
     5e4:	89 2b       	or	r24, r25
     5e6:	31 f4       	brne	.+12     	; 0x5f4 <Dispatch+0x84>
     5e8:	86 ed       	ldi	r24, 0xD6	; 214
     5ea:	94 e0       	ldi	r25, 0x04	; 4
     5ec:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <Cp+0x1>
     5f0:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <Cp>
     5f4:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <Cp>
     5f8:	f0 91 d5 04 	lds	r31, 0x04D5	; 0x8004d5 <Cp+0x1>
     5fc:	82 81       	ldd	r24, Z+2	; 0x02
     5fe:	93 81       	ldd	r25, Z+3	; 0x03
     600:	90 93 3c 17 	sts	0x173C, r25	; 0x80173c <CurrentSp+0x1>
     604:	80 93 3b 17 	sts	0x173B, r24	; 0x80173b <CurrentSp>
     608:	ec 5f       	subi	r30, 0xFC	; 252
     60a:	fe 4f       	sbci	r31, 0xFE	; 254
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	80 83       	st	Z, r24
     610:	08 95       	ret

00000612 <Task_Create>:
     612:	6f 92       	push	r6
     614:	7f 92       	push	r7
     616:	8f 92       	push	r8
     618:	9f 92       	push	r9
     61a:	af 92       	push	r10
     61c:	bf 92       	push	r11
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	e0 91 d2 04 	lds	r30, 0x04D2	; 0x8004d2 <KernelActive>
     632:	f0 91 d3 04 	lds	r31, 0x04D3	; 0x8004d3 <KernelActive+0x1>
     636:	ef 2b       	or	r30, r31
     638:	09 f4       	brne	.+2      	; 0x63c <Task_Create+0x2a>
     63a:	69 c0       	rjmp	.+210    	; 0x70e <Task_Create+0xfc>
     63c:	f8 94       	cli
     63e:	63 30       	cpi	r22, 0x03	; 3
     640:	71 05       	cpc	r23, r1
     642:	49 f4       	brne	.+18     	; 0x656 <Task_Create+0x44>
     644:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <Cp>
     648:	f0 91 d5 04 	lds	r31, 0x04D5	; 0x8004d5 <Cp+0x1>
     64c:	e5 5f       	subi	r30, 0xF5	; 245
     64e:	fe 4f       	sbci	r31, 0xFE	; 254
     650:	62 e0       	ldi	r22, 0x02	; 2
     652:	60 83       	st	Z, r22
     654:	22 c0       	rjmp	.+68     	; 0x69a <Task_Create+0x88>
     656:	62 30       	cpi	r22, 0x02	; 2
     658:	71 05       	cpc	r23, r1
     65a:	81 f4       	brne	.+32     	; 0x67c <Task_Create+0x6a>
     65c:	60 91 d4 04 	lds	r22, 0x04D4	; 0x8004d4 <Cp>
     660:	70 91 d5 04 	lds	r23, 0x04D5	; 0x8004d5 <Cp+0x1>
     664:	fb 01       	movw	r30, r22
     666:	e5 5f       	subi	r30, 0xF5	; 245
     668:	fe 4f       	sbci	r31, 0xFE	; 254
     66a:	a4 e0       	ldi	r26, 0x04	; 4
     66c:	a0 83       	st	Z, r26
     66e:	3b 96       	adiw	r30, 0x0b	; 11
     670:	b9 01       	movw	r22, r18
     672:	6e 0d       	add	r22, r14
     674:	7f 1d       	adc	r23, r15
     676:	71 83       	std	Z+1, r23	; 0x01
     678:	60 83       	st	Z, r22
     67a:	0f c0       	rjmp	.+30     	; 0x69a <Task_Create+0x88>
     67c:	61 30       	cpi	r22, 0x01	; 1
     67e:	71 05       	cpc	r23, r1
     680:	49 f4       	brne	.+18     	; 0x694 <Task_Create+0x82>
     682:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <Cp>
     686:	f0 91 d5 04 	lds	r31, 0x04D5	; 0x8004d5 <Cp+0x1>
     68a:	e5 5f       	subi	r30, 0xF5	; 245
     68c:	fe 4f       	sbci	r31, 0xFE	; 254
     68e:	63 e0       	ldi	r22, 0x03	; 3
     690:	60 83       	st	Z, r22
     692:	03 c0       	rjmp	.+6      	; 0x69a <Task_Create+0x88>
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	42 df       	rcall	.-380    	; 0x51e <OS_Abort>
     69a:	60 91 d4 04 	lds	r22, 0x04D4	; 0x8004d4 <Cp>
     69e:	70 91 d5 04 	lds	r23, 0x04D5	; 0x8004d5 <Cp+0x1>
     6a2:	fb 01       	movw	r30, r22
     6a4:	e7 5f       	subi	r30, 0xF7	; 247
     6a6:	fe 4f       	sbci	r31, 0xFE	; 254
     6a8:	91 83       	std	Z+1, r25	; 0x01
     6aa:	80 83       	st	Z, r24
     6ac:	32 97       	sbiw	r30, 0x02	; 2
     6ae:	60 80       	ld	r6, Z
     6b0:	71 80       	ldd	r7, Z+1	; 0x01
     6b2:	51 83       	std	Z+1, r21	; 0x01
     6b4:	40 83       	st	Z, r20
     6b6:	db 01       	movw	r26, r22
     6b8:	ac 5e       	subi	r26, 0xEC	; 236
     6ba:	be 4f       	sbci	r27, 0xFE	; 254
     6bc:	ad 90       	ld	r10, X+
     6be:	bc 90       	ld	r11, X
     6c0:	11 97       	sbiw	r26, 0x01	; 1
     6c2:	3b 96       	adiw	r30, 0x0b	; 11
     6c4:	c0 80       	ld	r12, Z
     6c6:	d1 80       	ldd	r13, Z+1	; 0x01
     6c8:	60 5f       	subi	r22, 0xF0	; 240
     6ca:	7e 4f       	sbci	r23, 0xFE	; 254
     6cc:	eb 01       	movw	r28, r22
     6ce:	88 80       	ld	r8, Y
     6d0:	99 80       	ldd	r9, Y+1	; 0x01
     6d2:	11 96       	adiw	r26, 0x01	; 1
     6d4:	3c 93       	st	X, r19
     6d6:	2e 93       	st	-X, r18
     6d8:	11 83       	std	Z+1, r17	; 0x01
     6da:	00 83       	st	Z, r16
     6dc:	f9 82       	std	Y+1, r15	; 0x01
     6de:	e8 82       	st	Y, r14
     6e0:	82 dd       	rcall	.-1276   	; 0x1e6 <Enter_Kernel>
     6e2:	20 91 d4 04 	lds	r18, 0x04D4	; 0x8004d4 <Cp>
     6e6:	30 91 d5 04 	lds	r19, 0x04D5	; 0x8004d5 <Cp+0x1>
     6ea:	f9 01       	movw	r30, r18
     6ec:	e4 5f       	subi	r30, 0xF4	; 244
     6ee:	fe 4f       	sbci	r31, 0xFE	; 254
     6f0:	80 81       	ld	r24, Z
     6f2:	91 81       	ldd	r25, Z+1	; 0x01
     6f4:	38 96       	adiw	r30, 0x08	; 8
     6f6:	b1 82       	std	Z+1, r11	; 0x01
     6f8:	a0 82       	st	Z, r10
     6fa:	32 97       	sbiw	r30, 0x02	; 2
     6fc:	d1 82       	std	Z+1, r13	; 0x01
     6fe:	c0 82       	st	Z, r12
     700:	32 97       	sbiw	r30, 0x02	; 2
     702:	91 82       	std	Z+1, r9	; 0x01
     704:	80 82       	st	Z, r8
     706:	39 97       	sbiw	r30, 0x09	; 9
     708:	71 82       	std	Z+1, r7	; 0x01
     70a:	60 82       	st	Z, r6
     70c:	08 c0       	rjmp	.+16     	; 0x71e <Task_Create+0x10c>
     70e:	ee 24       	eor	r14, r14
     710:	ea 94       	dec	r14
     712:	fe 2c       	mov	r15, r14
     714:	0f ef       	ldi	r16, 0xFF	; 255
     716:	1f ef       	ldi	r17, 0xFF	; 255
     718:	2f ef       	ldi	r18, 0xFF	; 255
     71a:	3f ef       	ldi	r19, 0xFF	; 255
     71c:	80 de       	rcall	.-768    	; 0x41e <Kernel_Create_Task>
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	bf 90       	pop	r11
     730:	af 90       	pop	r10
     732:	9f 90       	pop	r9
     734:	8f 90       	pop	r8
     736:	7f 90       	pop	r7
     738:	6f 90       	pop	r6
     73a:	08 95       	ret

0000073c <Task_Create_System>:
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	ab 01       	movw	r20, r22
     746:	ee 24       	eor	r14, r14
     748:	ea 94       	dec	r14
     74a:	fe 2c       	mov	r15, r14
     74c:	0f ef       	ldi	r16, 0xFF	; 255
     74e:	1f ef       	ldi	r17, 0xFF	; 255
     750:	2f ef       	ldi	r18, 0xFF	; 255
     752:	3f ef       	ldi	r19, 0xFF	; 255
     754:	63 e0       	ldi	r22, 0x03	; 3
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	5c df       	rcall	.-328    	; 0x612 <Task_Create>
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	08 95       	ret

00000764 <Task_Create_Period>:
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	7a 01       	movw	r14, r20
     76e:	a8 01       	movw	r20, r16
     770:	2e 15       	cp	r18, r14
     772:	3f 05       	cpc	r19, r15
     774:	18 f0       	brcs	.+6      	; 0x77c <Task_Create_Period+0x18>
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	d1 de       	rcall	.-606    	; 0x51e <OS_Abort>
     77c:	89 01       	movw	r16, r18
     77e:	9a 01       	movw	r18, r20
     780:	ab 01       	movw	r20, r22
     782:	62 e0       	ldi	r22, 0x02	; 2
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	45 df       	rcall	.-374    	; 0x612 <Task_Create>
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	08 95       	ret

00000792 <Task_Create_Idle>:
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <KernelActive>
     79e:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <KernelActive+0x1>
     7a2:	89 2b       	or	r24, r25
     7a4:	f1 f0       	breq	.+60     	; 0x7e2 <Task_Create_Idle+0x50>
     7a6:	f8 94       	cli
     7a8:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <Cp>
     7ac:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <Cp+0x1>
     7b0:	fc 01       	movw	r30, r24
     7b2:	e7 5f       	subi	r30, 0xF7	; 247
     7b4:	fe 4f       	sbci	r31, 0xFE	; 254
     7b6:	2e e4       	ldi	r18, 0x4E	; 78
     7b8:	31 e0       	ldi	r19, 0x01	; 1
     7ba:	31 83       	std	Z+1, r19	; 0x01
     7bc:	20 83       	st	Z, r18
     7be:	34 97       	sbiw	r30, 0x04	; 4
     7c0:	24 e0       	ldi	r18, 0x04	; 4
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	31 83       	std	Z+1, r19	; 0x01
     7c6:	20 83       	st	Z, r18
     7c8:	32 96       	adiw	r30, 0x02	; 2
     7ca:	11 82       	std	Z+1, r1	; 0x01
     7cc:	10 82       	st	Z, r1
     7ce:	0b dd       	rcall	.-1514   	; 0x1e6 <Enter_Kernel>
     7d0:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <Cp>
     7d4:	f0 91 d5 04 	lds	r31, 0x04D5	; 0x8004d5 <Cp+0x1>
     7d8:	e4 5f       	subi	r30, 0xF4	; 244
     7da:	fe 4f       	sbci	r31, 0xFE	; 254
     7dc:	80 81       	ld	r24, Z
     7de:	91 81       	ldd	r25, Z+1	; 0x01
     7e0:	0e c0       	rjmp	.+28     	; 0x7fe <Task_Create_Idle+0x6c>
     7e2:	ee 24       	eor	r14, r14
     7e4:	ea 94       	dec	r14
     7e6:	fe 2c       	mov	r15, r14
     7e8:	0f ef       	ldi	r16, 0xFF	; 255
     7ea:	1f ef       	ldi	r17, 0xFF	; 255
     7ec:	2f ef       	ldi	r18, 0xFF	; 255
     7ee:	3f ef       	ldi	r19, 0xFF	; 255
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	64 e0       	ldi	r22, 0x04	; 4
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	8e e4       	ldi	r24, 0x4E	; 78
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	10 de       	rcall	.-992    	; 0x41e <Kernel_Create_Task>
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	08 95       	ret

00000808 <Task_Next>:
     808:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <KernelActive>
     80c:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <KernelActive+0x1>
     810:	89 2b       	or	r24, r25
     812:	19 f1       	breq	.+70     	; 0x85a <Task_Next+0x52>
     814:	f8 94       	cli
     816:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <Cp>
     81a:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <Cp+0x1>
     81e:	fc 01       	movw	r30, r24
     820:	eb 5f       	subi	r30, 0xFB	; 251
     822:	fe 4f       	sbci	r31, 0xFE	; 254
     824:	20 81       	ld	r18, Z
     826:	31 81       	ldd	r19, Z+1	; 0x01
     828:	22 30       	cpi	r18, 0x02	; 2
     82a:	31 05       	cpc	r19, r1
     82c:	81 f4       	brne	.+32     	; 0x84e <Task_Next+0x46>
     82e:	3b 96       	adiw	r30, 0x0b	; 11
     830:	20 81       	ld	r18, Z
     832:	31 81       	ldd	r19, Z+1	; 0x01
     834:	38 96       	adiw	r30, 0x08	; 8
     836:	40 81       	ld	r20, Z
     838:	51 81       	ldd	r21, Z+1	; 0x01
     83a:	24 1b       	sub	r18, r20
     83c:	35 0b       	sbc	r19, r21
     83e:	dc 01       	movw	r26, r24
     840:	aa 5e       	subi	r26, 0xEA	; 234
     842:	be 4f       	sbci	r27, 0xFE	; 254
     844:	11 96       	adiw	r26, 0x01	; 1
     846:	3c 93       	st	X, r19
     848:	2e 93       	st	-X, r18
     84a:	11 82       	std	Z+1, r1	; 0x01
     84c:	10 82       	st	Z, r1
     84e:	fc 01       	movw	r30, r24
     850:	e5 5f       	subi	r30, 0xF5	; 245
     852:	fe 4f       	sbci	r31, 0xFE	; 254
     854:	85 e0       	ldi	r24, 0x05	; 5
     856:	80 83       	st	Z, r24
     858:	c6 cc       	rjmp	.-1652   	; 0x1e6 <Enter_Kernel>
     85a:	08 95       	ret

0000085c <Run_Next>:
     85c:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <KernelActive>
     860:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <KernelActive+0x1>
     864:	89 2b       	or	r24, r25
     866:	09 f4       	brne	.+2      	; 0x86a <Run_Next+0xe>
     868:	41 c0       	rjmp	.+130    	; 0x8ec <Run_Next+0x90>
     86a:	f8 94       	cli
     86c:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <Cp>
     870:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <Cp+0x1>
     874:	fc 01       	movw	r30, r24
     876:	eb 5f       	subi	r30, 0xFB	; 251
     878:	fe 4f       	sbci	r31, 0xFE	; 254
     87a:	20 81       	ld	r18, Z
     87c:	31 81       	ldd	r19, Z+1	; 0x01
     87e:	23 30       	cpi	r18, 0x03	; 3
     880:	31 05       	cpc	r19, r1
     882:	21 f4       	brne	.+8      	; 0x88c <Run_Next+0x30>
     884:	36 96       	adiw	r30, 0x06	; 6
     886:	8a e0       	ldi	r24, 0x0A	; 10
     888:	80 83       	st	Z, r24
     88a:	2f c0       	rjmp	.+94     	; 0x8ea <Run_Next+0x8e>
     88c:	fc 01       	movw	r30, r24
     88e:	eb 5f       	subi	r30, 0xFB	; 251
     890:	fe 4f       	sbci	r31, 0xFE	; 254
     892:	20 81       	ld	r18, Z
     894:	31 81       	ldd	r19, Z+1	; 0x01
     896:	22 30       	cpi	r18, 0x02	; 2
     898:	31 05       	cpc	r19, r1
     89a:	11 f5       	brne	.+68     	; 0x8e0 <Run_Next+0x84>
     89c:	73 96       	adiw	r30, 0x13	; 19
     89e:	40 81       	ld	r20, Z
     8a0:	51 81       	ldd	r21, Z+1	; 0x01
     8a2:	36 97       	sbiw	r30, 0x06	; 6
     8a4:	20 81       	ld	r18, Z
     8a6:	31 81       	ldd	r19, Z+1	; 0x01
     8a8:	42 17       	cp	r20, r18
     8aa:	53 07       	cpc	r21, r19
     8ac:	18 f0       	brcs	.+6      	; 0x8b4 <Run_Next+0x58>
     8ae:	84 e0       	ldi	r24, 0x04	; 4
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	35 de       	rcall	.-918    	; 0x51e <OS_Abort>
     8b4:	20 91 ca 04 	lds	r18, 0x04CA	; 0x8004ca <SysCount>
     8b8:	30 91 cb 04 	lds	r19, 0x04CB	; 0x8004cb <SysCount+0x1>
     8bc:	12 16       	cp	r1, r18
     8be:	13 06       	cpc	r1, r19
     8c0:	4c f4       	brge	.+18     	; 0x8d4 <Run_Next+0x78>
     8c2:	fc 01       	movw	r30, r24
     8c4:	ea 5e       	subi	r30, 0xEA	; 234
     8c6:	fe 4f       	sbci	r31, 0xFE	; 254
     8c8:	11 82       	std	Z+1, r1	; 0x01
     8ca:	10 82       	st	Z, r1
     8cc:	3b 97       	sbiw	r30, 0x0b	; 11
     8ce:	85 e0       	ldi	r24, 0x05	; 5
     8d0:	80 83       	st	Z, r24
     8d2:	0b c0       	rjmp	.+22     	; 0x8ea <Run_Next+0x8e>
     8d4:	fc 01       	movw	r30, r24
     8d6:	e5 5f       	subi	r30, 0xF5	; 245
     8d8:	fe 4f       	sbci	r31, 0xFE	; 254
     8da:	8a e0       	ldi	r24, 0x0A	; 10
     8dc:	80 83       	st	Z, r24
     8de:	05 c0       	rjmp	.+10     	; 0x8ea <Run_Next+0x8e>
     8e0:	fc 01       	movw	r30, r24
     8e2:	e5 5f       	subi	r30, 0xF5	; 245
     8e4:	fe 4f       	sbci	r31, 0xFE	; 254
     8e6:	85 e0       	ldi	r24, 0x05	; 5
     8e8:	80 83       	st	Z, r24
     8ea:	7d cc       	rjmp	.-1798   	; 0x1e6 <Enter_Kernel>
     8ec:	08 95       	ret

000008ee <Task_GetArg>:
     8ee:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <Cp>
     8f2:	f0 91 d5 04 	lds	r31, 0x04D5	; 0x8004d5 <Cp+0x1>
     8f6:	e9 5f       	subi	r30, 0xF9	; 249
     8f8:	fe 4f       	sbci	r31, 0xFE	; 254
     8fa:	80 81       	ld	r24, Z
     8fc:	91 81       	ldd	r25, Z+1	; 0x01
     8fe:	08 95       	ret

00000900 <setup>:
     900:	f8 94       	cli
     902:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     906:	e1 e8       	ldi	r30, 0x81	; 129
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	10 82       	st	Z, r1
     90c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     910:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     914:	80 e7       	ldi	r24, 0x70	; 112
     916:	92 e0       	ldi	r25, 0x02	; 2
     918:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     91c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     920:	80 81       	ld	r24, Z
     922:	88 60       	ori	r24, 0x08	; 8
     924:	80 83       	st	Z, r24
     926:	80 81       	ld	r24, Z
     928:	84 60       	ori	r24, 0x04	; 4
     92a:	80 83       	st	Z, r24
     92c:	ef e6       	ldi	r30, 0x6F	; 111
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	82 60       	ori	r24, 0x02	; 2
     934:	80 83       	st	Z, r24
     936:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
     93a:	e1 e9       	ldi	r30, 0x91	; 145
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	10 82       	st	Z, r1
     940:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
     944:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
     948:	83 e2       	ldi	r24, 0x23	; 35
     94a:	94 ef       	ldi	r25, 0xF4	; 244
     94c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     950:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     954:	80 81       	ld	r24, Z
     956:	88 60       	ori	r24, 0x08	; 8
     958:	80 83       	st	Z, r24
     95a:	80 81       	ld	r24, Z
     95c:	84 60       	ori	r24, 0x04	; 4
     95e:	80 83       	st	Z, r24
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     966:	78 94       	sei
     968:	08 95       	ret

0000096a <__vector_17>:
     96a:	1f 92       	push	r1
     96c:	0f 92       	push	r0
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	0f 92       	push	r0
     972:	11 24       	eor	r1, r1
     974:	0b b6       	in	r0, 0x3b	; 59
     976:	0f 92       	push	r0
     978:	2f 93       	push	r18
     97a:	3f 93       	push	r19
     97c:	4f 93       	push	r20
     97e:	5f 93       	push	r21
     980:	6f 93       	push	r22
     982:	7f 93       	push	r23
     984:	8f 93       	push	r24
     986:	9f 93       	push	r25
     988:	af 93       	push	r26
     98a:	bf 93       	push	r27
     98c:	ef 93       	push	r30
     98e:	ff 93       	push	r31
     990:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <Cp>
     994:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <Cp+0x1>
     998:	fc 01       	movw	r30, r24
     99a:	eb 5f       	subi	r30, 0xFB	; 251
     99c:	fe 4f       	sbci	r31, 0xFE	; 254
     99e:	20 81       	ld	r18, Z
     9a0:	31 81       	ldd	r19, Z+1	; 0x01
     9a2:	22 30       	cpi	r18, 0x02	; 2
     9a4:	31 05       	cpc	r19, r1
     9a6:	31 f4       	brne	.+12     	; 0x9b4 <__vector_17+0x4a>
     9a8:	73 96       	adiw	r30, 0x13	; 19
     9aa:	80 81       	ld	r24, Z
     9ac:	91 81       	ldd	r25, Z+1	; 0x01
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	91 83       	std	Z+1, r25	; 0x01
     9b2:	80 83       	st	Z, r24
     9b4:	80 91 39 17 	lds	r24, 0x1739	; 0x801739 <time_since_system_start>
     9b8:	90 91 3a 17 	lds	r25, 0x173A	; 0x80173a <time_since_system_start+0x1>
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	90 93 3a 17 	sts	0x173A, r25	; 0x80173a <time_since_system_start+0x1>
     9c2:	80 93 39 17 	sts	0x1739, r24	; 0x801739 <time_since_system_start>
     9c6:	a0 91 c8 04 	lds	r26, 0x04C8	; 0x8004c8 <PeriodicCount>
     9ca:	b0 91 c9 04 	lds	r27, 0x04C9	; 0x8004c9 <PeriodicCount+0x1>
     9ce:	cd 01       	movw	r24, r26
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	c2 f0       	brmi	.+48     	; 0xa04 <__vector_17+0x9a>
     9d4:	aa 0f       	add	r26, r26
     9d6:	bb 1f       	adc	r27, r27
     9d8:	a3 5c       	subi	r26, 0xC3	; 195
     9da:	b8 4e       	sbci	r27, 0xE8	; 232
     9dc:	4d e3       	ldi	r20, 0x3D	; 61
     9de:	57 e1       	ldi	r21, 0x17	; 23
     9e0:	9e 91       	ld	r25, -X
     9e2:	8e 91       	ld	r24, -X
     9e4:	fc 01       	movw	r30, r24
     9e6:	ea 5e       	subi	r30, 0xEA	; 234
     9e8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ea:	20 81       	ld	r18, Z
     9ec:	31 81       	ldd	r19, Z+1	; 0x01
     9ee:	12 16       	cp	r1, r18
     9f0:	13 06       	cpc	r1, r19
     9f2:	2c f4       	brge	.+10     	; 0x9fe <__vector_17+0x94>
     9f4:	80 81       	ld	r24, Z
     9f6:	91 81       	ldd	r25, Z+1	; 0x01
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	91 83       	std	Z+1, r25	; 0x01
     9fc:	80 83       	st	Z, r24
     9fe:	a4 17       	cp	r26, r20
     a00:	b5 07       	cpc	r27, r21
     a02:	71 f7       	brne	.-36     	; 0x9e0 <__vector_17+0x76>
     a04:	2b df       	rcall	.-426    	; 0x85c <Run_Next>
     a06:	ff 91       	pop	r31
     a08:	ef 91       	pop	r30
     a0a:	bf 91       	pop	r27
     a0c:	af 91       	pop	r26
     a0e:	9f 91       	pop	r25
     a10:	8f 91       	pop	r24
     a12:	7f 91       	pop	r23
     a14:	6f 91       	pop	r22
     a16:	5f 91       	pop	r21
     a18:	4f 91       	pop	r20
     a1a:	3f 91       	pop	r19
     a1c:	2f 91       	pop	r18
     a1e:	0f 90       	pop	r0
     a20:	0b be       	out	0x3b, r0	; 59
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	0f 90       	pop	r0
     a28:	1f 90       	pop	r1
     a2a:	18 95       	reti

00000a2c <__vector_32>:
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	8f 93       	push	r24
     a38:	9f 93       	push	r25
     a3a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <tickOverflowCount>
     a3e:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <tickOverflowCount+0x1>
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <tickOverflowCount+0x1>
     a48:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <tickOverflowCount>
     a4c:	9f 91       	pop	r25
     a4e:	8f 91       	pop	r24
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <kernel_send>:
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <Cp>
     a66:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <Cp+0x1>
     a6a:	fc 01       	movw	r30, r24
     a6c:	e4 5e       	subi	r30, 0xE4	; 228
     a6e:	fe 4f       	sbci	r31, 0xFE	; 254
     a70:	20 81       	ld	r18, Z
     a72:	31 81       	ldd	r19, Z+1	; 0x01
     a74:	21 50       	subi	r18, 0x01	; 1
     a76:	31 09       	sbc	r19, r1
     a78:	49 e2       	ldi	r20, 0x29	; 41
     a7a:	42 9f       	mul	r20, r18
     a7c:	f0 01       	movw	r30, r0
     a7e:	43 9f       	mul	r20, r19
     a80:	f0 0d       	add	r31, r0
     a82:	11 24       	eor	r1, r1
     a84:	ea 5c       	subi	r30, 0xCA	; 202
     a86:	fd 4f       	sbci	r31, 0xFD	; 253
     a88:	24 a1       	ldd	r18, Z+36	; 0x24
     a8a:	35 a1       	ldd	r19, Z+37	; 0x25
     a8c:	23 2b       	or	r18, r19
     a8e:	09 f0       	breq	.+2      	; 0xa92 <kernel_send+0x38>
     a90:	3d c0       	rjmp	.+122    	; 0xb0c <kernel_send+0xb2>
     a92:	fc 01       	movw	r30, r24
     a94:	e4 5e       	subi	r30, 0xE4	; 228
     a96:	fe 4f       	sbci	r31, 0xFE	; 254
     a98:	20 81       	ld	r18, Z
     a9a:	31 81       	ldd	r19, Z+1	; 0x01
     a9c:	21 50       	subi	r18, 0x01	; 1
     a9e:	31 09       	sbc	r19, r1
     aa0:	42 9f       	mul	r20, r18
     aa2:	f0 01       	movw	r30, r0
     aa4:	43 9f       	mul	r20, r19
     aa6:	f0 0d       	add	r31, r0
     aa8:	11 24       	eor	r1, r1
     aaa:	ea 5c       	subi	r30, 0xCA	; 202
     aac:	fd 4f       	sbci	r31, 0xFD	; 253
     aae:	22 81       	ldd	r18, Z+2	; 0x02
     ab0:	33 81       	ldd	r19, Z+3	; 0x03
     ab2:	23 2b       	or	r18, r19
     ab4:	41 f5       	brne	.+80     	; 0xb06 <kernel_send+0xac>
     ab6:	dc 01       	movw	r26, r24
     ab8:	a4 5e       	subi	r26, 0xE4	; 228
     aba:	be 4f       	sbci	r27, 0xFE	; 254
     abc:	2d 91       	ld	r18, X+
     abe:	3c 91       	ld	r19, X
     ac0:	11 97       	sbiw	r26, 0x01	; 1
     ac2:	21 50       	subi	r18, 0x01	; 1
     ac4:	31 09       	sbc	r19, r1
     ac6:	42 9f       	mul	r20, r18
     ac8:	f0 01       	movw	r30, r0
     aca:	43 9f       	mul	r20, r19
     acc:	f0 0d       	add	r31, r0
     ace:	11 24       	eor	r1, r1
     ad0:	ea 5c       	subi	r30, 0xCA	; 202
     ad2:	fd 4f       	sbci	r31, 0xFD	; 253
     ad4:	93 83       	std	Z+3, r25	; 0x03
     ad6:	82 83       	std	Z+2, r24	; 0x02
     ad8:	fc 01       	movw	r30, r24
     ada:	ec 5f       	subi	r30, 0xFC	; 252
     adc:	fe 4f       	sbci	r31, 0xFE	; 254
     ade:	23 e0       	ldi	r18, 0x03	; 3
     ae0:	20 83       	st	Z, r18
     ae2:	2d 91       	ld	r18, X+
     ae4:	3c 91       	ld	r19, X
     ae6:	21 50       	subi	r18, 0x01	; 1
     ae8:	31 09       	sbc	r19, r1
     aea:	7c 96       	adiw	r30, 0x1c	; 28
     aec:	80 81       	ld	r24, Z
     aee:	91 81       	ldd	r25, Z+1	; 0x01
     af0:	42 9f       	mul	r20, r18
     af2:	f0 01       	movw	r30, r0
     af4:	43 9f       	mul	r20, r19
     af6:	f0 0d       	add	r31, r0
     af8:	11 24       	eor	r1, r1
     afa:	ea 5c       	subi	r30, 0xCA	; 202
     afc:	fd 4f       	sbci	r31, 0xFD	; 253
     afe:	90 a7       	std	Z+40, r25	; 0x28
     b00:	87 a3       	std	Z+39, r24	; 0x27
     b02:	36 dd       	rcall	.-1428   	; 0x570 <Dispatch>
     b04:	0d c1       	rjmp	.+538    	; 0xd20 <kernel_send+0x2c6>
     b06:	86 e0       	ldi	r24, 0x06	; 6
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	09 dd       	rcall	.-1518   	; 0x51e <OS_Abort>
     b0c:	fc 01       	movw	r30, r24
     b0e:	e4 5e       	subi	r30, 0xE4	; 228
     b10:	fe 4f       	sbci	r31, 0xFE	; 254
     b12:	20 81       	ld	r18, Z
     b14:	31 81       	ldd	r19, Z+1	; 0x01
     b16:	21 50       	subi	r18, 0x01	; 1
     b18:	31 09       	sbc	r19, r1
     b1a:	49 e2       	ldi	r20, 0x29	; 41
     b1c:	42 9f       	mul	r20, r18
     b1e:	f0 01       	movw	r30, r0
     b20:	43 9f       	mul	r20, r19
     b22:	f0 0d       	add	r31, r0
     b24:	11 24       	eor	r1, r1
     b26:	ea 5c       	subi	r30, 0xCA	; 202
     b28:	fd 4f       	sbci	r31, 0xFD	; 253
     b2a:	22 81       	ldd	r18, Z+2	; 0x02
     b2c:	33 81       	ldd	r19, Z+3	; 0x03
     b2e:	23 2b       	or	r18, r19
     b30:	19 f0       	breq	.+6      	; 0xb38 <kernel_send+0xde>
     b32:	86 e0       	ldi	r24, 0x06	; 6
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	f3 dc       	rcall	.-1562   	; 0x51e <OS_Abort>
     b38:	fc 01       	movw	r30, r24
     b3a:	e4 5e       	subi	r30, 0xE4	; 228
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	80 81       	ld	r24, Z
     b40:	91 81       	ldd	r25, Z+1	; 0x01
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	29 e2       	ldi	r18, 0x29	; 41
     b46:	28 9f       	mul	r18, r24
     b48:	f0 01       	movw	r30, r0
     b4a:	29 9f       	mul	r18, r25
     b4c:	f0 0d       	add	r31, r0
     b4e:	11 24       	eor	r1, r1
     b50:	ea 5c       	subi	r30, 0xCA	; 202
     b52:	fd 4f       	sbci	r31, 0xFD	; 253
     b54:	c4 a1       	ldd	r28, Z+36	; 0x24
     b56:	d5 a1       	ldd	r29, Z+37	; 0x25
     b58:	21 97       	sbiw	r28, 0x01	; 1
     b5a:	0a f4       	brpl	.+2      	; 0xb5e <kernel_send+0x104>
     b5c:	ce c0       	rjmp	.+412    	; 0xcfa <kernel_send+0x2a0>
     b5e:	19 e2       	ldi	r17, 0x29	; 41
     b60:	01 e0       	ldi	r16, 0x01	; 1
     b62:	20 91 d4 04 	lds	r18, 0x04D4	; 0x8004d4 <Cp>
     b66:	30 91 d5 04 	lds	r19, 0x04D5	; 0x8004d5 <Cp+0x1>
     b6a:	c9 01       	movw	r24, r18
     b6c:	84 5e       	subi	r24, 0xE4	; 228
     b6e:	9e 4f       	sbci	r25, 0xFE	; 254
     b70:	dc 01       	movw	r26, r24
     b72:	4d 91       	ld	r20, X+
     b74:	5c 91       	ld	r21, X
     b76:	41 50       	subi	r20, 0x01	; 1
     b78:	51 09       	sbc	r21, r1
     b7a:	fe 01       	movw	r30, r28
     b7c:	32 96       	adiw	r30, 0x02	; 2
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	14 9f       	mul	r17, r20
     b84:	d0 01       	movw	r26, r0
     b86:	15 9f       	mul	r17, r21
     b88:	b0 0d       	add	r27, r0
     b8a:	11 24       	eor	r1, r1
     b8c:	ae 0f       	add	r26, r30
     b8e:	bf 1f       	adc	r27, r31
     b90:	aa 5c       	subi	r26, 0xCA	; 202
     b92:	bd 4f       	sbci	r27, 0xFD	; 253
     b94:	0d 90       	ld	r0, X+
     b96:	bc 91       	ld	r27, X
     b98:	a0 2d       	mov	r26, r0
     b9a:	ac 5f       	subi	r26, 0xFC	; 252
     b9c:	be 4f       	sbci	r27, 0xFE	; 254
     b9e:	0c 93       	st	X, r16
     ba0:	dc 01       	movw	r26, r24
     ba2:	4d 91       	ld	r20, X+
     ba4:	5c 91       	ld	r21, X
     ba6:	41 50       	subi	r20, 0x01	; 1
     ba8:	51 09       	sbc	r21, r1
     baa:	14 9f       	mul	r17, r20
     bac:	d0 01       	movw	r26, r0
     bae:	15 9f       	mul	r17, r21
     bb0:	b0 0d       	add	r27, r0
     bb2:	11 24       	eor	r1, r1
     bb4:	ae 0f       	add	r26, r30
     bb6:	bf 1f       	adc	r27, r31
     bb8:	aa 5c       	subi	r26, 0xCA	; 202
     bba:	bd 4f       	sbci	r27, 0xFD	; 253
     bbc:	6d 91       	ld	r22, X+
     bbe:	7c 91       	ld	r23, X
     bc0:	a9 01       	movw	r20, r18
     bc2:	40 5e       	subi	r20, 0xE0	; 224
     bc4:	5e 4f       	sbci	r21, 0xFE	; 254
     bc6:	da 01       	movw	r26, r20
     bc8:	4d 91       	ld	r20, X+
     bca:	5c 91       	ld	r21, X
     bcc:	db 01       	movw	r26, r22
     bce:	a0 5e       	subi	r26, 0xE0	; 224
     bd0:	be 4f       	sbci	r27, 0xFE	; 254
     bd2:	4d 93       	st	X+, r20
     bd4:	5c 93       	st	X, r21
     bd6:	dc 01       	movw	r26, r24
     bd8:	4d 91       	ld	r20, X+
     bda:	5c 91       	ld	r21, X
     bdc:	11 97       	sbiw	r26, 0x01	; 1
     bde:	41 50       	subi	r20, 0x01	; 1
     be0:	51 09       	sbc	r21, r1
     be2:	14 9f       	mul	r17, r20
     be4:	c0 01       	movw	r24, r0
     be6:	15 9f       	mul	r17, r21
     be8:	90 0d       	add	r25, r0
     bea:	11 24       	eor	r1, r1
     bec:	e8 0f       	add	r30, r24
     bee:	f9 1f       	adc	r31, r25
     bf0:	ea 5c       	subi	r30, 0xCA	; 202
     bf2:	fd 4f       	sbci	r31, 0xFD	; 253
     bf4:	01 90       	ld	r0, Z+
     bf6:	f0 81       	ld	r31, Z
     bf8:	e0 2d       	mov	r30, r0
     bfa:	eb 5f       	subi	r30, 0xFB	; 251
     bfc:	fe 4f       	sbci	r31, 0xFE	; 254
     bfe:	80 81       	ld	r24, Z
     c00:	91 81       	ldd	r25, Z+1	; 0x01
     c02:	03 97       	sbiw	r24, 0x03	; 3
     c04:	c1 f4       	brne	.+48     	; 0xc36 <kernel_send+0x1dc>
     c06:	fd 01       	movw	r30, r26
     c08:	40 81       	ld	r20, Z
     c0a:	51 81       	ldd	r21, Z+1	; 0x01
     c0c:	ce 01       	movw	r24, r28
     c0e:	02 96       	adiw	r24, 0x02	; 2
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	41 50       	subi	r20, 0x01	; 1
     c16:	51 09       	sbc	r21, r1
     c18:	14 9f       	mul	r17, r20
     c1a:	90 01       	movw	r18, r0
     c1c:	15 9f       	mul	r17, r21
     c1e:	30 0d       	add	r19, r0
     c20:	11 24       	eor	r1, r1
     c22:	82 0f       	add	r24, r18
     c24:	93 1f       	adc	r25, r19
     c26:	4a ec       	ldi	r20, 0xCA	; 202
     c28:	54 e0       	ldi	r21, 0x04	; 4
     c2a:	69 e1       	ldi	r22, 0x19	; 25
     c2c:	77 e1       	ldi	r23, 0x17	; 23
     c2e:	8a 5c       	subi	r24, 0xCA	; 202
     c30:	9d 4f       	sbci	r25, 0xFD	; 253
     c32:	e7 d3       	rcall	.+1998   	; 0x1402 <enqueue>
     c34:	36 c0       	rjmp	.+108    	; 0xca2 <kernel_send+0x248>
     c36:	f9 01       	movw	r30, r18
     c38:	e4 5e       	subi	r30, 0xE4	; 228
     c3a:	fe 4f       	sbci	r31, 0xFE	; 254
     c3c:	40 81       	ld	r20, Z
     c3e:	51 81       	ldd	r21, Z+1	; 0x01
     c40:	41 50       	subi	r20, 0x01	; 1
     c42:	51 09       	sbc	r21, r1
     c44:	fe 01       	movw	r30, r28
     c46:	32 96       	adiw	r30, 0x02	; 2
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	14 9f       	mul	r17, r20
     c4e:	c0 01       	movw	r24, r0
     c50:	15 9f       	mul	r17, r21
     c52:	90 0d       	add	r25, r0
     c54:	11 24       	eor	r1, r1
     c56:	e8 0f       	add	r30, r24
     c58:	f9 1f       	adc	r31, r25
     c5a:	ea 5c       	subi	r30, 0xCA	; 202
     c5c:	fd 4f       	sbci	r31, 0xFD	; 253
     c5e:	01 90       	ld	r0, Z+
     c60:	f0 81       	ld	r31, Z
     c62:	e0 2d       	mov	r30, r0
     c64:	eb 5f       	subi	r30, 0xFB	; 251
     c66:	fe 4f       	sbci	r31, 0xFE	; 254
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	c9 f4       	brne	.+50     	; 0xca2 <kernel_send+0x248>
     c70:	f9 01       	movw	r30, r18
     c72:	e4 5e       	subi	r30, 0xE4	; 228
     c74:	fe 4f       	sbci	r31, 0xFE	; 254
     c76:	40 81       	ld	r20, Z
     c78:	51 81       	ldd	r21, Z+1	; 0x01
     c7a:	ce 01       	movw	r24, r28
     c7c:	02 96       	adiw	r24, 0x02	; 2
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	41 50       	subi	r20, 0x01	; 1
     c84:	51 09       	sbc	r21, r1
     c86:	14 9f       	mul	r17, r20
     c88:	90 01       	movw	r18, r0
     c8a:	15 9f       	mul	r17, r21
     c8c:	30 0d       	add	r19, r0
     c8e:	11 24       	eor	r1, r1
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	46 ec       	ldi	r20, 0xC6	; 198
     c96:	54 e0       	ldi	r21, 0x04	; 4
     c98:	6f e5       	ldi	r22, 0x5F	; 95
     c9a:	77 e1       	ldi	r23, 0x17	; 23
     c9c:	8a 5c       	subi	r24, 0xCA	; 202
     c9e:	9d 4f       	sbci	r25, 0xFD	; 253
     ca0:	b0 d3       	rcall	.+1888   	; 0x1402 <enqueue>
     ca2:	a0 91 d4 04 	lds	r26, 0x04D4	; 0x8004d4 <Cp>
     ca6:	b0 91 d5 04 	lds	r27, 0x04D5	; 0x8004d5 <Cp+0x1>
     caa:	a4 5e       	subi	r26, 0xE4	; 228
     cac:	be 4f       	sbci	r27, 0xFE	; 254
     cae:	2d 91       	ld	r18, X+
     cb0:	3c 91       	ld	r19, X
     cb2:	11 97       	sbiw	r26, 0x01	; 1
     cb4:	21 50       	subi	r18, 0x01	; 1
     cb6:	31 09       	sbc	r19, r1
     cb8:	fe 01       	movw	r30, r28
     cba:	32 96       	adiw	r30, 0x02	; 2
     cbc:	ee 0f       	add	r30, r30
     cbe:	ff 1f       	adc	r31, r31
     cc0:	12 9f       	mul	r17, r18
     cc2:	c0 01       	movw	r24, r0
     cc4:	13 9f       	mul	r17, r19
     cc6:	90 0d       	add	r25, r0
     cc8:	11 24       	eor	r1, r1
     cca:	e8 0f       	add	r30, r24
     ccc:	f9 1f       	adc	r31, r25
     cce:	ea 5c       	subi	r30, 0xCA	; 202
     cd0:	fd 4f       	sbci	r31, 0xFD	; 253
     cd2:	11 82       	std	Z+1, r1	; 0x01
     cd4:	10 82       	st	Z, r1
     cd6:	8d 91       	ld	r24, X+
     cd8:	9c 91       	ld	r25, X
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	18 9f       	mul	r17, r24
     cde:	f0 01       	movw	r30, r0
     ce0:	19 9f       	mul	r17, r25
     ce2:	f0 0d       	add	r31, r0
     ce4:	11 24       	eor	r1, r1
     ce6:	ea 5c       	subi	r30, 0xCA	; 202
     ce8:	fd 4f       	sbci	r31, 0xFD	; 253
     cea:	84 a1       	ldd	r24, Z+36	; 0x24
     cec:	95 a1       	ldd	r25, Z+37	; 0x25
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	95 a3       	std	Z+37, r25	; 0x25
     cf2:	84 a3       	std	Z+36, r24	; 0x24
     cf4:	21 97       	sbiw	r28, 0x01	; 1
     cf6:	0a f0       	brmi	.+2      	; 0xcfa <kernel_send+0x2a0>
     cf8:	34 cf       	rjmp	.-408    	; 0xb62 <kernel_send+0x108>
     cfa:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <Cp>
     cfe:	f0 91 d5 04 	lds	r31, 0x04D5	; 0x8004d5 <Cp+0x1>
     d02:	e4 5e       	subi	r30, 0xE4	; 228
     d04:	fe 4f       	sbci	r31, 0xFE	; 254
     d06:	80 81       	ld	r24, Z
     d08:	91 81       	ldd	r25, Z+1	; 0x01
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	29 e2       	ldi	r18, 0x29	; 41
     d0e:	28 9f       	mul	r18, r24
     d10:	f0 01       	movw	r30, r0
     d12:	29 9f       	mul	r18, r25
     d14:	f0 0d       	add	r31, r0
     d16:	11 24       	eor	r1, r1
     d18:	ea 5c       	subi	r30, 0xCA	; 202
     d1a:	fd 4f       	sbci	r31, 0xFD	; 253
     d1c:	10 a6       	std	Z+40, r1	; 0x28
     d1e:	17 a2       	std	Z+39, r1	; 0x27
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	08 95       	ret

00000d2a <kernel_receive>:
     d2a:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <Cp>
     d2e:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <Cp+0x1>
     d32:	fc 01       	movw	r30, r24
     d34:	e2 5e       	subi	r30, 0xE2	; 226
     d36:	fe 4f       	sbci	r31, 0xFE	; 254
     d38:	20 81       	ld	r18, Z
     d3a:	31 81       	ldd	r19, Z+1	; 0x01
     d3c:	21 50       	subi	r18, 0x01	; 1
     d3e:	31 09       	sbc	r19, r1
     d40:	49 e2       	ldi	r20, 0x29	; 41
     d42:	42 9f       	mul	r20, r18
     d44:	f0 01       	movw	r30, r0
     d46:	43 9f       	mul	r20, r19
     d48:	f0 0d       	add	r31, r0
     d4a:	11 24       	eor	r1, r1
     d4c:	ea 5c       	subi	r30, 0xCA	; 202
     d4e:	fd 4f       	sbci	r31, 0xFD	; 253
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	33 81       	ldd	r19, Z+3	; 0x03
     d54:	23 2b       	or	r18, r19
     d56:	09 f5       	brne	.+66     	; 0xd9a <kernel_receive+0x70>
     d58:	fc 01       	movw	r30, r24
     d5a:	ec 5f       	subi	r30, 0xFC	; 252
     d5c:	fe 4f       	sbci	r31, 0xFE	; 254
     d5e:	23 e0       	ldi	r18, 0x03	; 3
     d60:	20 83       	st	Z, r18
     d62:	7a 96       	adiw	r30, 0x1a	; 26
     d64:	20 81       	ld	r18, Z
     d66:	31 81       	ldd	r19, Z+1	; 0x01
     d68:	80 81       	ld	r24, Z
     d6a:	91 81       	ldd	r25, Z+1	; 0x01
     d6c:	21 50       	subi	r18, 0x01	; 1
     d6e:	31 09       	sbc	r19, r1
     d70:	e9 e2       	ldi	r30, 0x29	; 41
     d72:	e2 9f       	mul	r30, r18
     d74:	a0 01       	movw	r20, r0
     d76:	e3 9f       	mul	r30, r19
     d78:	50 0d       	add	r21, r0
     d7a:	11 24       	eor	r1, r1
     d7c:	46 5a       	subi	r20, 0xA6	; 166
     d7e:	5d 4f       	sbci	r21, 0xFD	; 253
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	e8 9f       	mul	r30, r24
     d84:	b0 01       	movw	r22, r0
     d86:	e9 9f       	mul	r30, r25
     d88:	70 0d       	add	r23, r0
     d8a:	11 24       	eor	r1, r1
     d8c:	66 5c       	subi	r22, 0xC6	; 198
     d8e:	7d 4f       	sbci	r23, 0xFD	; 253
     d90:	84 ed       	ldi	r24, 0xD4	; 212
     d92:	94 e0       	ldi	r25, 0x04	; 4
     d94:	36 d3       	rcall	.+1644   	; 0x1402 <enqueue>
     d96:	ec cb       	rjmp	.-2088   	; 0x570 <Dispatch>
     d98:	08 95       	ret
     d9a:	fc 01       	movw	r30, r24
     d9c:	e2 5e       	subi	r30, 0xE2	; 226
     d9e:	fe 4f       	sbci	r31, 0xFE	; 254
     da0:	20 81       	ld	r18, Z
     da2:	31 81       	ldd	r19, Z+1	; 0x01
     da4:	21 50       	subi	r18, 0x01	; 1
     da6:	31 09       	sbc	r19, r1
     da8:	49 e2       	ldi	r20, 0x29	; 41
     daa:	42 9f       	mul	r20, r18
     dac:	d0 01       	movw	r26, r0
     dae:	43 9f       	mul	r20, r19
     db0:	b0 0d       	add	r27, r0
     db2:	11 24       	eor	r1, r1
     db4:	aa 5c       	subi	r26, 0xCA	; 202
     db6:	bd 4f       	sbci	r27, 0xFD	; 253
     db8:	12 96       	adiw	r26, 0x02	; 2
     dba:	0d 90       	ld	r0, X+
     dbc:	bc 91       	ld	r27, X
     dbe:	a0 2d       	mov	r26, r0
     dc0:	ac 5f       	subi	r26, 0xFC	; 252
     dc2:	be 4f       	sbci	r27, 0xFE	; 254
     dc4:	21 e0       	ldi	r18, 0x01	; 1
     dc6:	2c 93       	st	X, r18
     dc8:	20 81       	ld	r18, Z
     dca:	31 81       	ldd	r19, Z+1	; 0x01
     dcc:	21 50       	subi	r18, 0x01	; 1
     dce:	31 09       	sbc	r19, r1
     dd0:	42 9f       	mul	r20, r18
     dd2:	d0 01       	movw	r26, r0
     dd4:	43 9f       	mul	r20, r19
     dd6:	b0 0d       	add	r27, r0
     dd8:	11 24       	eor	r1, r1
     dda:	aa 5c       	subi	r26, 0xCA	; 202
     ddc:	bd 4f       	sbci	r27, 0xFD	; 253
     dde:	97 96       	adiw	r26, 0x27	; 39
     de0:	2d 91       	ld	r18, X+
     de2:	3c 91       	ld	r19, X
     de4:	98 97       	sbiw	r26, 0x28	; 40
     de6:	dc 01       	movw	r26, r24
     de8:	a0 5e       	subi	r26, 0xE0	; 224
     dea:	be 4f       	sbci	r27, 0xFE	; 254
     dec:	11 96       	adiw	r26, 0x01	; 1
     dee:	3c 93       	st	X, r19
     df0:	2e 93       	st	-X, r18
     df2:	20 81       	ld	r18, Z
     df4:	31 81       	ldd	r19, Z+1	; 0x01
     df6:	21 50       	subi	r18, 0x01	; 1
     df8:	31 09       	sbc	r19, r1
     dfa:	42 9f       	mul	r20, r18
     dfc:	f0 01       	movw	r30, r0
     dfe:	43 9f       	mul	r20, r19
     e00:	f0 0d       	add	r31, r0
     e02:	11 24       	eor	r1, r1
     e04:	ea 5c       	subi	r30, 0xCA	; 202
     e06:	fd 4f       	sbci	r31, 0xFD	; 253
     e08:	02 80       	ldd	r0, Z+2	; 0x02
     e0a:	f3 81       	ldd	r31, Z+3	; 0x03
     e0c:	e0 2d       	mov	r30, r0
     e0e:	eb 5f       	subi	r30, 0xFB	; 251
     e10:	fe 4f       	sbci	r31, 0xFE	; 254
     e12:	20 81       	ld	r18, Z
     e14:	31 81       	ldd	r19, Z+1	; 0x01
     e16:	23 30       	cpi	r18, 0x03	; 3
     e18:	31 05       	cpc	r19, r1
     e1a:	a1 f4       	brne	.+40     	; 0xe44 <kernel_receive+0x11a>
     e1c:	fc 01       	movw	r30, r24
     e1e:	e2 5e       	subi	r30, 0xE2	; 226
     e20:	fe 4f       	sbci	r31, 0xFE	; 254
     e22:	20 81       	ld	r18, Z
     e24:	31 81       	ldd	r19, Z+1	; 0x01
     e26:	21 50       	subi	r18, 0x01	; 1
     e28:	31 09       	sbc	r19, r1
     e2a:	42 9f       	mul	r20, r18
     e2c:	c0 01       	movw	r24, r0
     e2e:	43 9f       	mul	r20, r19
     e30:	90 0d       	add	r25, r0
     e32:	11 24       	eor	r1, r1
     e34:	4a ec       	ldi	r20, 0xCA	; 202
     e36:	54 e0       	ldi	r21, 0x04	; 4
     e38:	69 e1       	ldi	r22, 0x19	; 25
     e3a:	77 e1       	ldi	r23, 0x17	; 23
     e3c:	88 5c       	subi	r24, 0xC8	; 200
     e3e:	9d 4f       	sbci	r25, 0xFD	; 253
     e40:	e0 d2       	rcall	.+1472   	; 0x1402 <enqueue>
     e42:	2c c0       	rjmp	.+88     	; 0xe9c <kernel_receive+0x172>
     e44:	fc 01       	movw	r30, r24
     e46:	e2 5e       	subi	r30, 0xE2	; 226
     e48:	fe 4f       	sbci	r31, 0xFE	; 254
     e4a:	20 81       	ld	r18, Z
     e4c:	31 81       	ldd	r19, Z+1	; 0x01
     e4e:	21 50       	subi	r18, 0x01	; 1
     e50:	31 09       	sbc	r19, r1
     e52:	49 e2       	ldi	r20, 0x29	; 41
     e54:	42 9f       	mul	r20, r18
     e56:	f0 01       	movw	r30, r0
     e58:	43 9f       	mul	r20, r19
     e5a:	f0 0d       	add	r31, r0
     e5c:	11 24       	eor	r1, r1
     e5e:	ea 5c       	subi	r30, 0xCA	; 202
     e60:	fd 4f       	sbci	r31, 0xFD	; 253
     e62:	02 80       	ldd	r0, Z+2	; 0x02
     e64:	f3 81       	ldd	r31, Z+3	; 0x03
     e66:	e0 2d       	mov	r30, r0
     e68:	eb 5f       	subi	r30, 0xFB	; 251
     e6a:	fe 4f       	sbci	r31, 0xFE	; 254
     e6c:	20 81       	ld	r18, Z
     e6e:	31 81       	ldd	r19, Z+1	; 0x01
     e70:	21 30       	cpi	r18, 0x01	; 1
     e72:	31 05       	cpc	r19, r1
     e74:	99 f4       	brne	.+38     	; 0xe9c <kernel_receive+0x172>
     e76:	fc 01       	movw	r30, r24
     e78:	e2 5e       	subi	r30, 0xE2	; 226
     e7a:	fe 4f       	sbci	r31, 0xFE	; 254
     e7c:	20 81       	ld	r18, Z
     e7e:	31 81       	ldd	r19, Z+1	; 0x01
     e80:	21 50       	subi	r18, 0x01	; 1
     e82:	31 09       	sbc	r19, r1
     e84:	42 9f       	mul	r20, r18
     e86:	c0 01       	movw	r24, r0
     e88:	43 9f       	mul	r20, r19
     e8a:	90 0d       	add	r25, r0
     e8c:	11 24       	eor	r1, r1
     e8e:	46 ec       	ldi	r20, 0xC6	; 198
     e90:	54 e0       	ldi	r21, 0x04	; 4
     e92:	6f e5       	ldi	r22, 0x5F	; 95
     e94:	77 e1       	ldi	r23, 0x17	; 23
     e96:	88 5c       	subi	r24, 0xC8	; 200
     e98:	9d 4f       	sbci	r25, 0xFD	; 253
     e9a:	b3 d2       	rcall	.+1382   	; 0x1402 <enqueue>
     e9c:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <Cp>
     ea0:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <Cp+0x1>
     ea4:	fc 01       	movw	r30, r24
     ea6:	e2 5e       	subi	r30, 0xE2	; 226
     ea8:	fe 4f       	sbci	r31, 0xFE	; 254
     eaa:	20 81       	ld	r18, Z
     eac:	31 81       	ldd	r19, Z+1	; 0x01
     eae:	21 50       	subi	r18, 0x01	; 1
     eb0:	31 09       	sbc	r19, r1
     eb2:	49 e2       	ldi	r20, 0x29	; 41
     eb4:	42 9f       	mul	r20, r18
     eb6:	f0 01       	movw	r30, r0
     eb8:	43 9f       	mul	r20, r19
     eba:	f0 0d       	add	r31, r0
     ebc:	11 24       	eor	r1, r1
     ebe:	ea 5c       	subi	r30, 0xCA	; 202
     ec0:	fd 4f       	sbci	r31, 0xFD	; 253
     ec2:	13 82       	std	Z+3, r1	; 0x03
     ec4:	12 82       	std	Z+2, r1	; 0x02
     ec6:	fc 01       	movw	r30, r24
     ec8:	e4 5e       	subi	r30, 0xE4	; 228
     eca:	fe 4f       	sbci	r31, 0xFE	; 254
     ecc:	80 81       	ld	r24, Z
     ece:	91 81       	ldd	r25, Z+1	; 0x01
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	48 9f       	mul	r20, r24
     ed4:	f0 01       	movw	r30, r0
     ed6:	49 9f       	mul	r20, r25
     ed8:	f0 0d       	add	r31, r0
     eda:	11 24       	eor	r1, r1
     edc:	ea 5c       	subi	r30, 0xCA	; 202
     ede:	fd 4f       	sbci	r31, 0xFD	; 253
     ee0:	10 a6       	std	Z+40, r1	; 0x28
     ee2:	17 a2       	std	Z+39, r1	; 0x27
     ee4:	08 95       	ret

00000ee6 <kernel_async_send>:
}

void kernel_async_send() {
     ee6:	0f 93       	push	r16
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
	if (ChannelArray[Cp->senderChannel - 1].numberReceivers == 0) { // no receivers waiting
     eee:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <Cp>
     ef2:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <Cp+0x1>
     ef6:	fc 01       	movw	r30, r24
     ef8:	e4 5e       	subi	r30, 0xE4	; 228
     efa:	fe 4f       	sbci	r31, 0xFE	; 254
     efc:	20 81       	ld	r18, Z
     efe:	31 81       	ldd	r19, Z+1	; 0x01
     f00:	21 50       	subi	r18, 0x01	; 1
     f02:	31 09       	sbc	r19, r1
     f04:	49 e2       	ldi	r20, 0x29	; 41
     f06:	42 9f       	mul	r20, r18
     f08:	f0 01       	movw	r30, r0
     f0a:	43 9f       	mul	r20, r19
     f0c:	f0 0d       	add	r31, r0
     f0e:	11 24       	eor	r1, r1
     f10:	ea 5c       	subi	r30, 0xCA	; 202
     f12:	fd 4f       	sbci	r31, 0xFD	; 253
     f14:	24 a1       	ldd	r18, Z+36	; 0x24
     f16:	35 a1       	ldd	r19, Z+37	; 0x25
     f18:	23 2b       	or	r18, r19
     f1a:	31 f5       	brne	.+76     	; 0xf68 <kernel_async_send+0x82>
		if (ChannelArray[Cp->senderChannel - 1].sender == NULL) ChannelArray[Cp->senderChannel - 1].sender = Cp;
     f1c:	fc 01       	movw	r30, r24
     f1e:	e4 5e       	subi	r30, 0xE4	; 228
     f20:	fe 4f       	sbci	r31, 0xFE	; 254
     f22:	20 81       	ld	r18, Z
     f24:	31 81       	ldd	r19, Z+1	; 0x01
     f26:	21 50       	subi	r18, 0x01	; 1
     f28:	31 09       	sbc	r19, r1
     f2a:	42 9f       	mul	r20, r18
     f2c:	f0 01       	movw	r30, r0
     f2e:	43 9f       	mul	r20, r19
     f30:	f0 0d       	add	r31, r0
     f32:	11 24       	eor	r1, r1
     f34:	ea 5c       	subi	r30, 0xCA	; 202
     f36:	fd 4f       	sbci	r31, 0xFD	; 253
     f38:	22 81       	ldd	r18, Z+2	; 0x02
     f3a:	33 81       	ldd	r19, Z+3	; 0x03
     f3c:	23 2b       	or	r18, r19
     f3e:	89 f4       	brne	.+34     	; 0xf62 <kernel_async_send+0x7c>
     f40:	fc 01       	movw	r30, r24
     f42:	e4 5e       	subi	r30, 0xE4	; 228
     f44:	fe 4f       	sbci	r31, 0xFE	; 254
     f46:	20 81       	ld	r18, Z
     f48:	31 81       	ldd	r19, Z+1	; 0x01
     f4a:	21 50       	subi	r18, 0x01	; 1
     f4c:	31 09       	sbc	r19, r1
     f4e:	42 9f       	mul	r20, r18
     f50:	f0 01       	movw	r30, r0
     f52:	43 9f       	mul	r20, r19
     f54:	f0 0d       	add	r31, r0
     f56:	11 24       	eor	r1, r1
     f58:	ea 5c       	subi	r30, 0xCA	; 202
     f5a:	fd 4f       	sbci	r31, 0xFD	; 253
     f5c:	93 83       	std	Z+3, r25	; 0x03
     f5e:	82 83       	std	Z+2, r24	; 0x02
     f60:	0d c1       	rjmp	.+538    	; 0x117c <kernel_async_send+0x296>
		else OS_Abort(6); // cant have more than 1 sender
     f62:	86 e0       	ldi	r24, 0x06	; 6
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	db da       	rcall	.-2634   	; 0x51e <OS_Abort>
		return; // return without blocking
	} else { //receivers are waiting
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(6); // cant have more than 1 sender
     f68:	fc 01       	movw	r30, r24
     f6a:	e4 5e       	subi	r30, 0xE4	; 228
     f6c:	fe 4f       	sbci	r31, 0xFE	; 254
     f6e:	20 81       	ld	r18, Z
     f70:	31 81       	ldd	r19, Z+1	; 0x01
     f72:	21 50       	subi	r18, 0x01	; 1
     f74:	31 09       	sbc	r19, r1
     f76:	49 e2       	ldi	r20, 0x29	; 41
     f78:	42 9f       	mul	r20, r18
     f7a:	f0 01       	movw	r30, r0
     f7c:	43 9f       	mul	r20, r19
     f7e:	f0 0d       	add	r31, r0
     f80:	11 24       	eor	r1, r1
     f82:	ea 5c       	subi	r30, 0xCA	; 202
     f84:	fd 4f       	sbci	r31, 0xFD	; 253
     f86:	22 81       	ldd	r18, Z+2	; 0x02
     f88:	33 81       	ldd	r19, Z+3	; 0x03
     f8a:	23 2b       	or	r18, r19
     f8c:	19 f0       	breq	.+6      	; 0xf94 <kernel_async_send+0xae>
     f8e:	86 e0       	ldi	r24, 0x06	; 6
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	c5 da       	rcall	.-2678   	; 0x51e <OS_Abort>
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
     f94:	fc 01       	movw	r30, r24
     f96:	e4 5e       	subi	r30, 0xE4	; 228
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	29 e2       	ldi	r18, 0x29	; 41
     fa2:	28 9f       	mul	r18, r24
     fa4:	f0 01       	movw	r30, r0
     fa6:	29 9f       	mul	r18, r25
     fa8:	f0 0d       	add	r31, r0
     faa:	11 24       	eor	r1, r1
     fac:	ea 5c       	subi	r30, 0xCA	; 202
     fae:	fd 4f       	sbci	r31, 0xFD	; 253
     fb0:	c4 a1       	ldd	r28, Z+36	; 0x24
     fb2:	d5 a1       	ldd	r29, Z+37	; 0x25
     fb4:	21 97       	sbiw	r28, 0x01	; 1
     fb6:	0a f4       	brpl	.+2      	; 0xfba <kernel_async_send+0xd4>
     fb8:	ce c0       	rjmp	.+412    	; 0x1156 <kernel_async_send+0x270>
			ChannelArray[Cp->senderChannel - 1].receivers[l]->state = READY;
     fba:	19 e2       	ldi	r17, 0x29	; 41
     fbc:	01 e0       	ldi	r16, 0x01	; 1
     fbe:	20 91 d4 04 	lds	r18, 0x04D4	; 0x8004d4 <Cp>
     fc2:	30 91 d5 04 	lds	r19, 0x04D5	; 0x8004d5 <Cp+0x1>
     fc6:	c9 01       	movw	r24, r18
     fc8:	84 5e       	subi	r24, 0xE4	; 228
     fca:	9e 4f       	sbci	r25, 0xFE	; 254
     fcc:	dc 01       	movw	r26, r24
     fce:	4d 91       	ld	r20, X+
     fd0:	5c 91       	ld	r21, X
     fd2:	41 50       	subi	r20, 0x01	; 1
     fd4:	51 09       	sbc	r21, r1
     fd6:	fe 01       	movw	r30, r28
     fd8:	32 96       	adiw	r30, 0x02	; 2
     fda:	ee 0f       	add	r30, r30
     fdc:	ff 1f       	adc	r31, r31
     fde:	14 9f       	mul	r17, r20
     fe0:	d0 01       	movw	r26, r0
     fe2:	15 9f       	mul	r17, r21
     fe4:	b0 0d       	add	r27, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	ae 0f       	add	r26, r30
     fea:	bf 1f       	adc	r27, r31
     fec:	aa 5c       	subi	r26, 0xCA	; 202
     fee:	bd 4f       	sbci	r27, 0xFD	; 253
     ff0:	0d 90       	ld	r0, X+
     ff2:	bc 91       	ld	r27, X
     ff4:	a0 2d       	mov	r26, r0
     ff6:	ac 5f       	subi	r26, 0xFC	; 252
     ff8:	be 4f       	sbci	r27, 0xFE	; 254
     ffa:	0c 93       	st	X, r16
			ChannelArray[Cp->senderChannel - 1].receivers[l]->val = Cp->val;
     ffc:	dc 01       	movw	r26, r24
     ffe:	4d 91       	ld	r20, X+
    1000:	5c 91       	ld	r21, X
    1002:	41 50       	subi	r20, 0x01	; 1
    1004:	51 09       	sbc	r21, r1
    1006:	14 9f       	mul	r17, r20
    1008:	d0 01       	movw	r26, r0
    100a:	15 9f       	mul	r17, r21
    100c:	b0 0d       	add	r27, r0
    100e:	11 24       	eor	r1, r1
    1010:	ae 0f       	add	r26, r30
    1012:	bf 1f       	adc	r27, r31
    1014:	aa 5c       	subi	r26, 0xCA	; 202
    1016:	bd 4f       	sbci	r27, 0xFD	; 253
    1018:	6d 91       	ld	r22, X+
    101a:	7c 91       	ld	r23, X
    101c:	a9 01       	movw	r20, r18
    101e:	40 5e       	subi	r20, 0xE0	; 224
    1020:	5e 4f       	sbci	r21, 0xFE	; 254
    1022:	da 01       	movw	r26, r20
    1024:	4d 91       	ld	r20, X+
    1026:	5c 91       	ld	r21, X
    1028:	db 01       	movw	r26, r22
    102a:	a0 5e       	subi	r26, 0xE0	; 224
    102c:	be 4f       	sbci	r27, 0xFE	; 254
    102e:	4d 93       	st	X+, r20
    1030:	5c 93       	st	X, r21

			if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == SYSTEM) {
    1032:	dc 01       	movw	r26, r24
    1034:	4d 91       	ld	r20, X+
    1036:	5c 91       	ld	r21, X
    1038:	11 97       	sbiw	r26, 0x01	; 1
    103a:	41 50       	subi	r20, 0x01	; 1
    103c:	51 09       	sbc	r21, r1
    103e:	14 9f       	mul	r17, r20
    1040:	c0 01       	movw	r24, r0
    1042:	15 9f       	mul	r17, r21
    1044:	90 0d       	add	r25, r0
    1046:	11 24       	eor	r1, r1
    1048:	e8 0f       	add	r30, r24
    104a:	f9 1f       	adc	r31, r25
    104c:	ea 5c       	subi	r30, 0xCA	; 202
    104e:	fd 4f       	sbci	r31, 0xFD	; 253
    1050:	01 90       	ld	r0, Z+
    1052:	f0 81       	ld	r31, Z
    1054:	e0 2d       	mov	r30, r0
    1056:	eb 5f       	subi	r30, 0xFB	; 251
    1058:	fe 4f       	sbci	r31, 0xFE	; 254
    105a:	80 81       	ld	r24, Z
    105c:	91 81       	ldd	r25, Z+1	; 0x01
    105e:	03 97       	sbiw	r24, 0x03	; 3
    1060:	c1 f4       	brne	.+48     	; 0x1092 <kernel_async_send+0x1ac>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &SysQueue, &SysCount);
    1062:	fd 01       	movw	r30, r26
    1064:	40 81       	ld	r20, Z
    1066:	51 81       	ldd	r21, Z+1	; 0x01
    1068:	ce 01       	movw	r24, r28
    106a:	02 96       	adiw	r24, 0x02	; 2
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	41 50       	subi	r20, 0x01	; 1
    1072:	51 09       	sbc	r21, r1
    1074:	14 9f       	mul	r17, r20
    1076:	90 01       	movw	r18, r0
    1078:	15 9f       	mul	r17, r21
    107a:	30 0d       	add	r19, r0
    107c:	11 24       	eor	r1, r1
    107e:	82 0f       	add	r24, r18
    1080:	93 1f       	adc	r25, r19
    1082:	4a ec       	ldi	r20, 0xCA	; 202
    1084:	54 e0       	ldi	r21, 0x04	; 4
    1086:	69 e1       	ldi	r22, 0x19	; 25
    1088:	77 e1       	ldi	r23, 0x17	; 23
    108a:	8a 5c       	subi	r24, 0xCA	; 202
    108c:	9d 4f       	sbci	r25, 0xFD	; 253
    108e:	b9 d1       	rcall	.+882    	; 0x1402 <enqueue>
    1090:	36 c0       	rjmp	.+108    	; 0x10fe <kernel_async_send+0x218>
				} else if (ChannelArray[Cp->senderChannel - 1].receivers[l]->priority == RR) {
    1092:	f9 01       	movw	r30, r18
    1094:	e4 5e       	subi	r30, 0xE4	; 228
    1096:	fe 4f       	sbci	r31, 0xFE	; 254
    1098:	40 81       	ld	r20, Z
    109a:	51 81       	ldd	r21, Z+1	; 0x01
    109c:	41 50       	subi	r20, 0x01	; 1
    109e:	51 09       	sbc	r21, r1
    10a0:	fe 01       	movw	r30, r28
    10a2:	32 96       	adiw	r30, 0x02	; 2
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	14 9f       	mul	r17, r20
    10aa:	c0 01       	movw	r24, r0
    10ac:	15 9f       	mul	r17, r21
    10ae:	90 0d       	add	r25, r0
    10b0:	11 24       	eor	r1, r1
    10b2:	e8 0f       	add	r30, r24
    10b4:	f9 1f       	adc	r31, r25
    10b6:	ea 5c       	subi	r30, 0xCA	; 202
    10b8:	fd 4f       	sbci	r31, 0xFD	; 253
    10ba:	01 90       	ld	r0, Z+
    10bc:	f0 81       	ld	r31, Z
    10be:	e0 2d       	mov	r30, r0
    10c0:	eb 5f       	subi	r30, 0xFB	; 251
    10c2:	fe 4f       	sbci	r31, 0xFE	; 254
    10c4:	80 81       	ld	r24, Z
    10c6:	91 81       	ldd	r25, Z+1	; 0x01
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	c9 f4       	brne	.+50     	; 0x10fe <kernel_async_send+0x218>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
    10cc:	f9 01       	movw	r30, r18
    10ce:	e4 5e       	subi	r30, 0xE4	; 228
    10d0:	fe 4f       	sbci	r31, 0xFE	; 254
    10d2:	40 81       	ld	r20, Z
    10d4:	51 81       	ldd	r21, Z+1	; 0x01
    10d6:	ce 01       	movw	r24, r28
    10d8:	02 96       	adiw	r24, 0x02	; 2
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	41 50       	subi	r20, 0x01	; 1
    10e0:	51 09       	sbc	r21, r1
    10e2:	14 9f       	mul	r17, r20
    10e4:	90 01       	movw	r18, r0
    10e6:	15 9f       	mul	r17, r21
    10e8:	30 0d       	add	r19, r0
    10ea:	11 24       	eor	r1, r1
    10ec:	82 0f       	add	r24, r18
    10ee:	93 1f       	adc	r25, r19
    10f0:	46 ec       	ldi	r20, 0xC6	; 198
    10f2:	54 e0       	ldi	r21, 0x04	; 4
    10f4:	6f e5       	ldi	r22, 0x5F	; 95
    10f6:	77 e1       	ldi	r23, 0x17	; 23
    10f8:	8a 5c       	subi	r24, 0xCA	; 202
    10fa:	9d 4f       	sbci	r25, 0xFD	; 253
    10fc:	82 d1       	rcall	.+772    	; 0x1402 <enqueue>
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
    10fe:	a0 91 d4 04 	lds	r26, 0x04D4	; 0x8004d4 <Cp>
    1102:	b0 91 d5 04 	lds	r27, 0x04D5	; 0x8004d5 <Cp+0x1>
    1106:	a4 5e       	subi	r26, 0xE4	; 228
    1108:	be 4f       	sbci	r27, 0xFE	; 254
    110a:	2d 91       	ld	r18, X+
    110c:	3c 91       	ld	r19, X
    110e:	11 97       	sbiw	r26, 0x01	; 1
    1110:	21 50       	subi	r18, 0x01	; 1
    1112:	31 09       	sbc	r19, r1
    1114:	fe 01       	movw	r30, r28
    1116:	32 96       	adiw	r30, 0x02	; 2
    1118:	ee 0f       	add	r30, r30
    111a:	ff 1f       	adc	r31, r31
    111c:	12 9f       	mul	r17, r18
    111e:	c0 01       	movw	r24, r0
    1120:	13 9f       	mul	r17, r19
    1122:	90 0d       	add	r25, r0
    1124:	11 24       	eor	r1, r1
    1126:	e8 0f       	add	r30, r24
    1128:	f9 1f       	adc	r31, r25
    112a:	ea 5c       	subi	r30, 0xCA	; 202
    112c:	fd 4f       	sbci	r31, 0xFD	; 253
    112e:	11 82       	std	Z+1, r1	; 0x01
    1130:	10 82       	st	Z, r1
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
    1132:	8d 91       	ld	r24, X+
    1134:	9c 91       	ld	r25, X
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	18 9f       	mul	r17, r24
    113a:	f0 01       	movw	r30, r0
    113c:	19 9f       	mul	r17, r25
    113e:	f0 0d       	add	r31, r0
    1140:	11 24       	eor	r1, r1
    1142:	ea 5c       	subi	r30, 0xCA	; 202
    1144:	fd 4f       	sbci	r31, 0xFD	; 253
    1146:	84 a1       	ldd	r24, Z+36	; 0x24
    1148:	95 a1       	ldd	r25, Z+37	; 0x25
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	95 a3       	std	Z+37, r25	; 0x25
    114e:	84 a3       	std	Z+36, r24	; 0x24
		else OS_Abort(6); // cant have more than 1 sender
		return; // return without blocking
	} else { //receivers are waiting
		if (ChannelArray[Cp->senderChannel - 1].sender != NULL) OS_Abort(6); // cant have more than 1 sender
		int l;
		for (l = ChannelArray[Cp->senderChannel - 1].numberReceivers - 1; l >= 0; l--)  {
    1150:	21 97       	sbiw	r28, 0x01	; 1
    1152:	0a f0       	brmi	.+2      	; 0x1156 <kernel_async_send+0x270>
    1154:	34 cf       	rjmp	.-408    	; 0xfbe <kernel_async_send+0xd8>
				enqueue(&ChannelArray[Cp->senderChannel - 1].receivers[l], &RRQueue, &RRCount);
			}
			ChannelArray[Cp->senderChannel - 1].receivers[l] = NULL;
			ChannelArray[Cp->senderChannel - 1].numberReceivers--;
		}
		ChannelArray[Cp->senderChannel - 1].val = NULL;
    1156:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <Cp>
    115a:	f0 91 d5 04 	lds	r31, 0x04D5	; 0x8004d5 <Cp+0x1>
    115e:	e4 5e       	subi	r30, 0xE4	; 228
    1160:	fe 4f       	sbci	r31, 0xFE	; 254
    1162:	80 81       	ld	r24, Z
    1164:	91 81       	ldd	r25, Z+1	; 0x01
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	29 e2       	ldi	r18, 0x29	; 41
    116a:	28 9f       	mul	r18, r24
    116c:	f0 01       	movw	r30, r0
    116e:	29 9f       	mul	r18, r25
    1170:	f0 0d       	add	r31, r0
    1172:	11 24       	eor	r1, r1
    1174:	ea 5c       	subi	r30, 0xCA	; 202
    1176:	fd 4f       	sbci	r31, 0xFD	; 253
    1178:	10 a6       	std	Z+40, r1	; 0x28
    117a:	17 a2       	std	Z+39, r1	; 0x27
	}
}
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	0f 91       	pop	r16
    1184:	08 95       	ret

00001186 <OS_Start>:
}

/**
  * This function starts the RTOS after creating a_main
  */
void OS_Start() {   
    1186:	cf 92       	push	r12
    1188:	df 92       	push	r13
    118a:	ef 92       	push	r14
    118c:	ff 92       	push	r15
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
	if ( (! KernelActive) && (Tasks > 0)) {
    1196:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <KernelActive>
    119a:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <KernelActive+0x1>
    119e:	89 2b       	or	r24, r25
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <OS_Start+0x1e>
    11a2:	10 c1       	rjmp	.+544    	; 0x13c4 <OS_Start+0x23e>
    11a4:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <Tasks>
    11a8:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <Tasks+0x1>
    11ac:	89 2b       	or	r24, r25
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <OS_Start+0x2c>
    11b0:	09 c1       	rjmp	.+530    	; 0x13c4 <OS_Start+0x23e>
		Disable_Interrupt();
    11b2:	f8 94       	cli

		KernelActive = 1;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <KernelActive+0x1>
    11bc:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <KernelActive>
  * corresponding kernel function on its behalf.
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */
    11c0:	d7 d9       	rcall	.-3154   	; 0x570 <Dispatch>
			if(Cp->priority == SYSTEM) 
				break;
			else
				Cp->request = NEXT;
cnext:	case NEXT:
			Cp->state = READY;
    11c2:	dd 24       	eor	r13, r13
    11c4:	d3 94       	inc	r13
		case CREATE_SYS:
			Cp->response = Kernel_Create_Task( Cp->code, SYSTEM, Cp->arg, -1, -1, -1);
			if(Cp->priority == SYSTEM) 
				break;
			else
				Cp->request = NEXT;
    11c6:	0f 2e       	mov	r0, r31
    11c8:	f5 e0       	ldi	r31, 0x05	; 5
    11ca:	cf 2e       	mov	r12, r31
    11cc:	f0 2d       	mov	r31, r0
  */
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */

	while(1) {
		Cp->request = NONE; /* clear its request */
    11ce:	e0 91 d4 04 	lds	r30, 0x04D4	; 0x8004d4 <Cp>
    11d2:	f0 91 d5 04 	lds	r31, 0x04D5	; 0x8004d5 <Cp+0x1>
    11d6:	df 01       	movw	r26, r30
    11d8:	a5 5f       	subi	r26, 0xF5	; 245
    11da:	be 4f       	sbci	r27, 0xFE	; 254
    11dc:	1c 92       	st	X, r1

		/* activate this newly selected task */
		CurrentSp = Cp->sp;
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	90 93 3c 17 	sts	0x173C, r25	; 0x80173c <CurrentSp+0x1>
    11e6:	80 93 3b 17 	sts	0x173B, r24	; 0x80173b <CurrentSp>

		Exit_Kernel();    /* or CSwitch() */
    11ea:	0e 94 9e 00 	call	0x13c	; 0x13c <CSwitch>

		/* if this task makes a system call, it will return to here! */

		/* save the Cp's stack pointer */
		Cp->sp = CurrentSp;
    11ee:	c0 91 d4 04 	lds	r28, 0x04D4	; 0x8004d4 <Cp>
    11f2:	d0 91 d5 04 	lds	r29, 0x04D5	; 0x8004d5 <Cp+0x1>
    11f6:	80 91 3b 17 	lds	r24, 0x173B	; 0x80173b <CurrentSp>
    11fa:	90 91 3c 17 	lds	r25, 0x173C	; 0x80173c <CurrentSp+0x1>
    11fe:	9b 83       	std	Y+3, r25	; 0x03
    1200:	8a 83       	std	Y+2, r24	; 0x02

		switch(Cp->request){
    1202:	fe 01       	movw	r30, r28
    1204:	e5 5f       	subi	r30, 0xF5	; 245
    1206:	fe 4f       	sbci	r31, 0xFE	; 254
    1208:	e0 81       	ld	r30, Z
    120a:	8e 2f       	mov	r24, r30
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	fc 01       	movw	r30, r24
    1210:	31 97       	sbiw	r30, 0x01	; 1
    1212:	ea 30       	cpi	r30, 0x0A	; 10
    1214:	f1 05       	cpc	r31, r1
    1216:	d8 f6       	brcc	.-74     	; 0x11ce <OS_Start+0x48>
    1218:	88 27       	eor	r24, r24
    121a:	ee 58       	subi	r30, 0x8E	; 142
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	8f 4f       	sbci	r24, 0xFF	; 255
    1220:	82 c2       	rjmp	.+1284   	; 0x1726 <__tablejump2__>
		case CREATE:
			Cp->response = Kernel_Create_Task( Cp->code, Cp->priority, Cp->arg, -1, -1, -1);
    1222:	fe 01       	movw	r30, r28
    1224:	e9 5f       	subi	r30, 0xF9	; 249
    1226:	fe 4f       	sbci	r31, 0xFE	; 254
    1228:	40 81       	ld	r20, Z
    122a:	51 81       	ldd	r21, Z+1	; 0x01
    122c:	32 97       	sbiw	r30, 0x02	; 2
    122e:	60 81       	ld	r22, Z
    1230:	71 81       	ldd	r23, Z+1	; 0x01
    1232:	34 96       	adiw	r30, 0x04	; 4
    1234:	80 81       	ld	r24, Z
    1236:	91 81       	ldd	r25, Z+1	; 0x01
    1238:	ee 24       	eor	r14, r14
    123a:	ea 94       	dec	r14
    123c:	fe 2c       	mov	r15, r14
    123e:	0f ef       	ldi	r16, 0xFF	; 255
    1240:	1f ef       	ldi	r17, 0xFF	; 255
    1242:	2f ef       	ldi	r18, 0xFF	; 255
    1244:	3f ef       	ldi	r19, 0xFF	; 255
    1246:	eb d8       	rcall	.-3626   	; 0x41e <Kernel_Create_Task>
    1248:	c4 5f       	subi	r28, 0xF4	; 244
    124a:	de 4f       	sbci	r29, 0xFE	; 254
    124c:	99 83       	std	Y+1, r25	; 0x01
    124e:	88 83       	st	Y, r24
    1250:	be cf       	rjmp	.-132    	; 0x11ce <OS_Start+0x48>
			break;
		case CREATE_PERIODIC:
			Cp->response = Kernel_Create_Task( Cp->code, PERIODIC, Cp->arg, Cp->offset, Cp->wcet, Cp->period);
    1252:	fe 01       	movw	r30, r28
    1254:	e0 5f       	subi	r30, 0xF0	; 240
    1256:	fe 4f       	sbci	r31, 0xFE	; 254
    1258:	e0 80       	ld	r14, Z
    125a:	f1 80       	ldd	r15, Z+1	; 0x01
    125c:	32 96       	adiw	r30, 0x02	; 2
    125e:	00 81       	ld	r16, Z
    1260:	11 81       	ldd	r17, Z+1	; 0x01
    1262:	32 96       	adiw	r30, 0x02	; 2
    1264:	20 81       	ld	r18, Z
    1266:	31 81       	ldd	r19, Z+1	; 0x01
    1268:	3d 97       	sbiw	r30, 0x0d	; 13
    126a:	40 81       	ld	r20, Z
    126c:	51 81       	ldd	r21, Z+1	; 0x01
    126e:	32 96       	adiw	r30, 0x02	; 2
    1270:	80 81       	ld	r24, Z
    1272:	91 81       	ldd	r25, Z+1	; 0x01
    1274:	62 e0       	ldi	r22, 0x02	; 2
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	d2 d8       	rcall	.-3676   	; 0x41e <Kernel_Create_Task>
    127a:	c4 5f       	subi	r28, 0xF4	; 244
    127c:	de 4f       	sbci	r29, 0xFE	; 254
    127e:	99 83       	std	Y+1, r25	; 0x01
    1280:	88 83       	st	Y, r24
			if(Cp->priority == RR && Cp->offset == 0){
    1282:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <Cp>
    1286:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <Cp+0x1>
    128a:	fc 01       	movw	r30, r24
    128c:	eb 5f       	subi	r30, 0xFB	; 251
    128e:	fe 4f       	sbci	r31, 0xFE	; 254
    1290:	20 81       	ld	r18, Z
    1292:	31 81       	ldd	r19, Z+1	; 0x01
    1294:	21 30       	cpi	r18, 0x01	; 1
    1296:	31 05       	cpc	r19, r1
    1298:	09 f0       	breq	.+2      	; 0x129c <OS_Start+0x116>
    129a:	99 cf       	rjmp	.-206    	; 0x11ce <OS_Start+0x48>
    129c:	3f 96       	adiw	r30, 0x0f	; 15
    129e:	20 81       	ld	r18, Z
    12a0:	31 81       	ldd	r19, Z+1	; 0x01
    12a2:	23 2b       	or	r18, r19
    12a4:	09 f0       	breq	.+2      	; 0x12a8 <OS_Start+0x122>
    12a6:	93 cf       	rjmp	.-218    	; 0x11ce <OS_Start+0x48>
				Cp->request = NEXT;
    12a8:	39 97       	sbiw	r30, 0x09	; 9
    12aa:	c0 82       	st	Z, r12
    12ac:	3c c0       	rjmp	.+120    	; 0x1326 <OS_Start+0x1a0>
				goto cnext;
			}
			break;
		case CREATE_RR:
			Cp->response = Kernel_Create_Task( Cp->code, RR, Cp->arg, -1, -1, -1);
    12ae:	fe 01       	movw	r30, r28
    12b0:	e9 5f       	subi	r30, 0xF9	; 249
    12b2:	fe 4f       	sbci	r31, 0xFE	; 254
    12b4:	40 81       	ld	r20, Z
    12b6:	51 81       	ldd	r21, Z+1	; 0x01
    12b8:	32 96       	adiw	r30, 0x02	; 2
    12ba:	80 81       	ld	r24, Z
    12bc:	91 81       	ldd	r25, Z+1	; 0x01
    12be:	ee 24       	eor	r14, r14
    12c0:	ea 94       	dec	r14
    12c2:	fe 2c       	mov	r15, r14
    12c4:	0f ef       	ldi	r16, 0xFF	; 255
    12c6:	1f ef       	ldi	r17, 0xFF	; 255
    12c8:	2f ef       	ldi	r18, 0xFF	; 255
    12ca:	3f ef       	ldi	r19, 0xFF	; 255
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	a6 d8       	rcall	.-3764   	; 0x41e <Kernel_Create_Task>
    12d2:	c4 5f       	subi	r28, 0xF4	; 244
    12d4:	de 4f       	sbci	r29, 0xFE	; 254
    12d6:	99 83       	std	Y+1, r25	; 0x01
    12d8:	88 83       	st	Y, r24
    12da:	79 cf       	rjmp	.-270    	; 0x11ce <OS_Start+0x48>
			break;
		case CREATE_SYS:
			Cp->response = Kernel_Create_Task( Cp->code, SYSTEM, Cp->arg, -1, -1, -1);
    12dc:	fe 01       	movw	r30, r28
    12de:	e9 5f       	subi	r30, 0xF9	; 249
    12e0:	fe 4f       	sbci	r31, 0xFE	; 254
    12e2:	40 81       	ld	r20, Z
    12e4:	51 81       	ldd	r21, Z+1	; 0x01
    12e6:	32 96       	adiw	r30, 0x02	; 2
    12e8:	80 81       	ld	r24, Z
    12ea:	91 81       	ldd	r25, Z+1	; 0x01
    12ec:	ee 24       	eor	r14, r14
    12ee:	ea 94       	dec	r14
    12f0:	fe 2c       	mov	r15, r14
    12f2:	0f ef       	ldi	r16, 0xFF	; 255
    12f4:	1f ef       	ldi	r17, 0xFF	; 255
    12f6:	2f ef       	ldi	r18, 0xFF	; 255
    12f8:	3f ef       	ldi	r19, 0xFF	; 255
    12fa:	63 e0       	ldi	r22, 0x03	; 3
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	8f d8       	rcall	.-3810   	; 0x41e <Kernel_Create_Task>
    1300:	c4 5f       	subi	r28, 0xF4	; 244
    1302:	de 4f       	sbci	r29, 0xFE	; 254
    1304:	99 83       	std	Y+1, r25	; 0x01
    1306:	88 83       	st	Y, r24
			if(Cp->priority == SYSTEM) 
    1308:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <Cp>
    130c:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <Cp+0x1>
    1310:	fc 01       	movw	r30, r24
    1312:	eb 5f       	subi	r30, 0xFB	; 251
    1314:	fe 4f       	sbci	r31, 0xFE	; 254
    1316:	20 81       	ld	r18, Z
    1318:	31 81       	ldd	r19, Z+1	; 0x01
    131a:	23 30       	cpi	r18, 0x03	; 3
    131c:	31 05       	cpc	r19, r1
    131e:	09 f4       	brne	.+2      	; 0x1322 <OS_Start+0x19c>
    1320:	56 cf       	rjmp	.-340    	; 0x11ce <OS_Start+0x48>
				break;
			else
				Cp->request = NEXT;
    1322:	36 96       	adiw	r30, 0x06	; 6
    1324:	c0 82       	st	Z, r12
cnext:	case NEXT:
			Cp->state = READY;
    1326:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <Cp>
    132a:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <Cp+0x1>
    132e:	fc 01       	movw	r30, r24
    1330:	ec 5f       	subi	r30, 0xFC	; 252
    1332:	fe 4f       	sbci	r31, 0xFE	; 254
    1334:	d0 82       	st	Z, r13
			if (Cp->priority == SYSTEM) {
    1336:	31 96       	adiw	r30, 0x01	; 1
    1338:	20 81       	ld	r18, Z
    133a:	31 81       	ldd	r19, Z+1	; 0x01
    133c:	23 30       	cpi	r18, 0x03	; 3
    133e:	31 05       	cpc	r19, r1
    1340:	41 f4       	brne	.+16     	; 0x1352 <OS_Start+0x1cc>
				enqueue(&Cp, &SysQueue, &SysCount);
    1342:	4a ec       	ldi	r20, 0xCA	; 202
    1344:	54 e0       	ldi	r21, 0x04	; 4
    1346:	69 e1       	ldi	r22, 0x19	; 25
    1348:	77 e1       	ldi	r23, 0x17	; 23
    134a:	84 ed       	ldi	r24, 0xD4	; 212
    134c:	94 e0       	ldi	r25, 0x04	; 4
    134e:	59 d0       	rcall	.+178    	; 0x1402 <enqueue>
    1350:	1e c0       	rjmp	.+60     	; 0x138e <OS_Start+0x208>
			} else if (Cp->priority == PERIODIC) {
    1352:	fc 01       	movw	r30, r24
    1354:	eb 5f       	subi	r30, 0xFB	; 251
    1356:	fe 4f       	sbci	r31, 0xFE	; 254
    1358:	20 81       	ld	r18, Z
    135a:	31 81       	ldd	r19, Z+1	; 0x01
    135c:	22 30       	cpi	r18, 0x02	; 2
    135e:	31 05       	cpc	r19, r1
    1360:	41 f4       	brne	.+16     	; 0x1372 <OS_Start+0x1ec>
				enqueuePeriodic(&Cp, &PeriodicQueue, &PeriodicCount);
    1362:	48 ec       	ldi	r20, 0xC8	; 200
    1364:	54 e0       	ldi	r21, 0x04	; 4
    1366:	6d e3       	ldi	r22, 0x3D	; 61
    1368:	77 e1       	ldi	r23, 0x17	; 23
    136a:	84 ed       	ldi	r24, 0xD4	; 212
    136c:	94 e0       	ldi	r25, 0x04	; 4
    136e:	9b d0       	rcall	.+310    	; 0x14a6 <enqueuePeriodic>
    1370:	0e c0       	rjmp	.+28     	; 0x138e <OS_Start+0x208>
			} else if (Cp->priority == RR) {
    1372:	fc 01       	movw	r30, r24
    1374:	eb 5f       	subi	r30, 0xFB	; 251
    1376:	fe 4f       	sbci	r31, 0xFE	; 254
    1378:	80 81       	ld	r24, Z
    137a:	91 81       	ldd	r25, Z+1	; 0x01
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	39 f4       	brne	.+14     	; 0x138e <OS_Start+0x208>
				enqueue(&Cp, &RRQueue, &RRCount);
    1380:	46 ec       	ldi	r20, 0xC6	; 198
    1382:	54 e0       	ldi	r21, 0x04	; 4
    1384:	6f e5       	ldi	r22, 0x5F	; 95
    1386:	77 e1       	ldi	r23, 0x17	; 23
    1388:	84 ed       	ldi	r24, 0xD4	; 212
    138a:	94 e0       	ldi	r25, 0x04	; 4
    138c:	3a d0       	rcall	.+116    	; 0x1402 <enqueue>
			}
			Dispatch();
    138e:	f0 d8       	rcall	.-3616   	; 0x570 <Dispatch>
    1390:	1e cf       	rjmp	.-452    	; 0x11ce <OS_Start+0x48>
			break;
		case NONE:
			break;
		case CHECK_TIME_VIOLATION:
			CheckTimingViolation();
    1392:	cb d8       	rcall	.-3690   	; 0x52a <CheckTimingViolation>
    1394:	1c cf       	rjmp	.-456    	; 0x11ce <OS_Start+0x48>
			break;
		case SEND:
			kernel_send();
    1396:	61 db       	rcall	.-2366   	; 0xa5a <kernel_send>
    1398:	1a cf       	rjmp	.-460    	; 0x11ce <OS_Start+0x48>
			break;
		case ASYNC_SEND:
			kernel_async_send();
    139a:	a5 dd       	rcall	.-1206   	; 0xee6 <kernel_async_send>
    139c:	18 cf       	rjmp	.-464    	; 0x11ce <OS_Start+0x48>
			break;
		case RECEIVE:
			kernel_receive();
    139e:	c5 dc       	rcall	.-1654   	; 0xd2a <kernel_receive>
    13a0:	16 cf       	rjmp	.-468    	; 0x11ce <OS_Start+0x48>

/**
  *  Terminate a task
  */
static void Kernel_Terminate_Task() {
	Cp->state = DEAD;
    13a2:	fe 01       	movw	r30, r28
    13a4:	ec 5f       	subi	r30, 0xFC	; 252
    13a6:	fe 4f       	sbci	r31, 0xFE	; 254
    13a8:	10 82       	st	Z, r1
	Cp->processID = 0;
    13aa:	19 82       	std	Y+1, r1	; 0x01
    13ac:	18 82       	st	Y, r1
	Tasks--;
    13ae:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <Tasks>
    13b2:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <Tasks+0x1>
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	90 93 d1 04 	sts	0x04D1, r25	; 0x8004d1 <Tasks+0x1>
    13bc:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <Tasks>
			kernel_receive();
			break;
		case TERMINATE:
			/* deallocate all resources used by this task */
			Kernel_Terminate_Task();
			Dispatch();
    13c0:	d7 d8       	rcall	.-3666   	; 0x570 <Dispatch>
    13c2:	05 cf       	rjmp	.-502    	; 0x11ce <OS_Start+0x48>

		KernelActive = 1;
		Next_Kernel_Request();
		/* SHOULD NEVER GET HERE!!! */
	}
}
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	ff 90       	pop	r15
    13ce:	ef 90       	pop	r14
    13d0:	df 90       	pop	r13
    13d2:	cf 90       	pop	r12
    13d4:	08 95       	ret

000013d6 <main>:
/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
	//pin 25
	DDRA |= (1<<PA3);
    13d6:	0b 9a       	sbi	0x01, 3	; 1
	PORTA &= ~(1<<PA3);
    13d8:	13 98       	cbi	0x02, 3	; 2

	//pin 26
	DDRA |= (1<<PA4);
    13da:	0c 9a       	sbi	0x01, 4	; 1
	PORTA &= ~(1<<PA4);
    13dc:	14 98       	cbi	0x02, 4	; 2

	//pin 27
	DDRA |= (1<<PA5);
    13de:	0d 9a       	sbi	0x01, 5	; 1
	PORTA &= ~(1<<PA5);
    13e0:	15 98       	cbi	0x02, 5	; 2

	//pin 28
	DDRA |= (1<<PA6);
    13e2:	0e 9a       	sbi	0x01, 6	; 1
	PORTA &= ~(1<<PA6);
    13e4:	16 98       	cbi	0x02, 6	; 2

	//pin 29
	DDRA |= (1<<PA7);
    13e6:	0f 9a       	sbi	0x01, 7	; 1
	PORTA &= ~(1<<PA7);
    13e8:	17 98       	cbi	0x02, 7	; 2

	//pin 30
	DDRC |= (1<<PC7);
    13ea:	3f 9a       	sbi	0x07, 7	; 7
	PORTC &= ~(1<<PC7);
    13ec:	47 98       	cbi	0x08, 7	; 8

	setup();
    13ee:	88 da       	rcall	.-2800   	; 0x900 <setup>
	OS_Init();
    13f0:	59 d8       	rcall	.-3918   	; 0x4a4 <OS_Init>
	Task_Create_Idle();
    13f2:	cf d9       	rcall	.-3170   	; 0x792 <Task_Create_Idle>
	Task_Create_System(a_main, 42);
    13f4:	6a e2       	ldi	r22, 0x2A	; 42
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	88 e4       	ldi	r24, 0x48	; 72
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	9f d9       	rcall	.-3266   	; 0x73c <Task_Create_System>
	OS_Start();
    13fe:	c3 ce       	rjmp	.-634    	; 0x1186 <OS_Start>
    1400:	08 95       	ret

00001402 <enqueue>:
}

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    1408:	28 81       	ld	r18, Y
    140a:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
    140c:	2f 30       	cpi	r18, 0x0F	; 15
    140e:	31 05       	cpc	r19, r1
    1410:	e9 f0       	breq	.+58     	; 0x144c <enqueue+0x4a>
        return NULL;
    }

    int i = (*QCount) - 1;
    1412:	e8 81       	ld	r30, Y
    1414:	f9 81       	ldd	r31, Y+1	; 0x01
    1416:	9f 01       	movw	r18, r30
    1418:	21 50       	subi	r18, 0x01	; 1
    141a:	31 09       	sbc	r19, r1
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    141c:	62 f0       	brmi	.+24     	; 0x1436 <enqueue+0x34>
    141e:	ee 0f       	add	r30, r30
    1420:	ff 1f       	adc	r31, r31
    1422:	e6 0f       	add	r30, r22
    1424:	f7 1f       	adc	r31, r23
    1426:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
    1428:	32 91       	ld	r19, -Z
    142a:	22 91       	ld	r18, -Z
    142c:	33 83       	std	Z+3, r19	; 0x03
    142e:	22 83       	std	Z+2, r18	; 0x02

    int i = (*QCount) - 1;
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
    1430:	ea 17       	cp	r30, r26
    1432:	fb 07       	cpc	r31, r27
    1434:	c9 f7       	brne	.-14     	; 0x1428 <enqueue+0x26>
        i--;
        temp = Queue[i];
    }

    //Queue[i+1] = *p; //original code
	Queue[0] = *p;
    1436:	fc 01       	movw	r30, r24
    1438:	80 81       	ld	r24, Z
    143a:	91 81       	ldd	r25, Z+1	; 0x01
    143c:	fb 01       	movw	r30, r22
    143e:	91 83       	std	Z+1, r25	; 0x01
    1440:	80 83       	st	Z, r24
    (*QCount)++;
    1442:	88 81       	ld	r24, Y
    1444:	99 81       	ldd	r25, Y+1	; 0x01
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	99 83       	std	Y+1, r25	; 0x01
    144a:	88 83       	st	Y, r24
}
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <dequeue>:


/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
    1452:	ac 01       	movw	r20, r24
    1454:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    1456:	8d 91       	ld	r24, X+
    1458:	9c 91       	ld	r25, X
    145a:	11 97       	sbiw	r26, 0x01	; 1

/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
   if(isEmpty(QCount)) {
    145c:	89 2b       	or	r24, r25
    145e:	01 f1       	breq	.+64     	; 0x14a0 <dequeue+0x4e>
	   return NULL;
   }

   volatile PD *result = (Queue[(*QCount)-1]);
    1460:	ed 91       	ld	r30, X+
    1462:	fc 91       	ld	r31, X
    1464:	11 97       	sbiw	r26, 0x01	; 1
    1466:	e1 50       	subi	r30, 0x01	; 1
    1468:	f0 48       	sbci	r31, 0x80	; 128
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	e4 0f       	add	r30, r20
    1470:	f5 1f       	adc	r31, r21
    1472:	80 81       	ld	r24, Z
    1474:	91 81       	ldd	r25, Z+1	; 0x01
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
    1476:	2d 91       	ld	r18, X+
    1478:	3c 91       	ld	r19, X
    147a:	11 97       	sbiw	r26, 0x01	; 1
    147c:	f9 01       	movw	r30, r18
    147e:	e1 50       	subi	r30, 0x01	; 1
    1480:	f0 48       	sbci	r31, 0x80	; 128
    1482:	ee 0f       	add	r30, r30
    1484:	ff 1f       	adc	r31, r31
    1486:	e4 0f       	add	r30, r20
    1488:	f5 1f       	adc	r31, r21
    148a:	11 82       	std	Z+1, r1	; 0x01
    148c:	10 82       	st	Z, r1
   (*QCount)--;
    148e:	2d 91       	ld	r18, X+
    1490:	3c 91       	ld	r19, X
    1492:	11 97       	sbiw	r26, 0x01	; 1
    1494:	21 50       	subi	r18, 0x01	; 1
    1496:	31 09       	sbc	r19, r1
    1498:	11 96       	adiw	r26, 0x01	; 1
    149a:	3c 93       	st	X, r19
    149c:	2e 93       	st	-X, r18

   return result;
    149e:	08 95       	ret
/*
 *  Return the first element of the Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
   if(isEmpty(QCount)) {
	   return NULL;
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
   volatile PD *result = (Queue[(*QCount)-1]);
   Queue[(*QCount)-1] = 0; // this line was added to remove elements from the queue
   (*QCount)--;

   return result;
}
    14a4:	08 95       	ret

000014a6 <enqueuePeriodic>:

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    14a6:	cf 92       	push	r12
    14a8:	df 92       	push	r13
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	6a 01       	movw	r12, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
    14b8:	ea 01       	movw	r28, r20
    14ba:	28 81       	ld	r18, Y
    14bc:	39 81       	ldd	r19, Y+1	; 0x01

   return result;
}

void enqueuePeriodic(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
	if(isFull(QCount)) {
    14be:	2f 30       	cpi	r18, 0x0F	; 15
    14c0:	31 05       	cpc	r19, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <enqueuePeriodic+0x20>
    14c4:	4a c0       	rjmp	.+148    	; 0x155a <enqueuePeriodic+0xb4>
		return;
	}

	int i = (*QCount) - 1;
    14c6:	28 81       	ld	r18, Y
    14c8:	39 81       	ldd	r19, Y+1	; 0x01
    14ca:	21 50       	subi	r18, 0x01	; 1
    14cc:	31 09       	sbc	r19, r1

	volatile PD *new = *p;
    14ce:	fc 01       	movw	r30, r24
    14d0:	00 81       	ld	r16, Z
    14d2:	11 81       	ldd	r17, Z+1	; 0x01

	volatile PD *temp = Queue[i];
    14d4:	f9 01       	movw	r30, r18
    14d6:	ee 0f       	add	r30, r30
    14d8:	ff 1f       	adc	r31, r31
    14da:	db 01       	movw	r26, r22
    14dc:	ae 0f       	add	r26, r30
    14de:	bf 1f       	adc	r27, r31
    14e0:	4d 91       	ld	r20, X+
    14e2:	5c 91       	ld	r21, X

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    14e4:	33 23       	and	r19, r19
    14e6:	3c f1       	brlt	.+78     	; 0x1536 <enqueuePeriodic+0x90>
    14e8:	d8 01       	movw	r26, r16
    14ea:	aa 5e       	subi	r26, 0xEA	; 234
    14ec:	be 4f       	sbci	r27, 0xFE	; 254
    14ee:	ed 90       	ld	r14, X+
    14f0:	fc 90       	ld	r15, X
    14f2:	da 01       	movw	r26, r20
    14f4:	aa 5e       	subi	r26, 0xEA	; 234
    14f6:	be 4f       	sbci	r27, 0xFE	; 254
    14f8:	4d 91       	ld	r20, X+
    14fa:	5c 91       	ld	r21, X
    14fc:	e4 16       	cp	r14, r20
    14fe:	f5 06       	cpc	r15, r21
    1500:	d4 f0       	brlt	.+52     	; 0x1536 <enqueuePeriodic+0x90>
    1502:	e6 0f       	add	r30, r22
    1504:	f7 1f       	adc	r31, r23
    1506:	0a 5e       	subi	r16, 0xEA	; 234
    1508:	1e 4f       	sbci	r17, 0xFE	; 254
		Queue[i+1] = Queue[i];
    150a:	a0 81       	ld	r26, Z
    150c:	b1 81       	ldd	r27, Z+1	; 0x01
    150e:	b3 83       	std	Z+3, r27	; 0x03
    1510:	a2 83       	std	Z+2, r26	; 0x02
		i--;
    1512:	21 50       	subi	r18, 0x01	; 1
    1514:	31 09       	sbc	r19, r1
		temp = Queue[i];
    1516:	b2 91       	ld	r27, -Z
    1518:	a2 91       	ld	r26, -Z

	volatile PD *new = *p;

	volatile PD *temp = Queue[i];

	while(i >= 0 && (new->countdown >= temp->countdown)) {
    151a:	2f 3f       	cpi	r18, 0xFF	; 255
    151c:	4f ef       	ldi	r20, 0xFF	; 255
    151e:	34 07       	cpc	r19, r20
    1520:	51 f0       	breq	.+20     	; 0x1536 <enqueuePeriodic+0x90>
    1522:	e8 01       	movw	r28, r16
    1524:	e8 80       	ld	r14, Y
    1526:	f9 80       	ldd	r15, Y+1	; 0x01
    1528:	aa 5e       	subi	r26, 0xEA	; 234
    152a:	be 4f       	sbci	r27, 0xFE	; 254
    152c:	4d 91       	ld	r20, X+
    152e:	5c 91       	ld	r21, X
    1530:	e4 16       	cp	r14, r20
    1532:	f5 06       	cpc	r15, r21
    1534:	54 f7       	brge	.-44     	; 0x150a <enqueuePeriodic+0x64>
		Queue[i+1] = Queue[i];
		i--;
		temp = Queue[i];
	}

	Queue[i+1] = *p;
    1536:	fc 01       	movw	r30, r24
    1538:	80 81       	ld	r24, Z
    153a:	91 81       	ldd	r25, Z+1	; 0x01
    153c:	2f 5f       	subi	r18, 0xFF	; 255
    153e:	3f 4f       	sbci	r19, 0xFF	; 255
    1540:	22 0f       	add	r18, r18
    1542:	33 1f       	adc	r19, r19
    1544:	fb 01       	movw	r30, r22
    1546:	e2 0f       	add	r30, r18
    1548:	f3 1f       	adc	r31, r19
    154a:	91 83       	std	Z+1, r25	; 0x01
    154c:	80 83       	st	Z, r24
	(*QCount)++;
    154e:	e6 01       	movw	r28, r12
    1550:	88 81       	ld	r24, Y
    1552:	99 81       	ldd	r25, Y+1	; 0x01
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	99 83       	std	Y+1, r25	; 0x01
    1558:	88 83       	st	Y, r24
}
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	0f 91       	pop	r16
    1562:	ff 90       	pop	r15
    1564:	ef 90       	pop	r14
    1566:	df 90       	pop	r13
    1568:	cf 90       	pop	r12
    156a:	08 95       	ret

0000156c <peek>:

/*
 *  Checks if queue is empty
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
    156c:	fb 01       	movw	r30, r22
    156e:	20 81       	ld	r18, Z
    1570:	31 81       	ldd	r19, Z+1	; 0x01
	Queue[i+1] = *p;
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
    1572:	23 2b       	or	r18, r19
    1574:	61 f0       	breq	.+24     	; 0x158e <peek+0x22>
		return NULL;
	}
	volatile PD *result = (Queue[(*QCount)-1]);
    1576:	20 81       	ld	r18, Z
    1578:	31 81       	ldd	r19, Z+1	; 0x01
    157a:	f9 01       	movw	r30, r18
    157c:	e1 50       	subi	r30, 0x01	; 1
    157e:	f0 48       	sbci	r31, 0x80	; 128
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	e8 0f       	add	r30, r24
    1586:	f9 1f       	adc	r31, r25
    1588:	80 81       	ld	r24, Z
    158a:	91 81       	ldd	r25, Z+1	; 0x01
	return result;
    158c:	08 95       	ret
	(*QCount)++;
}

volatile PD *peek(volatile PD **Queue, volatile int *QCount) {
	if(isEmpty(QCount)) {
		return NULL;
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
	}
	volatile PD *result = (Queue[(*QCount)-1]);
	return result;
    1592:	08 95       	ret

00001594 <error_check>:
	itoa(Task_GetArg(), temp, 10);
	add_to_trace(trace, temp);
}

static void error_check(){
	if(strcmp(trace, "0123456701234567") == 0)
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	72 e0       	ldi	r23, 0x02	; 2
    1598:	8b ef       	ldi	r24, 0xFB	; 251
    159a:	96 e1       	ldi	r25, 0x16	; 22
    159c:	d7 d0       	rcall	.+430    	; 0x174c <strcmp>
    159e:	89 2b       	or	r24, r25
    15a0:	21 f4       	brne	.+8      	; 0x15aa <error_check+0x16>
		uart_write("test_periodic_task_scheduling PASSED");
    15a2:	81 e1       	ldi	r24, 0x11	; 17
    15a4:	92 e0       	ldi	r25, 0x02	; 2
    15a6:	9f c0       	rjmp	.+318    	; 0x16e6 <uart_write>
    15a8:	08 95       	ret
	else
		uart_write(trace);
    15aa:	8b ef       	ldi	r24, 0xFB	; 251
    15ac:	96 e1       	ldi	r25, 0x16	; 22
    15ae:	9b c0       	rjmp	.+310    	; 0x16e6 <uart_write>
    15b0:	08 95       	ret

000015b2 <Periodic_Task>:

static char trace[30] = "";
static char temp[5] = "";

static void Periodic_Task(){
	itoa(Task_GetArg(), temp, 10);
    15b2:	9d d9       	rcall	.-3270   	; 0x8ee <Task_GetArg>
    15b4:	4a e0       	ldi	r20, 0x0A	; 10
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	66 ef       	ldi	r22, 0xF6	; 246
    15ba:	76 e1       	ldi	r23, 0x16	; 22
    15bc:	d0 d0       	rcall	.+416    	; 0x175e <itoa>
	add_to_trace(trace, temp);
    15be:	66 ef       	ldi	r22, 0xF6	; 246
    15c0:	76 e1       	ldi	r23, 0x16	; 22
    15c2:	8b ef       	ldi	r24, 0xFB	; 251
    15c4:	96 e1       	ldi	r25, 0x16	; 22
    15c6:	76 d0       	rcall	.+236    	; 0x16b4 <add_to_trace>
	Task_Next();
    15c8:	1f d9       	rcall	.-3522   	; 0x808 <Task_Next>
	itoa(Task_GetArg(), temp, 10);
    15ca:	91 d9       	rcall	.-3294   	; 0x8ee <Task_GetArg>
    15cc:	4a e0       	ldi	r20, 0x0A	; 10
    15ce:	50 e0       	ldi	r21, 0x00	; 0
    15d0:	66 ef       	ldi	r22, 0xF6	; 246
    15d2:	76 e1       	ldi	r23, 0x16	; 22
    15d4:	c4 d0       	rcall	.+392    	; 0x175e <itoa>
	add_to_trace(trace, temp);
    15d6:	66 ef       	ldi	r22, 0xF6	; 246
    15d8:	76 e1       	ldi	r23, 0x16	; 22
    15da:	8b ef       	ldi	r24, 0xFB	; 251
    15dc:	96 e1       	ldi	r25, 0x16	; 22
    15de:	6a c0       	rjmp	.+212    	; 0x16b4 <add_to_trace>
    15e0:	08 95       	ret

000015e2 <test_periodic_task_scheduling>:
		uart_write("test_periodic_task_scheduling PASSED");
	else
		uart_write(trace);
}

void test_periodic_task_scheduling(void){
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
	uart_start();
    15e6:	6a d0       	rcall	.+212    	; 0x16bc <uart_start>
	Task_Create_Period(Periodic_Task, 0, 10, 1, 1);
    15e8:	01 e0       	ldi	r16, 0x01	; 1
    15ea:	10 e0       	ldi	r17, 0x00	; 0
    15ec:	21 e0       	ldi	r18, 0x01	; 1
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	4a e0       	ldi	r20, 0x0A	; 10
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	89 ed       	ldi	r24, 0xD9	; 217
    15fa:	9a e0       	ldi	r25, 0x0A	; 10
    15fc:	b3 d8       	rcall	.-3738   	; 0x764 <Task_Create_Period>
	Task_Create_Period(Periodic_Task, 1, 10, 1, 2);
    15fe:	02 e0       	ldi	r16, 0x02	; 2
    1600:	10 e0       	ldi	r17, 0x00	; 0
    1602:	21 e0       	ldi	r18, 0x01	; 1
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	4a e0       	ldi	r20, 0x0A	; 10
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	89 ed       	ldi	r24, 0xD9	; 217
    1610:	9a e0       	ldi	r25, 0x0A	; 10
    1612:	a8 d8       	rcall	.-3760   	; 0x764 <Task_Create_Period>
	Task_Create_Period(Periodic_Task, 2, 10, 1, 3);
    1614:	03 e0       	ldi	r16, 0x03	; 3
    1616:	10 e0       	ldi	r17, 0x00	; 0
    1618:	21 e0       	ldi	r18, 0x01	; 1
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a e0       	ldi	r20, 0x0A	; 10
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	62 e0       	ldi	r22, 0x02	; 2
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	89 ed       	ldi	r24, 0xD9	; 217
    1626:	9a e0       	ldi	r25, 0x0A	; 10
    1628:	9d d8       	rcall	.-3782   	; 0x764 <Task_Create_Period>
	Task_Create_Period(Periodic_Task, 3, 10, 1, 4);
    162a:	04 e0       	ldi	r16, 0x04	; 4
    162c:	10 e0       	ldi	r17, 0x00	; 0
    162e:	21 e0       	ldi	r18, 0x01	; 1
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	4a e0       	ldi	r20, 0x0A	; 10
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	63 e0       	ldi	r22, 0x03	; 3
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	89 ed       	ldi	r24, 0xD9	; 217
    163c:	9a e0       	ldi	r25, 0x0A	; 10
    163e:	92 d8       	rcall	.-3804   	; 0x764 <Task_Create_Period>
	Task_Create_Period(Periodic_Task, 4, 10, 1, 5);
    1640:	05 e0       	ldi	r16, 0x05	; 5
    1642:	10 e0       	ldi	r17, 0x00	; 0
    1644:	21 e0       	ldi	r18, 0x01	; 1
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	4a e0       	ldi	r20, 0x0A	; 10
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	64 e0       	ldi	r22, 0x04	; 4
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	89 ed       	ldi	r24, 0xD9	; 217
    1652:	9a e0       	ldi	r25, 0x0A	; 10
    1654:	87 d8       	rcall	.-3826   	; 0x764 <Task_Create_Period>
	Task_Create_Period(Periodic_Task, 5, 10, 1, 6);
    1656:	06 e0       	ldi	r16, 0x06	; 6
    1658:	10 e0       	ldi	r17, 0x00	; 0
    165a:	21 e0       	ldi	r18, 0x01	; 1
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	4a e0       	ldi	r20, 0x0A	; 10
    1660:	50 e0       	ldi	r21, 0x00	; 0
    1662:	65 e0       	ldi	r22, 0x05	; 5
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	89 ed       	ldi	r24, 0xD9	; 217
    1668:	9a e0       	ldi	r25, 0x0A	; 10
    166a:	7c d8       	rcall	.-3848   	; 0x764 <Task_Create_Period>
	Task_Create_Period(Periodic_Task, 6, 10, 1, 7);
    166c:	07 e0       	ldi	r16, 0x07	; 7
    166e:	10 e0       	ldi	r17, 0x00	; 0
    1670:	21 e0       	ldi	r18, 0x01	; 1
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	4a e0       	ldi	r20, 0x0A	; 10
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	66 e0       	ldi	r22, 0x06	; 6
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	89 ed       	ldi	r24, 0xD9	; 217
    167e:	9a e0       	ldi	r25, 0x0A	; 10
    1680:	71 d8       	rcall	.-3870   	; 0x764 <Task_Create_Period>
	Task_Create_Period(Periodic_Task, 7, 10, 1, 8);
    1682:	08 e0       	ldi	r16, 0x08	; 8
    1684:	10 e0       	ldi	r17, 0x00	; 0
    1686:	21 e0       	ldi	r18, 0x01	; 1
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	4a e0       	ldi	r20, 0x0A	; 10
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	67 e0       	ldi	r22, 0x07	; 7
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	89 ed       	ldi	r24, 0xD9	; 217
    1694:	9a e0       	ldi	r25, 0x0A	; 10
    1696:	66 d8       	rcall	.-3892   	; 0x764 <Task_Create_Period>
	Task_Create_Period(error_check, 0, 21, 1, 20);
    1698:	04 e1       	ldi	r16, 0x14	; 20
    169a:	10 e0       	ldi	r17, 0x00	; 0
    169c:	21 e0       	ldi	r18, 0x01	; 1
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	45 e1       	ldi	r20, 0x15	; 21
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	8a ec       	ldi	r24, 0xCA	; 202
    16aa:	9a e0       	ldi	r25, 0x0A	; 10
    16ac:	5b d8       	rcall	.-3914   	; 0x764 <Task_Create_Period>
}
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	08 95       	ret

000016b4 <add_to_trace>:

static char trace[30] = "";
static char temp[5] = "";

void add_to_trace(char* a_string, char* addition){
	Disable_Interrupt();
    16b4:	f8 94       	cli
	strcat(a_string, addition);
    16b6:	3f d0       	rcall	.+126    	; 0x1736 <strcat>
	Enable_Interrupt();
    16b8:	78 94       	sei
    16ba:	08 95       	ret

000016bc <uart_start>:

#include "uart.h"
#include "os.h"

void uart_start(void) {
	Disable_Interrupt();
    16bc:	f8 94       	cli
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //transmit side of hardware
    16be:	e1 ec       	ldi	r30, 0xC1	; 193
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	88 61       	ori	r24, 0x18	; 24
    16c6:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); //receive side of hardware
    16c8:	a2 ec       	ldi	r26, 0xC2	; 194
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	8c 91       	ld	r24, X
    16ce:	86 60       	ori	r24, 0x06	; 6
    16d0:	8c 93       	st	X, r24

	UBRR0L = BAUD_PRESCALE; //set the baud to 9600, have to split it into the two registers
    16d2:	87 e6       	ldi	r24, 0x67	; 103
    16d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = (BAUD_PRESCALE >> 8); //high end of baud register
    16d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>

	UCSR0B |= (1 << RXCIE0); //recieve data interrupt, makes sure we don't loose data
    16dc:	80 81       	ld	r24, Z
    16de:	80 68       	ori	r24, 0x80	; 128
    16e0:	80 83       	st	Z, r24
	Enable_Interrupt();
    16e2:	78 94       	sei
    16e4:	08 95       	ret

000016e6 <uart_write>:
}

void uart_write(char *data) {
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
	Disable_Interrupt();
    16ea:	f8 94       	cli
    while (*data) {
    16ec:	fc 01       	movw	r30, r24
    16ee:	20 81       	ld	r18, Z
    16f0:	22 23       	and	r18, r18
    16f2:	69 f0       	breq	.+26     	; 0x170e <uart_write+0x28>
    16f4:	dc 01       	movw	r26, r24
    16f6:	11 96       	adiw	r26, 0x01	; 1
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    16f8:	e0 ec       	ldi	r30, 0xC0	; 192
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
    16fc:	c6 ec       	ldi	r28, 0xC6	; 198
    16fe:	d0 e0       	ldi	r29, 0x00	; 0
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
	Disable_Interrupt();
    while (*data) {
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    1700:	90 81       	ld	r25, Z
    1702:	95 ff       	sbrs	r25, 5
    1704:	fd cf       	rjmp	.-6      	; 0x1700 <uart_write+0x1a>
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
    1706:	28 83       	st	Y, r18
    /*
    Use this to send a string, it will split it up into individual parts
    send those parts, and then send the new line code
    */
	Disable_Interrupt();
    while (*data) {
    1708:	2d 91       	ld	r18, X+
    170a:	21 11       	cpse	r18, r1
    170c:	f9 cf       	rjmp	.-14     	; 0x1700 <uart_write+0x1a>
        while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
        UDR0 = *data; //goes through and splits the string into individual bits, sends them
        data += 1;//go to new bit in string
    }
    while ((UCSR0A & (1 << UDRE0)) == 0);//make sure the data register is cleared
    170e:	e0 ec       	ldi	r30, 0xC0	; 192
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	85 ff       	sbrs	r24, 5
    1716:	fd cf       	rjmp	.-6      	; 0x1712 <uart_write+0x2c>
    UDR0 = '\n';//send a new line just to be sure
    1718:	8a e0       	ldi	r24, 0x0A	; 10
    171a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	Enable_Interrupt();
    171e:	78 94       	sei
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	08 95       	ret

00001726 <__tablejump2__>:
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	88 1f       	adc	r24, r24
    172c:	8b bf       	out	0x3b, r24	; 59
    172e:	07 90       	elpm	r0, Z+
    1730:	f6 91       	elpm	r31, Z
    1732:	e0 2d       	mov	r30, r0
    1734:	19 94       	eijmp

00001736 <strcat>:
    1736:	fb 01       	movw	r30, r22
    1738:	dc 01       	movw	r26, r24
    173a:	0d 90       	ld	r0, X+
    173c:	00 20       	and	r0, r0
    173e:	e9 f7       	brne	.-6      	; 0x173a <strcat+0x4>
    1740:	11 97       	sbiw	r26, 0x01	; 1
    1742:	01 90       	ld	r0, Z+
    1744:	0d 92       	st	X+, r0
    1746:	00 20       	and	r0, r0
    1748:	e1 f7       	brne	.-8      	; 0x1742 <strcat+0xc>
    174a:	08 95       	ret

0000174c <strcmp>:
    174c:	fb 01       	movw	r30, r22
    174e:	dc 01       	movw	r26, r24
    1750:	8d 91       	ld	r24, X+
    1752:	01 90       	ld	r0, Z+
    1754:	80 19       	sub	r24, r0
    1756:	01 10       	cpse	r0, r1
    1758:	d9 f3       	breq	.-10     	; 0x1750 <strcmp+0x4>
    175a:	99 0b       	sbc	r25, r25
    175c:	08 95       	ret

0000175e <itoa>:
    175e:	45 32       	cpi	r20, 0x25	; 37
    1760:	51 05       	cpc	r21, r1
    1762:	18 f4       	brcc	.+6      	; 0x176a <itoa+0xc>
    1764:	42 30       	cpi	r20, 0x02	; 2
    1766:	08 f0       	brcs	.+2      	; 0x176a <itoa+0xc>
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <__itoa_ncheck>
    176a:	fb 01       	movw	r30, r22
    176c:	10 82       	st	Z, r1
    176e:	cb 01       	movw	r24, r22
    1770:	08 95       	ret

00001772 <__itoa_ncheck>:
    1772:	bb 27       	eor	r27, r27
    1774:	4a 30       	cpi	r20, 0x0A	; 10
    1776:	31 f4       	brne	.+12     	; 0x1784 <__itoa_ncheck+0x12>
    1778:	99 23       	and	r25, r25
    177a:	22 f4       	brpl	.+8      	; 0x1784 <__itoa_ncheck+0x12>
    177c:	bd e2       	ldi	r27, 0x2D	; 45
    177e:	90 95       	com	r25
    1780:	81 95       	neg	r24
    1782:	9f 4f       	sbci	r25, 0xFF	; 255
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <__utoa_common>

00001786 <__utoa_ncheck>:
    1786:	bb 27       	eor	r27, r27

00001788 <__utoa_common>:
    1788:	fb 01       	movw	r30, r22
    178a:	55 27       	eor	r21, r21
    178c:	aa 27       	eor	r26, r26
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	aa 1f       	adc	r26, r26
    1794:	a4 17       	cp	r26, r20
    1796:	10 f0       	brcs	.+4      	; 0x179c <__utoa_common+0x14>
    1798:	a4 1b       	sub	r26, r20
    179a:	83 95       	inc	r24
    179c:	50 51       	subi	r21, 0x10	; 16
    179e:	b9 f7       	brne	.-18     	; 0x178e <__utoa_common+0x6>
    17a0:	a0 5d       	subi	r26, 0xD0	; 208
    17a2:	aa 33       	cpi	r26, 0x3A	; 58
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <__utoa_common+0x20>
    17a6:	a9 5d       	subi	r26, 0xD9	; 217
    17a8:	a1 93       	st	Z+, r26
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	79 f7       	brne	.-34     	; 0x178c <__utoa_common+0x4>
    17ae:	b1 11       	cpse	r27, r1
    17b0:	b1 93       	st	Z+, r27
    17b2:	11 92       	st	Z+, r1
    17b4:	cb 01       	movw	r24, r22
    17b6:	00 c0       	rjmp	.+0      	; 0x17b8 <strrev>

000017b8 <strrev>:
    17b8:	dc 01       	movw	r26, r24
    17ba:	fc 01       	movw	r30, r24
    17bc:	67 2f       	mov	r22, r23
    17be:	71 91       	ld	r23, Z+
    17c0:	77 23       	and	r23, r23
    17c2:	e1 f7       	brne	.-8      	; 0x17bc <strrev+0x4>
    17c4:	32 97       	sbiw	r30, 0x02	; 2
    17c6:	04 c0       	rjmp	.+8      	; 0x17d0 <strrev+0x18>
    17c8:	7c 91       	ld	r23, X
    17ca:	6d 93       	st	X+, r22
    17cc:	70 83       	st	Z, r23
    17ce:	62 91       	ld	r22, -Z
    17d0:	ae 17       	cp	r26, r30
    17d2:	bf 07       	cpc	r27, r31
    17d4:	c8 f3       	brcs	.-14     	; 0x17c8 <strrev+0x10>
    17d6:	08 95       	ret

000017d8 <_exit>:
    17d8:	f8 94       	cli

000017da <__stop_program>:
    17da:	ff cf       	rjmp	.-2      	; 0x17da <__stop_program>
