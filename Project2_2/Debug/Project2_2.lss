
Project2_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a78  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000125c  00800200  00800200  00000aec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000b60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e63  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000113c  00000000  00000000  00002b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba1  00000000  00000000  00003c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  000047e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000912  00000000  00000000  00004aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b91  00000000  00000000  000053ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005f4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	78 c0       	rjmp	.+240    	; 0xf2 <__ctors_end>
   2:	00 00       	nop
   4:	88 c0       	rjmp	.+272    	; 0x116 <__bad_interrupt>
   6:	00 00       	nop
   8:	86 c0       	rjmp	.+268    	; 0x116 <__bad_interrupt>
   a:	00 00       	nop
   c:	84 c0       	rjmp	.+264    	; 0x116 <__bad_interrupt>
   e:	00 00       	nop
  10:	82 c0       	rjmp	.+260    	; 0x116 <__bad_interrupt>
  12:	00 00       	nop
  14:	80 c0       	rjmp	.+256    	; 0x116 <__bad_interrupt>
  16:	00 00       	nop
  18:	7e c0       	rjmp	.+252    	; 0x116 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
  22:	00 00       	nop
  24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
  26:	00 00       	nop
  28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	74 c0       	rjmp	.+232    	; 0x116 <__bad_interrupt>
  2e:	00 00       	nop
  30:	72 c0       	rjmp	.+228    	; 0x116 <__bad_interrupt>
  32:	00 00       	nop
  34:	70 c0       	rjmp	.+224    	; 0x116 <__bad_interrupt>
  36:	00 00       	nop
  38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6c c0       	rjmp	.+216    	; 0x116 <__bad_interrupt>
  3e:	00 00       	nop
  40:	6a c0       	rjmp	.+212    	; 0x116 <__bad_interrupt>
  42:	00 00       	nop
  44:	36 c4       	rjmp	.+2156   	; 0x8b2 <__vector_17>
  46:	00 00       	nop
  48:	66 c0       	rjmp	.+204    	; 0x116 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	64 c0       	rjmp	.+200    	; 0x116 <__bad_interrupt>
  4e:	00 00       	nop
  50:	62 c0       	rjmp	.+196    	; 0x116 <__bad_interrupt>
  52:	00 00       	nop
  54:	60 c0       	rjmp	.+192    	; 0x116 <__bad_interrupt>
  56:	00 00       	nop
  58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5c c0       	rjmp	.+184    	; 0x116 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
  62:	00 00       	nop
  64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
  66:	00 00       	nop
  68:	56 c0       	rjmp	.+172    	; 0x116 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	54 c0       	rjmp	.+168    	; 0x116 <__bad_interrupt>
  6e:	00 00       	nop
  70:	52 c0       	rjmp	.+164    	; 0x116 <__bad_interrupt>
  72:	00 00       	nop
  74:	50 c0       	rjmp	.+160    	; 0x116 <__bad_interrupt>
  76:	00 00       	nop
  78:	4e c0       	rjmp	.+156    	; 0x116 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4c c0       	rjmp	.+152    	; 0x116 <__bad_interrupt>
  7e:	00 00       	nop
  80:	7b c4       	rjmp	.+2294   	; 0x978 <__vector_32>
  82:	00 00       	nop
  84:	48 c0       	rjmp	.+144    	; 0x116 <__bad_interrupt>
  86:	00 00       	nop
  88:	46 c0       	rjmp	.+140    	; 0x116 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	44 c0       	rjmp	.+136    	; 0x116 <__bad_interrupt>
  8e:	00 00       	nop
  90:	42 c0       	rjmp	.+132    	; 0x116 <__bad_interrupt>
  92:	00 00       	nop
  94:	40 c0       	rjmp	.+128    	; 0x116 <__bad_interrupt>
  96:	00 00       	nop
  98:	3e c0       	rjmp	.+124    	; 0x116 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3c c0       	rjmp	.+120    	; 0x116 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3a c0       	rjmp	.+116    	; 0x116 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	38 c0       	rjmp	.+112    	; 0x116 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	36 c0       	rjmp	.+108    	; 0x116 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	34 c0       	rjmp	.+104    	; 0x116 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	32 c0       	rjmp	.+100    	; 0x116 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	30 c0       	rjmp	.+96     	; 0x116 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2e c0       	rjmp	.+92     	; 0x116 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2c c0       	rjmp	.+88     	; 0x116 <__bad_interrupt>
  be:	00 00       	nop
  c0:	2a c0       	rjmp	.+84     	; 0x116 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	28 c0       	rjmp	.+80     	; 0x116 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	26 c0       	rjmp	.+76     	; 0x116 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	24 c0       	rjmp	.+72     	; 0x116 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	22 c0       	rjmp	.+68     	; 0x116 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	20 c0       	rjmp	.+64     	; 0x116 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1e c0       	rjmp	.+60     	; 0x116 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1c c0       	rjmp	.+56     	; 0x116 <__bad_interrupt>
  de:	00 00       	nop
  e0:	1a c0       	rjmp	.+52     	; 0x116 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	69 03       	fmul	r22, r17
  e6:	1c 03       	fmul	r17, r20
  e8:	2d 03       	fmul	r18, r21
  ea:	4d 03       	fmul	r20, r21
  ec:	3d 03       	fmul	r19, r21
  ee:	5d 03       	fmul	r21, r21
  f0:	96 03       	fmuls	r17, r22

000000f2 <__ctors_end>:
  f2:	11 24       	eor	r1, r1
  f4:	1f be       	out	0x3f, r1	; 63
  f6:	cf ef       	ldi	r28, 0xFF	; 255
  f8:	d1 e2       	ldi	r29, 0x21	; 33
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	cd bf       	out	0x3d, r28	; 61
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0c bf       	out	0x3c, r16	; 60

00000102 <__do_clear_bss>:
 102:	24 e1       	ldi	r18, 0x14	; 20
 104:	a0 e0       	ldi	r26, 0x00	; 0
 106:	b2 e0       	ldi	r27, 0x02	; 2
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	ac 35       	cpi	r26, 0x5C	; 92
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	49 d4       	rcall	.+2194   	; 0x9a6 <main>
 114:	af c4       	rjmp	.+2398   	; 0xa74 <_exit>

00000116 <__bad_interrupt>:
 116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 118:	0f 92       	push	r0
 11a:	1f 92       	push	r1
 11c:	2f 92       	push	r2
 11e:	3f 92       	push	r3
 120:	4f 92       	push	r4
 122:	5f 92       	push	r5
 124:	6f 92       	push	r6
 126:	7f 92       	push	r7
 128:	8f 92       	push	r8
 12a:	9f 92       	push	r9
 12c:	af 92       	push	r10
 12e:	bf 92       	push	r11
 130:	cf 92       	push	r12
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	4f 93       	push	r20
 142:	5f 93       	push	r21
 144:	6f 93       	push	r22
 146:	7f 93       	push	r23
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	af 93       	push	r26
 14e:	bf 93       	push	r27
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
 158:	0f b7       	in	r16, 0x3f	; 63
 15a:	0f 93       	push	r16
 15c:	fc b7       	in	r31, 0x3c	; 60
 15e:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
 160:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 162:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
 164:	e0 93 3a 14 	sts	0x143A, r30	; 0x80143a <KernelSp>
        sts  KernelSp+1, r31
 168:	f0 93 3b 14 	sts	0x143B, r31	; 0x80143b <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
 16c:	e0 91 f8 13 	lds	r30, 0x13F8	; 0x8013f8 <CurrentSp>
        lds  r31, CurrentSp+1
 170:	f0 91 f9 13 	lds	r31, 0x13F9	; 0x8013f9 <CurrentSp+0x1>
        out  SPL, r30
 174:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 176:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
 178:	ff 91       	pop	r31
 17a:	fc bf       	out	0x3c, r31	; 60
 17c:	0f 91       	pop	r16
 17e:	0f bf       	out	0x3f, r16	; 63
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	df 90       	pop	r13
 1a6:	cf 90       	pop	r12
 1a8:	bf 90       	pop	r11
 1aa:	af 90       	pop	r10
 1ac:	9f 90       	pop	r9
 1ae:	8f 90       	pop	r8
 1b0:	7f 90       	pop	r7
 1b2:	6f 90       	pop	r6
 1b4:	5f 90       	pop	r5
 1b6:	4f 90       	pop	r4
 1b8:	3f 90       	pop	r3
 1ba:	2f 90       	pop	r2
 1bc:	1f 90       	pop	r1
 1be:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
 1c0:	18 95       	reti

000001c2 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
 1c2:	0f 92       	push	r0
 1c4:	1f 92       	push	r1
 1c6:	2f 92       	push	r2
 1c8:	3f 92       	push	r3
 1ca:	4f 92       	push	r4
 1cc:	5f 92       	push	r5
 1ce:	6f 92       	push	r6
 1d0:	7f 92       	push	r7
 1d2:	8f 92       	push	r8
 1d4:	9f 92       	push	r9
 1d6:	af 92       	push	r10
 1d8:	bf 92       	push	r11
 1da:	cf 92       	push	r12
 1dc:	df 92       	push	r13
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	2f 93       	push	r18
 1e8:	3f 93       	push	r19
 1ea:	4f 93       	push	r20
 1ec:	5f 93       	push	r21
 1ee:	6f 93       	push	r22
 1f0:	7f 93       	push	r23
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
 1f6:	af 93       	push	r26
 1f8:	bf 93       	push	r27
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
 202:	0f b7       	in	r16, 0x3f	; 63
 204:	0f 93       	push	r16
 206:	fc b7       	in	r31, 0x3c	; 60
 208:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
 20a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 20c:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
 20e:	e0 93 f8 13 	sts	0x13F8, r30	; 0x8013f8 <CurrentSp>
        sts  CurrentSp+1, r31
 212:	f0 93 f9 13 	sts	0x13F9, r31	; 0x8013f9 <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
 216:	e0 91 3a 14 	lds	r30, 0x143A	; 0x80143a <KernelSp>
        lds  r31, KernelSp+1
 21a:	f0 91 3b 14 	lds	r31, 0x143B	; 0x80143b <KernelSp+0x1>
        out  SPL, r30
 21e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 220:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
 222:	ff 91       	pop	r31
 224:	fc bf       	out	0x3c, r31	; 60
 226:	0f 91       	pop	r16
 228:	0f bf       	out	0x3f, r16	; 63
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	bf 91       	pop	r27
 234:	af 91       	pop	r26
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	7f 91       	pop	r23
 23c:	6f 91       	pop	r22
 23e:	5f 91       	pop	r21
 240:	4f 91       	pop	r20
 242:	3f 91       	pop	r19
 244:	2f 91       	pop	r18
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	df 90       	pop	r13
 250:	cf 90       	pop	r12
 252:	bf 90       	pop	r11
 254:	af 90       	pop	r10
 256:	9f 90       	pop	r9
 258:	8f 90       	pop	r8
 25a:	7f 90       	pop	r7
 25c:	6f 90       	pop	r6
 25e:	5f 90       	pop	r5
 260:	4f 90       	pop	r4
 262:	3f 90       	pop	r3
 264:	2f 90       	pop	r2
 266:	1f 90       	pop	r1
 268:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
 26a:	08 95       	ret

0000026c <Task_WriteBluetooth>:
	Task_Terminate();
}


void Idle() {
    for(;;) {}
 26c:	27 9a       	sbi	0x04, 7	; 4
 26e:	2f 9a       	sbi	0x05, 7	; 5
 270:	fe cf       	rjmp	.-4      	; 0x26e <Task_WriteBluetooth+0x2>

00000272 <Task_ReadJoystick>:
 272:	27 9a       	sbi	0x04, 7	; 4
 274:	15 b8       	out	0x05, r1	; 5
 276:	fe cf       	rjmp	.-4      	; 0x274 <Task_ReadJoystick+0x2>

00000278 <a_main>:
}

void a_main()
{
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
	
    // Initialize tasks
	//Task_Create(ASDF, SYSTEM, 0);
    Task_Create_Period(Task_ReadJoystick, 0, 5, 1, 0);
 27c:	00 e0       	ldi	r16, 0x00	; 0
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	45 e0       	ldi	r20, 0x05	; 5
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	89 e3       	ldi	r24, 0x39	; 57
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	b1 d2       	rcall	.+1378   	; 0x7f4 <Task_Create_Period>
    Task_Create_Period(Task_WriteBluetooth, 0, 5, 1, 2);
 292:	02 e0       	ldi	r16, 0x02	; 2
 294:	10 e0       	ldi	r17, 0x00	; 0
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	45 e0       	ldi	r20, 0x05	; 5
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	86 e3       	ldi	r24, 0x36	; 54
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	a6 d2       	rcall	.+1356   	; 0x7f4 <Task_Create_Period>
	//Task_Create_Period(Task_Test_Periodic, 0, 5, 1, 0);
	
    //Task_Create(Idle, 10, 0);

    // Kill the initialization task
    Task_Terminate();
 2a8:	03 d0       	rcall	.+6      	; 0x2b0 <Task_Terminate>
}
 2aa:	1f 91       	pop	r17
 2ac:	0f 91       	pop	r16
 2ae:	08 95       	ret

000002b0 <Task_Terminate>:
/**
  * Application level task getarg to return intiial arg value
  */
int Task_GetArg(PID p) {
	return (Cp->arg);
}
 2b0:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <KernelActive>
 2b4:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <KernelActive+0x1>
 2b8:	89 2b       	or	r24, r25
 2ba:	51 f0       	breq	.+20     	; 0x2d0 <Task_Terminate+0x20>
 2bc:	f8 94       	cli
 2be:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 2c2:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 2c6:	e5 5f       	subi	r30, 0xF5	; 245
 2c8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ca:	86 e0       	ldi	r24, 0x06	; 6
 2cc:	80 83       	st	Z, r24
 2ce:	79 cf       	rjmp	.-270    	; 0x1c2 <Enter_Kernel>
 2d0:	08 95       	ret

000002d2 <Kernel_Create_Task_At>:
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	1f 92       	push	r1
 2e0:	1f 92       	push	r1
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
 2e6:	9a 83       	std	Y+2, r25	; 0x02
 2e8:	89 83       	std	Y+1, r24	; 0x01
 2ea:	7c 01       	movw	r14, r24
 2ec:	04 e0       	ldi	r16, 0x04	; 4
 2ee:	e0 0e       	add	r14, r16
 2f0:	f1 1c       	adc	r15, r1
 2f2:	a0 e0       	ldi	r26, 0x00	; 0
 2f4:	b1 e0       	ldi	r27, 0x01	; 1
 2f6:	f7 01       	movw	r30, r14
 2f8:	8d 01       	movw	r16, r26
 2fa:	11 92       	st	Z+, r1
 2fc:	01 50       	subi	r16, 0x01	; 1
 2fe:	10 40       	sbci	r17, 0x00	; 0
 300:	e1 f7       	brne	.-8      	; 0x2fa <Kernel_Create_Task_At+0x28>
 302:	dc 01       	movw	r26, r24
 304:	ad 5f       	subi	r26, 0xFD	; 253
 306:	be 4f       	sbci	r27, 0xFE	; 254
 308:	e8 e5       	ldi	r30, 0x58	; 88
 30a:	f1 e0       	ldi	r31, 0x01	; 1
 30c:	ec 93       	st	X, r30
 30e:	11 97       	sbiw	r26, 0x01	; 1
 310:	fc 93       	st	X, r31
 312:	fc 01       	movw	r30, r24
 314:	ef 5f       	subi	r30, 0xFF	; 255
 316:	fe 4f       	sbci	r31, 0xFE	; 254
 318:	60 83       	st	Z, r22
 31a:	31 97       	sbiw	r30, 0x01	; 1
 31c:	70 83       	st	Z, r23
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	10 82       	st	Z, r1
 322:	b3 97       	sbiw	r30, 0x23	; 35
 324:	dc 01       	movw	r26, r24
 326:	13 96       	adiw	r26, 0x03	; 3
 328:	fc 93       	st	X, r31
 32a:	ee 93       	st	-X, r30
 32c:	12 97       	sbiw	r26, 0x02	; 2
 32e:	bd 96       	adiw	r30, 0x2d	; 45
 330:	71 83       	std	Z+1, r23	; 0x01
 332:	60 83       	st	Z, r22
 334:	32 96       	adiw	r30, 0x02	; 2
 336:	10 82       	st	Z, r1
 338:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <pCount>
 33c:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <pCount+0x1>
 340:	fc 01       	movw	r30, r24
 342:	71 83       	std	Z+1, r23	; 0x01
 344:	60 83       	st	Z, r22
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	9a 81       	ldd	r25, Y+2	; 0x02
 34a:	fc 01       	movw	r30, r24
 34c:	eb 5f       	subi	r30, 0xFB	; 251
 34e:	fe 4f       	sbci	r31, 0xFE	; 254
 350:	51 83       	std	Z+1, r21	; 0x01
 352:	40 83       	st	Z, r20
 354:	32 96       	adiw	r30, 0x02	; 2
 356:	31 83       	std	Z+1, r19	; 0x01
 358:	20 83       	st	Z, r18
 35a:	42 30       	cpi	r20, 0x02	; 2
 35c:	51 05       	cpc	r21, r1
 35e:	09 f0       	breq	.+2      	; 0x362 <Kernel_Create_Task_At+0x90>
 360:	6a c0       	rjmp	.+212    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 362:	20 91 d4 13 	lds	r18, 0x13D4	; 0x8013d4 <temp_wcet>
 366:	30 91 d5 13 	lds	r19, 0x13D5	; 0x8013d5 <temp_wcet+0x1>
 36a:	3d 96       	adiw	r30, 0x0d	; 13
 36c:	31 83       	std	Z+1, r19	; 0x01
 36e:	20 83       	st	Z, r18
 370:	20 91 d2 13 	lds	r18, 0x13D2	; 0x8013d2 <temp_offset>
 374:	30 91 d3 13 	lds	r19, 0x13D3	; 0x8013d3 <temp_offset+0x1>
 378:	32 96       	adiw	r30, 0x02	; 2
 37a:	31 83       	std	Z+1, r19	; 0x01
 37c:	20 83       	st	Z, r18
 37e:	20 91 f6 13 	lds	r18, 0x13F6	; 0x8013f6 <temp_period>
 382:	30 91 f7 13 	lds	r19, 0x13F7	; 0x8013f7 <temp_period+0x1>
 386:	dc 01       	movw	r26, r24
 388:	ae 5e       	subi	r26, 0xEE	; 238
 38a:	be 4f       	sbci	r27, 0xFE	; 254
 38c:	11 96       	adiw	r26, 0x01	; 1
 38e:	3c 93       	st	X, r19
 390:	2e 93       	st	-X, r18
 392:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <Tasks>
 396:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <Tasks+0x1>
 39a:	2f 5f       	subi	r18, 0xFF	; 255
 39c:	3f 4f       	sbci	r19, 0xFF	; 255
 39e:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <Tasks+0x1>
 3a2:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <Tasks>
 3a6:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <pCount>
 3aa:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <pCount+0x1>
 3ae:	2f 5f       	subi	r18, 0xFF	; 255
 3b0:	3f 4f       	sbci	r19, 0xFF	; 255
 3b2:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <pCount+0x1>
 3b6:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <pCount>
 3ba:	1e 97       	sbiw	r26, 0x0e	; 14
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	8c 93       	st	X, r24
 3c0:	80 81       	ld	r24, Z
 3c2:	91 81       	ldd	r25, Z+1	; 0x01
 3c4:	89 2b       	or	r24, r25
 3c6:	59 f5       	brne	.+86     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3c8:	08 c0       	rjmp	.+16     	; 0x3da <Kernel_Create_Task_At+0x108>
 3ca:	44 e0       	ldi	r20, 0x04	; 4
 3cc:	52 e0       	ldi	r21, 0x02	; 2
 3ce:	62 eb       	ldi	r22, 0xB2	; 178
 3d0:	73 e1       	ldi	r23, 0x13	; 19
 3d2:	ce 01       	movw	r24, r28
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	f8 d2       	rcall	.+1520   	; 0x9c8 <enqueue>
 3d8:	29 c0       	rjmp	.+82     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3da:	42 e0       	ldi	r20, 0x02	; 2
 3dc:	52 e0       	ldi	r21, 0x02	; 2
 3de:	6a e1       	ldi	r22, 0x1A	; 26
 3e0:	74 e1       	ldi	r23, 0x14	; 20
 3e2:	ce 01       	movw	r24, r28
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	f0 d2       	rcall	.+1504   	; 0x9c8 <enqueue>
 3e8:	e9 81       	ldd	r30, Y+1	; 0x01
 3ea:	fa 81       	ldd	r31, Y+2	; 0x02
 3ec:	df 01       	movw	r26, r30
 3ee:	ae 5e       	subi	r26, 0xEE	; 238
 3f0:	be 4f       	sbci	r27, 0xFE	; 254
 3f2:	8d 91       	ld	r24, X+
 3f4:	9c 91       	ld	r25, X
 3f6:	ea 5e       	subi	r30, 0xEA	; 234
 3f8:	fe 4f       	sbci	r31, 0xFE	; 254
 3fa:	20 81       	ld	r18, Z
 3fc:	31 81       	ldd	r19, Z+1	; 0x01
 3fe:	82 0f       	add	r24, r18
 400:	93 1f       	adc	r25, r19
 402:	91 83       	std	Z+1, r25	; 0x01
 404:	80 83       	st	Z, r24
 406:	12 c0       	rjmp	.+36     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 408:	41 30       	cpi	r20, 0x01	; 1
 40a:	51 05       	cpc	r21, r1
 40c:	41 f4       	brne	.+16     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	52 e0       	ldi	r21, 0x02	; 2
 412:	6c e3       	ldi	r22, 0x3C	; 60
 414:	74 e1       	ldi	r23, 0x14	; 20
 416:	ce 01       	movw	r24, r28
 418:	01 96       	adiw	r24, 0x01	; 1
 41a:	d6 d2       	rcall	.+1452   	; 0x9c8 <enqueue>
 41c:	07 c0       	rjmp	.+14     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 41e:	46 e0       	ldi	r20, 0x06	; 6
 420:	52 e0       	ldi	r21, 0x02	; 2
 422:	66 ed       	ldi	r22, 0xD6	; 214
 424:	73 e1       	ldi	r23, 0x13	; 19
 426:	ce 01       	movw	r24, r28
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	ce d2       	rcall	.+1436   	; 0x9c8 <enqueue>
 42c:	e9 81       	ldd	r30, Y+1	; 0x01
 42e:	fa 81       	ldd	r31, Y+2	; 0x02
 430:	80 81       	ld	r24, Z
 432:	91 81       	ldd	r25, Z+1	; 0x01
 434:	1d c0       	rjmp	.+58     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 436:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <Tasks>
 43a:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <Tasks+0x1>
 43e:	2f 5f       	subi	r18, 0xFF	; 255
 440:	3f 4f       	sbci	r19, 0xFF	; 255
 442:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <Tasks+0x1>
 446:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <Tasks>
 44a:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <pCount>
 44e:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <pCount+0x1>
 452:	2f 5f       	subi	r18, 0xFF	; 255
 454:	3f 4f       	sbci	r19, 0xFF	; 255
 456:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <pCount+0x1>
 45a:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <pCount>
 45e:	fc 01       	movw	r30, r24
 460:	ec 5f       	subi	r30, 0xFC	; 252
 462:	fe 4f       	sbci	r31, 0xFE	; 254
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	80 83       	st	Z, r24
 468:	43 30       	cpi	r20, 0x03	; 3
 46a:	51 05       	cpc	r21, r1
 46c:	69 f6       	brne	.-102    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 46e:	ad cf       	rjmp	.-166    	; 0x3ca <Kernel_Create_Task_At+0xf8>
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	08 95       	ret

00000482 <Kernel_Create_Task>:
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	ec 01       	movw	r28, r24
 488:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Tasks>
 48c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <Tasks+0x1>
 490:	40 97       	sbiw	r24, 0x10	; 16
 492:	21 f1       	breq	.+72     	; 0x4dc <Kernel_Create_Task+0x5a>
 494:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <Process+0x104>
 498:	88 23       	and	r24, r24
 49a:	71 f0       	breq	.+28     	; 0x4b8 <Kernel_Create_Task+0x36>
 49c:	a0 e3       	ldi	r26, 0x30	; 48
 49e:	b4 e0       	ldi	r27, 0x04	; 4
 4a0:	e1 e0       	ldi	r30, 0x01	; 1
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	9c 91       	ld	r25, X
 4a6:	99 23       	and	r25, r25
 4a8:	49 f0       	breq	.+18     	; 0x4bc <Kernel_Create_Task+0x3a>
 4aa:	31 96       	adiw	r30, 0x01	; 1
 4ac:	a6 5e       	subi	r26, 0xE6	; 230
 4ae:	be 4f       	sbci	r27, 0xFE	; 254
 4b0:	e0 31       	cpi	r30, 0x10	; 16
 4b2:	f1 05       	cpc	r31, r1
 4b4:	b9 f7       	brne	.-18     	; 0x4a4 <Kernel_Create_Task+0x22>
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <Kernel_Create_Task+0x3a>
 4b8:	e0 e0       	ldi	r30, 0x00	; 0
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	9a 01       	movw	r18, r20
 4be:	ab 01       	movw	r20, r22
 4c0:	be 01       	movw	r22, r28
 4c2:	aa e1       	ldi	r26, 0x1A	; 26
 4c4:	b1 e0       	ldi	r27, 0x01	; 1
 4c6:	ea 9f       	mul	r30, r26
 4c8:	c0 01       	movw	r24, r0
 4ca:	eb 9f       	mul	r30, r27
 4cc:	90 0d       	add	r25, r0
 4ce:	fa 9f       	mul	r31, r26
 4d0:	90 0d       	add	r25, r0
 4d2:	11 24       	eor	r1, r1
 4d4:	8e 5e       	subi	r24, 0xEE	; 238
 4d6:	9d 4f       	sbci	r25, 0xFD	; 253
 4d8:	fc de       	rcall	.-520    	; 0x2d2 <Kernel_Create_Task_At>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <Kernel_Create_Task+0x5a>
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <OS_Init>:
 4e2:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <Tasks+0x1>
 4e6:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <Tasks>
 4ea:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <KernelActive+0x1>
 4ee:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <KernelActive>
 4f2:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <pCount+0x1>
 4f6:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <pCount>
 4fa:	e2 e1       	ldi	r30, 0x12	; 18
 4fc:	f2 e0       	ldi	r31, 0x02	; 2
 4fe:	22 eb       	ldi	r18, 0xB2	; 178
 500:	33 e1       	ldi	r19, 0x13	; 19
 502:	8a e1       	ldi	r24, 0x1A	; 26
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	df 01       	movw	r26, r30
 508:	ac 01       	movw	r20, r24
 50a:	1d 92       	st	X+, r1
 50c:	41 50       	subi	r20, 0x01	; 1
 50e:	50 40       	sbci	r21, 0x00	; 0
 510:	e1 f7       	brne	.-8      	; 0x50a <OS_Init+0x28>
 512:	df 01       	movw	r26, r30
 514:	ac 5f       	subi	r26, 0xFC	; 252
 516:	be 4f       	sbci	r27, 0xFE	; 254
 518:	1c 92       	st	X, r1
 51a:	11 82       	std	Z+1, r1	; 0x01
 51c:	10 82       	st	Z, r1
 51e:	e6 5e       	subi	r30, 0xE6	; 230
 520:	fe 4f       	sbci	r31, 0xFE	; 254
 522:	e2 17       	cp	r30, r18
 524:	f3 07       	cpc	r31, r19
 526:	79 f7       	brne	.-34     	; 0x506 <OS_Init+0x24>
 528:	08 95       	ret

0000052a <OS_Abort>:
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	a2 d2       	rcall	.+1348   	; 0xa74 <_exit>

00000530 <Dispatch>:
 530:	64 e0       	ldi	r22, 0x04	; 4
 532:	72 e0       	ldi	r23, 0x02	; 2
 534:	82 eb       	ldi	r24, 0xB2	; 178
 536:	93 e1       	ldi	r25, 0x13	; 19
 538:	77 d2       	rcall	.+1262   	; 0xa28 <dequeue>
 53a:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <Cp+0x1>
 53e:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <Cp>
 542:	89 2b       	or	r24, r25
 544:	49 f4       	brne	.+18     	; 0x558 <Dispatch+0x28>
 546:	62 e0       	ldi	r22, 0x02	; 2
 548:	72 e0       	ldi	r23, 0x02	; 2
 54a:	8a e1       	ldi	r24, 0x1A	; 26
 54c:	94 e1       	ldi	r25, 0x14	; 20
 54e:	6c d2       	rcall	.+1240   	; 0xa28 <dequeue>
 550:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <Cp+0x1>
 554:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <Cp>
 558:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <Cp>
 55c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <Cp+0x1>
 560:	89 2b       	or	r24, r25
 562:	49 f4       	brne	.+18     	; 0x576 <Dispatch+0x46>
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	72 e0       	ldi	r23, 0x02	; 2
 568:	8c e3       	ldi	r24, 0x3C	; 60
 56a:	94 e1       	ldi	r25, 0x14	; 20
 56c:	5d d2       	rcall	.+1210   	; 0xa28 <dequeue>
 56e:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <Cp+0x1>
 572:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <Cp>
 576:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <Cp>
 57a:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <Cp+0x1>
 57e:	89 2b       	or	r24, r25
 580:	49 f4       	brne	.+18     	; 0x594 <Dispatch+0x64>
 582:	66 e0       	ldi	r22, 0x06	; 6
 584:	72 e0       	ldi	r23, 0x02	; 2
 586:	86 ed       	ldi	r24, 0xD6	; 214
 588:	93 e1       	ldi	r25, 0x13	; 19
 58a:	4e d2       	rcall	.+1180   	; 0xa28 <dequeue>
 58c:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <Cp+0x1>
 590:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <Cp>
 594:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 598:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 59c:	30 97       	sbiw	r30, 0x00	; 0
 59e:	09 f4       	brne	.+2      	; 0x5a2 <Dispatch+0x72>
 5a0:	c4 df       	rcall	.-120    	; 0x52a <OS_Abort>
 5a2:	82 81       	ldd	r24, Z+2	; 0x02
 5a4:	93 81       	ldd	r25, Z+3	; 0x03
 5a6:	90 93 f9 13 	sts	0x13F9, r25	; 0x8013f9 <CurrentSp+0x1>
 5aa:	80 93 f8 13 	sts	0x13F8, r24	; 0x8013f8 <CurrentSp>
 5ae:	ec 5f       	subi	r30, 0xFC	; 252
 5b0:	fe 4f       	sbci	r31, 0xFE	; 254
 5b2:	82 e0       	ldi	r24, 0x02	; 2
 5b4:	80 83       	st	Z, r24
 5b6:	08 95       	ret

000005b8 <OS_Start>:
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <KernelActive>
 5c2:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <KernelActive+0x1>
 5c6:	89 2b       	or	r24, r25
 5c8:	09 f0       	breq	.+2      	; 0x5cc <OS_Start+0x14>
 5ca:	c1 c0       	rjmp	.+386    	; 0x74e <OS_Start+0x196>
 5cc:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Tasks>
 5d0:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <Tasks+0x1>
 5d4:	89 2b       	or	r24, r25
 5d6:	09 f4       	brne	.+2      	; 0x5da <OS_Start+0x22>
 5d8:	ba c0       	rjmp	.+372    	; 0x74e <OS_Start+0x196>
 5da:	f8 94       	cli
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <KernelActive+0x1>
 5e4:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <KernelActive>
 5e8:	a3 df       	rcall	.-186    	; 0x530 <Dispatch>
 5ea:	11 e0       	ldi	r17, 0x01	; 1
 5ec:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 5f0:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 5f4:	df 01       	movw	r26, r30
 5f6:	a5 5f       	subi	r26, 0xF5	; 245
 5f8:	be 4f       	sbci	r27, 0xFE	; 254
 5fa:	1c 92       	st	X, r1
 5fc:	82 81       	ldd	r24, Z+2	; 0x02
 5fe:	93 81       	ldd	r25, Z+3	; 0x03
 600:	90 93 f9 13 	sts	0x13F9, r25	; 0x8013f9 <CurrentSp+0x1>
 604:	80 93 f8 13 	sts	0x13F8, r24	; 0x8013f8 <CurrentSp>
 608:	87 dd       	rcall	.-1266   	; 0x118 <CSwitch>
 60a:	c0 91 10 02 	lds	r28, 0x0210	; 0x800210 <Cp>
 60e:	d0 91 11 02 	lds	r29, 0x0211	; 0x800211 <Cp+0x1>
 612:	80 91 f8 13 	lds	r24, 0x13F8	; 0x8013f8 <CurrentSp>
 616:	90 91 f9 13 	lds	r25, 0x13F9	; 0x8013f9 <CurrentSp+0x1>
 61a:	9b 83       	std	Y+3, r25	; 0x03
 61c:	8a 83       	std	Y+2, r24	; 0x02
 61e:	fe 01       	movw	r30, r28
 620:	e5 5f       	subi	r30, 0xF5	; 245
 622:	fe 4f       	sbci	r31, 0xFE	; 254
 624:	e0 81       	ld	r30, Z
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	e7 30       	cpi	r30, 0x07	; 7
 62a:	f1 05       	cpc	r31, r1
 62c:	f8 f6       	brcc	.-66     	; 0x5ec <OS_Start+0x34>
 62e:	88 27       	eor	r24, r24
 630:	ee 58       	subi	r30, 0x8E	; 142
 632:	ff 4f       	sbci	r31, 0xFF	; 255
 634:	8f 4f       	sbci	r24, 0xFF	; 255
 636:	16 c2       	rjmp	.+1068   	; 0xa64 <__tablejump2__>
 638:	fe 01       	movw	r30, r28
 63a:	e9 5f       	subi	r30, 0xF9	; 249
 63c:	fe 4f       	sbci	r31, 0xFE	; 254
 63e:	40 81       	ld	r20, Z
 640:	51 81       	ldd	r21, Z+1	; 0x01
 642:	32 97       	sbiw	r30, 0x02	; 2
 644:	60 81       	ld	r22, Z
 646:	71 81       	ldd	r23, Z+1	; 0x01
 648:	34 96       	adiw	r30, 0x04	; 4
 64a:	80 81       	ld	r24, Z
 64c:	91 81       	ldd	r25, Z+1	; 0x01
 64e:	19 df       	rcall	.-462    	; 0x482 <Kernel_Create_Task>
 650:	c4 5f       	subi	r28, 0xF4	; 244
 652:	de 4f       	sbci	r29, 0xFE	; 254
 654:	99 83       	std	Y+1, r25	; 0x01
 656:	88 83       	st	Y, r24
 658:	c9 cf       	rjmp	.-110    	; 0x5ec <OS_Start+0x34>
 65a:	fe 01       	movw	r30, r28
 65c:	e9 5f       	subi	r30, 0xF9	; 249
 65e:	fe 4f       	sbci	r31, 0xFE	; 254
 660:	40 81       	ld	r20, Z
 662:	51 81       	ldd	r21, Z+1	; 0x01
 664:	32 96       	adiw	r30, 0x02	; 2
 666:	80 81       	ld	r24, Z
 668:	91 81       	ldd	r25, Z+1	; 0x01
 66a:	63 e0       	ldi	r22, 0x03	; 3
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	09 df       	rcall	.-494    	; 0x482 <Kernel_Create_Task>
 670:	c4 5f       	subi	r28, 0xF4	; 244
 672:	de 4f       	sbci	r29, 0xFE	; 254
 674:	99 83       	std	Y+1, r25	; 0x01
 676:	88 83       	st	Y, r24
 678:	b9 cf       	rjmp	.-142    	; 0x5ec <OS_Start+0x34>
 67a:	fe 01       	movw	r30, r28
 67c:	e9 5f       	subi	r30, 0xF9	; 249
 67e:	fe 4f       	sbci	r31, 0xFE	; 254
 680:	40 81       	ld	r20, Z
 682:	51 81       	ldd	r21, Z+1	; 0x01
 684:	32 96       	adiw	r30, 0x02	; 2
 686:	80 81       	ld	r24, Z
 688:	91 81       	ldd	r25, Z+1	; 0x01
 68a:	62 e0       	ldi	r22, 0x02	; 2
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	f9 de       	rcall	.-526    	; 0x482 <Kernel_Create_Task>
 690:	c4 5f       	subi	r28, 0xF4	; 244
 692:	de 4f       	sbci	r29, 0xFE	; 254
 694:	99 83       	std	Y+1, r25	; 0x01
 696:	88 83       	st	Y, r24
 698:	a9 cf       	rjmp	.-174    	; 0x5ec <OS_Start+0x34>
 69a:	fe 01       	movw	r30, r28
 69c:	e9 5f       	subi	r30, 0xF9	; 249
 69e:	fe 4f       	sbci	r31, 0xFE	; 254
 6a0:	40 81       	ld	r20, Z
 6a2:	51 81       	ldd	r21, Z+1	; 0x01
 6a4:	32 96       	adiw	r30, 0x02	; 2
 6a6:	80 81       	ld	r24, Z
 6a8:	91 81       	ldd	r25, Z+1	; 0x01
 6aa:	61 e0       	ldi	r22, 0x01	; 1
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	e9 de       	rcall	.-558    	; 0x482 <Kernel_Create_Task>
 6b0:	c4 5f       	subi	r28, 0xF4	; 244
 6b2:	de 4f       	sbci	r29, 0xFE	; 254
 6b4:	99 83       	std	Y+1, r25	; 0x01
 6b6:	88 83       	st	Y, r24
 6b8:	99 cf       	rjmp	.-206    	; 0x5ec <OS_Start+0x34>
 6ba:	fe 01       	movw	r30, r28
 6bc:	eb 5f       	subi	r30, 0xFB	; 251
 6be:	fe 4f       	sbci	r31, 0xFE	; 254
 6c0:	80 81       	ld	r24, Z
 6c2:	91 81       	ldd	r25, Z+1	; 0x01
 6c4:	02 97       	sbiw	r24, 0x02	; 2
 6c6:	19 f4       	brne	.+6      	; 0x6ce <OS_Start+0x116>
 6c8:	cc 5f       	subi	r28, 0xFC	; 252
 6ca:	de 4f       	sbci	r29, 0xFE	; 254
 6cc:	18 83       	st	Y, r17
 6ce:	30 df       	rcall	.-416    	; 0x530 <Dispatch>
 6d0:	8d cf       	rjmp	.-230    	; 0x5ec <OS_Start+0x34>
 6d2:	fe 01       	movw	r30, r28
 6d4:	ec 5f       	subi	r30, 0xFC	; 252
 6d6:	fe 4f       	sbci	r31, 0xFE	; 254
 6d8:	10 83       	st	Z, r17
 6da:	31 96       	adiw	r30, 0x01	; 1
 6dc:	80 81       	ld	r24, Z
 6de:	91 81       	ldd	r25, Z+1	; 0x01
 6e0:	03 97       	sbiw	r24, 0x03	; 3
 6e2:	41 f4       	brne	.+16     	; 0x6f4 <OS_Start+0x13c>
 6e4:	44 e0       	ldi	r20, 0x04	; 4
 6e6:	52 e0       	ldi	r21, 0x02	; 2
 6e8:	62 eb       	ldi	r22, 0xB2	; 178
 6ea:	73 e1       	ldi	r23, 0x13	; 19
 6ec:	80 e1       	ldi	r24, 0x10	; 16
 6ee:	92 e0       	ldi	r25, 0x02	; 2
 6f0:	6b d1       	rcall	.+726    	; 0x9c8 <enqueue>
 6f2:	1a c0       	rjmp	.+52     	; 0x728 <OS_Start+0x170>
 6f4:	fe 01       	movw	r30, r28
 6f6:	eb 5f       	subi	r30, 0xFB	; 251
 6f8:	fe 4f       	sbci	r31, 0xFE	; 254
 6fa:	80 81       	ld	r24, Z
 6fc:	91 81       	ldd	r25, Z+1	; 0x01
 6fe:	02 97       	sbiw	r24, 0x02	; 2
 700:	99 f0       	breq	.+38     	; 0x728 <OS_Start+0x170>
 702:	80 81       	ld	r24, Z
 704:	91 81       	ldd	r25, Z+1	; 0x01
 706:	01 97       	sbiw	r24, 0x01	; 1
 708:	41 f4       	brne	.+16     	; 0x71a <OS_Start+0x162>
 70a:	40 e0       	ldi	r20, 0x00	; 0
 70c:	52 e0       	ldi	r21, 0x02	; 2
 70e:	6c e3       	ldi	r22, 0x3C	; 60
 710:	74 e1       	ldi	r23, 0x14	; 20
 712:	80 e1       	ldi	r24, 0x10	; 16
 714:	92 e0       	ldi	r25, 0x02	; 2
 716:	58 d1       	rcall	.+688    	; 0x9c8 <enqueue>
 718:	07 c0       	rjmp	.+14     	; 0x728 <OS_Start+0x170>
 71a:	46 e0       	ldi	r20, 0x06	; 6
 71c:	52 e0       	ldi	r21, 0x02	; 2
 71e:	66 ed       	ldi	r22, 0xD6	; 214
 720:	73 e1       	ldi	r23, 0x13	; 19
 722:	80 e1       	ldi	r24, 0x10	; 16
 724:	92 e0       	ldi	r25, 0x02	; 2
 726:	50 d1       	rcall	.+672    	; 0x9c8 <enqueue>
 728:	03 df       	rcall	.-506    	; 0x530 <Dispatch>
 72a:	60 cf       	rjmp	.-320    	; 0x5ec <OS_Start+0x34>
 72c:	fe 01       	movw	r30, r28
 72e:	ec 5f       	subi	r30, 0xFC	; 252
 730:	fe 4f       	sbci	r31, 0xFE	; 254
 732:	10 82       	st	Z, r1
 734:	19 82       	std	Y+1, r1	; 0x01
 736:	18 82       	st	Y, r1
 738:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Tasks>
 73c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <Tasks+0x1>
 740:	01 97       	sbiw	r24, 0x01	; 1
 742:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <Tasks+0x1>
 746:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <Tasks>
 74a:	f2 de       	rcall	.-540    	; 0x530 <Dispatch>
 74c:	4f cf       	rjmp	.-354    	; 0x5ec <OS_Start+0x34>
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	1f 91       	pop	r17
 754:	08 95       	ret

00000756 <Task_Create>:
 756:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <KernelActive>
 75a:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <KernelActive+0x1>
 75e:	23 2b       	or	r18, r19
 760:	09 f4       	brne	.+2      	; 0x764 <Task_Create+0xe>
 762:	46 c0       	rjmp	.+140    	; 0x7f0 <Task_Create+0x9a>
 764:	f8 94       	cli
 766:	63 30       	cpi	r22, 0x03	; 3
 768:	71 05       	cpc	r23, r1
 76a:	49 f4       	brne	.+18     	; 0x77e <Task_Create+0x28>
 76c:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 770:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 774:	e5 5f       	subi	r30, 0xF5	; 245
 776:	fe 4f       	sbci	r31, 0xFE	; 254
 778:	22 e0       	ldi	r18, 0x02	; 2
 77a:	20 83       	st	Z, r18
 77c:	20 c0       	rjmp	.+64     	; 0x7be <Task_Create+0x68>
 77e:	62 30       	cpi	r22, 0x02	; 2
 780:	71 05       	cpc	r23, r1
 782:	49 f4       	brne	.+18     	; 0x796 <Task_Create+0x40>
 784:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 788:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 78c:	e5 5f       	subi	r30, 0xF5	; 245
 78e:	fe 4f       	sbci	r31, 0xFE	; 254
 790:	24 e0       	ldi	r18, 0x04	; 4
 792:	20 83       	st	Z, r18
 794:	14 c0       	rjmp	.+40     	; 0x7be <Task_Create+0x68>
 796:	61 30       	cpi	r22, 0x01	; 1
 798:	71 05       	cpc	r23, r1
 79a:	49 f4       	brne	.+18     	; 0x7ae <Task_Create+0x58>
 79c:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 7a0:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 7a4:	e5 5f       	subi	r30, 0xF5	; 245
 7a6:	fe 4f       	sbci	r31, 0xFE	; 254
 7a8:	23 e0       	ldi	r18, 0x03	; 3
 7aa:	20 83       	st	Z, r18
 7ac:	08 c0       	rjmp	.+16     	; 0x7be <Task_Create+0x68>
 7ae:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 7b2:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 7b6:	e5 5f       	subi	r30, 0xF5	; 245
 7b8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ba:	21 e0       	ldi	r18, 0x01	; 1
 7bc:	20 83       	st	Z, r18
 7be:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <Cp>
 7c2:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <Cp+0x1>
 7c6:	f9 01       	movw	r30, r18
 7c8:	e7 5f       	subi	r30, 0xF7	; 247
 7ca:	fe 4f       	sbci	r31, 0xFE	; 254
 7cc:	91 83       	std	Z+1, r25	; 0x01
 7ce:	80 83       	st	Z, r24
 7d0:	34 97       	sbiw	r30, 0x04	; 4
 7d2:	71 83       	std	Z+1, r23	; 0x01
 7d4:	60 83       	st	Z, r22
 7d6:	32 96       	adiw	r30, 0x02	; 2
 7d8:	51 83       	std	Z+1, r21	; 0x01
 7da:	40 83       	st	Z, r20
 7dc:	f2 dc       	rcall	.-1564   	; 0x1c2 <Enter_Kernel>
 7de:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 7e2:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 7e6:	e4 5f       	subi	r30, 0xF4	; 244
 7e8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ea:	80 81       	ld	r24, Z
 7ec:	91 81       	ldd	r25, Z+1	; 0x01
 7ee:	08 95       	ret
 7f0:	48 ce       	rjmp	.-880    	; 0x482 <Kernel_Create_Task>
 7f2:	08 95       	ret

000007f4 <Task_Create_Period>:
 7f4:	0f 93       	push	r16
 7f6:	1f 93       	push	r17
 7f8:	24 17       	cp	r18, r20
 7fa:	35 07       	cpc	r19, r21
 7fc:	08 f0       	brcs	.+2      	; 0x800 <Task_Create_Period+0xc>
 7fe:	95 de       	rcall	.-726    	; 0x52a <OS_Abort>
 800:	50 93 f7 13 	sts	0x13F7, r21	; 0x8013f7 <temp_period+0x1>
 804:	40 93 f6 13 	sts	0x13F6, r20	; 0x8013f6 <temp_period>
 808:	30 93 d5 13 	sts	0x13D5, r19	; 0x8013d5 <temp_wcet+0x1>
 80c:	20 93 d4 13 	sts	0x13D4, r18	; 0x8013d4 <temp_wcet>
 810:	10 93 d3 13 	sts	0x13D3, r17	; 0x8013d3 <temp_offset+0x1>
 814:	00 93 d2 13 	sts	0x13D2, r16	; 0x8013d2 <temp_offset>
 818:	ab 01       	movw	r20, r22
 81a:	62 e0       	ldi	r22, 0x02	; 2
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	9b df       	rcall	.-202    	; 0x756 <Task_Create>
 820:	1f 91       	pop	r17
 822:	0f 91       	pop	r16
 824:	08 95       	ret

00000826 <Task_Next>:
 826:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <KernelActive>
 82a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <KernelActive+0x1>
 82e:	89 2b       	or	r24, r25
 830:	51 f0       	breq	.+20     	; 0x846 <Task_Next+0x20>
 832:	f8 94       	cli
 834:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Cp>
 838:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Cp+0x1>
 83c:	e5 5f       	subi	r30, 0xF5	; 245
 83e:	fe 4f       	sbci	r31, 0xFE	; 254
 840:	85 e0       	ldi	r24, 0x05	; 5
 842:	80 83       	st	Z, r24
 844:	be cc       	rjmp	.-1668   	; 0x1c2 <Enter_Kernel>
 846:	08 95       	ret

00000848 <setup>:
  */
void setup() {


	/** initialize Timer1 16 bit timer */
	Disable_Interrupt();
 848:	f8 94       	cli

	/** Timer 1 */
	TCCR1A = 0;                 /** Set TCCR1A register to 0 */
 84a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0;                 /** Set TCCR1B register to 0 */
 84e:	e1 e8       	ldi	r30, 0x81	; 129
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	10 82       	st	Z, r1

	TCNT1 = 0;                  /** Initialize counter to 0 */
 854:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 858:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>

	OCR1A = 624;                /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
 85c:	80 e7       	ldi	r24, 0x70	; 112
 85e:	92 e0       	ldi	r25, 0x02	; 2
 860:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 864:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>

	TCCR1B |= (1 << WGM12);     /** Turns on CTC mode (TOP is now OCR1A) */
 868:	80 81       	ld	r24, Z
 86a:	88 60       	ori	r24, 0x08	; 8
 86c:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS12);      /** Prescaler 256 */
 86e:	80 81       	ld	r24, Z
 870:	84 60       	ori	r24, 0x04	; 4
 872:	80 83       	st	Z, r24

	TIMSK1 |= (1 << OCIE1A);    /** Enable timer compare interrupt */
 874:	ef e6       	ldi	r30, 0x6F	; 111
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	80 81       	ld	r24, Z
 87a:	82 60       	ori	r24, 0x02	; 2
 87c:	80 83       	st	Z, r24

	/** Timer 3 */
	TCCR3A = 0;                 /** Set TCCR0A register to 0 */
 87e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0;                 /** Set TCCR0B register to 0 */
 882:	e1 e9       	ldi	r30, 0x91	; 145
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	10 82       	st	Z, r1

	TCNT3 = 0;                  /** Initialize counter to 0 */
 888:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 88c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>

	OCR3A = 62499;              /** Compare match register (TOP comparison value) [(16MHz/(100Hz*8)] - 1 */
 890:	83 e2       	ldi	r24, 0x23	; 35
 892:	94 ef       	ldi	r25, 0xF4	; 244
 894:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
 898:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>

	TCCR3B |= (1 << WGM32);     /** Turns on CTC mode (TOP is now OCR1A) */
 89c:	80 81       	ld	r24, Z
 89e:	88 60       	ori	r24, 0x08	; 8
 8a0:	80 83       	st	Z, r24

	TCCR3B |= (1 << CS32);      /** Prescaler 1024 */
 8a2:	80 81       	ld	r24, Z
 8a4:	84 60       	ori	r24, 0x04	; 4
 8a6:	80 83       	st	Z, r24

	TIMSK3 = (1 << OCIE3A);
 8a8:	82 e0       	ldi	r24, 0x02	; 2
 8aa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>

	Enable_Interrupt();
 8ae:	78 94       	sei
 8b0:	08 95       	ret

000008b2 <__vector_17>:
}

/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) { 
 8b2:	1f 92       	push	r1
 8b4:	0f 92       	push	r0
 8b6:	0f b6       	in	r0, 0x3f	; 63
 8b8:	0f 92       	push	r0
 8ba:	11 24       	eor	r1, r1
 8bc:	0b b6       	in	r0, 0x3b	; 59
 8be:	0f 92       	push	r0
 8c0:	ef 92       	push	r14
 8c2:	ff 92       	push	r15
 8c4:	0f 93       	push	r16
 8c6:	1f 93       	push	r17
 8c8:	2f 93       	push	r18
 8ca:	3f 93       	push	r19
 8cc:	4f 93       	push	r20
 8ce:	5f 93       	push	r21
 8d0:	6f 93       	push	r22
 8d2:	7f 93       	push	r23
 8d4:	8f 93       	push	r24
 8d6:	9f 93       	push	r25
 8d8:	af 93       	push	r26
 8da:	bf 93       	push	r27
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	ef 93       	push	r30
 8e2:	ff 93       	push	r31
 8e4:	c7 e1       	ldi	r28, 0x17	; 23
 8e6:	d3 e0       	ldi	r29, 0x03	; 3
 8e8:	0f 2e       	mov	r0, r31
 8ea:	f7 eb       	ldi	r31, 0xB7	; 183
 8ec:	ef 2e       	mov	r14, r31
 8ee:	f4 e1       	ldi	r31, 0x14	; 20
 8f0:	ff 2e       	mov	r15, r31
 8f2:	f0 2d       	mov	r31, r0
	int x;
	for(x = 0; x < MAXTHREAD; x++){
		if(Process[x].priority == PERIODIC){
 8f4:	88 81       	ld	r24, Y
 8f6:	99 81       	ldd	r25, Y+1	; 0x01
 8f8:	02 97       	sbiw	r24, 0x02	; 2
 8fa:	b9 f4       	brne	.+46     	; 0x92a <__vector_17+0x78>
			Process[x].offset -= 1;
 8fc:	89 89       	ldd	r24, Y+17	; 0x11
 8fe:	9a 89       	ldd	r25, Y+18	; 0x12
 900:	01 97       	sbiw	r24, 0x01	; 1
 902:	9a 8b       	std	Y+18, r25	; 0x12
 904:	89 8b       	std	Y+17, r24	; 0x11
			if(Process[x].offset == 0){
 906:	89 2b       	or	r24, r25
 908:	81 f4       	brne	.+32     	; 0x92a <__vector_17+0x78>
				enqueue(&(Process[x]), &PeriodicQueue, &PerioicCount);
 90a:	42 e0       	ldi	r20, 0x02	; 2
 90c:	52 e0       	ldi	r21, 0x02	; 2
 90e:	6a e1       	ldi	r22, 0x1A	; 26
 910:	74 e1       	ldi	r23, 0x14	; 20
 912:	ce 01       	movw	r24, r28
 914:	85 50       	subi	r24, 0x05	; 5
 916:	91 40       	sbci	r25, 0x01	; 1
 918:	57 d0       	rcall	.+174    	; 0x9c8 <enqueue>
				Process[x].offset += Process[x].period;
 91a:	29 89       	ldd	r18, Y+17	; 0x11
 91c:	3a 89       	ldd	r19, Y+18	; 0x12
 91e:	8d 85       	ldd	r24, Y+13	; 0x0d
 920:	9e 85       	ldd	r25, Y+14	; 0x0e
 922:	82 0f       	add	r24, r18
 924:	93 1f       	adc	r25, r19
 926:	9a 8b       	std	Y+18, r25	; 0x12
 928:	89 8b       	std	Y+17, r24	; 0x11
 92a:	c6 5e       	subi	r28, 0xE6	; 230
 92c:	de 4f       	sbci	r29, 0xFE	; 254
/**
  * ISR for timer1
  */
ISR(TIMER1_COMPA_vect) { 
	int x;
	for(x = 0; x < MAXTHREAD; x++){
 92e:	ce 15       	cp	r28, r14
 930:	df 05       	cpc	r29, r15
 932:	01 f7       	brne	.-64     	; 0x8f4 <__vector_17+0x42>
				enqueue(&(Process[x]), &PeriodicQueue, &PerioicCount);
				Process[x].offset += Process[x].period;
			}
		}	
	}
	if(PerioicCount > 1){
 934:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <PerioicCount>
 938:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <PerioicCount+0x1>
 93c:	02 97       	sbiw	r24, 0x02	; 2
 93e:	14 f0       	brlt	.+4      	; 0x944 <__vector_17+0x92>
		Disable_Interrupt();
 940:	f8 94       	cli
		OS_Abort();
 942:	f3 dd       	rcall	.-1050   	; 0x52a <OS_Abort>
	}
	Task_Next();
 944:	70 df       	rcall	.-288    	; 0x826 <Task_Next>
}
 946:	ff 91       	pop	r31
 948:	ef 91       	pop	r30
 94a:	df 91       	pop	r29
 94c:	cf 91       	pop	r28
 94e:	bf 91       	pop	r27
 950:	af 91       	pop	r26
 952:	9f 91       	pop	r25
 954:	8f 91       	pop	r24
 956:	7f 91       	pop	r23
 958:	6f 91       	pop	r22
 95a:	5f 91       	pop	r21
 95c:	4f 91       	pop	r20
 95e:	3f 91       	pop	r19
 960:	2f 91       	pop	r18
 962:	1f 91       	pop	r17
 964:	0f 91       	pop	r16
 966:	ff 90       	pop	r15
 968:	ef 90       	pop	r14
 96a:	0f 90       	pop	r0
 96c:	0b be       	out	0x3b, r0	; 59
 96e:	0f 90       	pop	r0
 970:	0f be       	out	0x3f, r0	; 63
 972:	0f 90       	pop	r0
 974:	1f 90       	pop	r1
 976:	18 95       	reti

00000978 <__vector_32>:

/**
  * ISR for timer3
  */
ISR(TIMER3_COMPA_vect) { // PERIOD: 1 s
 978:	1f 92       	push	r1
 97a:	0f 92       	push	r0
 97c:	0f b6       	in	r0, 0x3f	; 63
 97e:	0f 92       	push	r0
 980:	11 24       	eor	r1, r1
 982:	8f 93       	push	r24
 984:	9f 93       	push	r25
	tickOverflowCount += 1;
 986:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <tickOverflowCount>
 98a:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <tickOverflowCount+0x1>
 98e:	01 96       	adiw	r24, 0x01	; 1
 990:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <tickOverflowCount+0x1>
 994:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <tickOverflowCount>
}
 998:	9f 91       	pop	r25
 99a:	8f 91       	pop	r24
 99c:	0f 90       	pop	r0
 99e:	0f be       	out	0x3f, r0	; 63
 9a0:	0f 90       	pop	r0
 9a2:	1f 90       	pop	r1
 9a4:	18 95       	reti

000009a6 <main>:

/**
  * This function boots the OS and creates the first task: a_main
  */
void main() {
DDRA |= (1<<PA4);
 9a6:	0c 9a       	sbi	0x01, 4	; 1
PORTA &= ~(1<<PA4);
 9a8:	14 98       	cbi	0x02, 4	; 2

DDRA |= (1<<PA5);
 9aa:	0d 9a       	sbi	0x01, 5	; 1
PORTA &= ~(1<<PA5);
 9ac:	15 98       	cbi	0x02, 5	; 2

DDRA |= (1<<PA3);
 9ae:	0b 9a       	sbi	0x01, 3	; 1
PORTA &= ~(1<<PA3);
 9b0:	13 98       	cbi	0x02, 3	; 2
	setup();
 9b2:	4a df       	rcall	.-364    	; 0x848 <setup>

	OS_Init();
 9b4:	96 dd       	rcall	.-1236   	; 0x4e2 <OS_Init>
	Task_Create(a_main, SYSTEM, 1);
 9b6:	41 e0       	ldi	r20, 0x01	; 1
 9b8:	50 e0       	ldi	r21, 0x00	; 0
 9ba:	63 e0       	ldi	r22, 0x03	; 3
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	8c e3       	ldi	r24, 0x3C	; 60
 9c0:	91 e0       	ldi	r25, 0x01	; 1
 9c2:	c9 de       	rcall	.-622    	; 0x756 <Task_Create>
	OS_Start();
 9c4:	f9 cd       	rjmp	.-1038   	; 0x5b8 <OS_Start>
 9c6:	08 95       	ret

000009c8 <enqueue>:
}

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	ea 01       	movw	r28, r20

/*
 *  Checks if queue is full
 */
volatile int isFull(volatile int *QCount) {
    return *QCount == MAXTHREAD - 1;
 9ce:	28 81       	ld	r18, Y
 9d0:	39 81       	ldd	r19, Y+1	; 0x01

/*
 *  Insert into the queue sorted by priority
 */
void enqueue(volatile PD **p, volatile PD **Queue, volatile int *QCount) {
    if(isFull(QCount)) {
 9d2:	2f 30       	cpi	r18, 0x0F	; 15
 9d4:	31 05       	cpc	r19, r1
 9d6:	29 f1       	breq	.+74     	; 0xa22 <enqueue+0x5a>
        return NULL;
    }

    int i = (*QCount) - 1;
 9d8:	e8 81       	ld	r30, Y
 9da:	f9 81       	ldd	r31, Y+1	; 0x01
 9dc:	9f 01       	movw	r18, r30
 9de:	21 50       	subi	r18, 0x01	; 1
 9e0:	31 09       	sbc	r19, r1
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
 9e2:	72 f0       	brmi	.+28     	; 0xa00 <enqueue+0x38>
 9e4:	ee 0f       	add	r30, r30
 9e6:	ff 1f       	adc	r31, r31
 9e8:	e6 0f       	add	r30, r22
 9ea:	f7 1f       	adc	r31, r23
 9ec:	db 01       	movw	r26, r22
        Queue[i+1] = Queue[i];
 9ee:	32 91       	ld	r19, -Z
 9f0:	22 91       	ld	r18, -Z
 9f2:	33 83       	std	Z+3, r19	; 0x03
 9f4:	22 83       	std	Z+2, r18	; 0x02

    int i = (*QCount) - 1;
    volatile PD *new = *p;
    volatile PD *temp = Queue[i];

    while(i >= 0) {
 9f6:	ea 17       	cp	r30, r26
 9f8:	fb 07       	cpc	r31, r27
 9fa:	c9 f7       	brne	.-14     	; 0x9ee <enqueue+0x26>
        Queue[i+1] = Queue[i];
        i--;
 9fc:	2f ef       	ldi	r18, 0xFF	; 255
 9fe:	3f ef       	ldi	r19, 0xFF	; 255
        temp = Queue[i];
    }

    Queue[i+1] = *p;
 a00:	fc 01       	movw	r30, r24
 a02:	80 81       	ld	r24, Z
 a04:	91 81       	ldd	r25, Z+1	; 0x01
 a06:	2f 5f       	subi	r18, 0xFF	; 255
 a08:	3f 4f       	sbci	r19, 0xFF	; 255
 a0a:	22 0f       	add	r18, r18
 a0c:	33 1f       	adc	r19, r19
 a0e:	fb 01       	movw	r30, r22
 a10:	e2 0f       	add	r30, r18
 a12:	f3 1f       	adc	r31, r19
 a14:	91 83       	std	Z+1, r25	; 0x01
 a16:	80 83       	st	Z, r24
    (*QCount)++;
 a18:	88 81       	ld	r24, Y
 a1a:	99 81       	ldd	r25, Y+1	; 0x01
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	99 83       	std	Y+1, r25	; 0x01
 a20:	88 83       	st	Y, r24
}
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	08 95       	ret

00000a28 <dequeue>:

/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {
 a28:	db 01       	movw	r26, r22

/*
 *  Checks if queue is empty, READY QUEUE SHOULD NEVER BE EMPTY
 */
volatile int isEmpty(volatile int *QCount) {
    return *QCount == 0;
 a2a:	2d 91       	ld	r18, X+
 a2c:	3c 91       	ld	r19, X
 a2e:	11 97       	sbiw	r26, 0x01	; 1
/*
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
 a30:	23 2b       	or	r18, r19
 a32:	a9 f0       	breq	.+42     	; 0xa5e <dequeue+0x36>
	   return NULL;
   }

   volatile PD *result = (Queue[(*QCount)-1]);
 a34:	2d 91       	ld	r18, X+
 a36:	3c 91       	ld	r19, X
 a38:	11 97       	sbiw	r26, 0x01	; 1
 a3a:	f9 01       	movw	r30, r18
 a3c:	e1 50       	subi	r30, 0x01	; 1
 a3e:	f0 48       	sbci	r31, 0x80	; 128
 a40:	ee 0f       	add	r30, r30
 a42:	ff 1f       	adc	r31, r31
 a44:	e8 0f       	add	r30, r24
 a46:	f9 1f       	adc	r31, r25
 a48:	80 81       	ld	r24, Z
 a4a:	91 81       	ldd	r25, Z+1	; 0x01
   (*QCount)--;
 a4c:	2d 91       	ld	r18, X+
 a4e:	3c 91       	ld	r19, X
 a50:	11 97       	sbiw	r26, 0x01	; 1
 a52:	21 50       	subi	r18, 0x01	; 1
 a54:	31 09       	sbc	r19, r1
 a56:	11 96       	adiw	r26, 0x01	; 1
 a58:	3c 93       	st	X, r19
 a5a:	2e 93       	st	-X, r18

   return result;
 a5c:	08 95       	ret
 *  Return the first element of the Ready Queue
 */
volatile PD *dequeue(volatile PD **Queue, volatile int *QCount) {

   if(isEmpty(QCount)) {
	   return NULL;
 a5e:	80 e0       	ldi	r24, 0x00	; 0
 a60:	90 e0       	ldi	r25, 0x00	; 0

   volatile PD *result = (Queue[(*QCount)-1]);
   (*QCount)--;

   return result;
}
 a62:	08 95       	ret

00000a64 <__tablejump2__>:
 a64:	ee 0f       	add	r30, r30
 a66:	ff 1f       	adc	r31, r31
 a68:	88 1f       	adc	r24, r24
 a6a:	8b bf       	out	0x3b, r24	; 59
 a6c:	07 90       	elpm	r0, Z+
 a6e:	f6 91       	elpm	r31, Z
 a70:	e0 2d       	mov	r30, r0
 a72:	19 94       	eijmp

00000a74 <_exit>:
 a74:	f8 94       	cli

00000a76 <__stop_program>:
 a76:	ff cf       	rjmp	.-2      	; 0xa76 <__stop_program>
